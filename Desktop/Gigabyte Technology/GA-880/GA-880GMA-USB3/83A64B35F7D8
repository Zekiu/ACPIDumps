
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000EDC  0x01  "PTLTD "  "POWERNOW"  0x00000001  " LTP"   0x00000001
 02)  MCFG  0x0000003C  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 03)  APIC  0x000000BC  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 04)  DSDT  0x000074B9  0x01  "GBT   "  "GBTUACPI"  0x00001000  "MSFT"   0x03000000
 05)  MATS  0x00000034  0x01  "GBT   "  "        "  0x00000000  "    "   0x00000000
 06)  FACP  0x00000074  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 07)  MSDM  0x00000055  0x03  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 08)  TAMG  0x00000202  0x01  "GBT   "  "GBT   B0"  0x5455312E  "BG  "   0x53450101
 09)  HPET  0x00000038  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x00000098
 10)  FACS  0x00000040  0x00

Found 10 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000BC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B4
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 08
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[08Ch 0140   1]                Subtable Type : 04 [Local APIC NMI]
[08Dh 0141   1]                       Length : 06
[08Eh 0142   1]                 Processor ID : 00
[08Fh 0143   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[091h 0145   1]         Interrupt Input LINT : 01

[092h 0146   1]                Subtable Type : 04 [Local APIC NMI]
[093h 0147   1]                       Length : 06
[094h 0148   1]                 Processor ID : 01
[095h 0149   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[097h 0151   1]         Interrupt Input LINT : 01

[098h 0152   1]                Subtable Type : 04 [Local APIC NMI]
[099h 0153   1]                       Length : 06
[09Ah 0154   1]                 Processor ID : 02
[09Bh 0155   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[09Dh 0157   1]         Interrupt Input LINT : 01

[09Eh 0158   1]                Subtable Type : 04 [Local APIC NMI]
[09Fh 0159   1]                       Length : 06
[0A0h 0160   1]                 Processor ID : 03
[0A1h 0161   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0A3h 0163   1]         Interrupt Input LINT : 01

[0A4h 0164   1]                Subtable Type : 04 [Local APIC NMI]
[0A5h 0165   1]                       Length : 06
[0A6h 0166   1]                 Processor ID : 04
[0A7h 0167   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0A9h 0169   1]         Interrupt Input LINT : 01

[0AAh 0170   1]                Subtable Type : 04 [Local APIC NMI]
[0ABh 0171   1]                       Length : 06
[0ACh 0172   1]                 Processor ID : 05
[0ADh 0173   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0AFh 0175   1]         Interrupt Input LINT : 01

[0B0h 0176   1]                Subtable Type : 04 [Local APIC NMI]
[0B1h 0177   1]                       Length : 06
[0B2h 0178   1]                 Processor ID : 06
[0B3h 0179   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0B5h 0181   1]         Interrupt Input LINT : 01

[0B6h 0182   1]                Subtable Type : 04 [Local APIC NMI]
[0B7h 0183   1]                       Length : 06
[0B8h 0184   1]                 Processor ID : 07
[0B9h 0185   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0BBh 0187   1]         Interrupt Input LINT : 01

Raw Table Data: Length 188 (0xBC)

    0000: 41 50 49 43 BC 00 00 00 01 B4 47 42 54 20 20 20  // APIC......GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 00 00 00 00 00 08 07 07 00 00 00 00 01 0C 08 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 00  // ................
    0090: 00 01 04 06 01 00 00 01 04 06 02 00 00 01 04 06  // ................
    00A0: 03 00 00 01 04 06 04 00 00 01 04 06 05 00 00 01  // ................
    00B0: 04 06 06 00 00 01 04 06 07 00 00 01              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 1, "GBT   ", "GBTUACPI", 0x00001000)
{
    External (LNKA, UnknownObj)
    External (LNKB, UnknownObj)
    External (LNKC, UnknownObj)
    External (LNKD, UnknownObj)

    Scope (\_PR)
    {
        Processor (\_PR.C000, 0x00, 0x00004010, 0x06) {}
        Processor (\_PR.C001, 0x01, 0x00004010, 0x06) {}
        Processor (\_PR.C002, 0x02, 0x00004010, 0x06) {}
        Processor (\_PR.C003, 0x03, 0x00004010, 0x06) {}
        Processor (\_PR.C004, 0x04, 0x00004010, 0x06) {}
        Processor (\_PR.C005, 0x05, 0x00004010, 0x06) {}
        Processor (\_PR.C006, 0x06, 0x00004010, 0x06) {}
        Processor (\_PR.C007, 0x07, 0x00004010, 0x06) {}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x01, 
        0x01, 
        0x01
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x04, 
        0x04
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x05, 
        0x05
    })
    OperationRegion (\DEBG, SystemIO, 0x80, 0x01)
    Field (\DEBG, ByteAcc, NoLock, Preserve)
    {
        DBG1,   8
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x0100)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        PCIE,   32, 
        Offset (0x7F), 
            ,   5, 
        GGN2,   1, 
        Offset (0x87), 
        GECE,   1, 
        IR_E,   1, 
        Offset (0x93), 
            ,   5, 
        OSCF,   1, 
        Offset (0x9E), 
        PRS0,   1, 
        DET0,   1, 
        Offset (0xA2), 
        PRS1,   1, 
        DET1,   1, 
        Offset (0xA6), 
        PRS2,   1, 
        DET2,   1, 
        Offset (0xAA), 
        PRS3,   1, 
        DET3,   1, 
        Offset (0xB2), 
            ,   6, 
        ABPS,   1, 
            ,   3, 
        GPPS,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (RMEM, SystemMemory, RMBA, 0x0200)
    Field (RMEM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        RMLN,   32
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x50), 
            ,   1, 
        HPTF,   1, 
        Offset (0x60), 
        P1EB,   16
    }

    OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13D), 
        GP62,   8, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3EF), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F5), 
        GECD,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == 0x00))
        {
            If ((Arg1 == 0x00))
            {
                RWAB (CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                RWAB (CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
                DET0 = One
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                RWAB (CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
                DET2 = One
            }

            Stall (0xC8)
        }

        If ((Arg0 == 0x01))
        {
            If ((Arg1 == 0x00))
            {
                RWAB (CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                RWAB (CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
                DET0 = Zero
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                RWAB (CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
                DET2 = Zero
            }

            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == 0x00))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > 0x00) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, 0x01)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = 0x01
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, 0x00)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = 0x01
        P80 = (Arg0 | 0xF0)
        CPMS ()
        CPMS ()
        PEWS = 0x01
    }

    Method (SWAK, 1, NotSerialized)
    {
        CPMS ()
        CPMS ()
        PEWS = 0x01
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == 0x00))
        {
            PMSA = 0x01
            PMSB = 0x01
            PMSC = 0x01
            PMS0 = 0x01
            PMS1 = 0x01
            PMS2 = 0x01
            PMS3 = 0x01
        }
    }

    Scope (\_GPE)
    {
    }

    Scope (\)
    {
        Name (SBA1, 0x0B00)
        Name (SBA2, 0x0B10)
        Name (SIOP, 0x2E)
        Name (GIOB, 0x0220)
        OperationRegion (NCLK, SystemMemory, PCIE, 0x02000000)
        Field (NCLK, AnyAcc, NoLock, Preserve)
        {
            Offset (0x4C), 
            CLKE,   1, 
            Offset (0x1048), 
            P3HH,   12, 
                ,   19, 
            P3EE,   1, 
            P4EN,   1, 
            P4NM,   12, 
            P4HI,   12, 
            P4IO,   1, 
            Offset (0x1050), 
            P5EN,   1, 
            P5NM,   12, 
            P5HI,   12, 
            P5IO,   1, 
            Offset (0x1054), 
            P6EN,   1, 
            P6NM,   12, 
            P6HI,   12, 
            P6IO,   1, 
            Offset (0x10B0), 
            P1NM,   12, 
            P1HI,   12, 
            P1EN,   1, 
            P1IO,   1, 
            Offset (0x10B4), 
            P2NM,   12, 
            P2HI,   12, 
            P2EN,   1, 
            P2IO,   1, 
            Offset (0x10CC), 
            P3EN,   1, 
            P3NM,   12, 
            P3HI,   12, 
            P3IO,   1
        }

        OperationRegion (SOR1, SystemIO, SBA1, 0x10)
        Field (SOR1, ByteAcc, NoLock, Preserve)
        {
            SMSA,   8, 
            SSSA,   8, 
            SBCA,   8, 
            SHCA,   8, 
            SBAA,   8, 
            SD0A,   8, 
            SD1A,   8, 
            SBDA,   8, 
            SSCA,   8, 
            SMCA,   8, 
            SSEA,   16, 
            SSDA,   16, 
            SMTA,   8
        }

        OperationRegion (SOR2, SystemIO, SBA2, 0x10)
        Field (SOR2, ByteAcc, NoLock, Preserve)
        {
            SMSB,   8, 
            SSSB,   8, 
            SBCB,   8, 
            SHCB,   8, 
            SBAB,   8, 
            SD0B,   8, 
            SD1B,   8, 
            SBDB,   8, 
            SSCB,   8, 
            SMCB,   8, 
            SSEB,   16, 
            SSDB,   16, 
            SMTB,   8
        }

        Mutex (MSMB, 0x00)
        Method (RWBK, 5, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            If ((Arg0 == 0x00))
            {
                Local0 = SMSA /* \SMSA */
                Local0 &= 0x00
                Local0 |= 0xFF
                SMSA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= 0x00
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SHCA /* \SHCA */
                Local0 &= 0x00
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= 0x00
                Local0 |= 0x14
                SBCA = Local0
                Sleep (0x02)
                Local0 = SD0A /* \SD0A */
                Local0 &= 0x00
                Local0 |= Arg3
                SD0A = Local0
                Sleep (0x02)
                Local1 = (Arg1 & 0x01)
                If ((Local1 == 0x00))
                {
                    Local2 = Arg3
                    Local3 = Arg2
                    While (Local2)
                    {
                        Local4 = DerefOf (Arg4 [Local3])
                        SBDA = Local4
                        Sleep (0x02)
                        Local2--
                        Local3++
                    }
                }

                Local0 = SBCA /* \SBCA */
                Local0 &= 0x00
                Local0 |= 0x54
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & 0x01))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Release (MSMB)
                        Return (0x01)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & 0x01))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = (Arg1 & 0x01)
                If (Local1)
                {
                    Local1 = Arg2
                    Local2 = Arg3
                    While (Local2)
                    {
                        Arg4 [Local1] = SBDA /* \SBDA */
                        Sleep (0x02)
                        Local1++
                        Local2--
                    }
                }
            }

            If ((Arg0 == 0x01)) {}
            Release (MSMB)
            Return (0x00)
        }

        OperationRegion (IOOR, SystemIO, SIOP, 0x02)
        Field (IOOR, ByteAcc, NoLock, Preserve)
        {
            IOID,   8, 
            IODT,   8
        }

        OperationRegion (GBOR, SystemIO, GIOB, 0x02)
        Field (GBOR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
                ,   5, 
            GP25,   1, 
            GP26,   1
        }

        Method (RSIO, 1, NotSerialized)
        {
            IOID = Arg0
            Return (IODT) /* \IODT */
        }

        Method (WSIO, 2, NotSerialized)
        {
            IOID = Arg0
            IODT = Arg1
        }

        Method (RWIO, 3, NotSerialized)
        {
            WSIO (Arg0, ((RSIO (Arg0) & Arg1) | Arg2))
        }

        Name (IPSW, Package (0x02)
        {
            Package (0x04)
            {
                0x87, 
                0x01, 
                0x55, 
                0x55
            }, 

            Package (0x04)
            {
                0x87, 
                0x01, 
                0x55, 
                0xAA
            }
        })
        Method (SLDN, 1, NotSerialized)
        {
            Local1 = 0x00
            If ((SIOP == 0x2E))
            {
                Local1 = 0x00
            }

            If ((SIOP == 0x4E))
            {
                Local1 = 0x01
            }

            Local0 = 0x00
            While ((Local0 != 0x04))
            {
                IOID = DerefOf (DerefOf (IPSW [Local1]) [Local0])
                Local0++
            }

            WSIO (0x07, Arg0)
        }

        Method (APTS, 1, NotSerialized)
        {
            \AOD.APTS (Arg0)
        }

        Method (AWAK, 1, NotSerialized)
        {
            \AOD.AWAK (Arg0)
        }

        Device (AOD)
        {
            Name (DBG, 0x01)
            Name (OBID, Package (0x1C)
            {
                0x06, 
                0x01010000, 
                0x01020000, 
                0x02010000, 
                0x02020000, 
                0x02030000, 
                0x02040000, 
                0x00, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0xFF, 
                0xFF, 
                "CPU Clock", 
                "PCIE Clock", 
                "VCC18 Core", 
                "Memory Core", 
                "VDDA25 Core", 
                "NB Core", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0x30)
            {
                0x01010000, 
                0x00030D40, 
                0x0007A120, 
                0x00, 
                0x03E8, 
                0x00, 
                0x01020000, 
                0x000186A0, 
                0x000249F0, 
                0x00, 
                0x03E8, 
                0x00, 
                0x02010000, 
                0x0002BF20, 
                0x00033450, 
                0x00, 
                0x03E8, 
                0x00, 
                0x02020000, 
                0x00027100, 
                0x0003D090, 
                0x00, 
                0x07D0, 
                0x00, 
                0x02030000, 
                0x0003D090, 
                0x0004BAF0, 
                0x00, 
                0x0FA0, 
                0x00, 
                0x02040000, 
                0x0001D4C0, 
                0x000249F0, 
                0x00, 
                0x07D0, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Name (OBDT, Package (0x01)
            {
                0x00
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Name (QLST, Package (0x03)
            {
                0x02, 
                Package (0x06)
                {
                    0x08C4, 
                    "Bank Swizzle Mode", 
                    0x00, 
                    0x02, 
                    Buffer (0x09)
                    {
                        "Disabled"
                    }, 

                    Buffer (0x08)
                    {
                        "Enabled"
                    }
                }, 

                Package (0x06)
                {
                    0x80DF, 
                    "DDR3 Memory Profile", 
                    0x00, 
                    0x02, 
                    Buffer (0x09)
                    {
                        "Disabled"
                    }, 

                    Buffer (0x08)
                    {
                        "Enabled"
                    }
                }
            })
            OperationRegion (AODT, SystemMemory, 0xAFDF9772, 0x0100)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                Offset (0x08), 
                ASBF,   960, 
                GFXO,   1, 
                GMOD,   2
            }

            Name (ID01, 0x00)
            Name (ID02, 0x00)
            Method (SOID, 1, NotSerialized)
            {
                ID01 = (Arg0 >> 0x18)
                ID02 = ((Arg0 & 0x00FF0000) >> 0x10)
                Return (0x00)
            }

            Method (WROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                CreateDWordField (Arg0, 0x00, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                IFPK [0x00] = BUF0 /* \AOD_.WROW.BUF0 */
                IFPK [0x01] = BUF1 /* \AOD_.WROW.BUF1 */
                IFPK [0x02] = BUF2 /* \AOD_.WROW.BUF2 */
                IFPK [0x03] = BUF3 /* \AOD_.WROW.BUF3 */
                IFPK [0x04] = BUF4 /* \AOD_.WROW.BUF4 */
                IFPK [0x05] = BUF5 /* \AOD_.WROW.BUF5 */
                Local0 = Arg3
                Local1 = 0x00
                While (Local0)
                {
                    Arg1 [((Arg2 * Arg3) + Local1)] = DerefOf (
                        IFPK [Local1])
                    Local1++
                    Local0--
                }
            }

            Method (GROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Local0 = Arg3
                Local1 = 0x00
                While (Local0)
                {
                    IFPK [Local1] = DerefOf (Arg0 [((Arg2 * Arg3
                        ) + Local1)])
                    Local1++
                    Local0--
                }

                CreateDWordField (Arg1, 0x00, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                CreateDWordField (Arg1, 0x14, BUF5)
                BUF0 = DerefOf (IFPK [0x00])
                BUF1 = DerefOf (IFPK [0x01])
                BUF2 = DerefOf (IFPK [0x02])
                BUF3 = DerefOf (IFPK [0x03])
                BUF4 = DerefOf (IFPK [0x04])
                BUF5 = DerefOf (IFPK [0x05])
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, 0x00)
                CreateDWordField (Arg1, 0x00, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                Local0 = 0x00
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + 0x00)])
                        BUF1 = DerefOf (OBIT [(Local0 + 0x01)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        BUF4 = DerefOf (OBIT [(Local0 + 0x04)])
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == 0x00))
                {
                    Return (0xFF)
                }

                Return (0x00)
            }

            Method (CBTP, 1, NotSerialized)
            {
                Name (LOID, 0x00)
                CreateDWordField (Arg0, 0x00, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                Local0 = 0x00
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == BUF0))
                    {
                        OBIT [(Local0 + 0x00)] = BUF0 /* \AOD_.CBTP.BUF0 */
                        OBIT [(Local0 + 0x01)] = BUF1 /* \AOD_.CBTP.BUF1 */
                        OBIT [(Local0 + 0x02)] = BUF2 /* \AOD_.CBTP.BUF2 */
                        OBIT [(Local0 + 0x03)] = BUF3 /* \AOD_.CBTP.BUF3 */
                        OBIT [(Local0 + 0x04)] = BUF4 /* \AOD_.CBTP.BUF4 */
                        OBIT [(Local0 + 0x05)] = BUF5 /* \AOD_.CBTP.BUF5 */
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == 0x00))
                {
                    Return (0xFF)
                }

                Return (0x00)
            }

            Method (ABS, 2, NotSerialized)
            {
                If ((Arg0 < Arg1))
                {
                    Return ((Arg1 - Arg0))
                }
                Else
                {
                    Return ((Arg0 - Arg1))
                }
            }

            Name (EXBF, Buffer (0x78) {})
            OperationRegion (ACMS, SystemIO, 0x72, 0x02)
            Field (ACMS, ByteAcc, NoLock, Preserve)
            {
                P72,    8, 
                P73,    8
            }

            Method (BSF, 1, NotSerialized)
            {
                Name (BIT0, 0x01)
                Local1 = 0x08
                While (Local1)
                {
                    Local2 = (Arg0 & BIT0) /* \AOD_.BSF_.BIT0 */
                    If (Local2)
                    {
                        Break
                    }

                    BIT0 <<= 0x01
                    Local1--
                }

                Return ((0x08 - Local1))
            }

            Method (GCMS, 1, NotSerialized)
            {
                Name (ADDR, 0x00)
                Name (MASK, 0x00)
                Name (TEMP, Buffer (0x06) {})
                CreateDWordField (TEMP, 0x00, TMP1)
                CreateWordField (TEMP, 0x04, TMP2)
                ASCD = 0x01
                CreateWordField (EXBF, 0x00, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = 0x00
                CMSI = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIP = 0x62
                EXBF = ASBF /* \AOD_.ASBF */
                TMP1 = ASTS /* \AOD_.ASTS */
                TMP2 = CMSD /* \AOD_.GCMS.CMSD */
                Return (TEMP) /* \AOD_.GCMS.TEMP */
            }

            Method (SCMS, 2, NotSerialized)
            {
                Name (ADDR, 0x00)
                Name (MASK, 0x00)
                ASCD = 0x02
                CreateWordField (EXBF, 0x00, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = 0x00
                CMSI = Arg0
                CMSD = Arg1
                ASBF = EXBF /* \AOD_.EXBF */
                SMIP = 0x62
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Method (STNV, 2, NotSerialized)
            {
                ASCD = 0x03
                CreateField (EXBF, 0x00, Arg1, MOPD)
                EXBF = 0x00
                MOPD = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIP = 0x62
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Name (CPUD, 0x00)
            Name (GFXD, 0x00)
            Name (SBCD, 0x00)
            Method (GETC, 1, NotSerialized)
            {
                If (\RWBK (0x00, 0xD3, 0x00, 0x20, TSBF))
                {
                    GVB2 = 0x01
                    GVB1 = 0x00
                    Return (GVBF) /* \AOD_.GVBF */
                }

                GVB2 = 0x00
                GVB1 = CCLK (Arg0)
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (SETC, 2, NotSerialized)
            {
                If (\RWBK (0x00, 0xD3, 0x20, 0x20, TSBF))
                {
                    Return (0x01)
                }
                Else
                {
                    TSBF [0x24] = (DerefOf (TSBF [0x24]) & 0x7F)
                    RWBK (0x00, 0xD2, 0x20, 0x20, TSBF)
                }

                If (\RWBK (0x00, 0xD3, 0x00, 0x20, TSBF))
                {
                    Return (0x01)
                }

                Local3 = 0x00
                If ((Arg0 == 0x01))
                {
                    Local0 = 0x02
                    Local1 = GCCX (0x0F, 0x11, 0x04)
                    Local2 = (Arg1 * Local0)
                    Local3 = RMPC (Local1, Local2, Arg0)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = GFXD /* \AOD_.GFXD */
                    Local1 = GCCX (0x10, 0x11, 0x00)
                    Local2 = (Arg1 * Local0)
                    Local3 = RMPC (Local1, Local2, Arg0)
                }

                If (Local3)
                {
                    Return (Local3)
                }

                Return (0x00)
            }

            Method (CINI, 0, NotSerialized)
            {
                If (\RWBK (0x00, 0xD3, 0x00, 0x20, TSBF))
                {
                    Return (0x01)
                }

                TSBF [0x0C] = (DerefOf (TSBF [0x0C]) & 0x1F)
                If (((DerefOf (TSBF [0x1F]) & 0x80) == 0x00))
                {
                    TSBF [0x0F] = 0x90
                    TSBF [0x11] = ((DerefOf (TSBF [0x11]) & 
                        0x8F) | 0x10)
                    TSBF [0x1F] = TSBF [0x1F] = (DerefOf (
                        TSBF [0x1F]) | 0x80)
                }

                If (((DerefOf (TSBF [0x1F]) & 0x10) == 0x00))
                {
                    If (((DerefOf (TSBF [0x1E]) & 0x80) == 0x00))
                    {
                        GFXD = 0x0A
                        TSBF [0x10] = 0xE8
                        TSBF [0x11] = ((DerefOf (TSBF [0x11]) & 
                            0xF8) | 0x03)
                    }
                    Else
                    {
                        GFXD = 0x06
                        TSBF [0x10] = 0x58
                        TSBF [0x11] = ((DerefOf (TSBF [0x11]) & 
                            0xF8) | 0x02)
                    }

                    TSBF [0x05] = TSBF [0x05] = (DerefOf (
                        TSBF [0x05]) | 0x20)
                    TSBF [0x1F] = TSBF [0x1F] = (DerefOf (
                        TSBF [0x1F]) | 0x10)
                }

                If (\RWBK (0x00, 0xD2, 0x00, 0x20, TSBF))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (GCCX, 3, NotSerialized)
            {
                Local0 = DerefOf (TSBF [Arg0])
                Local1 = ((DerefOf (TSBF [Arg1]) >> Arg2) & 0x07
                    )
                Local1 <<= 0x08
                Local0 |= Local1
                Local0 *= 0x03E8
                Return (Local0)
            }

            Method (CCLK, 1, NotSerialized)
            {
                Name (VCOV, 0x00)
                Name (VCOD, 0x00)
                If ((Arg0 == 0x01))
                {
                    CPUD = 0x02
                    VCOD = CPUD /* \AOD_.CPUD */
                    VCOV = GCCX (0x0F, 0x11, 0x04)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    If (((DerefOf (TSBF [0x1E]) & 0x80) == 0x80))
                    {
                        GFXD = 0x06
                    }
                    Else
                    {
                        GFXD = 0x0A
                    }

                    VCOD = GFXD /* \AOD_.GFXD */
                    VCOV = GCCX (0x10, 0x11, 0x00)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    SBCD = 0x01
                    VCOD = 0x01
                    VCOV = 0x000186A0
                }

                Return ((VCOV / VCOD))
            }

            Method (SCCX, 4, NotSerialized)
            {
                Local0 = Arg0
                TSBF [Arg1] = (Local0 & 0xFF)
                Local0 = Arg0
                Local0 = ((Local0 & 0x0700) >> Arg3)
                Local1 = (0x0700 >> Arg3)
                Local1 ^= 0xFF
                Local1 = (DerefOf (TSBF [Arg2]) & Local1)
                Local0 |= Local1
                TSBF [Arg2] = Local0
                If (\RWBK (0x00, 0xD2, 0x00, 0x20, TSBF))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (WTCX, 2, NotSerialized)
            {
                If ((Arg0 == 0x01))
                {
                    Return (SCCX (Arg1, 0x0F, 0x11, 0x04))
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Return (SCCX (Arg1, 0x10, 0x11, 0x08))
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Return (0x00)
                }

                Return (0x04)
            }

            Method (RMPC, 3, NotSerialized)
            {
                Name (STAT, 0x00)
                Local0 = Arg0
                Local1 = Arg1
                If ((Local0 != Local1))
                {
                    Local1 = (Local1 / 0x03E8)
                    STAT = WTCX (Arg2, Local1)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                Return (0x00)
            }

            Name (UP62, Buffer (0x06)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
            })
            Method (VINI, 0, NotSerialized)
            {
            }

            Method (SETV, 2, NotSerialized)
            {
                If ((Arg0 == 0x01))
                {
                    Local0 = Arg1
                    If ((Local0 >= 0x00033450))
                    {
                        Local0 = 0x0002BF20
                    }

                    Local0 -= 0x0002BF20
                    Local0 = (Local0 / 0x03E8)
                    UP62 [0x00] = (0x00 + Local0)
                    RWBY (0x20, 0x01, UP62, 0x00)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    If ((Local0 >= 0x0003D090))
                    {
                        Local0 = 0x00027100
                    }

                    Local0 -= 0x00027100
                    Local0 = (Local0 / 0x07D0)
                    UP62 [0x01] = (0x00 + Local0)
                    RWBY (0x20, 0x03, UP62, 0x01)
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = Arg1
                    If ((Local0 >= 0x0004BAF0))
                    {
                        Local0 = 0x0003D090
                    }

                    Local0 -= 0x0003D090
                    Local0 = (Local0 / 0x0FA0)
                    UP62 [0x02] = Local0 |= 0xC0
                    RWBY (0x2A, 0x01, UP62, 0x02)
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = Arg1
                    If ((Local0 >= 0x000249F0))
                    {
                        Local0 = 0x0001D4C0
                    }

                    Local0 -= 0x0001D4C0
                    Local0 = (Local0 / 0x07D0)
                    UP62 [0x03] = (0x00 + Local0)
                    RWBY (0x2A, 0x02, UP62, 0x03)
                }

                If ((Arg0 == 0x05)) {}
                If ((Arg0 == 0x06)) {}
            }

            Method (GETV, 1, NotSerialized)
            {
                If ((Arg0 == 0x01))
                {
                    RWBY (0x21, 0x01, UP62, 0x00)
                    Local0 = DerefOf (UP62 [0x00])
                    If ((Local0 >= 0x40))
                    {
                        Local0 = 0x00
                    }

                    Local0 -= 0x00
                    GVBF = (0x0002BF20 + (Local0 * 0x03E8))
                }

                If ((Arg0 == 0x02))
                {
                    RWBY (0x21, 0x03, UP62, 0x01)
                    Local0 = DerefOf (UP62 [0x01])
                    If ((Local0 >= 0x40))
                    {
                        Local0 = 0x00
                    }

                    Local0 -= 0x00
                    GVBF = (0x00027100 + (Local0 * 0x07D0))
                }

                If ((Arg0 == 0x03))
                {
                    RWBY (0x2B, 0x01, UP62, 0x02)
                    Local0 = DerefOf (UP62 [0x02])
                    Local1 = (Local0 & 0xC0)
                    If ((Local1 == 0x80))
                    {
                        Local0 = 0xC0
                    }

                    Local0 &= 0x3F
                    GVBF = (0x0003D090 + (Local0 * 0x0FA0))
                }

                If ((Arg0 == 0x04))
                {
                    RWBY (0x2B, 0x02, UP62, 0x03)
                    Local0 = DerefOf (UP62 [0x03])
                    If ((Local0 >= 0x40))
                    {
                        Local0 = 0x00
                    }

                    Local0 -= 0x00
                    GVBF = (0x0001D4C0 + (Local0 * 0x07D0))
                }

                If ((Arg0 == 0x05)) {}
                If ((Arg0 == 0x06)) {}
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (RWBY, 4, NotSerialized)
            {
                Local0 = 0xFF
                SMSA = Local0
                Sleep (0x02)
                Local0 = Arg0
                SBAA = Local0
                Sleep (0x02)
                Local0 = Arg1
                SHCA = Local0
                Sleep (0x02)
                Local1 = (Arg0 & 0x01)
                If ((Local1 == 0x00))
                {
                    Local0 = DerefOf (Arg2 [Arg3])
                    SD0A = Local0
                }

                Local0 = 0x48
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & 0x01))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Return (0x01)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = (Arg0 & 0x01)
                If ((Local1 == 0x01))
                {
                    Local0 = SD0A /* \SD0A */
                    Arg2 [Arg3] = Local0
                }

                Return (0x00)
            }

            Name (GF01, 0x00)
            Name (OVFL, 0x01)
            Name (OCFL, 0x01)
            Name (TSBF, Buffer (0x40)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, 0x00, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                If (DBG)
                {
                    Debug = "AM01"
                }

                If (!GF01)
                {
                    BM01 ()
                    If (OCFL)
                    {
                        CINI ()
                    }

                    If (OVFL)
                    {
                        VINI ()
                    }

                    XINI ()
                    EM01 ()
                    GF01 = 0x01
                }

                Return (0x00)
            }

            Method (AM02, 0, NotSerialized)
            {
                If (DBG)
                {
                    Debug = "AM02"
                    Debug = OBID /* \AOD_.OBID */
                }

                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM03, 1, NotSerialized)
            {
                If (DBG)
                {
                    Debug = "AM03"
                }

                SOID (Arg0)
                If (((ID01 == 0x01) && OCFL))
                {
                    Local0 = GETC (ID02)
                }
                ElseIf (((ID01 == 0x02) && OVFL))
                {
                    Local0 = GETV (ID02)
                }
                Else
                {
                    GVB1 = 0x00
                    GVB2 = 0x04
                    Local0 = GVBF /* \AOD_.GVBF */
                }

                If (DBG)
                {
                    Debug = "GVBF"
                    Debug = Local0
                }

                Return (Local0)
            }

            Method (AM04, 2, NotSerialized)
            {
                If (DBG)
                {
                    Debug = "AM04"
                }

                SOID (Arg0)
                If (((ID01 == 0x01) && OCFL))
                {
                    SETC (ID02, Arg1)
                }
                ElseIf (((ID01 == 0x02) && OVFL))
                {
                    SETV (ID02, Arg1)
                }
                Else
                {
                    Return (0x04)
                }

                Return (0x00)
            }

            Method (AM05, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (INFO, 0x00, IFID)
                CreateDWordField (INFO, 0x04, IFMI)
                CreateDWordField (INFO, 0x08, IFMX)
                CreateDWordField (INFO, 0x0C, IFSP)
                CreateField (INFO, 0x80, 0x03, IFST)
                If (DBG)
                {
                    Debug = "AM05"
                    Debug = OBIT /* \AOD_.OBIT */
                }

                SOID (Arg0)
                If (DBG)
                {
                    Debug = "ID"
                    Debug = ID01 /* \AOD_.ID01 */
                    Debug = ID02 /* \AOD_.ID02 */
                }

                BM05 (Arg0)
                If (DBG)
                {
                    Debug = "OBIT"
                    Debug = OBIT /* \AOD_.OBIT */
                }

                CPTB (Arg0, INFO)
                EM05 (Arg0)
                If (DBG)
                {
                    Debug = "info"
                    Debug = INFO /* \AOD_.AM05.INFO */
                }

                Return (INFO) /* \AOD_.AM05.INFO */
            }

            Method (AM06, 0, NotSerialized)
            {
                HM06 ()
                Return (0x00)
            }

            Method (AM07, 1, NotSerialized)
            {
                HM07 (Arg0)
                Return (0x00)
            }

            Method (AM08, 1, NotSerialized)
            {
                Name (LODT, Package (0x34)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Local0 = 0x00
                While (0x01)
                {
                    If ((DerefOf (OBDT [Local0]) == Arg0))
                    {
                        Local4 = 0x00
                        Break
                    }

                    If ((DerefOf (OBDT [Local0]) == 0x00))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBDT [(Local0 + 0x01)])
                    Local0 += 0x02
                }

                If (Local4) {}
                Else
                {
                    Local1 = DerefOf (OBDT [(Local0 + 0x01)])
                    Local1 += 0x02
                    Local2 = 0x00
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBDT [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }
                }

                Return (LODT) /* \AOD_.AM08.LODT */
            }

            Name (OBSV, Package (0x09)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (APTS, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [0x00])
                    Local1 = 0x01
                    Local2 = 0x00
                    While (Local0)
                    {
                        SOID (DerefOf (OBID [Local1]))
                        If (((ID01 == 0x01) && OCFL))
                        {
                            GETC (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        ElseIf (((ID01 == 0x02) && OVFL))
                        {
                            GETV (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        Else
                        {
                            Local3 = 0x00
                        }

                        OBSV [Local2] = Local3
                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AWAK, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [0x00])
                    Local1 = 0x01
                    Local2 = 0x00
                    While (Local0)
                    {
                        Local3 = DerefOf (OBSV [Local2])
                        SOID (DerefOf (OBID [Local1]))
                        If (((ID01 == 0x01) && OCFL))
                        {
                            SETC (ID02, Local3)
                        }
                        ElseIf (((ID01 == 0x02) && OVFL)) {}
                        Else
                        {
                        }

                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Name (CMDV, 0x01)
            Method (AM09, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Name (OBUF, Buffer (0x0400) {})
            Method (AM10, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x00, ACMD)
                CreateField (OBUF, 0x00, 0x1000, TEMP)
                TEMP = 0x00
                CreateDWordField (OBUF, 0x00, CMDS)
                If ((ACMD == 0x00030001))
                {
                    R301 ()
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00030004))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    CMDS = 0x00010000
                }
                ElseIf ((ACMD == 0x00040003))
                {
                    CMDS = 0x00010000
                }
                ElseIf ((ACMD == 0x00040004))
                {
                    R404 (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R501 (Arg0)
                }
                Else
                {
                    CMDS = 0x00010000
                }

                Return (OBUF) /* \AOD_.OBUF */
            }

            Name (CMDL, Buffer (0x54) {})
            Method (AM11, 0, NotSerialized)
            {
                Name (TEMP, 0x00)
                CreateDWordField (CMDL, 0x00, CMDC)
                TEMP += 0x04
                CreateDWordField (CMDL, TEMP, CMD1)
                TEMP += 0x04
                CMD1 = 0x00030001
                CreateDWordField (CMDL, TEMP, CMD2)
                TEMP += 0x04
                CMD2 = 0x00030002
                CreateDWordField (CMDL, TEMP, CMD3)
                TEMP += 0x04
                CMD3 = 0x00030003
                CreateDWordField (CMDL, TEMP, CMD4)
                TEMP += 0x04
                CMD4 = 0x00030004
                CreateDWordField (CMDL, TEMP, CMD5)
                TEMP += 0x04
                CMD5 = 0x00040001
                CreateDWordField (CMDL, TEMP, CMD6)
                TEMP += 0x04
                CMD6 = 0x00040002
                CreateDWordField (CMDL, TEMP, CMD7)
                TEMP += 0x04
                CMD7 = 0x00040003
                CreateDWordField (CMDL, TEMP, CMD8)
                TEMP += 0x04
                CMD8 = 0x00040004
                CreateDWordField (CMDL, TEMP, CMD9)
                TEMP += 0x04
                CMD9 = 0x00050001
                TEMP -= 0x04
                TEMP /= 0x04
                CMDC = TEMP /* \AOD_.AM11.TEMP */
                Return (CMDL) /* \AOD_.CMDL */
            }

            Method (R301, 0, NotSerialized)
            {
                Local0 = DerefOf (QLST [0x00])
                CreateDWordField (OBUF, 0x00, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                TMP2 = Local0
                TMP1 = 0x00
                Return (0x00)
            }

            Method (R302, 1, NotSerialized)
            {
                Name (CIDX, 0x00)
                CreateWordField (Arg0, 0x04, IIDX)
                CIDX = 0x01
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                Local1 = 0x20
                CreateField (OBUF, Local1, 0x0100, TMP1)
                TMP1 = Local0
                Local1 += 0x0100
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                CreateField (OBUF, Local1, 0x08, TMP2)
                TMP2 = Local0
                Local1 += 0x08
                Local2 = Local0
                Local5 = (Local1 / 0x08)
                While ((Local2 > 0x00))
                {
                    Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                    Local4 = 0x05
                    Local6 = 0x00
                    While ((Local4 > 0x00))
                    {
                        If ((Local6 < SizeOf (Local0)))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local6])
                        }
                        Else
                        {
                            OBUF [Local5] = 0x00
                        }

                        Local6++
                        Local5++
                        Local4--
                    }

                    Local1 += 0x28
                    Local2--
                    CIDX++
                }

                Local1 = 0x0370
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                CreateField (OBUF, Local1, 0x10, TMP3)
                TMP3 = Local0
                Local1 += 0x10
                Local6 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                If ((ObjectType (Local6) == 0x04))
                {
                    Local2 = SizeOf (Local6)
                    Local5 = (Local1 / 0x08)
                    Local3 = 0x00
                    While ((Local2 > 0x00))
                    {
                        Local0 = DerefOf (Local6 [Local3])
                        Local4 = SizeOf (Local0)
                        Local7 = 0x00
                        While ((Local4 > 0x00))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local7])
                            Local7++
                            Local5++
                            Local4--
                        }

                        Local2--
                        Local3++
                    }
                }
                Else
                {
                    Local2 = Local0
                    Local5 = (Local1 / 0x08)
                    While ((Local2 > 0x00))
                    {
                        Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                        Local4 = SizeOf (Local0)
                        Local6 = 0x00
                        While ((Local4 > 0x00))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local6])
                            Local6++
                            Local5++
                            Local4--
                        }

                        (Local1 + 0x80)
                        Local2--
                        CIDX++
                    }
                }

                CreateDWordField (OBUF, 0x00, TMP4)
                TMP4 = 0x00
                Return (0x00)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateDWordField (OBUF, 0x00, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                Local0 = DerefOf (DerefOf (QLST [IITM]) [0x00])
                Local1 = GCMS (Local0)
                CreateDWordField (Local1, 0x00, TMP3)
                CreateWordField (Local1, 0x04, TMP4)
                TMP1 = TMP3 /* \AOD_.R303.TMP3 */
                TMP2 = TMP4 /* \AOD_.R303.TMP4 */
                Return (0x00)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateWordField (Arg0, 0x06, CMSD)
                CreateDWordField (OBUF, 0x00, TMP1)
                Local0 = DerefOf (DerefOf (QLST [IITM]) [0x00])
                TMP1 = SCMS (Local0, CMSD)
                Return (0x00)
            }

            Name (VEND, Buffer (0x04)
            {
                "GBT"
            })
            Method (R401, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x0200, TMP2)
                TMP2 = VEND /* \AOD_.VEND */
                Return (0x00)
            }

            Method (R404, 1, NotSerialized)
            {
                CreateDWordField (OBUF, 0x04, VDIO)
                GETV (0x01)
                VDIO = GVB1 /* \AOD_.GVB1 */
                Return (0x00)
            }

            Method (R501, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MOPV)
                If ((MOPV == 0x01))
                {
                    Local0 = 0x1F
                }

                Local1 = (Local0 * 0x08)
                CreateField (Arg0, 0x20, Local1, MOPD)
                STNV (MOPD, Local1)
            }

            Name (WQBA, Buffer (0x0BBB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xAB, 0x0B, 0x00, 0x00, 0x20, 0x4A, 0x00, 0x00,  // .... J..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5B, 0xA4, 0x00, 0x01, 0x06, 0x18, 0x42,  // ([.....B
                /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x92, 0xAD, 0x08, 0x1C, 0x21,  // .......!
                /* 0060 */  0x06, 0x1C, 0xA5, 0x13, 0x5B, 0xB8, 0x61, 0x83,  // ....[.a.
                /* 0068 */  0x17, 0x8A, 0xA2, 0x19, 0x44, 0x49, 0x50, 0xB9,  // ....DIP.
                /* 0070 */  0x00, 0xDF, 0x08, 0x02, 0x2F, 0x57, 0x80, 0xE4,  // ..../W..
                /* 0078 */  0x09, 0x48, 0xB3, 0x00, 0xC3, 0x02, 0xAC, 0x0B,  // .H......
                /* 0080 */  0x90, 0x3D, 0x04, 0x2A, 0x75, 0x08, 0x28, 0x39,  // .=.*u.(9
                /* 0088 */  0x43, 0x40, 0x0D, 0xA0, 0xD5, 0x09, 0x08, 0xBF,  // C@......
                /* 0090 */  0xD2, 0x29, 0x21, 0x09, 0xC2, 0x19, 0xAB, 0x78,  // .)!....x
                /* 0098 */  0x7C, 0xCD, 0xA2, 0xE9, 0x39, 0xC9, 0x39, 0x86,  // |...9.9.
                /* 00A0 */  0x1C, 0x8F, 0x0B, 0x3D, 0x08, 0x1E, 0x47, 0x03,  // ...=..G.
                /* 00A8 */  0x08, 0x93, 0x3F, 0x64, 0x05, 0x80, 0x41, 0x49,  // ..?d..AI
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
                /* 00B8 */  0x80, 0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A,  // ..Q....:
                /* 00C0 */  0xBF, 0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04,  // .#9..;..
                /* 00C8 */  0x46, 0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42,  // F=.c,lFB
                /* 00D0 */  0x8D, 0xD1, 0x1C, 0x14, 0x09, 0x37, 0x68, 0xB4,  // .....7h.
                /* 00D8 */  0x44, 0x58, 0x8D, 0x2B, 0xF6, 0x99, 0x59, 0xF8,  // DX.+..Y.
                /* 00E0 */  0xB0, 0x84, 0x71, 0x04, 0x07, 0x76, 0xB0, 0x16,  // ..q..v..
                /* 00E8 */  0x0D, 0x23, 0xB4, 0x82, 0xE0, 0x34, 0x88, 0xA3,  // .#...4..
                /* 00F0 */  0x88, 0x12, 0x86, 0xE1, 0x19, 0x33, 0xD0, 0x51,  // .....3.Q
                /* 00F8 */  0x32, 0xA4, 0x30, 0x41, 0x4F, 0x20, 0xC8, 0xC9,  // 2.0AO ..
                /* 0100 */  0x33, 0x2C, 0x43, 0x9C, 0x01, 0xC7, 0x8A, 0x11,  // 3,C.....
                /* 0108 */  0x2A, 0x24, 0x66, 0x20, 0xC1, 0xFF, 0xFF, 0x27,  // *$f ...'
                /* 0110 */  0xD0, 0x35, 0x86, 0x3C, 0x03, 0x91, 0x7B, 0xC0,  // .5.<..{.
                /* 0118 */  0x09, 0x04, 0x89, 0x1E, 0x25, 0xB8, 0x71, 0x8D,  // ....%.q.
                /* 0120 */  0xCA, 0xC6, 0x74, 0x36, 0xB8, 0x81, 0x99, 0x20,  // ..t6... 
                /* 0128 */  0xCE, 0xE1, 0x61, 0x64, 0x40, 0x68, 0x02, 0xF1,  // ..ad@h..
                /* 0130 */  0x63, 0x87, 0x4F, 0x60, 0xF7, 0xC7, 0x01, 0x29,  // c.O`...)
                /* 0138 */  0x44, 0xD0, 0x85, 0xE0, 0x4C, 0x6B, 0x14, 0x60,  // D...Lk.`
                /* 0140 */  0xED, 0xEC, 0x20, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // .. [.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0x07, 0x41, 0x24, 0x58, 0x80,  // F`..A$X.
                /* 0168 */  0xF8, 0x23, 0xB0, 0x84, 0x13, 0x81, 0x8C, 0x8C,  // .#......
                /* 0170 */  0x86, 0x1E, 0x16, 0x7C, 0x12, 0x60, 0x07, 0x04,  // ...|.`..
                /* 0178 */  0xCF, 0xE7, 0xD4, 0x4C, 0xE0, 0xC0, 0x10, 0xE2,  // ...L....
                /* 0180 */  0x95, 0x00, 0x51, 0x47, 0x0B, 0x4A, 0x60, 0x29,  // ..QG.J`)
                /* 0188 */  0x47, 0x03, 0x62, 0x7B, 0x60, 0xBA, 0x07, 0x1C,  // G.b{`...
                /* 0190 */  0xE1, 0xB9, 0xFB, 0x72, 0x70, 0x6A, 0xFE, 0x69,  // ...rpj.i
                /* 0198 */  0x78, 0x9A, 0x0F, 0x09, 0x98, 0x21, 0x7A, 0xAC,  // x....!z.
                /* 01A0 */  0x07, 0x11, 0xF0, 0x10, 0xD9, 0x29, 0xC1, 0x80,  // .....)..
                /* 01A8 */  0x78, 0xEF, 0xD7, 0x02, 0x32, 0x82, 0x97, 0x04,  // x...2...
                /* 01B0 */  0x03, 0x7A, 0x12, 0x0F, 0x08, 0x60, 0x39, 0x68,  // .z...`9h
                /* 01B8 */  0x1C, 0xF8, 0x09, 0x55, 0x7C, 0x07, 0xA0, 0x47,  // ...U|..G
                /* 01C0 */  0x02, 0x36, 0xA3, 0xF8, 0x26, 0x28, 0xEB, 0xF8,  // .6..&(..
                /* 01C8 */  0x80, 0x9E, 0x73, 0xB4, 0x67, 0x87, 0x97, 0x85,  // ..s.g...
                /* 01D0 */  0x66, 0xAF, 0x18, 0x84, 0xE0, 0x35, 0xC0, 0x37,  // f....5.7
                /* 01D8 */  0x05, 0x9F, 0x46, 0x2C, 0x69, 0x75, 0x72, 0xB2,  // ..F,iur.
                /* 01E0 */  0x2A, 0x8F, 0x98, 0x82, 0x7B, 0x08, 0x5C, 0x04,  // *...{.\.
                /* 01E8 */  0x9C, 0x86, 0xEE, 0xF1, 0x82, 0x43, 0xC1, 0x78,  // .....C.x
                /* 01F0 */  0xE9, 0xFF, 0x7F, 0xBC, 0xE0, 0x3E, 0x0F, 0x1C,  // .....>..
                /* 01F8 */  0x2F, 0x58, 0x4E, 0x09, 0x55, 0x5D, 0x36, 0x34,  // /XN.U]64
                /* 0200 */  0x87, 0xF3, 0x6D, 0x1E, 0x9F, 0x1C, 0x2D, 0x3C,  // ..m...-<
                /* 0208 */  0x61, 0x36, 0x96, 0xA3, 0x62, 0xC7, 0x10, 0x36,  // a6..b..6
                /* 0210 */  0x3A, 0x3E, 0x0A, 0x0F, 0xF8, 0xB5, 0xA1, 0x58,  // :>.....X
                /* 0218 */  0x10, 0x99, 0x80, 0xD0, 0x91, 0xE1, 0xC0, 0xC1,  // ........
                /* 0220 */  0xE2, 0xEC, 0x00, 0x21, 0x02, 0x0B, 0x1B, 0x39,  // ...!...9
                /* 0228 */  0x7A, 0xC4, 0x1E, 0xD4, 0x3B, 0x8C, 0x31, 0x1E,  // z...;.1.
                /* 0230 */  0x08, 0x8C, 0x7A, 0x48, 0x07, 0x0F, 0x3E, 0x40,  // ..zH..>@
                /* 0238 */  0x0F, 0x1E, 0x70, 0xFA, 0xFF, 0x27, 0xB0, 0xA0,  // ..p..'..
                /* 0240 */  0x21, 0x4B, 0xC4, 0xE0, 0xD1, 0xA7, 0x08, 0x0F,  // !K......
                /* 0248 */  0xE7, 0xDD, 0x87, 0x1F, 0x44, 0x12, 0x38, 0x3C,  // ....D.8<
                /* 0250 */  0x84, 0x06, 0x0F, 0x9E, 0xB3, 0x8F, 0x07, 0x0F,  // ........
                /* 0258 */  0x7E, 0x79, 0x83, 0x07, 0xD1, 0x14, 0x8E, 0x0D,  // ~y......
                /* 0260 */  0x77, 0xB0, 0xF1, 0xC0, 0xC1, 0x3D, 0x5C, 0xFC,  // w....=\.
                /* 0268 */  0x90, 0x70, 0x67, 0x2D, 0x78, 0x3E, 0x27, 0x4F,  // .pg-x>'O
                /* 0270 */  0x06, 0xF0, 0x12, 0x84, 0x3B, 0x6C, 0x01, 0x97,  // ....;l..
                /* 0278 */  0x11, 0x70, 0x99, 0xAB, 0xA4, 0x87, 0x2A, 0x0B,  // .p....*.
                /* 0280 */  0x83, 0x41, 0x9D, 0xAB, 0xC0, 0xFB, 0xFF, 0x3F,  // .A.....?
                /* 0288 */  0x57, 0x01, 0xF6, 0x2F, 0x53, 0xEF, 0x53, 0x3E,  // W../S.S>
                /* 0290 */  0x57, 0x81, 0x3B, 0xDA, 0x79, 0x40, 0xE7, 0x16,  // W.;.y@..
                /* 0298 */  0x72, 0x9A, 0x41, 0x1F, 0x0A, 0x7C, 0x06, 0x78,  // r.A..|.x
                /* 02A0 */  0x92, 0x01, 0xDB, 0xA1, 0x0A, 0x38, 0x9C, 0x64,  // .....8.d
                /* 02A8 */  0xC0, 0x73, 0x2B, 0x7B, 0x92, 0x61, 0xFF, 0xFF,  // .s+{.a..
                /* 02B0 */  0x93, 0x0C, 0x38, 0x0F, 0x62, 0x3E, 0xC9, 0x80,  // ..8.b>..
                /* 02B8 */  0xEF, 0xE8, 0x85, 0x3B, 0x81, 0xC0, 0xF3, 0x38,  // ...;...8
                /* 02C0 */  0x24, 0x21, 0x1F, 0x42, 0xF0, 0x43, 0x3A, 0xA6,  // $!.B.C:.
                /* 02C8 */  0x67, 0x10, 0x60, 0x28, 0xE4, 0x65, 0xE0, 0x03,  // g.`(.e..
                /* 02D0 */  0x08, 0x8D, 0x7E, 0x06, 0x01, 0xB4, 0xFF, 0xFF,  // ..~.....
                /* 02D8 */  0xCF, 0x20, 0xC0, 0xE5, 0xAC, 0xF0, 0x0C, 0x02,  // . ......
                /* 02E0 */  0x76, 0xF1, 0xAF, 0x3A, 0x9D, 0x07, 0x1C, 0x1C,  // v..:....
                /* 02E8 */  0x42, 0x4E, 0x8E, 0x8A, 0xA8, 0xE1, 0x58, 0xEB,  // BN....X.
                /* 02F0 */  0x41, 0x80, 0x8C, 0xE7, 0x45, 0xC0, 0x41, 0x4F,  // A...E.AO
                /* 02F8 */  0x8A, 0x40, 0xF7, 0xAC, 0x81, 0x3B, 0x1F, 0xC0,  // .@...;..
                /* 0300 */  0x3D, 0x12, 0xF2, 0x73, 0x07, 0xF8, 0xA2, 0x43,  // =..s...C
                /* 0308 */  0xE8, 0x98, 0x89, 0x3F, 0x51, 0x79, 0x88, 0x3E,  // ...?Qy.>
                /* 0310 */  0x1B, 0x98, 0xC0, 0xA3, 0x05, 0xD7, 0x39, 0x11,  // ......9.
                /* 0318 */  0x5C, 0xFF, 0xFF, 0xD1, 0xC2, 0x3B, 0x69, 0xE0,  // \....;i.
                /* 0320 */  0x46, 0x0B, 0xF7, 0x00, 0xFC, 0x58, 0x80, 0x39,  // F....X.9
                /* 0328 */  0x62, 0x82, 0xEB, 0xD0, 0x02, 0xA6, 0xEB, 0x02,  // b.......
                /* 0330 */  0xE6, 0xD2, 0x82, 0x3F, 0xB4, 0x00, 0x1F, 0xA1,  // ...?....
                /* 0338 */  0x27, 0x16, 0x94, 0xB4, 0x43, 0x0B, 0xA0, 0xF9,  // '...C...
                /* 0340 */  0xFF, 0x7F, 0x68, 0x01, 0x6E, 0x73, 0x7D, 0x68,  // ..h.ns}h
                /* 0348 */  0x01, 0x7B, 0xB8, 0x73, 0x18, 0x95, 0x73, 0x0E,  // .{.s..s.
                /* 0350 */  0x83, 0x76, 0x68, 0xF6, 0x39, 0x0C, 0xB8, 0x1E,  // .vh.9...
                /* 0358 */  0x26, 0xF0, 0x87, 0x4A, 0xB8, 0xB3, 0x88, 0x1F,  // &..J....
                /* 0360 */  0x27, 0xDA, 0x5B, 0x80, 0xCF, 0xA7, 0xC0, 0xED,  // '.[.....
                /* 0368 */  0xB0, 0x86, 0x3B, 0x82, 0xC0, 0xBB, 0x14, 0x9C,  // ..;.....
                /* 0370 */  0x96, 0xA7, 0xF6, 0xD4, 0x7F, 0x70, 0x8D, 0x5F,  // .....p._
                /* 0378 */  0x41, 0xC8, 0x3D, 0xC6, 0x77, 0x10, 0xF6, 0xFF,  // A.=.w...
                /* 0380 */  0x3F, 0x88, 0x01, 0x37, 0x19, 0x07, 0x31, 0x54,  // ?..7..1T
                /* 0388 */  0xF0, 0x43, 0x08, 0x40, 0xA1, 0xCB, 0xC2, 0x43,  // .C.@...C
                /* 0390 */  0x08, 0xD8, 0xA5, 0x1F, 0xC4, 0x68, 0xEC, 0x83,  // .....h..
                /* 0398 */  0x18, 0xEA, 0xFF, 0x7F, 0x82, 0xC7, 0x9F, 0xC3,  // ........
                /* 03A0 */  0x00, 0xA7, 0x67, 0x38, 0xB8, 0x51, 0x8F, 0x61,  // ..g8.Q.a
                /* 03A8 */  0x80, 0xA2, 0xB3, 0x28, 0x70, 0x82, 0x78, 0x0E,  // ...(p.x.
                /* 03B0 */  0x63, 0xFF, 0xFF, 0x73, 0x18, 0xF0, 0x14, 0xFC,  // c..s....
                /* 03B8 */  0x12, 0xF0, 0x81, 0x85, 0x4A, 0x84, 0x41, 0x9D,  // ....J.A.
                /* 03C0 */  0x59, 0x00, 0xDE, 0x1C, 0x90, 0x9F, 0x59, 0xC0,  // Y.....Y.
                /* 03C8 */  0x1E, 0xF2, 0xAD, 0xA1, 0x1F, 0x81, 0xFF, 0xFF,  // ........
                /* 03D0 */  0x67, 0x16, 0xC0, 0xF5, 0x99, 0xDC, 0x63, 0xC5,  // g.....c.
                /* 03D8 */  0x1D, 0x22, 0xD8, 0x48, 0x42, 0xBE, 0x0A, 0xBC,  // .".HB...
                /* 03E0 */  0x15, 0x98, 0xC0, 0x91, 0x0F, 0x2D, 0x40, 0xF7,  // .....-@.
                /* 03E8 */  0x6C, 0x82, 0x1B, 0x2D, 0xDC, 0xE3, 0xC8, 0x39,  // l..-...9
                /* 03F0 */  0x9E, 0xD0, 0xBB, 0xF9, 0xEB, 0x03, 0x3B, 0x4D,  // ......;M
                /* 03F8 */  0xB0, 0x21, 0x83, 0x57, 0xDE, 0x21, 0x10, 0xF5,  // .!.W.!..
                /* 0400 */  0xFF, 0x1F, 0xB2, 0x0F, 0x24, 0x9E, 0xC2, 0xCB,  // ....$...
                /* 0408 */  0x0C, 0x66, 0x26, 0x31, 0x0E, 0x24, 0xC2, 0xB1,  // .f&1.$..
                /* 0410 */  0x78, 0x78, 0xE4, 0x28, 0x08, 0xAA, 0x33, 0x3F,  // xx.(..3?
                /* 0418 */  0x19, 0x35, 0xE8, 0x67, 0xF7, 0x84, 0x0F, 0x9E,  // .5.g....
                /* 0420 */  0xE9, 0xBE, 0xE1, 0x83, 0xE1, 0x30, 0x08, 0x73,  // .....0.s
                /* 0428 */  0xCE, 0x1E, 0x3F, 0xF8, 0x8E, 0x3D, 0xB8, 0x73,  // ..?..=.s
                /* 0430 */  0x10, 0xBC, 0xEB, 0x8A, 0x91, 0x4F, 0xE8, 0x25,  // .....O.%
                /* 0438 */  0x00, 0x73, 0x6B, 0xC1, 0x9E, 0x05, 0x81, 0x93,  // .sk.....
                /* 0440 */  0xAC, 0x83, 0x20, 0x4A, 0xC8, 0x59, 0x10, 0x54,  // .. J.Y.T
                /* 0448 */  0xFF, 0xFF, 0x83, 0x10, 0xC0, 0x04, 0x6F, 0xF7,  // ......o.
                /* 0450 */  0x20, 0x5D, 0x83, 0x7C, 0x1B, 0x78, 0x1A, 0x78,  //  ].|.x.x
                /* 0458 */  0xF8, 0x89, 0xF2, 0x20, 0xE4, 0x8B, 0xC4, 0x0B,  // ... ....
                /* 0460 */  0x41, 0x84, 0x28, 0xC7, 0x7B, 0x02, 0x11, 0x9E,  // A.(.{...
                /* 0468 */  0x86, 0x3C, 0xE1, 0x30, 0xE1, 0x4E, 0x36, 0xCA,  // .<.0.N6.
                /* 0470 */  0x4B, 0x43, 0x18, 0x43, 0xC7, 0x0A, 0x14, 0x39,  // KC.C...9
                /* 0478 */  0x7E, 0x08, 0x1F, 0x85, 0x7C, 0x10, 0x62, 0x51,  // ~...|.bQ
                /* 0480 */  0xCE, 0xB7, 0xF4, 0xFC, 0x61, 0x23, 0x67, 0x11,  // ....a#g.
                /* 0488 */  0xD4, 0x49, 0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09,  // .I......
                /* 0490 */  0x01, 0x13, 0x1A, 0x42, 0x47, 0x5C, 0xE0, 0x7A,  // ...BG\.z
                /* 0498 */  0xDA, 0xC0, 0xFD, 0xFF, 0x8F, 0x42, 0xE0, 0x38,  // .....B.8
                /* 04A0 */  0x80, 0xC0, 0x7B, 0x47, 0xF8, 0xB4, 0x0E, 0x2E,  // ..{G....
                /* 04A8 */  0x08, 0x9F, 0x3F, 0xE0, 0xFB, 0x44, 0x16, 0xEE,  // ..?..D..
                /* 04B0 */  0x5B, 0xC0, 0x0B, 0x0D, 0xEE, 0xEC, 0x01, 0x7C,  // [......|
                /* 04B8 */  0xE4, 0x1E, 0x6B, 0x51, 0x02, 0x61, 0x50, 0x67,  // ..kQ.aPg
                /* 04C0 */  0x0F, 0xC0, 0xF9, 0xFF, 0xFF, 0xEC, 0x01, 0xD6,  // ........
                /* 04C8 */  0x81, 0x3E, 0x7A, 0x1C, 0xE8, 0x31, 0x06, 0x89,  // .>z..1..
                /* 04D0 */  0x11, 0xC4, 0x77, 0x0E, 0x1F, 0x7C, 0xE2, 0xBC,  // ..w..|..
                /* 04D8 */  0x11, 0x3C, 0x7B, 0xF8, 0xC8, 0x71, 0x5C, 0x3E,  // .<{..q\>
                /* 04E0 */  0x80, 0xF8, 0xEC, 0xE1, 0x2B, 0x88, 0xF1, 0xC2,  // ....+...
                /* 04E8 */  0xC4, 0x7C, 0x38, 0xF2, 0x35, 0x21, 0x5E, 0xE4,  // .|8.5!^.
                /* 04F0 */  0xB0, 0x61, 0x22, 0xFB, 0xEC, 0xC1, 0x22, 0x1E,  // .a"...".
                /* 04F8 */  0x6B, 0xA9, 0x94, 0x83, 0x19, 0xFA, 0x4C, 0xE0,  // k.....L.
                /* 0500 */  0x5B, 0xC2, 0x99, 0xBD, 0x71, 0x44, 0x38, 0xAE,  // [...qD8.
                /* 0508 */  0x93, 0x3B, 0x9F, 0x38, 0x1E, 0xD2, 0x49, 0xFB,  // .;.8..I.
                /* 0510 */  0x6C, 0x06, 0xBE, 0xE3, 0x07, 0x70, 0x38, 0x9B,  // l....p8.
                /* 0518 */  0x81, 0x67, 0x74, 0x70, 0x0F, 0x53, 0xE0, 0x93,  // .gtp.S..
                /* 0520 */  0x75, 0x36, 0x43, 0x0F, 0xCB, 0xE7, 0x82, 0x57,  // u6C....W
                /* 0528 */  0x07, 0x0F, 0x82, 0x9D, 0xCB, 0xC0, 0x75, 0xB8,  // ......u.
                /* 0530 */  0x83, 0xF3, 0xFF, 0x3F, 0x97, 0x01, 0xAF, 0x73,  // ...?...s
                /* 0538 */  0xC7, 0x91, 0xB1, 0x53, 0x05, 0x47, 0x3C, 0xA8,  // ...S.G<.
                /* 0540 */  0x33, 0x79, 0x77, 0x39, 0x6B, 0x1F, 0x3C, 0x02,  // 3yw9k.<.
                /* 0548 */  0x9D, 0xE7, 0x29, 0xFB, 0x1C, 0x03, 0x73, 0x84,  // ..)...s.
                /* 0550 */  0x1E, 0x3B, 0xF8, 0x0E, 0x26, 0xF8, 0x83, 0x0C,  // .;..&...
                /* 0558 */  0x1C, 0x98, 0x13, 0x38, 0xBA, 0x40, 0xA7, 0x10,  // ...8.@..
                /* 0560 */  0xE7, 0x14, 0x9E, 0x63, 0x80, 0x91, 0x1C, 0x4B,  // ...c...K
                /* 0568 */  0x20, 0x2C, 0xC0, 0xB1, 0x40, 0xA2, 0x96, 0x49,  //  ,..@..I
                /* 0570 */  0x61, 0x7C, 0x32, 0xF0, 0x39, 0x06, 0xAE, 0x24,  // a|2.9..$
                /* 0578 */  0x38, 0xD4, 0xF8, 0x3C, 0xB2, 0x97, 0xBC, 0xE3,  // 8..<....
                /* 0580 */  0x3C, 0x91, 0x37, 0x04, 0x8F, 0xFF, 0x81, 0x06,  // <.7.....
                /* 0588 */  0xC6, 0xC0, 0x3D, 0xAD, 0x93, 0xF2, 0x4D, 0xEE,  // ..=...M.
                /* 0590 */  0xB1, 0xC4, 0x67, 0x43, 0x7E, 0x5C, 0x60, 0x68,  // ..gC~\`h
                /* 0598 */  0xFC, 0x74, 0x03, 0x86, 0xFF, 0xFF, 0xE9, 0x06,  // .t......
                /* 05A0 */  0xCE, 0x9D, 0xC1, 0x47, 0x0D, 0xB0, 0x5C, 0x6D,  // ...G..\m
                /* 05A8 */  0x30, 0x58, 0xA1, 0x62, 0x34, 0x7A, 0xD7, 0x23,  // 0X.b4z.#
                /* 05B0 */  0xA0, 0xC7, 0xD7, 0xD7, 0x45, 0x9A, 0x42, 0x45,  // ....E.BE
                /* 05B8 */  0x0C, 0xF1, 0x42, 0x60, 0x97, 0xC7, 0x71, 0xE4,  // ..B`..q.
                /* 05C0 */  0x59, 0x17, 0x5C, 0xD8, 0xCF, 0xBA, 0x60, 0x0F,  // Y.\...`.
                /* 05C8 */  0x75, 0x4E, 0xA2, 0x91, 0x46, 0x83, 0x3A, 0xC8,  // uN..F.:.
                /* 05D0 */  0xF0, 0x03, 0xC1, 0x63, 0x90, 0x4F, 0x1E, 0x06,  // ...c.O..
                /* 05D8 */  0x39, 0xD1, 0xD3, 0x7A, 0x5C, 0x78, 0x1A, 0xF0,  // 9..z\x..
                /* 05E0 */  0xB8, 0xD9, 0x35, 0xC1, 0x1F, 0x04, 0x1F, 0x0F,  // ..5.....
                /* 05E8 */  0xF0, 0x97, 0xA0, 0x80, 0x27, 0xFA, 0xF0, 0x01,  // ....'...
                /* 05F0 */  0xEB, 0x10, 0x82, 0x3F, 0x61, 0xC0, 0x1F, 0x8F,  // ...?a...
                /* 05F8 */  0x8F, 0x01, 0x3E, 0xD1, 0xFA, 0x48, 0x45, 0x06,  // ..>..HE.
                /* 0600 */  0x81, 0x3A, 0xBC, 0xF1, 0x91, 0x9E, 0xD6, 0xDB,  // .:......
                /* 0608 */  0x80, 0x0F, 0x09, 0x87, 0xC5, 0x0E, 0x1E, 0x3E,  // .......>
                /* 0610 */  0xA3, 0x80, 0x63, 0x3C, 0xF0, 0x6F, 0x9F, 0x4F,  // ..c<.o.O
                /* 0618 */  0x07, 0xFF, 0xFF, 0x08, 0xAF, 0x0C, 0x9E, 0xAF,  // ........
                /* 0620 */  0x0F, 0x66, 0x60, 0xB9, 0x75, 0xF8, 0xD0, 0x10,  // .f`.u...
                /* 0628 */  0xEA, 0xA9, 0xC3, 0x33, 0x78, 0xBF, 0xF0, 0x09,  // ...3x...
                /* 0630 */  0x04, 0x98, 0x04, 0x36, 0x34, 0x48, 0x26, 0x73,  // ...64H&s
                /* 0638 */  0x9D, 0xB2, 0x71, 0xDA, 0xA1, 0xC3, 0xB4, 0xC8,  // ..q.....
                /* 0640 */  0x03, 0x82, 0x8E, 0x06, 0x3E, 0xD2, 0xF8, 0x80,  // ....>...
                /* 0648 */  0xCB, 0x0F, 0x49, 0x86, 0xB0, 0x30, 0x0A, 0x9D,  // ..I..0..
                /* 0650 */  0x7C, 0x3C, 0x1A, 0x0F, 0x8F, 0xC0, 0x51, 0x10,  // |<....Q.
                /* 0658 */  0x8F, 0xDC, 0x21, 0x21, 0x64, 0xE4, 0x10, 0x80,  // ..!!d...
                /* 0660 */  0x3E, 0x2C, 0x30, 0x88, 0x87, 0x2E, 0x13, 0xF8,  // >,0.....
                /* 0668 */  0xD8, 0xE0, 0xF3, 0x1A, 0x9C, 0xE3, 0x91, 0x27,  // .......'
                /* 0670 */  0xE3, 0x69, 0x78, 0xDC, 0xB8, 0x53, 0x07, 0xDC,  // .ix..S..
                /* 0678 */  0x71, 0xE0, 0x0F, 0x3A, 0xF8, 0x53, 0x20, 0x3F,  // q..:.S ?
                /* 0680 */  0x27, 0x91, 0xF3, 0x1F, 0xA8, 0x04, 0x9E, 0x0B,  // '.......
                /* 0688 */  0x40, 0x01, 0xE4, 0xAB, 0x80, 0x95, 0x1E, 0x07,  // @.......
                /* 0690 */  0xE8, 0x14, 0x42, 0x84, 0x89, 0x66, 0x78, 0x4C,  // ..B..fxL
                /* 0698 */  0xF0, 0xD3, 0x17, 0x1D, 0x8F, 0x87, 0xE5, 0xFF,  // ........
                /* 06A0 */  0xFF, 0x20, 0xF9, 0xF1, 0x85, 0x61, 0x3F, 0x9D,  // . ...a?.
                /* 06A8 */  0xF8, 0xD4, 0x76, 0x8C, 0xEF, 0x05, 0x8F, 0x5F,  // ..v...._
                /* 06B0 */  0x18, 0x58, 0x0F, 0x9B, 0xC3, 0x1A, 0x2D, 0xEC,  // .X....-.
                /* 06B8 */  0xD1, 0x3E, 0x3E, 0xF8, 0xEA, 0xE1, 0x89, 0xF9,  // .>>.....
                /* 06C0 */  0x16, 0xE7, 0x43, 0x07, 0x58, 0x0E, 0x52, 0xC0,  // ..C.X.R.
                /* 06C8 */  0xE3, 0xFC, 0xC3, 0xE6, 0xF0, 0x02, 0xF1, 0x1C,  // ........
                /* 06D0 */  0xE6, 0x83, 0x07, 0x3B, 0xF1, 0xB1, 0x53, 0x1F,  // ...;..S.
                /* 06D8 */  0xD7, 0x75, 0x8E, 0x43, 0x9C, 0x21, 0xF8, 0x20,  // .u.C.!. 
                /* 06E0 */  0x1C, 0x67, 0x91, 0xF2, 0x38, 0x53, 0x72, 0x95,  // .g..8Sr.
                /* 06E8 */  0x7C, 0xE0, 0xA8, 0x1A, 0x45, 0xF0, 0xBE, 0x15,  // |...E...
                /* 06F0 */  0xB0, 0x08, 0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49,  // .....x.I
                /* 06F8 */  0x3F, 0x46, 0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x1F,  // ?F...Q..
                /* 0700 */  0x23, 0x7C, 0x90, 0xB0, 0x8D, 0x63, 0x04, 0x6A,  // #|...c.j
                /* 0708 */  0x8C, 0x3E, 0x0C, 0xF2, 0xA3, 0x00, 0x3F, 0x45,  // .>....?E
                /* 0710 */  0xC0, 0x3F, 0xF1, 0xE0, 0xC6, 0x0A, 0x77, 0x70,  // .?....wp
                /* 0718 */  0x6C, 0x85, 0x2F, 0x3D, 0x87, 0x76, 0x76, 0x0F,  // l./=.vv.
                /* 0720 */  0x09, 0x51, 0xDE, 0x5F, 0x8D, 0x18, 0x21, 0x60,  // .Q._..!`
                /* 0728 */  0xD8, 0x68, 0x1E, 0x23, 0xEE, 0xD8, 0xCE, 0x2E,  // .h.#....
                /* 0730 */  0x45, 0x9E, 0x53, 0xAC, 0x47, 0x25, 0x7E, 0xA4,  // E.S.G%~.
                /* 0738 */  0x80, 0xF7, 0xFF, 0x27, 0xF0, 0x31, 0x0F, 0x77,  // ...'.1.w
                /* 0740 */  0xA4, 0x80, 0x33, 0x93, 0xF3, 0xC0, 0xA8, 0x1B,  // ..3.....
                /* 0748 */  0x8B, 0xE0, 0x8D, 0xF6, 0x92, 0x8D, 0x3D, 0x58,  // ......=X
                /* 0750 */  0x00, 0x8F, 0x13, 0xA3, 0x0F, 0x16, 0xE0, 0x3A,  // .......:
                /* 0758 */  0x13, 0xF8, 0x60, 0x01, 0x5C, 0xCF, 0x07, 0x3E,  // ..`.\..>
                /* 0760 */  0x1D, 0x80, 0xF5, 0xF2, 0xC3, 0xEF, 0x07, 0x30,  // .......0
                /* 0768 */  0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98, 0x1B, 0x86,  // N.0.....
                /* 0770 */  0xC3, 0x2C, 0x59, 0x27, 0x0C, 0x7E, 0x5C, 0x73,  // .,Y'.~\s
                /* 0778 */  0xA4, 0xD5, 0x6A, 0x20, 0xEC, 0x12, 0x86, 0x23,  // ..j ...#
                /* 0780 */  0x18, 0x04, 0x4C, 0x27, 0x0B, 0x8F, 0xDA, 0x11,  // ..L'....
                /* 0788 */  0x28, 0x24, 0xED, 0x80, 0x81, 0x12, 0x73, 0xC0,  // ($....s.
                /* 0790 */  0xA0, 0x20, 0x06, 0x74, 0x52, 0x08, 0x9D, 0x45,  // . .tR..E
                /* 0798 */  0xFD, 0xFF, 0x3F, 0x60, 0xF0, 0x83, 0x9D, 0x4F,  // ..?`...O
                /* 07A0 */  0x0D, 0xEC, 0x72, 0xEB, 0xEB, 0x85, 0xE7, 0xE9,  // ..r.....
                /* 07A8 */  0x29, 0x73, 0x3C, 0x1F, 0x43, 0x0C, 0xEB, 0x8B,  // )s<.C...
                /* 07B0 */  0x09, 0x78, 0x6E, 0x14, 0xEC, 0x34, 0x8B, 0xB9,  // .xn..4..
                /* 07B8 */  0xB8, 0xB1, 0xB3, 0x1D, 0x3B, 0x15, 0x18, 0xE5,  // ....;...
                /* 07C0 */  0x70, 0xDF, 0xC0, 0xAC, 0xE6, 0xAA, 0x80, 0x9A,  // p.......
                /* 07C8 */  0x11, 0x86, 0xC0, 0xE3, 0xF5, 0x81, 0x11, 0x4C,  // .......L
                /* 07D0 */  0xFA, 0x2E, 0x14, 0x20, 0x47, 0xE7, 0x32, 0x47,  // ... G.2G
                /* 07D8 */  0x8F, 0x3A, 0x47, 0xF9, 0x24, 0xC5, 0x47, 0xEF,  // .:G.$.G.
                /* 07E0 */  0xA3, 0xB9, 0x4F, 0x2B, 0x70, 0xCF, 0x52, 0x3E,  // ..O+p.R>
                /* 07E8 */  0x42, 0x01, 0xDF, 0x81, 0xF9, 0x52, 0x80, 0x3B,  // B....R.;
                /* 07F0 */  0xA0, 0x80, 0xE1, 0xFA, 0x80, 0xFD, 0xFF, 0xC3,  // ........
                /* 07F8 */  0xBC, 0xA2, 0xE0, 0xCF, 0x28, 0xC0, 0x24, 0xF0,  // ....(.$.
                /* 0800 */  0x59, 0x0A, 0x74, 0x90, 0x3E, 0xA3, 0x00, 0xD7,  // Y.t.>...
                /* 0808 */  0xA1, 0xE2, 0xCE, 0x28, 0xE0, 0x38, 0x10, 0x1E,  // ...(.8..
                /* 0810 */  0x3D, 0x3F, 0x47, 0xB1, 0x38, 0xC7, 0x12, 0x74,  // =?G.8..t
                /* 0818 */  0xA8, 0x97, 0x83, 0x6E, 0x9B, 0xEC, 0x58, 0x82,  // ...n..X.
                /* 0820 */  0x8D, 0x72, 0x2C, 0x41, 0x85, 0xA0, 0xD0, 0x09,  // .r,A....
                /* 0828 */  0xCA, 0x27, 0x09, 0x7E, 0xC6, 0xE3, 0x20, 0x06,  // .'.~.. .
                /* 0830 */  0x74, 0xF6, 0x93, 0x04, 0x5A, 0xC5, 0x49, 0x02,  // t...Z.I.
                /* 0838 */  0x19, 0xF6, 0x5C, 0x02, 0x84, 0xFE, 0xFF, 0xE7,  // ..\.....
                /* 0840 */  0x12, 0xF0, 0x9E, 0x13, 0x9F, 0x26, 0xC0, 0x35,  // .....&.5
                /* 0848 */  0x6B, 0xFC, 0x69, 0x02, 0x7F, 0x3E, 0x01, 0x16,  // k.i..>..
                /* 0850 */  0x47, 0x46, 0xC0, 0xD9, 0x41, 0x90, 0x1F, 0x19,  // GF..A...
                /* 0858 */  0x81, 0xEF, 0xB9, 0x84, 0xFF, 0xFF, 0xCF, 0x25,  // .......%
                /* 0860 */  0xE0, 0x19, 0xB6, 0xCF, 0x25, 0x80, 0x93, 0x9B,  // ....%...
                /* 0868 */  0x34, 0x3F, 0x97, 0xC0, 0x1D, 0xBA, 0xE3, 0x9C,  // 4?......
                /* 0870 */  0xBE, 0x10, 0x57, 0x58, 0xDF, 0x33, 0xE2, 0x27,  // ..WX.3.'
                /* 0878 */  0x18, 0xE3, 0x58, 0x82, 0x0A, 0x70, 0xF8, 0x02,  // ..X..p..
                /* 0880 */  0xB4, 0xFF, 0xFF, 0x4F, 0x23, 0xE0, 0x3F, 0x17,  // ...O#.?.
                /* 0888 */  0x7B, 0xF4, 0xFC, 0x40, 0xE2, 0x43, 0x06, 0x19,  // {..@.C..
                /* 0890 */  0x3D, 0x8D, 0x7C, 0xF8, 0x82, 0x1E, 0xF1, 0x30,  // =.|....0
                /* 0898 */  0x02, 0xB4, 0x07, 0xFA, 0xF0, 0x05, 0xC6, 0xDB,  // ........
                /* 08A0 */  0x03, 0x3F, 0x6E, 0x02, 0xAF, 0xD8, 0x87, 0x12,  // .?n.....
                /* 08A8 */  0xD0, 0xC1, 0xF2, 0x43, 0x09, 0xF8, 0xFF, 0xFF,  // ...C....
                /* 08B0 */  0x87, 0x12, 0xF0, 0x8C, 0x1E, 0x77, 0xF6, 0x02,  // .....w..
                /* 08B8 */  0xC7, 0x55, 0xC2, 0x83, 0x37, 0xE0, 0x31, 0x3D,  // .U..7.1=
                /* 08C0 */  0x16, 0x18, 0x90, 0x9D, 0x4B, 0x98, 0xEC, 0x73,  // ....K..s
                /* 08C8 */  0x09, 0xFA, 0x3C, 0x62, 0xAB, 0xB7, 0x63, 0x72,  // ..<b..cr
                /* 08D0 */  0x52, 0xC7, 0x08, 0x3F, 0x97, 0xA0, 0x24, 0x9F,  // R..?..$.
                /* 08D8 */  0x4B, 0x00, 0xDA, 0x1C, 0xBA, 0xC0, 0xF1, 0xFF,  // K.......
                /* 08E0 */  0x3F, 0x74, 0x01, 0x3C, 0xB8, 0x06, 0xFA, 0x40,  // ?t.<...@
                /* 08E8 */  0x02, 0xAE, 0x7B, 0x82, 0x0F, 0x24, 0xC0, 0xF5,  // ..{..$..
                /* 08F0 */  0x28, 0x00, 0x9E, 0x23, 0x08, 0xFE, 0xC8, 0xEC,  // (..#....
                /* 08F8 */  0x03, 0x3F, 0xEE, 0xA4, 0xEF, 0x53, 0x75, 0x5C,  // .?...Su\
                /* 0900 */  0xE3, 0x1F, 0xF1, 0x11, 0xFC, 0xFF, 0x1B, 0x3F,  // .......?
                /* 0908 */  0x7D, 0x91, 0x7B, 0x81, 0x8F, 0x25, 0x3A, 0xF0,  // }.{..%:.
                /* 0910 */  0xA3, 0x04, 0x53, 0x48, 0xEE, 0x01, 0x02, 0x25,  // ..SH...%
                /* 0918 */  0x10, 0x8E, 0x82, 0xF8, 0x00, 0xE1, 0xF0, 0xE7,  // ........
                /* 0920 */  0x24, 0xE8, 0x57, 0x4B, 0x7E, 0x7E, 0xC0, 0x5F,  // $.WK~~._
                /* 0928 */  0x47, 0xD8, 0x28, 0xD9, 0x71, 0x1E, 0x37, 0x4A,  // G.(.q.7J
                /* 0930 */  0xB8, 0x60, 0xAF, 0x0F, 0x86, 0xB8, 0xC3, 0x13,  // .`......
                /* 0938 */  0xE1, 0x67, 0x5B, 0xCC, 0x31, 0x1F, 0xEE, 0x51,  // .g[.1..Q
                /* 0940 */  0xE1, 0x51, 0x09, 0x5C, 0xB3, 0x86, 0x75, 0x58,  // .Q.\..uX
                /* 0948 */  0x02, 0x3C, 0x78, 0x38, 0x4C, 0x00, 0xAD, 0xFF,  // .<x8L...
                /* 0950 */  0xFF, 0x61, 0x09, 0xFC, 0xB3, 0xE7, 0x83, 0x38,  // .a.....8
                /* 0958 */  0x11, 0x0F, 0x1F, 0x03, 0x74, 0x2C, 0x6F, 0x07,  // ....t,o.
                /* 0960 */  0xEC, 0xD8, 0xAB, 0xC3, 0x12, 0x6A, 0x0C, 0x3E,  // .....j.>
                /* 0968 */  0xFA, 0xFA, 0xE8, 0xC4, 0x20, 0x1F, 0x0F, 0x31,  // .... ..1
                /* 0970 */  0xC7, 0x16, 0x76, 0xC2, 0x07, 0xF8, 0xF6, 0xFF,  // ..v.....
                /* 0978 */  0x3F, 0xE1, 0x03, 0xD6, 0xCE, 0x24, 0xBE, 0x3F,  // ?....$.?
                /* 0980 */  0x60, 0xAF, 0x2D, 0xF8, 0xA3, 0x09, 0xF0, 0x06,  // `.-.....
                /* 0988 */  0xF7, 0xD1, 0x04, 0x70, 0xF5, 0xFF, 0x3F, 0x9A,  // ...p..?.
                /* 0990 */  0xE0, 0x84, 0x9E, 0x9D, 0x50, 0x67, 0x03, 0x1F,  // ....Pg..
                /* 0998 */  0x98, 0x6C, 0x14, 0x95, 0x40, 0xBF, 0x69, 0xBC,  // .l..@.i.
                /* 09A0 */  0x9F, 0x07, 0x31, 0xF4, 0x49, 0xF0, 0x53, 0x13,  // ..1.I.S.
                /* 09A8 */  0x06, 0xC2, 0x47, 0x13, 0x9F, 0x24, 0x7C, 0x9C,  // ..G..$|.
                /* 09B0 */  0xE0, 0x52, 0xE0, 0x28, 0x88, 0x8F, 0x13, 0x8E,  // .R.(....
                /* 09B8 */  0x79, 0x36, 0x41, 0x9F, 0x0A, 0x7C, 0x3F, 0x38,  // y6A..|?8
                /* 09C0 */  0x09, 0x6C, 0xA8, 0xF3, 0x04, 0x50, 0x19, 0x07,  // .l...P..
                /* 09C8 */  0xFE, 0xE8, 0x04, 0x57, 0xD8, 0xC9, 0x04, 0x64,  // ...W...d
                /* 09D0 */  0x27, 0x72, 0x60, 0x6E, 0xE2, 0x1C, 0x01, 0x94,  // 'r`n....
                /* 09D8 */  0xFE, 0xFF, 0x27, 0x72, 0xE0, 0x70, 0x5A, 0xE5,  // ..'r.pZ.
                /* 09E0 */  0xA7, 0x01, 0x7C, 0xA0, 0xA3, 0x2A, 0x3A, 0xD6,  // ..|..*:.
                /* 09E8 */  0x93, 0x41, 0x23, 0x7E, 0x07, 0x08, 0x77, 0xEA,  // .A#~..w.
                /* 09F0 */  0xE7, 0xF9, 0x40, 0xC0, 0x8E, 0xE5, 0x3E, 0x2C,  // ..@...>,
                /* 09F8 */  0xF1, 0xF3, 0x92, 0x4F, 0x11, 0x3E, 0x41, 0x70,  // ...O.>Ap
                /* 0A00 */  0x49, 0x27, 0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3D,  // I'..b@.=
                /* 0A08 */  0x5D, 0x7A, 0x10, 0xF4, 0x7C, 0xC3, 0x8F, 0xC5,  // ]z..|...
                /* 0A10 */  0xBE, 0xB6, 0x1C, 0xC5, 0x23, 0x51, 0x82, 0xF9,  // ....#Q..
                /* 0A18 */  0x0E, 0x01, 0xF4, 0xB6, 0x04, 0x4F, 0xDE, 0x6D,  // .....O.m
                /* 0A20 */  0x09, 0x44, 0x18, 0x77, 0x72, 0x16, 0x0C, 0xE1,  // .D.wr...
                /* 0A28 */  0x28, 0x7D, 0x80, 0x80, 0x31, 0xC0, 0xC7, 0x84,  // (}..1...
                /* 0A30 */  0x62, 0xDF, 0x37, 0xF4, 0xBE, 0x04, 0xF3, 0x8A,  // b.7.....
                /* 0A38 */  0x09, 0xAE, 0xF3, 0x12, 0x30, 0x9E, 0x89, 0xFF,  // ....0...
                /* 0A40 */  0xFF, 0x3E, 0xCF, 0x21, 0xE4, 0x02, 0xC0, 0x4F,  // .>.!...O
                /* 0A48 */  0xE5, 0x60, 0x39, 0x36, 0x80, 0x67, 0x1C, 0xEC,  // .`96.g..
                /* 0A50 */  0x0A, 0x80, 0x3F, 0x32, 0xC1, 0x3E, 0x35, 0xE2,  // ..?2.>5.
                /* 0A58 */  0x8E, 0x4C, 0x60, 0x98, 0x08, 0x3B, 0xE7, 0x1C,  // .L`..;..
                /* 0A60 */  0x08, 0xF6, 0x60, 0x02, 0xBC, 0x55, 0x1C, 0x4C,  // ..`..U.L
                /* 0A68 */  0x00, 0x2D, 0xC3, 0x0D, 0x72, 0x3E, 0x8F, 0xE4,  // .-..r>..
                /* 0A70 */  0xC6, 0x79, 0xC3, 0xF3, 0x89, 0x84, 0x9D, 0xC4,  // .y......
                /* 0A78 */  0xD9, 0xFF, 0xFF, 0x60, 0xC2, 0x25, 0x41, 0x48,  // ...`.%AH
                /* 0A80 */  0xFE, 0x61, 0x09, 0x89, 0x8D, 0x9D, 0xFE, 0x39,  // .a.....9
                /* 0A88 */  0xBC, 0xB9, 0x32, 0x82, 0x62, 0x8F, 0x4B, 0xA8,  // ..2.b.K.
                /* 0A90 */  0xC3, 0x84, 0x45, 0x9E, 0x26, 0x50, 0xA7, 0x69,  // ..E.&P.i
                /* 0A98 */  0x9F, 0x90, 0xC9, 0x69, 0x82, 0x46, 0x3E, 0x4D,  // ...i.F>M
                /* 0AA0 */  0xA0, 0x87, 0xE6, 0x89, 0x9D, 0x06, 0x6E, 0xDC,  // ......n.
                /* 0AA8 */  0xA7, 0xC1, 0x6F, 0x87, 0xFC, 0xC0, 0x04, 0x7C,  // ..o....|
                /* 0AB0 */  0x0F, 0x0F, 0xF8, 0xD3, 0x04, 0xEC, 0xF3, 0x0D,  // ........
                /* 0AB8 */  0x1B, 0x74, 0xC8, 0x77, 0x87, 0x17, 0x59, 0x1F,  // .t.w..Y.
                /* 0AC0 */  0x26, 0x80, 0xF9, 0xC8, 0x7D, 0x98, 0x00, 0xFF,  // &...}...
                /* 0AC8 */  0xFF, 0xFF, 0xD0, 0x04, 0x5C, 0x15, 0xDA, 0xF4,  // ....\...
                /* 0AD0 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
                /* 0AD8 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0xA4,  // 4...Rc..
                /* 0AE0 */  0x9D, 0x54, 0xBD, 0x54, 0x8D, 0xD5, 0x91, 0x9E,  // .T.T....
                /* 0AE8 */  0x0B, 0x02, 0x71, 0xD4, 0x05, 0x0B, 0xC4, 0xD1,  // ..q.....
                /* 0AF0 */  0x9F, 0x40, 0x02, 0xB1, 0xB8, 0x57, 0x88, 0x40,  // .@...W.@
                /* 0AF8 */  0x2C, 0xF5, 0x05, 0x21, 0x10, 0xCB, 0xD4, 0x01,  // ,..!....
                /* 0B00 */  0xC2, 0x82, 0xBC, 0xEF, 0x05, 0xE2, 0x60, 0x52,  // ......`R
                /* 0B08 */  0x06, 0x40, 0xAD, 0x80, 0xB0, 0x78, 0xCB, 0x12,  // .@...x..
                /* 0B10 */  0x88, 0x23, 0x9A, 0x39, 0x01, 0x50, 0x37, 0x20,  // .#.9.P7 
                /* 0B18 */  0x4C, 0xA0, 0x1E, 0x10, 0x26, 0xDC, 0x10, 0x08,  // L...&...
                /* 0B20 */  0x8B, 0xA3, 0x08, 0x84, 0x09, 0xB6, 0x04, 0xC2,  // ........
                /* 0B28 */  0xE2, 0x82, 0x50, 0xC1, 0x9E, 0x8E, 0xFD, 0x4C,  // ..P....L
                /* 0B30 */  0x3E, 0x88, 0x80, 0x1C, 0xDA, 0x14, 0x10, 0x93,  // >.......
                /* 0B38 */  0xA0, 0x0A, 0x88, 0x25, 0x78, 0x0C, 0x08, 0xC8,  // ...%x...
                /* 0B40 */  0x71, 0x40, 0x04, 0xE4, 0x50, 0xB6, 0x80, 0x58,  // q@..P..X
                /* 0B48 */  0x44, 0x10, 0x01, 0x59, 0xCF, 0x1B, 0x4E, 0x40,  // D..Y..N@
                /* 0B50 */  0x16, 0x07, 0x22, 0x20, 0x8B, 0x36, 0x06, 0xC4,  // .." .6..
                /* 0B58 */  0x22, 0x80, 0x08, 0xC8, 0xC9, 0x5E, 0x70, 0x81,  // "....^p.
                /* 0B60 */  0x48, 0x4C, 0x10, 0x01, 0x39, 0xEC, 0x8A, 0x05,  // HL..9...
                /* 0B68 */  0xE4, 0xE8, 0x20, 0x02, 0xB2, 0x4E, 0x6F, 0x40,  // .. ..No@
                /* 0B70 */  0x4C, 0x34, 0x88, 0x80, 0x2C, 0xFE, 0xB1, 0x21,  // L4..,..!
                /* 0B78 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0x3E, 0x28,  //  G....>(
                /* 0B80 */  0x02, 0x91, 0xB8, 0x20, 0x02, 0xB2, 0x46, 0x7B,  // ... ..F{
                /* 0B88 */  0x40, 0x4C, 0x30, 0x88, 0x80, 0x2C, 0xFB, 0x07,  // @L0..,..
                /* 0B90 */  0x25, 0x20, 0x87, 0x00, 0xD1, 0x00, 0xC9, 0xEB,  // % ......
                /* 0B98 */  0x40, 0x03, 0x24, 0xBF, 0x89, 0x40, 0x44, 0xE2,  // @.$..@D.
                /* 0BA0 */  0xAB, 0x22, 0x10, 0xD1, 0x0B, 0x22, 0x20, 0xFF,  // ."..." .
                /* 0BA8 */  0xFF, 0xA5, 0xFF, 0x38, 0x04, 0xE4, 0x20, 0x20,  // ...8..  
                /* 0BB0 */  0x02, 0x26, 0x1A, 0x81, 0xE9, 0x0B, 0x21, 0x10,  // .&....!.
                /* 0BB8 */  0xF9, 0xFF, 0x03                                 // ...
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    If ((((Arg1 != 0x01) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, 0x00, WIID)
                    }

                    If ((Arg1 == 0x01))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 (WIID))
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        CreateDWordField (Arg2, 0x04, IVAL)
                        Return (AM04 (WIID, IVAL))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (WIID))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 ())
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        AM07 (Arg2)
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        AM08 (WIID)
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    ElseIf ((Arg1 == 0x0A))
                    {
                        Return (AM10 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x0B))
                    {
                        Return (AM11 ())
                    }
                }
            }
        }
    }

    OperationRegion (EXTM, SystemMemory, 0x000FF830, 0x12)
    Field (EXTM, WordAcc, NoLock, Preserve)
    {
        ROM1,   16, 
        RMS1,   16, 
        ROM2,   16, 
        RMS2,   16, 
        ROM3,   16, 
        RMS3,   16, 
        AMEM,   32, 
        AINF,   8
    }

    OperationRegion (AWYM, SystemMemory, 0x000FFFEA, 0x01)
    Field (AWYM, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
            ,   1, 
        AWMD,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x01)
    }

    OperationRegion (\P01, SystemIO, 0x4001, 0x01)
    Field (\P01, ByteAcc, NoLock, Preserve)
    {
        P1,     8
    }

    OperationRegion (\PR20, SystemIO, 0x4020, 0x04)
    Field (\PR20, DWordAcc, NoLock, Preserve)
    {
        P20,    32
    }

    Name (OSFX, 0x01)
    Name (LINX, 0x00)
    Name (AMAC, 0x00)
    Name (OSFL, 0x01)
    Method (STRC, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    OperationRegion (INFO, SystemMemory, 0x000FF840, 0x01)
    Field (INFO, ByteAcc, NoLock, Preserve)
    {
        KBDI,   1, 
        RTCW,   1, 
        PS2F,   1, 
        IRFL,   2, 
        DISE,   1, 
        SSHU,   1
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        If ((Arg0 == 0x01)) {}
        If ((Arg0 == 0x05))
        {
            ICMS = 0xAA
            Local1 = DCMS /* \DCMS */
            Local1 &= ~0x02
            ICMS = 0xAA
            DCMS = Local1
        }

        SPTS (Arg0)
        APTS (Arg0)
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG1 = 0xFF
        If ((Arg0 == 0x04))
        {
            If ((OSFL == 0x02))
            {
                SMIP = 0x57
            }

            If ((OSFL == 0x01))
            {
                SMIP = 0x56
            }

            If ((OSFL == 0x00))
            {
                If ((OSFX == 0x04))
                {
                    SMIP = 0x59
                }
                ElseIf ((OSFX == 0x03))
                {
                    SMIP = 0x59
                }
                Else
                {
                    SMIP = 0x58
                }
            }

            If ((OSFX == 0x03))
            {
                SMIP = 0x59
            }

            If ((OSFX == 0x04))
            {
                SMIP = 0x59
            }
        }

        SWAK (Arg0)
        AWAK (Arg0)
        If ((OSFL == 0x01))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
        Else
        {
            If ((Arg0 == 0x01))
            {
                Local0 = (P1 & 0x04)
                If ((Local0 == 0x00))
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }
            }

            If ((Arg0 == 0x03))
            {
                If ((RTCW == Zero))
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (\_SI)
    {
    }

    Scope (\_GPE)
    {
        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P2P, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PCE2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE3, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE6, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE7, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCE9, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCEA, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCEB, 0x02) // Device Wake
            Notify (\_SB.PCI0.PCEC, 0x02) // Device Wake
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PS2K, 0x02) // Device Wake
            Notify (\_SB.PCI0.PS2M, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
        }

        Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
        }

        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
        }

        Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
        }
    }

    Scope (\_SB)
    {
        Device (\AWY)
        {
            Name (_HID, "AWY0001")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (AWMD)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
        }

        Method (SMOD, 1, NotSerialized)
        {
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00)  // _ADR: Address
            Scope (\)
            {
                OperationRegion (\SCPP, SystemIO, 0xB0, 0x01)
                Field (\SCPP, ByteAcc, NoLock, Preserve)
                {
                    SMIP,   8
                }
            }

            Method (\_SB.PCI0._INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (STRC (\_OS, "Microsoft Windows")) {}
                ElseIf (STRC (\_OS, "Microsoft Windows NT"))
                {
                    If (CondRefOf (\_OSI, Local0))
                    {
                        Local2 = 0x00
                        If (\_OSI ("Windows 2001"))
                        {
                            OSFL = 0x00
                            Local1 = 0x59
                            OSFX = 0x03
                            Local2 = 0x01
                        }

                        If (\_OSI ("Windows 2006")) {}
                        If (\_OSI ("Windows 2009")) {}
                        If ((Local2 != 0x00))
                        {
                            SMIP = Local1
                        }
                    }
                    Else
                    {
                        SMIP = 0x58
                        OSFL = 0x00
                    }
                }
                Else
                {
                    If (CondRefOf (\_OSI, Local0))
                    {
                        If (\_OSI ("Linux"))
                        {
                            LINX = 0x01
                        }

                        If (\_OSI ("Darwin"))
                        {
                            AMAC = 0x01
                        }
                    }

                    OSFL = 0x02
                }

                OSTY = OSFX /* \OSFX */
                If ((OSFX == 0x00))
                {
                    OSTY = 0x04
                }

                If ((OSFX == 0x03))
                {
                    OSTY = 0x05
                }

                If ((OSFX == 0x04))
                {
                    OSTY = 0x06
                }
            }

            Device (SYSR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0010,             // Range Minimum
                        0x0010,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0022,             // Range Minimum
                        0x0022,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x0044,             // Range Minimum
                        0x0044,             // Range Maximum
                        0x01,               // Alignment
                        0x1C,               // Length
                        )
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0065,             // Range Minimum
                        0x0065,             // Range Maximum
                        0x01,               // Alignment
                        0x0B,               // Length
                        )
                    IO (Decode16,
                        0x0074,             // Range Minimum
                        0x0074,             // Range Maximum
                        0x01,               // Alignment
                        0x0C,               // Length
                        )
                    IO (Decode16,
                        0x0091,             // Range Minimum
                        0x0091,             // Range Maximum
                        0x01,               // Alignment
                        0x03,               // Length
                        )
                    IO (Decode16,
                        0x00A2,             // Range Minimum
                        0x00A2,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x00E0,             // Range Minimum
                        0x00E0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x04D0,             // Range Minimum
                        0x04D0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0220,             // Range Minimum
                        0x0220,             // Range Maximum
                        0x01,               // Alignment
                        0x06,               // Length
                        )
                    IO (Decode16,
                        0x0290,             // Range Minimum
                        0x0290,             // Range Maximum
                        0x01,               // Alignment
                        0x05,               // Length
                        )
                })
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                MMIO,   32
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If ((OSFL == 0x02))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0CF8,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0xFFFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0xF300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00100000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFFF00000,         // Length
                        ,, _Y00, AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._MIN, TCMM)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._LEN, TOMM)  // _LEN: Length
                TCMM = (AMEM + 0x00010000)
                TCMM += 0x00100000
                TCMM += 0x00100000
                TCMM += SMEM /* \_SB_.SMEM */
                TOMM = (0xFEC00000 - TCMM) /* \_SB_.PCI0._CRS.TCMM */
                Return (BUF0) /* \_SB_.PCI0._CRS.BUF0 */
            }

            Name (PICM, Package (0x40)
            {
                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x00, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x01, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    \_SB.PCI0.LPC0.LNKB, 
                    0x00
                }
            })
            Name (APIC, Package (0x40)
            {
                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x02, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x03, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000CFFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x00, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Device (SMB0)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (USB0)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, 0x00, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1B, 
                    0x04
                })
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                OperationRegion (SACS, PCI_Config, 0x00, 0x40)
                Field (SACS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x24), 
                    STB5,   32
                }

                Name (SPTM, Buffer (0x14)
                {
                    /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                    /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                })
                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Name (PRIS, 0x00)
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x120), 
                                ,   7, 
                            PMBY,   1, 
                            Offset (0x128), 
                            PMS0,   4, 
                            Offset (0x129), 
                            PMS1,   4, 
                            Offset (0x220), 
                                ,   7, 
                            PSBY,   1, 
                            Offset (0x228), 
                            PSS0,   4, 
                            Offset (0x229), 
                            PSS1,   4, 
                            Offset (0x2A0), 
                                ,   7
                        }

                        If (((OSTY == 0x06) || (OSTY == 0x04)))
                        {
                            If (PMS1)
                            {
                                Local0 = 0x32
                                While (((PMBY == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (PSS1)
                            {
                                Local0 = 0x32
                                While (((PSBY == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        PRIS = 0x00
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PRIS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4
                            }

                            If (~(PMS1 == 0x00))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1
                            }

                            Local0 = 0x32
                            While (((PMBY == 0x01) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4
                            }

                            If (~(PSS1 == 0x00))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1
                            }

                            Local0 = 0x32
                            While (((PSBY == 0x01) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Name (SECS, 0x00)
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x1A0), 
                                ,   7, 
                            SMBY,   1, 
                            Offset (0x1A8), 
                            SMS0,   4, 
                            Offset (0x1A9), 
                            SMS1,   4, 
                            Offset (0x2A0), 
                                ,   7, 
                            SSBY,   1, 
                            Offset (0x2A8), 
                            SSS0,   4, 
                            Offset (0x2A9), 
                            SSS1,   4, 
                            Offset (0x2AC)
                        }

                        If (((OSTY == 0x06) || (OSTY == 0x04)))
                        {
                            If (SMS1)
                            {
                                Local0 = 0x32
                                While (((SMBY == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (SSS1)
                            {
                                Local0 = 0x32
                                While (((SSBY == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        SECS = 0x00
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SECS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4
                            }

                            If (~(SMS1 == 0x00))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1
                            }

                            Local0 = 0x32
                            While (((SMBY == 0x01) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4
                            }

                            If (~(SSS1 == 0x00))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1
                            }

                            Local0 = 0x32
                            While (((SSBY == 0x01) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = 0x00
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                        }
                    }
                }
            }

            Device (PEX0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0F, 
                    0x05
                })
                Name (PIC0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }
                })
                Name (API0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC0) /* \_SB_.PCI0.PEX0.PIC0 */
                    }
                    Else
                    {
                        Return (API0) /* \_SB_.PCI0.PEX0.API0 */
                    }
                }
            }

            Device (PEX1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x10, 
                    0x05
                })
                Name (PIC1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }
                })
                Name (API1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC1) /* \_SB_.PCI0.PEX1.PIC1 */
                    }
                    Else
                    {
                        Return (API1) /* \_SB_.PCI0.PEX1.API1 */
                    }
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x11, 
                    0x05
                })
                Name (PIC2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }
                })
                Name (API2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC2) /* \_SB_.PCI0.PEX2.PIC2 */
                    }
                    Else
                    {
                        Return (API2) /* \_SB_.PCI0.PEX2.API2 */
                    }
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x12, 
                    0x05
                })
                Name (PIC3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }
                })
                Name (API3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC3) /* \_SB_.PCI0.PEX3.PIC3 */
                    }
                    Else
                    {
                        Return (API3) /* \_SB_.PCI0.PEX3.API3 */
                    }
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PMIO)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x4100,             // Range Minimum
                                0x4100,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x0228,             // Range Minimum
                                0x0228,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x040B,             // Range Minimum
                                0x040B,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x04D6,             // Range Minimum
                                0x04D6,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0C00,             // Range Minimum
                                0x0C00,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0C14,             // Range Minimum
                                0x0C14,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0C50,             // Range Minimum
                                0x0C50,             // Range Maximum
                                0x01,               // Alignment
                                0x03,               // Length
                                )
                            IO (Decode16,
                                0x0C6C,             // Range Minimum
                                0x0C6C,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0C6F,             // Range Minimum
                                0x0C6F,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0CD0,             // Range Minimum
                                0x0CD0,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0CD2,             // Range Minimum
                                0x0CD2,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0CD4,             // Range Minimum
                                0x0CD4,             // Range Maximum
                                0x01,               // Alignment
                                0x0C,               // Length
                                )
                            IO (Decode16,
                                0x4000,             // Range Minimum
                                0x4000,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                            IO (Decode16,
                                0x4210,             // Range Minimum
                                0x4210,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0B00,             // Range Minimum
                                0x0B00,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IO (Decode16,
                                0x0B10,             // Range Minimum
                                0x0B10,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IO (Decode16,
                                0x0B20,             // Range Minimum
                                0x0B20,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                                0x00000000,         // Granularity
                                0xE0000000,         // Range Minimum
                                0xE0000000,         // Range Maximum
                                0x00000000,         // Translation Offset
                                0x00000000,         // Length
                                ,, _Y01, AddressRangeMemory, TypeStatic)
                            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                                0x00000000,         // Granularity
                                0xFEE00400,         // Range Minimum
                                0xFEE00FFF,         // Range Maximum
                                0x00000000,         // Translation Offset
                                0x00000BFF,         // Length
                                ,, , AddressRangeMemory, TypeStatic)
                        })
                        CreateDWordField (BUF0, \_SB.PCI0.LPC0.PMIO._CRS._Y01._MIN, BARX)  // _MIN: Minimum Base Address
                        CreateDWordField (BUF0, \_SB.PCI0.LPC0.PMIO._CRS._Y01._LEN, GALN)  // _LEN: Length
                        CreateDWordField (BUF0, \_SB.PCI0.LPC0.PMIO._CRS._Y01._MAX, GAMX)  // _MAX: Maximum Base Address
                        GALN = 0x1000
                        Local0 = \_SB.PCI0.MMIO
                        BARX = (Local0 & 0xFFFFFFF0)
                        GAMX = (Local0 + GALN) /* \_SB_.PCI0.LPC0.PMIO._CRS.GALN */
                        GAMX -= 0x01
                        Return (BUF0) /* \_SB_.PCI0.LPC0.PMIO._CRS.BUF0 */
                    }
                }

                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11}
                })
                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x10), 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x15), 
                    GEC,    8, 
                    Offset (0x30), 
                    USB1,   8, 
                    USB2,   8, 
                    USB3,   8, 
                    USB4,   8, 
                    USB5,   8, 
                    USB6,   8, 
                    USB7,   8, 
                    Offset (0x40), 
                    IDE,    8, 
                    SATA,   8, 
                    Offset (0x50), 
                    GPP0,   8, 
                    GPP1,   8, 
                    GPP2,   8, 
                    GPP3,   8
                }

                Method (DSPI, 0, NotSerialized)
                {
                    PIRA = 0x00
                    PIRB = 0x00
                    PIRC = 0x00
                    PIRD = 0x00
                    PIRE = 0x00
                    PIRF = 0x00
                    PIRG = 0x00
                    PIRH = 0x00
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRA = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRA = Local0
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRB = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRB = Local0
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRC = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRC = Local0
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRD = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRD = Local0
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNK0)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNK1)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x00
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMA1)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0094,             // Range Minimum
                            0x0094,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (ATT5, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (ATT6, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT6) /* \_SB_.PCI0.LPC0.TMR_.ATT6 */
                            }
                            Else
                            {
                                Return (ATT5) /* \_SB_.PCI0.LPC0.TMR_.ATT5 */
                            }
                        }
                        Else
                        {
                            Return (ATT5) /* \_SB_.PCI0.LPC0.TMR_.ATT5 */
                        }
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (ATT3, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (ATT4, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT3) /* \_SB_.PCI0.LPC0.HPET.ATT3 */
                            }
                            Else
                            {
                                Return (ATT4) /* \_SB_.PCI0.LPC0.HPET.ATT4 */
                            }
                        }
                        Else
                        {
                            Return (ATT4) /* \_SB_.PCI0.LPC0.HPET.ATT4 */
                        }
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (ATT0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (ATT1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (ATT2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (ATT3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT1) /* \_SB_.PCI0.LPC0.RTC_.ATT1 */
                            }
                            Else
                            {
                                Return (ATT0) /* \_SB_.PCI0.LPC0.RTC_.ATT0 */
                            }
                        }
                        Else
                        {
                            If ((AMAC == 0x01))
                            {
                                Return (ATT2) /* \_SB_.PCI0.LPC0.RTC_.ATT2 */
                            }

                            Return (ATT0) /* \_SB_.PCI0.LPC0.RTC_.ATT0 */
                        }
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x04, 
                        0x05
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKE, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKF, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNK0, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNK1, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x00, 
                        0x00, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x01, 
                        0x00, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        0x00, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        0x00, 
                        0x17
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.P2P_.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.P2P_.APIC */
                    }
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    0x00
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    0x00
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    0x00
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + 0x01) + (Local1 + 0x01)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, 0x00, PIT1)
                    CreateByteField (Arg0, 0x01, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, 0x00, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & 0x01))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & 0x01))
                    {
                        FLAG |= 0x01
                        DMA0 = DerefOf (^UDMT [(UDMX & 0x0F)])
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (^UDMT [(UDMX >> 0x04)])
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, 0x00, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, 0x00, PIT1)
                    CreateByteField (BUF, 0x01, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (^PIOT, MLE, PIO0, MTR, 0x00, 0x00)
                    Local0 %= 0x05
                    Local1 = Match (^PIOT, MLE, PIO1, MTR, 0x00, 0x00)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (^PITR [Local0])
                    PIT1 = DerefOf (^PITR [Local1])
                    If ((FLAG & 0x01))
                    {
                        Local0 = Match (^UDMT, MLE, DMA0, MTR, 0x00, 0x00)
                        Local0 %= 0x07
                        UDMX |= Local0
                        UDCX |= 0x01
                    }
                    ElseIf ((DMA0 != 0xFFFFFFFF))
                    {
                        Local0 = Match (^MDMT, MLE, DMA0, MTR, 0x00, 0x00)
                        MDT0 = DerefOf (^MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (^UDMT, MLE, DMA1, MTR, 0x00, 0x00)
                        Local0 %= 0x07
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != 0xFFFFFFFF))
                    {
                        Local0 = Match (^MDMT, MLE, DMA1, MTR, 0x00, 0x00)
                        MDT1 = DerefOf (^MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, 0x00, MDT1)
                    CreateByteField (Arg1, 0x01, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDE_.GTF_.MDT0 */
                        Local2 = (UDCX & 0x01)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDE_.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF               // ......
                    })
                    CreateByteField (BUF, 0x01, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CMDA = Arg0
                    CMDB = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (^MDMT, MLE, GETT (Local1), MTR, 0x00, 0x00)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, 0x00, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = ^^PPIT /* \_SB_.PCI0.IDE_.PPIT */
                        VMDT = ^^PMDT /* \_SB_.PCI0.IDE_.PMDT */
                        VPIC = ^^PPIC /* \_SB_.PCI0.IDE_.PPIC */
                        VUDC = ^^PUDC /* \_SB_.PCI0.IDE_.PUDC */
                        VUDM = ^^PUDM /* \_SB_.PCI0.IDE_.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, 0x00, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        ^^PPIT = VPIT /* \_SB_.PCI0.IDE_.PRID._STM.VPIT */
                        ^^PMDT = VMDT /* \_SB_.PCI0.IDE_.PRID._STM.VMDT */
                        ^^PPIM = VPIM /* \_SB_.PCI0.IDE_.PRID._STM.VPIM */
                        ^^PUDC = VUDC /* \_SB_.PCI0.IDE_.PRID._STM.VUDC */
                        ^^PUDM = VUDM /* \_SB_.PCI0.IDE_.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, 0x00, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = ^^^PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = ^^^PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = ^^^PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = ^^^PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, 0x00, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = ^^^PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = ^^^PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = ^^^PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = ^^^PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, 0x00, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = ^^SPIT /* \_SB_.PCI0.IDE_.SPIT */
                        VMDT = ^^SMDT /* \_SB_.PCI0.IDE_.SMDT */
                        VPIC = ^^SPIC /* \_SB_.PCI0.IDE_.SPIC */
                        VUDC = ^^SUDC /* \_SB_.PCI0.IDE_.SUDC */
                        VUDM = ^^SUDM /* \_SB_.PCI0.IDE_.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, 0x00, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        ^^SPIT = VPIT /* \_SB_.PCI0.IDE_.SECD._STM.VPIT */
                        ^^SMDT = VMDT /* \_SB_.PCI0.IDE_.SECD._STM.VMDT */
                        ^^SPIM = VPIM /* \_SB_.PCI0.IDE_.SECD._STM.VPIM */
                        ^^SUDC = VUDC /* \_SB_.PCI0.IDE_.SECD._STM.VUDC */
                        ^^SUDM = VUDM /* \_SB_.PCI0.IDE_.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, 0x00, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = ^^^SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = ^^^SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = ^^^SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = ^^^SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, 0x00, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = ^^^SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = ^^^SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = ^^^SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = ^^^SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (PCE2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE2.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE2.APIC */
                    }
                }
            }

            Device (PCE3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE3.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE3.APIC */
                    }
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE4.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE4.APIC */
                    }
                }
            }

            Device (PCE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE5.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE5.APIC */
                    }
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE6.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE6.APIC */
                    }
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE7.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE7.APIC */
                    }
                }
            }

            Device (PCE9)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCE9.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCE9.APIC */
                    }
                }
            }

            Device (PCEA)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCEA.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCEA.APIC */
                    }
                }
            }

            Device (PCEB)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCEB.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCEB.APIC */
                    }
                }
            }

            Device (PCEC)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x18, 
                        0x04
                    })
                }

                Name (PICM, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        0x00
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.PCEC.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.PCEC.APIC */
                    }
                }
            }

            Scope (\)
            {
                Method (DISD, 1, NotSerialized)
                {
                }

                Method (CKIO, 2, NotSerialized)
                {
                }

                Method (SLDM, 2, NotSerialized)
                {
                }
            }

            Scope (\)
            {
                OperationRegion (WIN1, SystemIO, 0x2E, 0x02)
                Field (WIN1, ByteAcc, NoLock, Preserve)
                {
                    INDP,   8, 
                    DATP,   8
                }

                OperationRegion (GPIO, SystemIO, 0x0800, 0x05)
                Field (GPIO, ByteAcc, NoLock, Preserve)
                {
                    GO01,   8, 
                    GO02,   8, 
                    GO03,   8, 
                    GO04,   8, 
                    GO05,   8
                }

                IndexField (INDP, DATP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    CFG,    8, 
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x20), 
                    IDHI,   8, 
                    IDLO,   8, 
                    POWC,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IO2H,   8, 
                    IO2L,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x72), 
                    INT1,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xC0), 
                    GP40,   8, 
                    Offset (0xF0), 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8
                }

                Method (ENFG, 0, NotSerialized)
                {
                    INDP = 0x87
                    INDP = 0x01
                    INDP = 0x55
                    INDP = 0x55
                }

                Method (EXFG, 0, NotSerialized)
                {
                    CFG = 0x02
                }

                Method (GSRG, 1, NotSerialized)
                {
                    INDP = Arg0
                    Return (DATP) /* \DATP */
                }

                Method (SSRG, 2, NotSerialized)
                {
                    INDP = Arg0
                    DATP = Arg1
                }
            }

            Device (FDC0)
            {
                Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = Zero
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x00
                    ACTR = Zero
                    SLDM (DMCH, 0x04)
                    EXFG ()
                    DISD (0x03)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            _Y02)
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    })
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y02._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF0, 0x03, IOHI)
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y02._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF0, 0x05, IORH)
                    ENFG ()
                    EXFG ()
                    Return (BUF0) /* \_SB_.PCI0.FDC0._CRS.BUF0 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x19, IRQW)
                    CreateByteField (Arg0, 0x1C, DMAV)
                    ENFG ()
                    LDN = Zero
                    ACTR = One
                    SLDM (DMCH, DMCH)
                    CKIO (IOAD, 0x03)
                    EXFG ()
                }
            }

            Device (UAR1)
            {
                Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x01
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }

                    EXFG ()
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x01
                    ACTR = Zero
                    EXFG ()
                    DISD (0x00)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y03)
                        IRQNoFlags (_Y04)
                            {}
                    })
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y03._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF1, 0x03, IOHI)
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y03._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF1, 0x05, IORH)
                    CreateWordField (BUF1, \_SB.PCI0.UAR1._CRS._Y04._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x01
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF1) /* \_SB_.PCI0.UAR1._CRS.BUF1 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.UAR1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.UAR1._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x00)
                }
            }

            OperationRegion (KBCT, SystemIO, 0x60, 0x05)
            Field (KBCT, ByteAcc, NoLock, Preserve)
            {
                P060,   8, 
                Offset (0x04), 
                P064,   8
            }

            Device (PS2M)
            {
                Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PS2F == 0x00))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    If ((KBDI == 0x01))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }
                        Else
                        {
                            Return (BUF2) /* \_SB_.PCI0.PS2M._CRS.BUF2 */
                        }
                    }
                    Else
                    {
                        Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                    }
                }
            }

            Device (PS2K)
            {
                Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x01))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                })
            }

            Device (PSMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x00))
                    {
                        Return (0x00)
                    }

                    If ((PS2F == 0x00))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (0x0F)
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (0x0F)
                        }

                        Return (0x00)
                    }

                    Return (0x00)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
            }

            Scope (\)
            {
                Method (SLD1, 1, NotSerialized)
                {
                    ENFG ()
                    LDN = 0x07
                    SSRG (0xF8, 0x10)
                    SSRG (0xF9, 0x01)
                    Local0 = (0x20 & 0x0F)
                    Local0 = (0x01 << Local0)
                    Local1 = (0x20 & 0xF0)
                    Local1 >>= 0x04
                    Local1 += 0xAF
                    Local2 = GSRG (Local1)
                    Local2 |= Local0
                    Local0 = ~Local0
                    If ((Arg0 < 0x08))
                    {
                        SSRG (0xF9, Arg0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        SSRG (0xF8, 0x00)
                        Local2 &= Local0
                        SSRG (Local1, Local2)
                    }

                    If ((Arg0 > 0x08))
                    {
                        SSRG (0xF8, 0x00)
                        SSRG (Local1, Local2)
                    }

                    EXFG ()
                }
            }

            Method (\_SB.PCI0.PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x03, 
                    0x05
                })
            }

            Method (\_SB.PCI0.PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x03, 
                    0x05
                })
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x04, 
                    0x05
                })
            }

            Device (AGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (PICM, Package (0x06)
                {
                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        \_SB.PCI0.LPC0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        \_SB.PCI0.LPC0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x00, 
                        \_SB.PCI0.LPC0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x01, 
                        \_SB.PCI0.LPC0.LNKD, 
                        0x00
                    }
                })
                Name (APIC, Package (0x06)
                {
                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.AGP_.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.AGP_.APIC */
                    }
                }
            }
        }

        OperationRegion (SXTM, SystemMemory, 0x000FFEA1, 0x04)
        Field (SXTM, WordAcc, NoLock, Preserve)
        {
            SMEM,   32
        }

        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x000F0000,         // Address Base
                        0x00004000,         // Address Length
                        _Y06)
                    Memory32Fixed (ReadWrite,
                        0x000F4000,         // Address Base
                        0x00004000,         // Address Length
                        _Y07)
                    Memory32Fixed (ReadWrite,
                        0x000F8000,         // Address Base
                        0x00004000,         // Address Length
                        _Y08)
                    Memory32Fixed (ReadWrite,
                        0x000FC000,         // Address Base
                        0x00004000,         // Address Length
                        _Y09)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0xFFFF0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0A)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0B)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0C)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0D)
                    Memory32Fixed (ReadWrite,
                        0xFEC00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF80000,         // Address Base
                        0x00070000,         // Address Length
                        )
                })
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y05._BAS, ACMM)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y06._BAS, RMA1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y06._LEN, RSS1)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y07._BAS, RMA2)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y07._LEN, RSS2)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y08._BAS, RMA3)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y08._LEN, RSS3)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y09._BAS, RMA4)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y09._LEN, RSS4)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0A._LEN, EXTM)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0B._BAS, USMA)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0B._LEN, USMS)  // _LEN: Length
                USMA = (AMEM + 0x00010000)
                USMS += 0x00100000
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0C._BAS, TSMA)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0C._LEN, TSMS)  // _LEN: Length
                TSMA = (AMEM + 0x00010000)
                TSMA += 0x00100000
                TSMS += 0x00100000
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0D._BAS, SXT1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0D._LEN, SXT2)  // _LEN: Length
                If ((SMEM != Zero))
                {
                    SXT1 = (AMEM + 0x00010000)
                    SXT1 += 0x00100000
                    SXT1 += 0x00100000
                }
                Else
                {
                    SXT1 = Zero
                }

                SXT2 = SMEM /* \_SB_.SMEM */
                EXTM = (AMEM - 0x00100000)
                If ((ROM1 != Zero))
                {
                    RMA2 = RMA1 /* \_SB_.MEM_._CRS.RMA1 */
                    Local0 = (ROM1 << 0x08)
                    RMA1 = Local0
                    Local0 = (RMS1 << 0x08)
                    RSS1 = Local0
                    RSS2 = 0x8000
                }

                If ((ROM2 != Zero))
                {
                    RMA3 = RMA2 /* \_SB_.MEM_._CRS.RMA2 */
                    Local0 = (ROM2 << 0x08)
                    RMA2 = Local0
                    Local0 = (RMS2 << 0x08)
                    RSS2 = Local0
                    RSS3 = 0xC000
                }

                If ((ROM3 != Zero))
                {
                    RMA4 = RMA3 /* \_SB_.MEM_._CRS.RMA3 */
                    Local0 = (ROM3 << 0x08)
                    RMA3 = Local0
                    Local0 = (RMS3 << 0x08)
                    RSS3 = Local0
                    RSS4 = 0x00010000
                }

                ACMM = AMEM /* \AMEM */
                Return (BUF0) /* \_SB_.MEM_._CRS.BUF0 */
            }
        }

        Device (\_SB.PCI0.EXPL)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PCI0.EXPL._CRS.BUF0 */
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DA
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   4]                 FACS Address : AFDF0000
[028h 0040   4]                 DSDT Address : AFDF1100
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A1
[035h 0053   1]           ACPI Disable Value : A0
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00004000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00004004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00004050
[04Ch 0076   4]       PM Timer Block Address : 00004008
[050h 0080   4]           GPE0 Block Address : 00004020
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000001AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 DA 47 42 54 20 20 20  // FACPt.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 DF AF 00 11 DF AF 00 01 09 00  // ................
    0030: B0 00 00 00 A1 A0 00 00 00 40 00 00 00 00 00 00  // .........@......
    0040: 04 40 00 00 00 00 00 00 50 40 00 00 08 40 00 00  // .@......P@...@..
    0050: 20 40 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  @..............
    0060: 65 00 E9 03 00 00 00 00 01 00 0D 00 00 00 00 00  // e...............
    0070: AD 01 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000001
                      S4BIOS Support Present : 1
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 25
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 00000098

[024h 0036   4]            Hardware Block ID : 10B9A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0010
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 25 47 42 54 20 20 20  // HPET8....%GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 98 00 00 00 01 A2 B9 10 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 10 00 00                          // ........


MATS
----
[000h 0000   4]                    Signature : "MATS"    
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E3
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000


**** Unknown ACPI table signature [MATS]


Raw Table Data: Length 52 (0x34)

    0000: 4D 41 54 53 34 00 00 00 01 E3 47 42 54 20 20 20  // MATS4.....GBT   
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 B0 00 00 00 01 00 00 00 B4 96 DF AF  // ................
    0030: EE FF 00 00                                      // ....


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 34
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 34 47 42 54 20 20 20  // MCFG<....4GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036  49] Software Licensing Structure : \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 15 47 42 54 20 20 20  // MSDMU.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0050: FF FF FF FF FF                                   // .....


SSDT
----
DefinitionBlock ("", "SSDT", 1, "PTLTD ", "POWERNOW", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000BB8, 
                0x00005B9C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000051C7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000047F1, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003D13, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x00)  // _PSS: Performance Supported States
        {
            Zero
        })
        Name (XPSS, Package (0x00)
        {
            Zero
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x00)  // _PSS: Performance Supported States
        {
            Zero
        })
        Name (XPSS, Package (0x00)
        {
            Zero
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000006
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000004014, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x4B, 
                One
            }
        })
    }
}



TAMG
----
[000h 0000   4]                    Signature : "TAMG"    
[004h 0004   4]                 Table Length : 00000202
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 45     /* Incorrect checksum, should be 44 */
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBT   B0"
[018h 0024   4]                 Oem Revision : 5455312E
[01Ch 0028   4]              Asl Compiler ID : "BG  "
[020h 0032   4]        Asl Compiler Revision : 53450101


**** Unknown ACPI table signature [TAMG]


Raw Table Data: Length 514 (0x202)

    0000: 54 41 4D 47 02 02 00 00 01 45 47 42 54 20 20 20  // TAMG.....EGBT   
    0010: 47 42 54 20 20 20 42 30 2E 31 55 54 42 47 01 01  // GBT   B0.1UTBG..
    0020: 01 01 45 53 44 54 5D 20 5C 00 00 00 00 00 00 00  // ..ESDT] \.......
    0030: 00 00 14 00 00 00 00 07 00 00 3D 02 2D 02 2E 02  // ..........=.-...
    0040: 20 00 10 00 25 00 04 00 00 00 00 00 07 01 00 00  //  ...%...........
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 01 00  // ................
    0060: 00 7D 00 40 1F 00 00 7E 00 88 00 00 32 00 00 89  // .}.@...~....2...
    0070: 00 8F 00 C0 44 00 00 90 00 FF 00 C0 5D 00 00 00  // ....D.......]...
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 24 45 5A 59 41 43 43 24 60 00 01 C6 00 00  // ..$EZYACC$`.....
    0190: 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 01 00 00 00 DC 80 00 00 00 01 00 00 00 01  // ................
    01B0: 00 00 00 02 00 00 8B 80 00 00 00 01 00 00 00 01  // ................
    01C0: 00 00 00 10 00 00 8C 04 00 00 00 01 00 01 00 00  // ................
    01D0: 00 00 00 20 00 00 8C 08 00 00 00 01 00 01 00 00  // ... ............
    01E0: 00 00 00 40 00 00 8C 10 00 00 00 01 00 01 00 00  // ...@............
    01F0: 00 00 00 80 00 00 8C 20 00 00 00 01 00 01 00 00  // ....... ........
    0200: 00 00                                            // ..


