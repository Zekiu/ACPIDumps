
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000221  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x04  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000F10  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  PCCT  0x0000006E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 06)  SSDT  0x00008CE9  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 07)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 08)  VFCT  0x0000AC84  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 09)  SSDT  0x00003A23  0x02  "AMD   "  "ArticN  "  0x00000001  "INTL"   0x20190509
 10)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 11)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 12)  DSDT  0x000069CC  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20190509
 13)  SSDT  0x00001522  0x02  "AMD   "  "ArticTPX"  0x00000001  "INTL"   0x20190509
 14)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 15)  SSDT  0x00004133  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 16)  SSDT  0x0000147F  0x02  "AMD   "  "ArticC  "  0x00000001  "INTL"   0x20190509
 17)  SSDT  0x00003D7C  0x02  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20190509
 18)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 19)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 20)  WPBT  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "GBT "   0x20181220
 21)  SSDT  0x0000B7C4  0x02  "GBT   "  "GSWApp  "  0x00000001  "INTL"   0x20190509
 22)  SSDT  0x00000788  0x02  "AMD   "  "ArticNOI"  0x00000001  "INTL"   0x20190509
 23)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 24)  SSDT  0x0000068E  0x02  "AMD   "  "ArticDGP"  0x00000001  "INTL"   0x20190509
 25)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 26)  FACS  0x00000040  0x02
 27)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 28)  SSDT  0x000000BF  0x01  "AMD   "  "AmdTable"  0x00001000  "INTL"   0x20190509

Found 28 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : DE
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 01
[06Fh 0111   1]                Local Apic ID : 01
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 03
[077h 0119   1]                Local Apic ID : 03
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 05
[07Fh 0127   1]                Local Apic ID : 05
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 07
[087h 0135   1]                Local Apic ID : 07
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 09
[08Fh 0143   1]                Local Apic ID : 09
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0B
[097h 0151   1]                Local Apic ID : 0B
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0D
[09Fh 0159   1]                Local Apic ID : 0D
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 11
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 12
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 04 DE 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 01 01  // ................
    0070: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0080: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0090: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 11 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 12 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 96
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000B7012018
[030h 0048   4]                Image OffsetX : 0000022B
[034h 0052   4]                Image OffsetY : 000001E2

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 96 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 20 01 B7 00 00 00 00  // ......... ......
    0030: 2B 02 00 00 E2 01 00 00                          // +.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F10
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3856 (0xF10)

    0000: 43 52 41 54 10 0F 00 00 01 E1 41 4D 44 00 00 00  // CRAT......AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 3D 00 00 00 01 00 00 00 00 00 00 00  // ....=...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 0C 00  // .(..............
    0090: 00 00 00 00 00 00 F4 BF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 40  // ...............@
    00C0: 0F 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0140: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0240: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0300: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0480: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0500: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0580: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0640: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0680: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0700: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0750: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    07D0: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0810: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0840: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0850: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0880: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0890: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    08D0: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0900: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0910: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0940: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0950: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0980: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0990: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    09D0: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0A10: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A50: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A90: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0AD0: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0B10: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B50: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B90: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0BD0: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0C10: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C50: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C90: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0CD0: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0D10: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D50: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D90: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0DD0: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0E10: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E50: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E90: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0ED0: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GP13.AZAL, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (CRBI, UnknownObj)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments
    External (GSA1.MWAK, MethodObj)    // 1 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (HMIO, 0x0A45)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xBCBC6000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0xBCBCA000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0xBD07DA98)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x78), 
            ,   20, 
        SI3V,   1, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        Notify (\_SB.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD00, Package (0x14)
        {
            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x14)
        {
            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x21
            }
        })
        Name (PG28, Package (0x00) {})
        Name (AG28, Package (0x00) {})
        Name (PG29, Package (0x00) {})
        Name (AG29, Package (0x00) {})
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG42, Package (0x00) {})
        Name (AG42, Package (0x00) {})
        Name (PG43, Package (0x00) {})
        Name (AG43, Package (0x00) {})
        Name (PG44, Package (0x00) {})
        Name (AG44, Package (0x00) {})
        Name (PG45, Package (0x00) {})
        Name (AG45, Package (0x00) {})
        Name (PG46, Package (0x00) {})
        Name (AG46, Package (0x00) {})
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xC0000000)
            Name (MBL, 0x40000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D014)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D01B)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        Memory32Fixed (ReadWrite,
                            0xFE000000,         // Address Base
                            0x00010000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQNoFlags (_Y1B)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1C)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            LDN = 0x06
                            ACTR = Zero
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        LDN = 0x06
                        ACTR = One
                        LDN = 0x05
                        ACTR = One
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)) {}
                        If ((PMFG & 0x10)) {}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D003)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D007)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D00B)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D00D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D00F)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            SPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y22)
                    IRQNoFlags (_Y23)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y23._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y24)
                    IRQNoFlags (_Y25)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y25._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2A)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2C)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2E,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2A._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2A._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2D._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2D._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y2E._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }

    Name (BDID, 0xFF)
    Scope (_SB.PCI0.GP13.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (\_SB.PCI0.GPP1)
    {
        Device (PTXH)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x04
                })
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x0A, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x5,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x0A, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x5,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x0A, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x6,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x0A, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x6,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x3,
                            PLD_GroupPosition      = 0x3,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x3,
                            PLD_GroupPosition      = 0x3,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x3,
                            PLD_GroupPosition      = 0x9,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (POT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x3,
                            PLD_GroupPosition      = 0x9,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO9)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "RIGHT",
                            PLD_VerticalPosition   = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "VERTICALRECTANGLE",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x1,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "RIGHT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "VERTICALRECTANGLE",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x2,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO11)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "RIGHT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x7,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO12)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "RIGHT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x8,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO13)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                    {
                        ToPLD (
                            PLD_Revision           = 0x2,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x1,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "LEFT",
                            PLD_VerticalPosition   = "LOWER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x1,
                            PLD_GroupPosition      = 0x9,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x1,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0,
                            PLD_VerticalOffset     = 0xFFFF,
                            PLD_HorizontalOffset   = 0xFFFF)

                    })
                }

                Device (PO14)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                }
            }
        }

        Device (PT01)
        {
            Name (_ADR, One)  // _ADR: Address
        }

        Device (PT02)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Device (PT20)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x14, 
                        0x04
                    })
                }
            }

            Device (PT21)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x04
                    })
                }
            }

            Device (PT22)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x04
                    })
                }
            }

            Device (PT23)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x04
                    })
                }

                Device (LAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }
            }

            Device (PT24)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x14, 
                        0x04
                    })
                }
            }

            Device (PT25)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (PT26)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        0x04
                    })
                }
            }

            Device (PT27)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        0x04
                    })
                }
            }

            Device (PT28)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x04
                    })
                }

                Device (LAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }

                Device (COM1)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (COM2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (IPM)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (USB)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            Device (PT29)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        0x04
                    })
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.PT02.PT28.LAN, 0x02) // Device Wake
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.PT02.PT26, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT27, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT29.WLAN, 0x02) // Device Wake
        }

        Method (_L14, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.PT02.PT20, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT24, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.PT02.PT21, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT22, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT23.LAN, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PTXH, 0x02) // Device Wake
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
            })
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x3D)
                {
                    M000 (0x393D)
                    Local0 = M249 (Zero, Zero, Zero, 0x10800054)
                    Local1 = (Local0 | 0x0100)
                    M250 (Zero, Zero, Zero, 0x10800054, Local1)
                    Local1 = M249 (Zero, Zero, Zero, 0x10834904)
                    Local1 |= 0x0101
                    M250 (Zero, Zero, Zero, 0x10834904, Local1)
                    M250 (Zero, Zero, Zero, 0x10800054, Local0)
                    Notify (\_SB.PCI0.GP13.AZAL, 0x02) // Device Wake
                }

            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : BD061000
[028h 0040   4]                 DSDT Address : BCC2C000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 02
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000BCC2C000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 0D 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 10 06 BD 00 C0 C2 BC 00 01 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 02 00 00 00 00 00 00 00 00 00 C0 C2 BC  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 40359493
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 93 94 35 40 00 00 00 00  // FACS@.....5@....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 43
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 43 41 4C 41 53 4B 41  // FIDT.....CALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 38 41 52 4E 52  // ....$FID.x.8ARNR
    0030: 30 30 39 00 16 61 A8 EA D6 35 B1 1B 44 8D 3B 10  // 009..a...5..D.;.
    0040: 85 EE 1F 41 30 35 00 31 37 00 31 39 00 30 34 00  // ...A05.17.19.04.
    0050: E8 07 09 02 10 2E 1E FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 99
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000BCBB7000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000BCBE5000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 99 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 70 BB BC  // .............p..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 50 BE BC  // .............P..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : D2
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD500000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F2E

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 11
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 12
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD500000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 058F77EF22294A5A
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 11
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 12
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 D2 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 50 FD 00 00 00 00  // ..H...@...P.....
    0040: 00 00 00 00 2E 8F 04 80 03 08 00 00 04 FE FF 00  // ................
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 11 A0 00 01  // H.......H.......
    0070: 48 00 00 00 12 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 50 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..P.............
    0090: 5A 4A 29 22 EF 77 8F 05 00 00 00 00 00 00 00 00  // ZJ)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 11 A0 00 01 48 00 00 00 12 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]        Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 00000000BCE00000
[040h 0064   8]               Address Length : 0000000000010000

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076   8]                      Address : 00000000FD010540

[054h 0084   8]                Preserve Mask : FFFFFFFF00000000
[05Ch 0092   8]                   Write Mask : 0000000000000001
[064h 0100   4]              Command Latency : 00000FA0
[068h 0104   4]          Maximum Access Rate : 0000EA60
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 02 4E 41 4D 44 00 00 00  // PCCTn....NAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 E0 BC 00 00 00 00  // .>..............
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 01 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "ArticDGP", 0x00000001)
{
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP8.M434, IntObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Scope (\_SB.PCI0.GPP8)
    {
        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP8.SWUS.DDPM */
            }

            Device (SWDS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP8.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00) {}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    M432 = ((M049 (M128, 0x66) >> 0x04) & One)
                                    M433 = ((M049 (M128, 0x66) >> 0x05) & One)
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP8.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP8.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x07, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                Return (A017 (Arg1))
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A095, SystemMemory, AGRB, 0x1000)
        Field (A095, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A096,   32
        }

        BankField (A095, A096, 0x03B10530, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A095, A096, 0x03B1057C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A095, A096, 0x03B109C4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A095, A096, 0x03B109C8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A095, A096, 0x03B109CC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A095, A096, 0x03B109D0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A095, A096, 0x03B109D4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A095, A096, 0x03B109D8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)) {}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)) {}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x3D, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x3B, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x3C, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x3E, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x2F, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A084 = Local2
                    A068 (0x4F, Local7)
                    Local3 = Buffer (0x08) {}
                    CreateDWordField (Local3, 0x00, A093)
                    CreateDWordField (Local3, 0x04, A094)
                    A093 = A076 /* \_SB_.A076 */
                    A094 = A077 /* \_SB_.A077 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A084 = Local2
                    A068 (0x50, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ArticN", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0xBD068018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (0xFFFFFFFF ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (0xFFFFFFFF ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xEE)
        Name (M4D2, Buffer (0x08) {})
        Method (_L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Local3 = Buffer (0x08) {}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One)) {}
                ElseIf ((Local0 == 0x02))
                {
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08) {}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ArticTPX", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GPP8.SWUS.SWDS.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, Zero, 0x10)
            If (Local0)
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, One)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000ED9
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xBCE00000
        OperationRegion (SHRM, SystemMemory, Local0, 0x1008)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1, 
            Offset (0xC48), 
            V00C,   1, 
            Offset (0xD48), 
            V00D,   1, 
            Offset (0xE48), 
            V00E,   1, 
            Offset (0xF48), 
            V00F,   1
        }

        If ((V000 == One))
        {
            Notify (\_SB.PLTF.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_SB.PLTF.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_SB.PLTF.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_SB.PLTF.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_SB.PLTF.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_SB.PLTF.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_SB.PLTF.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_SB.PLTF.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_SB.PLTF.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_SB.PLTF.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_SB.PLTF.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_SB.PLTF.C00B, 0x84) // Reserved
        }

        If ((V00C == One))
        {
            Notify (\_SB.PLTF.C00C, 0x84) // Reserved
        }

        If ((V00D == One))
        {
            Notify (\_SB.PLTF.C00D, 0x84) // Reserved
        }

        If ((V00E == One))
        {
            Notify (\_SB.PLTF.C00E, 0x84) // Reserved
        }

        If ((V00F == One))
        {
            Notify (\_SB.PLTF.C00F, 0x84) // Reserved
        }
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ArticC", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.I2CD, DeviceObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Name (MWTT, 0xFF)
    Scope (\_SB.I2CA)
    {
        Device (WT1A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1A)
        {
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2A)
        {
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3A)
        {
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4A)
        {
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5A)
        {
            Name (_HID, "STK0005A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CB)
    {
        Device (WT1B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1B)
        {
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2B)
        {
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3B)
        {
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4B)
        {
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5B)
        {
            Name (_HID, "STK0005B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CC)
    {
        Device (WT1C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1C)
        {
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2C)
        {
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3C)
        {
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4C)
        {
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5C)
        {
            Name (_HID, "STK0005C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CD)
    {
        Device (WT1D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1D)
        {
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2D)
        {
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3D)
        {
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4D)
        {
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5D)
        {
            Name (_HID, "STK0005D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Set VDDIO", 
                "Set VTT", 
                "Command Buffer Start", 
                "Command Buffer End"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                0x00050010, 
                0x00020043, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "Set GFX Curve Optimizer", 
                "Set LCLK Freq", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x029B, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                0xFFFFFFFF, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                0xFFFFFFFF, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x03E8, 
                0x0708, 
                0x0A, 
                0x00030002, 
                0x01F4, 
                0x0384, 
                0x05, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x19)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050010, 
                Zero, 
                0x1E, 
                One, 
                0x00020043, 
                0x96, 
                0x09C4, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCC)
            {
                0x00020001, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0xF9)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00030001, 
                0x51, 
                0x03E8, 
                0x03F2, 
                0x03FC, 
                0x0406, 
                0x0410, 
                0x041A, 
                0x0424, 
                0x042E, 
                0x0438, 
                0x0442, 
                0x044C, 
                0x0456, 
                0x0460, 
                0x046A, 
                0x0474, 
                0x047E, 
                0x0488, 
                0x0492, 
                0x049C, 
                0x04A6, 
                0x04B0, 
                0x04BA, 
                0x04C4, 
                0x04CE, 
                0x04D8, 
                0x04E2, 
                0x04EC, 
                0x04F6, 
                0x0500, 
                0x050A, 
                0x0514, 
                0x051E, 
                0x0528, 
                0x0532, 
                0x053C, 
                0x0546, 
                0x0550, 
                0x055A, 
                0x0564, 
                0x056E, 
                0x0578, 
                0x0582, 
                0x058C, 
                0x0596, 
                0x05A0, 
                0x05AA, 
                0x05B4, 
                0x05BE, 
                0x05C8, 
                0x05D2, 
                0x05DC, 
                0x05E6, 
                0x05F0, 
                0x05FA, 
                0x0604, 
                0x060E, 
                0x0618, 
                0x0622, 
                0x062C, 
                0x0636, 
                0x0640, 
                0x064A, 
                0x0654, 
                0x065E, 
                0x0668, 
                0x0672, 
                0x067C, 
                0x0686, 
                0x0690, 
                0x069A, 
                0x06A4, 
                0x06AE, 
                0x06B8, 
                0x06C2, 
                0x06CC, 
                0x06D6, 
                0x06E0, 
                0x06EA, 
                0x06F4, 
                0x06FE, 
                0x0708, 
                0x00030002, 
                0x51, 
                0x01F4, 
                0x01F9, 
                0x01FE, 
                0x0203, 
                0x0208, 
                0x020D, 
                0x0212, 
                0x0217, 
                0x021C, 
                0x0221, 
                0x0226, 
                0x022B, 
                0x0230, 
                0x0235, 
                0x023A, 
                0x023F, 
                0x0244, 
                0x0249, 
                0x024E, 
                0x0253, 
                0x0258, 
                0x025D, 
                0x0262, 
                0x0267, 
                0x026C, 
                0x0271, 
                0x0276, 
                0x027B, 
                0x0280, 
                0x0285, 
                0x028A, 
                0x028F, 
                0x0294, 
                0x0299, 
                0x029E, 
                0x02A3, 
                0x02A8, 
                0x02AD, 
                0x02B2, 
                0x02B7, 
                0x02BC, 
                0x02C1, 
                0x02C6, 
                0x02CB, 
                0x02D0, 
                0x02D5, 
                0x02DA, 
                0x02DF, 
                0x02E4, 
                0x02E9, 
                0x02EE, 
                0x02F3, 
                0x02F8, 
                0x02FD, 
                0x0302, 
                0x0307, 
                0x030C, 
                0x0311, 
                0x0316, 
                0x031B, 
                0x0320, 
                0x0325, 
                0x032A, 
                0x032F, 
                0x0334, 
                0x0339, 
                0x033E, 
                0x0343, 
                0x0348, 
                0x034D, 
                0x0352, 
                0x0357, 
                0x035C, 
                0x0361, 
                0x0366, 
                0x036B, 
                0x0370, 
                0x0375, 
                0x037A, 
                0x037F, 
                0x0384, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x00050010))
                {
                    R510 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00020043))
                {
                    R243 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214) {})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8) {})
            OperationRegion (AODT, SystemMemory, 0xBD063018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                GPSM,   8, 
                TPMS,   32, 
                DMTP,   8, 
                OCFX,   8, 
                MRSD,   32, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Method (R510, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GPSM = SVAL /* \AOD_.R510.SVAL */
                MBCB = 0x00100038
                ASMI (0x9D)
            }

            Method (R243, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TPMS = SVAL /* \AOD_.R243.SVAL */
                MBCB = 0x0010003A
                ASMI (0x9D)
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "GBT", "GSWApp", 0x00000001)
{
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M011, MethodObj)    // 4 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (MDBG, MethodObj)    // 1 Arguments

    Scope (\)
    {
        Device (GSA1)
        {
            Method (CMN0, 4, Serialized)
            {
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Arg0 & Local2) | Local3)
                Return (Local4)
            }

            Method (CMN1, 3, Serialized)
            {
                Local3 = ((One << Arg2) - One)
                Local2 = ((Arg0 >> Arg1) & Local3)
                Return (Local2)
            }

            OperationRegion (GGGT, SystemMemory, 0xBD07D718, 0x0100)
            Field (GGGT, DWordAcc, Lock, Preserve)
            {
                Offset (0x04), 
                CPEX,   32, 
                PGRV,   8, 
                CCNT,   8, 
                TCNT,   8, 
                E8CV,   8, 
                AX3D,   8, 
                UDAA,   32
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "GSADEV0")  // _UID: Unique ID
            Name (MARK, "Mark Tsai<mark@gigabyte.com><marktsai0316@gmail.com>")
            Method (EM00, 1, Serialized)
            {
                Return (ToString (ToHexString (Arg0), 0x02))
            }

            Method (EM01, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DAT1)
                CreateWordField (Arg0, 0x04, DAT2)
                CreateWordField (Arg0, 0x06, DAT3)
                CreateByteField (Arg0, 0x08, DAT4)
                CreateByteField (Arg0, 0x09, DAT5)
                CreateByteField (Arg0, 0x0A, DAT6)
                CreateByteField (Arg0, 0x0B, DAT7)
                CreateByteField (Arg0, 0x0C, DAT8)
                CreateByteField (Arg0, 0x0D, DAT9)
                CreateByteField (Arg0, 0x0E, DATA)
                CreateByteField (Arg0, 0x0F, DATB)
                Name (STR1, "000000000000")
                Local3 = ""
                Local0 = ToHexString (DAT1)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((0x10 - (SizeOf (Local0) - 0x02
                    )) - 0x08))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Concatenate (Local3, "-", Local3)
                Local0 = ToHexString (DAT2)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, (((0x10 - (SizeOf (Local0) - 
                    0x02)) - 0x08) - 0x04))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Concatenate (Local3, "-", Local3)
                Local0 = ToHexString (DAT3)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, (((0x10 - (SizeOf (Local0) - 
                    0x02)) - 0x08) - 0x04))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Concatenate (Local3, "-", Local3)
                Local0 = ToHexString (DAT4)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DAT5)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Concatenate (Local3, "-", Local3)
                Local0 = ToHexString (DAT6)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DAT7)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DAT8)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DAT9)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DATA)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Local0 = ToHexString (DATB)
                Local1 = Mid (Local0, 0x02, (SizeOf (Local0) - 0x02))
                Local2 = Mid (STR1, Zero, ((((0x10 - (SizeOf (
                    Local0) - 0x02)) - 0x08) - 0x04) - 0x02))
                Concatenate (Local2, Local1, Local2)
                Concatenate (Local3, Local2, Local3)
                Return (Local3)
            }

            Scope (\)
            {
            }

            Method (GIO2, 0, Serialized)
            {
            }

            Method (GIO0, 1, Serialized)
            {
                Return (M009 (Arg0))
            }

            Method (GIO1, 2, Serialized)
            {
                M010 (Arg0, Arg1)
            }

            Method (PIOD, 1, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, 0x80, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }

            Method (PIOA, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Zero)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (PIOB, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Zero)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                PIO7 (Local0, Zero, Local4)
            }

            Method (PIO0, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, One)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (PIO1, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, One)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                PIO7 (Local0, One, Local4)
            }

            Method (PIO8, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Arg3)
                Local2 = CMN1 (Local1, Arg1, Arg2)
                Return (Local2)
            }

            Method (PIO9, 5, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Arg4)
                Local4 = CMN0 (Local1, Arg1, Arg2, Arg3)
                PIO7 (Local0, Arg4, Local4)
            }

            Method (PIO6, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.PIO6.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.PIO6.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.PIO6.VARR */
                    }

                }

                Return (Zero)
            }

            Method (PIO7, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Mutex (MEM3, 0x00)
            Method (MEM0, 0, Serialized)
            {
            }

            Method (MEM1, 1, Serialized)
            {
                MEM0 ()
            }

            Method (MEM2, 1, Serialized)
            {
            }

            Method (MEMA, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x02)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (MEMB, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x02)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                MEM5 (Local0, 0x02, Local4)
            }

            Method (MEMC, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x03)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (MEMD, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x03)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                MEM5 (Local0, 0x03, Local4)
            }

            Method (MEM6, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, Arg3)
                Local2 = CMN1 (Local1, Arg1, Arg2)
                Return (Local2)
            }

            Method (MEM7, 5, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, Arg4)
                Local4 = CMN0 (Local1, Arg1, Arg2, Arg3)
                MEM5 (Local0, Arg4, Local4)
            }

            Method (MEM4, 2, Serialized)
            {
                Local0 = Arg0
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Local1 = One
                    }
                    Case (One)
                    {
                        Local1 = 0x02
                    }
                    Case (0x02)
                    {
                        Local1 = 0x04
                    }
                    Case (0x03)
                    {
                        Local1 = 0x08
                    }

                }

                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARS,   64
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.MEM4.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.MEM4.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.MEM4.VARR */
                    }
                    Case (0x03)
                    {
                        Return (VARS) /* \GSA1.MEM4.VARS */
                    }

                }

                Return (Zero)
            }

            Method (MEM5, 3, Serialized)
            {
                Local0 = Arg0
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Local1 = One
                    }
                    Case (One)
                    {
                        Local1 = 0x02
                    }
                    Case (0x02)
                    {
                        Local1 = 0x04
                    }
                    Case (0x03)
                    {
                        Local1 = 0x08
                    }

                }

                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARS,   64
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }
                    Case (0x03)
                    {
                        VARS = Arg2
                    }

                }
            }

            Method (MEM8, 2, Serialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, Local1)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR0,   8
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR1,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR2,   32
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR3,   64
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR7,   1024
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR8,   2048
                }

                Return (VAR8) /* \GSA1.MEM8.VAR8 */
            }

            Method (MEM9, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, Local1)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR0,   8
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR1,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR2,   32
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR3,   64
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR7,   1024
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR8,   2048
                }

                VAR2 = Arg2
            }

            Mutex (BUF0, 0x00)
            Method (BUF9, 4, Serialized)
            {
                Local0 = Arg1
                Local1 = BUF1 (Arg0, Local0, 0x03)
                Local3 = ((One << Arg3) - One)
                Local2 = ((Local1 >> Arg2) & Local3)
                Return (Local2)
            }

            Method (BUFA, 5, Serialized)
            {
                Local0 = Arg1
                Local1 = BUF1 (Arg0, Local0, 0x03)
                Local2 = ((Ones << (Arg2 + Arg3)) | ((One << 
                    Arg2) - One))
                Local3 = ((Arg4 & ((One << Arg3) - One)) << 
                    Arg2)
                Local4 = ((Local1 & Local2) | Local3)
                Return (BUF2 (Arg0, Local0, 0x03, Local4))
            }

            Method (BUF1, 3, Serialized)
            {
                Local0 = Arg1
                If ((Arg2 > 0x03))
                {
                    Return (Zero)
                }

                If (((Local0 + (One << Arg2)) > SizeOf (Arg0)))
                {
                    Return (Zero)
                }

                Switch (Arg2)
                {
                    Case (Zero)
                    {
                        CreateByteField (Arg0, Arg1, DAT1)
                        Return (DAT1) /* \GSA1.BUF1.DAT1 */
                    }
                    Case (One)
                    {
                        CreateWordField (Arg0, Arg1, DAT2)
                        Return (DAT2) /* \GSA1.BUF1.DAT2 */
                    }
                    Case (0x02)
                    {
                        CreateDWordField (Arg0, Arg1, DAT4)
                        Return (DAT4) /* \GSA1.BUF1.DAT4 */
                    }
                    Case (0x03)
                    {
                        CreateQWordField (Arg0, Arg1, DAT8)
                        Return (DAT8) /* \GSA1.BUF1.DAT8 */
                    }

                }

                Return (Zero)
            }

            Method (BUF2, 4, Serialized)
            {
                Local0 = Arg1
                If ((Arg2 > 0x03))
                {
                    Return (0xFF)
                }

                If (((Local0 + (One << Arg2)) > SizeOf (Arg0)))
                {
                    Return (0xFF)
                }

                Switch (Arg2)
                {
                    Case (Zero)
                    {
                        CreateByteField (Arg0, Arg1, DAT1)
                        DAT1 = Arg3
                    }
                    Case (One)
                    {
                        CreateWordField (Arg0, Arg1, DAT2)
                        DAT2 = Arg3
                    }
                    Case (0x02)
                    {
                        CreateWordField (Arg0, Arg1, DAT4)
                        DAT4 = Arg3
                    }
                    Case (0x03)
                    {
                        CreateWordField (Arg0, Arg1, DAT8)
                        DAT8 = Arg3
                    }

                }

                Return (Zero)
            }

            Method (PCI0, 0, Serialized)
            {
            }

            Method (PCI1, 1, Serialized)
            {
                PCI0 ()
            }

            Method (PCI2, 1, Serialized)
            {
            }

            Method (PCI4, 0, Serialized)
            {
                Return (PCIB) /* \GSA1.PCIB */
            }

            Name (PCIB, 0xF0000000)
            Method (PCI9, 5, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                Return (MEM4 (Local0, Arg4))
            }

            Method (PCIA, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                MEM5 (Local0, Arg4, Arg5)
            }

            Method (PCIE, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, Zero))
            }

            Method (PCIF, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, Zero, Arg4)
            }

            Method (PCIG, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, One))
            }

            Method (PCIH, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, One, Arg4)
            }

            Method (PCI7, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x02))
            }

            Method (PCI8, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x02, Arg4)
            }

            Method (PCII, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x03))
            }

            Method (PCIJ, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x03, Arg4)
            }

            Method (PCI5, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Return (MEMC ((Local0 + Arg3), Arg4, Arg5))
            }

            Method (PCI6, 7, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                If ((MEMA (Local0, Zero, 0x20) != 0xFFFFFFFF))
                {
                    MEMD ((Local0 + Arg3), Arg4, Arg5, Arg6)
                }
            }

            Method (PCIC, 4, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                Local0 = VAR2 /* \GSA1.PCIC.VAR2 */
                Return (Local0)
            }

            Method (PCID, 5, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                VAR2 = Arg4
            }

            Name (GGGA, Package (0x06)
            {
                "F19d", 
                "B550M S2H", 
                "B550MS2H", 
                "8ARNR009", 
                0x01000000, 
                "120Cc"
            })
            Method (PFM8, 4, Serialized)
            {
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Arg0 & Local2) | Local3)
                Return (Local4)
            }

            Method (PFM9, 3, Serialized)
            {
                Local3 = ((One << Arg2) - One)
                Local2 = ((Arg0 >> Arg1) & Local3)
                Return (Local2)
            }

            Name (GGGD, "AM4: X470/X570/B550/A520")
            Method (PFM0, 0, Serialized)
            {
            }

            Method (PFM1, 1, Serialized)
            {
                PFM0 ()
            }

            Method (PFM2, 1, Serialized)
            {
            }

            Name (PFMH, Package (0x04)
            {
                Buffer (0x03)
                {
                     0x02, 0xA0, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA2, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA4, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA6, 0x00                                 // ...
                }
            })
            Method (PFM7, 0, Serialized)
            {
                Return (RefOf (PFMH))
            }

            Method (SMBB, 0, Serialized)
            {
                Return (0x0B00)
            }

            Method (SMB8, 0, Serialized)
            {
            }

            Mutex (SME0, 0x00)
            OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCNT,   8, 
                HCMD,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8
            }

            Method (SMBG, 1, Serialized)
            {
                SMB8 ()
            }

            Method (SMBH, 1, Serialized)
            {
            }

            Method (KILL, 0, Serialized)
            {
                HCNT |= 0x02
                HSTS |= 0xFF
            }

            Method (CMPL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SRDY, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            HSTS = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMBL, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCNT = 0x40
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMBM, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x40
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB0, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB1, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMBN, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFFFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x50
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFFFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (SMB2, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = Arg2
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB3, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB4, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB5, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFFFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFFFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (SMBK, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                Local0 = HCNT /* \GSA1.HCNT */
                Local1 = Zero
                Local5 = SizeOf (Arg2)
                DAT0 = Local5
                While ((Local5 > Local1))
                {
                    HBDR = DerefOf (Arg2 [Local1])
                    Local1++
                }

                HCNT = 0x54
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB9, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCNT = 0x54
                Local5 = SizeOf (Arg2)
                While ((Local5 > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Local1++
                    If ((Local5 > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }

                    HSTS = 0x80
                }

                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMBA, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x54
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        PIOD (0x22)
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Local6 = DAT0 /* \GSA1.DAT0 */
                        Local1 = Zero
                        While ((Local1 < Local6))
                        {
                            Arg2 [Local1] = HBDR /* \GSA1.HBDR */
                            Local1++
                        }

                        HSTS |= 0xFF
                        Return (Local6)
                    }
                }

                PIOD (0x33)
                Return (0xFFFF)
            }

            Method (SMBF, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    SMB2 (0x6C, Zero, Zero)
                }
                Else
                {
                    SMB2 (0x6E, Zero, Zero)
                }
            }

            Method (SMBE, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0200))
                {
                    If ((Local0 == Zero))
                    {
                        SMBF (Arg0, Zero)
                    }

                    If ((Local0 == 0x0100))
                    {
                        SMBF (Arg0, One)
                    }

                    Local1 = SMB3 (Arg0, (Local0 % 0x0100))
                    If ((Local1 == 0xFFFF))
                    {
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Arg1 [Local0] = Local1
                        Local0++
                    }
                }

                SMBF (Arg0, Zero)
                Return (Zero)
            }

            Method (SMAB, 0, Serialized)
            {
                Return (0x0B20)
            }

            Method (SMA8, 0, Serialized)
            {
            }

            Mutex (SME3, 0x00)
            OperationRegion (SMG0, SystemIO, 0x0B20, 0x20)
            Field (SMG0, ByteAcc, NoLock, Preserve)
            {
                SMG1,   8, 
                Offset (0x02), 
                SMG2,   8, 
                SMG3,   8, 
                SMG4,   8, 
                SMG5,   8, 
                SMG6,   8, 
                SMG7,   8
            }

            Method (SMAG, 1, Serialized)
            {
                SMA8 ()
            }

            Method (SMAH, 1, Serialized)
            {
            }

            Method (SMAK, 0, Serialized)
            {
                SMG2 |= 0x02
                SMG1 |= 0xFF
            }

            Method (SMAL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SMAM, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((SMG1 & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMG1 = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMAO, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG2 = 0x40
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMAP, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x40
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA0, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA1, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA2, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = Arg2
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA3, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA4, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = (Arg2 & 0xFF)
                SMG6 = ((Arg2 >> 0x08) & 0xFF)
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA5, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFFFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFFFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (((SMG6 << 0x08) | SMG5))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (SMAN, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                Local0 = SMG2 /* \GSA1.SMG2 */
                Local1 = Zero
                Local5 = SizeOf (Arg2)
                SMG5 = Local5
                While ((Local5 > Local1))
                {
                    SMG7 = DerefOf (Arg2 [Local1])
                    Local1++
                }

                SMG2 = 0x54
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA9, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = SizeOf (Arg2)
                Local1 = Zero
                SMG7 = DerefOf (Arg2 [Zero])
                SMG2 = 0x54
                Local5 = SizeOf (Arg2)
                While ((Local5 > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    Local1++
                    If ((Local5 > Local1))
                    {
                        SMG7 = DerefOf (Arg2 [Local1])
                    }

                    SMG1 = 0x80
                }

                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMAA, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x54
                Local0 = 0x0FA0
                While ((!(SMG1 & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    SMAK ()
                    Return (0xFFFF)
                }

                Local6 = SMG5 /* \GSA1.SMG5 */
                Arg2 [Zero] = SMG7 /* \GSA1.SMG7 */
                Local1 = One
                SMG1 = 0x80
                While ((Local1 < Local6))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return ((SMG5 | 0x8000))
                    }

                    Arg2 [Local1] = SMG7 /* \GSA1.SMG7 */
                    SMG1 = 0x80
                    Local1++
                }

                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMM9, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMA, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMC, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBL (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (Zero)
            }

            Method (SMMD, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBM (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (0xFFFF)
            }

            Method (SMM0, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB0 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (Zero)
            }

            Method (SMM1, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB1 (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (0xFFFF)
            }

            Method (SMM2, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB2 (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA2 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM3, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB3 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA3 (Arg1, Arg2)
                    Release (SME3)
                    Return (Local0)
                }

                Return (0xFFFF)
            }

            Method (SMM4, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB4 (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA4 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM5, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB5 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA5 (Arg1, Arg2)
                    Release (SME3)
                    Return (Local0)
                }

                Return (0xFFFFFFFF)
            }

            Method (SMMB, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBK (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMAN (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM6, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBK (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA9 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMF, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBK (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA9 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM7, 3, Serialized)
            {
                Name (DATB, Buffer (0x0100) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, SMD0)
                CreateWordField (DATC, 0x02, SMD1)
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBA (Arg1, Arg2, DATB)
                    Release (SME0)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMAA (Arg1, Arg2, DATB)
                    Release (SME3)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }

                Return (Ones)
            }

            Method (SMMG, 4, Serialized)
            {
                Name (DATB, Buffer (0x0100) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, SMD0)
                CreateWordField (DATC, 0x02, SMD1)
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBA (Arg1, Arg2, DATB)
                    Release (SME0)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMAA (Arg1, Arg2, DATB)
                    Release (SME3)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }

                Return (Ones)
            }

            Method (SMMH, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBN (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM8, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBE (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
            }

            Name (DIC3, Package (0x04)
            {
                Buffer (0x04)
                {
                     0x09, 0x09, 0x01, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x04, 0x04, 0x02, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x01, 0x01, 0x02, 0x01                           // ....
                }, 

                Buffer (0x04)
                {
                     0x00, 0x01, 0x02, 0x01                           // ....
                }
            })
            Method (DIM0, 0, Serialized)
            {
            }

            Method (DIM6, 1, Serialized)
            {
                Return ("KingStone")
            }

            Method (DIMH, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Return (DerefOf (Local7 [Arg0]))
                }

                Return (0xFFFFFFFF)
            }

            Method (DIMC, 0, Serialized)
            {
                Name (DIMG, Buffer (0x04) {})
                Local0 = SizeOf (PFMH)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local4 = DerefOf (DerefOf (PFMH [Local1]) [0x02])
                    Local5 = (One << Local1)
                    If ((Local4 & One))
                    {
                        DIMG [Zero] = (DerefOf (DIMG [Zero]) | Local5
                            )
                    }

                    If ((Local4 & 0x02))
                    {
                        DIMG [One] = (DerefOf (DIMG [One]) | Local5
                            )
                    }

                    If ((Local4 & 0x04))
                    {
                        DIMG [0x02] = (DerefOf (DIMG [0x02]) | Local5
                            )
                    }

                    Local1++
                }

                DIMG [0x03] = Local0
                Return (DIMG) /* \GSA1.DIMC.DIMG */
            }

            Method (DIMD, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = ((DerefOf (DerefOf (Local7 [Arg0]) [One]) & 
                        0x0F) | 0x30)
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & 0x04))
                    {
                        Return ((SMM5 (Local5, Local6, 0x05) & 0x1FFF))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (DIM1, 1, Serialized)
            {
                Name (DATB, Buffer (0x0400) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, DIM8)
                CreateWordField (DATC, 0x02, DIM9)
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = DerefOf (DerefOf (Local7 [Arg0]) [One])
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & One))
                    {
                        Local0 = SMM8 (DerefOf (DerefOf (Local7 [Arg0]) [Zero]), 
                            DerefOf (DerefOf (Local7 [Arg0]) [One]), DATB)
                        If ((Local0 == Zero))
                        {
                            DIM8 = Zero
                            DIM9 = 0x0200
                            Concatenate (DATC, DATB, Local1)
                            Return (Local1)
                        }
                    }
                }

                DIM8 = 0xFFFF
                DIM9 = Zero
                Concatenate (DATC, DATB, Local1)
                Return (Local1)
            }

            Method (HWC0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = 0x02
                    }
                    Case (0x10)
                    {
                        Local0 = 0x03
                    }

                }

                Return (Local0)
            }

            Name (GSAT, Package (0x0F)
            {
                Package (0x04)
                {
                    0x1B, 
                    "CPU Vcore Loadline Calibration", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_A", 
                        0xC0, 
                        Zero, 
                        0x00100028
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        Package (0x07)
                        {
                            "Standard", 
                            "Low", 
                            "Medium", 
                            "High", 
                            "Turbo", 
                            "Extreme", 
                            "Ultra Extreme"
                        }, 

                        Package (0x07)
                        {
                            0x82, 
                            0x7B, 
                            0x75, 
                            0x6E, 
                            0x68, 
                            0x5B, 
                            0x4E
                        }, 

                        "Standard", 
                        Package (0x07)
                        {
                            0x4E, 
                            0x4A, 
                            0x46, 
                            0x42, 
                            0x3E, 
                            0x36, 
                            0x2E
                        }
                    }
                }, 

                Package (0x04)
                {
                    0x4D, 
                    "Vcore SOC Loadline Calibration", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_B", 
                        0xC0, 
                        One, 
                        0x00100028
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        Package (0x06)
                        {
                            "Standard", 
                            "Low", 
                            "Medium", 
                            "High", 
                            "Turbo", 
                            "Extreme"
                        }, 

                        Package (0x06)
                        {
                            0xD2, 
                            0x9E, 
                            0x7E, 
                            0x69, 
                            0x35, 
                            0x20
                        }, 

                        "Standard", 
                        Package (0x06)
                        {
                            0x7E, 
                            0x5F, 
                            0x4C, 
                            0x3F, 
                            0x20, 
                            0x13
                        }
                    }
                }, 

                Package (0x04)
                {
                    0x22, 
                    "CPU Vcore Current Protection", 
                    Package (0x05)
                    {
                        0x14, 
                        "RAA229004_0xC0_A", 
                        0xC0, 
                        Zero, 
                        0x00100046
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "200A", 
                            "225A", 
                            "250A"
                        }, 

                        Package (0x03)
                        {
                            0x07D0, 
                            0x08CA, 
                            0x09C4
                        }, 

                        "250A"
                    }
                }, 

                Package (0x06)
                {
                    0x06, 
                    "CPU VCore DVID Offset", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_A", 
                        0xC0, 
                        Zero, 
                        0x00100023
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0xFFFFB1E0, 
                            0x4E20, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x09)
                    {
                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF9223, 
                                0xFFFFFD8F, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEE6, 
                                0xFFF9, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8FB2, 
                                0xFFFFFB1E, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEE0, 
                                0xFFF3, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8D41, 
                                0xFFFFF8AD, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEDA, 
                                0xFFED, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8AD0, 
                                0xFFFFF63C, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFED3, 
                                0xFFE6, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                0x06, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0271, 
                                0x6DDD, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x07, 
                                0x011A, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x04E2, 
                                0x704E, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0D, 
                                0x0120, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0753, 
                                0x72BF, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x13, 
                                0x0126, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x09C4, 
                                0x7530, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x19, 
                                0x012C, 
                                0x19, 
                                One
                            }
                        }
                    }, 

                    Zero
                }, 

                Package (0x06)
                {
                    0x05, 
                    "CPU VCore", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_A", 
                        0xC0, 
                        Zero, 
                        0x00100021
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0x000124F8, 
                            0x0002BF20, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x04)
                    {
                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC350, 
                                0x00030D40, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x01F4, 
                                0x07D0, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC5C1, 
                                0x00030FB1, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x01FB, 
                                0x07D7, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC832, 
                                0x00031222, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0201, 
                                0x07DD, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xCAA3, 
                                0x00031493, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0207, 
                                0x07E3, 
                                0x19, 
                                One
                            }
                        }
                    }, 

                    0x0001D4C0
                }, 

                Package (0x04)
                {
                    0x80000005, 
                    "CPU VCore Mode", 
                    Package (0x05)
                    {
                        0x08, 
                        "ISl69147_0xC0_A", 
                        0xC0, 
                        Zero, 
                        0x000204F0
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "Auto", 
                            "Dynamic Offset", 
                            "Static"
                        }, 

                        Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            0x03
                        }, 

                        "Auto"
                    }
                }, 

                Package (0x06)
                {
                    0x0B, 
                    "VCORE SOC DVID Offset", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_B", 
                        0xC0, 
                        One, 
                        0x00100023
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0xFFFFB1E0, 
                            0x4E20, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x0A)
                    {
                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF9223, 
                                0xFFFFFD8F, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEE6, 
                                0xFFF9, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8FB2, 
                                0xFFFFFB1E, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEE0, 
                                0xFFF3, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8D41, 
                                0xFFFFF8AD, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFEDA, 
                                0xFFED, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8AD0, 
                                0xFFFFF63C, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xFED3, 
                                0xFFE6, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                0x06, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0271, 
                                0x7530, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x07, 
                                0x012C, 
                                0x06, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0271, 
                                0x6DDD, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x07, 
                                0x011A, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x04E2, 
                                0x704E, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0D, 
                                0x0120, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0753, 
                                0x72BF, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x13, 
                                0x0126, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x09C4, 
                                0x7530, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x19, 
                                0x012C, 
                                0x19, 
                                One
                            }
                        }
                    }, 

                    Zero
                }, 

                Package (0x06)
                {
                    0x0A, 
                    "VCORE SOC", 
                    Package (0x05)
                    {
                        0x08, 
                        "RAA229004_0xC0_B", 
                        0xC0, 
                        One, 
                        0x00100021
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0x000124F8, 
                            0x00027100, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x04)
                    {
                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC350, 
                                0x00030D40, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x01F4, 
                                0x07D0, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC5C1, 
                                0x00030FB1, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x01FB, 
                                0x07D7, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xC832, 
                                0x00031222, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0201, 
                                0x07DD, 
                                0x19, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0xCAA3, 
                                0x00031493, 
                                0x09C4, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x0207, 
                                0x07E3, 
                                0x19, 
                                One
                            }
                        }
                    }, 

                    0x00016472
                }, 

                Package (0x04)
                {
                    0x8000000A, 
                    "VCORE SOC Mode", 
                    Package (0x05)
                    {
                        0x08, 
                        "ISl69147_0xC0_B", 
                        0xC0, 
                        One, 
                        0x000204F0
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "Auto", 
                            "Dynamic Offset", 
                            "Static"
                        }, 

                        Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            0x03
                        }, 

                        "Auto"
                    }
                }, 

                Package (0x06)
                {
                    0x62, 
                    "CPU VDD18", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x20_VRF3", 
                        0x20, 
                        0x03, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x0640, 
                            0x0910, 
                            0x28, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0640, 
                                0x06E0, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x85, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0708, 
                                0x0910, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0D, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0708
                }, 

                Package (0x06)
                {
                    0x09, 
                    "CPU VDDP", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x20_VRF2", 
                        0x20, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0xFFFFFF38, 
                            0x02BC, 
                            0x14, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFFFF38, 
                                0xFFFFFFEC, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8A, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                Zero, 
                                0x02BC, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x23, 
                                One, 
                                One
                            }
                        }
                    }, 

                    Zero
                }, 

                Package (0x06)
                {
                    0x74, 
                    "A_VDD18S5", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x20_VRF1", 
                        0x20, 
                        One, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x05DC, 
                            0x07D0, 
                            0x14, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x05DC, 
                                0x06F4, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8F, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0708, 
                                0x07D0, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0A, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0708
                }, 

                Package (0x06)
                {
                    0x0F, 
                    "DRAM Voltage (CH A/B)", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF1", 
                        0x2A, 
                        One, 
                        0x0F
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x03E8, 
                            0x07D0, 
                            0x0A, 
                            0x03E8
                        }
                    }, 

                    Package (0x03)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x03E8, 
                                0x04A6, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x94, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x04B0, 
                                0x05D2, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x1D, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F3", 
                            Zero, 
                            Package (0x04)
                            {
                                0x05DC, 
                                0x07D0, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x1F, 
                                0x51, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x04B0
                }, 

                Package (0x06)
                {
                    0x18, 
                    "DDRVPP (CH A/B) Voltage", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF3", 
                        0x2A, 
                        0x03, 
                        0x18
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x07BC, 
                            0x0BCC, 
                            0x28, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x07BC, 
                                0x099C, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8D, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x09C4, 
                                0x0BCC, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0D, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x09C4
                }, 

                Package (0x06)
                {
                    0x10, 
                    "DRAM CH(A/B) Termination", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF2", 
                        0x2A, 
                        0x02, 
                        0x10
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x01C2, 
                            0x03E8, 
                            0x05, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x01C2, 
                                0x0258, 
                                0x05, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x1E, 
                                Zero, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x025D, 
                                0x03E8, 
                                0x05, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x81, 
                                0xD0, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0258
                }
            })
            Method (MM17, 1, NotSerialized)
            {
                Local7 = Arg0
                Local0 = Zero
                Local1 = ""
                While ((Local0 < SizeOf (Local7)))
                {
                    If ((Local0 != Zero))
                    {
                        Concatenate (Local1, ":", Local1)
                    }

                    Local6 = ToHexString (DerefOf (Local7 [Local0]), Local2)
                    Concatenate (Local1, Local6, Local1)
                    Local0++
                }

                Return (Local1)
            }

            Method (MM18, 1, NotSerialized)
            {
                Local7 = Arg0
                Local0 = Zero
                Local1 = ""
                While ((Local0 < SizeOf (Local7)))
                {
                    If ((Local0 != Zero))
                    {
                        Concatenate (Local1, ":", Local1)
                    }

                    Concatenate (Local1, DerefOf (Local7 [Local0]), Local1)
                    Local0++
                }

                Return (Local1)
            }

            Method (MM00, 0, NotSerialized)
            {
                Return (SizeOf (GSAT))
            }

            Method (MM01, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (GSAT)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (GSAT [Local0]) [Zero]) == Arg0))
                    {
                        Return (DerefOf (GSAT [Local0]))
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (MM19, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (GSAT)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (GSAT [Local0]) [Zero]) == Arg0))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (MM02, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [One]))
                }

                Return (Ones)
            }

            Method (MM04, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x02]))
                }

                Return (Ones)
            }

            Method (MM14, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x03]))
                }

                Return (Ones)
            }

            Method (MM03, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x04]))
                }

                Return (Ones)
            }

            Method (MM06, 2, Serialized)
            {
                Local0 = MM03 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Name (IFPK, Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If ((Arg1 >= SizeOf (Local0)))
                    {
                        Return (Ones)
                    }

                    If ((Arg1 < SizeOf (Local0)))
                    {
                        Local1 = DerefOf (Local0 [Arg1])
                        If ((ObjectType (Local1) == 0x04))
                        {
                            IFPK [Zero] = DerefOf (Local1 [Zero])
                            IFPK [One] = DerefOf (Local1 [One])
                            IFPK [0x02] = DerefOf (DerefOf (Local1 [0x02]) [
                                Zero])
                            IFPK [0x03] = DerefOf (DerefOf (Local1 [0x02]) [
                                One])
                            IFPK [0x04] = DerefOf (DerefOf (Local1 [0x02]) [
                                0x02])
                            IFPK [0x05] = DerefOf (DerefOf (Local1 [0x02]) [
                                0x03])
                            Return (IFPK) /* \GSA1.MM06.IFPK */
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM07, 2, Serialized)
            {
                Local0 = MM03 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Name (IFPK, Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If ((Arg1 < SizeOf (Local0)))
                    {
                        Local1 = DerefOf (Local0 [Arg1])
                        If ((ObjectType (Local1) == 0x04))
                        {
                            IFPK [Zero] = DerefOf (Local1 [Zero])
                            IFPK [One] = DerefOf (Local1 [One])
                            IFPK [0x02] = DerefOf (DerefOf (Local1 [0x03]) [
                                Zero])
                            IFPK [0x03] = DerefOf (DerefOf (Local1 [0x03]) [
                                One])
                            IFPK [0x04] = DerefOf (DerefOf (Local1 [0x03]) [
                                0x02])
                            IFPK [0x05] = DerefOf (DerefOf (Local1 [0x03]) [
                                0x03])
                            Return (IFPK) /* \GSA1.MM07.IFPK */
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM10, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (MM11, 2, NotSerialized)
            {
                Return (Zero)
            }

            Method (MM12, 2, NotSerialized)
            {
                Local6 = Arg1
                Local0 = Zero
                While (One)
                {
                    Local1 = MM06 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                Local5 = DerefOf (Local1 [0x04])
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM07 (Arg0, Local0)
                                    Local3 /= DerefOf (Local1 [0x04])
                                    If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                        )))
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }
                                    Else
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }

                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM07 (Arg0, Local0)
                                Local3 /= DerefOf (Local1 [0x04])
                                If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                    )))
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }
                                Else
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }

                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM13, 2, NotSerialized)
            {
                Local6 = Arg1
                Local0 = Zero
                While (One)
                {
                    Local1 = MM07 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM06 (Arg0, Local0)
                                    Local3 /= DerefOf (Local1 [0x04])
                                    If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                        )))
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }
                                    Else
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }

                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM06 (Arg0, Local0)
                                Local3 /= DerefOf (Local1 [0x04])
                                If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                    )))
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }
                                Else
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }

                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM08, 1, NotSerialized)
            {
                Local6 = MM10 (Arg0)
                Local0 = Zero
                While (One)
                {
                    Local1 = MM07 (Arg0, Local0)
                    If ((Local1 != Ones))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM06 (Arg0, Local0)
                                    Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                        Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM06 (Arg0, Local0)
                                Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                    Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM09, 2, NotSerialized)
            {
                Local0 = Zero
                While (One)
                {
                    Local1 = MM06 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If (((Arg1 >= DerefOf (Local1 [0x02])) && (
                            Arg1 <= DerefOf (Local1 [0x03]))))
                        {
                            Local3 = (Arg1 - DerefOf (Local1 [0x02]))
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM07 (Arg0, Local0)
                                Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                    Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                Return (Zero)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM15, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local4 = DerefOf (Local0 [0x02])
                        Local2 = SizeOf (Local4)
                        Local3 = Zero
                        While ((Local3 < Local2))
                        {
                            If ((Arg1 == DerefOf (Local4 [Local3])))
                            {
                                Return (DerefOf (DerefOf (Local0 [0x03]) [Local3]))
                            }

                            Local3++
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM16, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local1 = Match (DerefOf (Local0 [0x03]), MEQ, Arg1, MTR, Zero, 
                            Zero)
                        If ((Local1 != Ones))
                        {
                            Return (DerefOf (DerefOf (Local0 [0x02]) [Local1]))
                        }
                    }
                }

                Return ("Unknown")
            }

            Method (MM20, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local4 = DerefOf (Local0 [0x02])
                        Local2 = SizeOf (Local4)
                        If ((Arg1 < Local2))
                        {
                            Return (DerefOf (DerefOf (Local0 [0x03]) [Arg1]))
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM21, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local1 = Match (DerefOf (Local0 [0x03]), MEQ, Arg1, MTR, Zero, 
                            Zero)
                        If ((Local1 != Ones))
                        {
                            Return (Local1)
                        }
                    }
                }

                Return (0xFF)
            }

            Method (XDP8, 1, Serialized)
            {
                Acquire (SME0, 0xFFFF)
                Local0 = (((SMB3 (Arg0, 0xFD) | (SMB3 (Arg0, 0xFC) << 0x08
                    )) | (SMB3 (Arg0, 0x6E) << 0x10)) | (SMB3 (Arg0, 0x6F) << 
                    0x18))
                Release (SME0)
                Return (Local0)
            }

            Method (XDPV, 1, Serialized)
            {
                Acquire (SME0, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x6E)
                Local1 = SMB3 (Arg0, 0x6F)
                Local2 = SMB3 (Arg0, 0xFC)
                Release (SME0)
                If ((((Local0 == 0x52) && (Local1 == 0x49)) && (Local2 == 0x7C)))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (XDPU, 1, Serialized)
            {
                Acquire (SME0, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x74)
                Release (SME0)
                Return (Local0)
            }

            Method (XDPE, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local3 = SMB5 (Arg0, (Local1 & 0xFF))
                Release (SME0)
                Return (Local3)
            }

            Method (XDPF, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = Arg2
                SMB4 (Arg0, (Local1 & 0xFF), Local5)
                Release (SME0)
                Return (Zero)
            }

            Method (XDP9, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                }
                Else
                {
                    Local0 = 0x08090082
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local5 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local5)
            }

            Method (XDPA, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }
                Else
                {
                    Local0 = 0x08090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), Zero)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), 0xA55A)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB4 (Arg0, (Local0 & 0xFF), Arg2)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), Zero)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), One)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPW, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local2 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SME0)
                Return (Local2)
            }

            Method (XDPX, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 & One))
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPC, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local2 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local2)
            }

            Method (XDPB, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB2 (Arg0, (Local0 & 0xFF), Arg2)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPD, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x040800B0
                }
                Else
                {
                    Local0 = 0x080800B1
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local1 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local1)
            }

            Method (XDPM, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SME0)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPN, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPJ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SME0)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPK, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPO, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local3)
            }

            Method (XDPP, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPY, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local3)
            }

            Method (XDPZ, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPQ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SME0)
                Return (Local3)
            }

            Method (XDPR, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SME0, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SME0)
                Return (Zero)
            }

            Method (XDPS, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SME0, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4D)
                    Local1 = SMB3 (Arg0, 0x4A)
                    Local2 = SMB3 (Arg0, 0x4B)
                    Local4 = ((Local0 + (Local1 << 0x08)) + (Local2 << 0x10
                        ))
                    Release (SME0)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SME0, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4C)
                    Local4 = Local0
                    Release (SME0)
                }

                Return (Local4)
            }

            Method (XDPT, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SME0, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4D, (Arg2 & 0xFF))
                    SMB2 (Arg0, 0x4A, ((Arg2 >> 0x08) & 0xFF))
                    SMB2 (Arg0, 0x4B, ((Arg2 >> 0x10) & 0xFF))
                    Release (SME0)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SME0, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4C, (Arg2 & 0xFF))
                    Release (SME0)
                }

                Return (Zero)
            }

            Method (IRCU, 1, Serialized)
            {
                Return (Ones)
            }

            Method (IRCE, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCF, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRC9, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCA, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCC, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCB, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCD, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCM, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCN, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCO, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCP, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCQ, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCR, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCS, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCT, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (ISM0, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMD, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMF, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                Local6 = HWC0 ((Arg0 >> 0x08))
                Sleep (0x64)
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Local2 = CMN1 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Return (Local2)
            }

            Method (ISMG, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                Local2 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Local2 = CMN0 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), Arg2)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), Local2)
                Sleep (0x64)
                Return (Zero)
            }

            Method (ISM5, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                Local6 = HWC0 ((Arg0 >> 0x08))
                Local4 = SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), 
                    Arg1)
                Sleep (0x64)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM6, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                Local2 = 0x000800E7
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISME, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010008B
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                Return (SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF)))
            }

            Method (ISM4, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                Return (SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF)))
            }

            Method (ISM3, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Sleep (0x64)
                Return (Zero)
            }

            Method (ISM2, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                Return (SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF)))
            }

            Method (ISM1, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Sleep (0x64)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Sleep (0x64)
                Return (Zero)
            }

            Method (ISM7, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM8, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISM9, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMA, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMH, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMI, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMJ, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMK, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISML, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMM, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMN, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMO, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMP, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMQ, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMR, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000EA
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMS, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000EA
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMT, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100033
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMU, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100033
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM2 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISMV, 2, Serialized)
            {
                Local0 = 0x001000C5
                Local1 = 0x001000C7
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), Arg1)
                Local3 = SMM5 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF))
                Return (Local3)
            }

            Method (ISMW, 3, Serialized)
            {
                Local0 = 0x001000C5
                Local1 = 0x001000C7
                Local6 = HWC0 ((Arg0 >> 0x08))
                SMM4 (Local6, (Arg0 & 0xFF), (Local1 & 0xFF), Arg1)
                SMM4 (Local6, (Arg0 & 0xFF), (Local0 & 0xFF), (Arg2 & 
                    0xFFFF))
                Return (Zero)
            }

            Method (ISK0, 1, Serialized)
            {
                If (ISMD (Arg0))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ISK5, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM5 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK6, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM6 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK4, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM4 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK3, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM3 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK2, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM2 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK1, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM1 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK7, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM7 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK8, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM8 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK9, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM9 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISKA, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISMA (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (NCT0, 1, Serialized)
            {
                Local0 = HWC0 ((Arg0 >> 0x08))
                Return ((SMM3 (Local0, (Arg0 & 0xFF), 0x5D) | (SMM3 (Local0, 
                    (Arg0 & 0xFF), 0x5E) << 0x08)))
            }

            Method (NCT1, 2, Serialized)
            {
                Local0 = HWC0 ((Arg0 >> 0x08))
                Return (SMM3 (Local0, (Arg0 & 0xFF), Arg1))
            }

            Method (NCT2, 3, Serialized)
            {
                Local0 = HWC0 ((Arg0 >> 0x08))
                Local1 = SMM2 (Local0, (Arg0 & 0xFF), Arg1, Arg2)
                Return (Local1)
            }

            Name (EZVU, "None None None")
            Name (EZVV, 0xFFFF)
            Name (EZVW, "None None None")
            Name (EZVX, 0xFFFF)
            Name (EZW0, "None None None")
            Name (EZW1, "None None None")
            Method (EZV7, 1, Serialized)
            {
                Local0 = EZVK (0x80000005, EZVU)
                If ((Local0 == 0x02))
                {
                    EZV4 (0x06, EZVV)
                }
                ElseIf ((Local0 == 0x03))
                {
                    EZV4 (0x05, EZVV)
                }
                ElseIf ((Local0 == Zero)) {}
                Local0 = EZVK (0x8000000A, EZVW)
                If ((Local0 == 0x02))
                {
                    EZV4 (0x0A, EZVX)
                }
                ElseIf ((Local0 == 0x03))
                {
                    EZV4 (0x0A, EZVX)
                }
                ElseIf ((Local0 == Zero)) {}
                EZVI (0x1B, EZW0)
                EZVI (0x4D, EZW1)
            }

            Method (EZV8, 1, Serialized)
            {
                If ((Arg0 == 0x05)) {}
                Else
                {
                    EZVU = EZVH (0x80000005)
                    Local0 = EZVK (0x80000005, EZVU)
                    If ((Local0 == 0x02))
                    {
                        EZVV = EZV3 (0x06)
                    }
                    ElseIf ((Local0 == 0x03))
                    {
                        EZVV = EZV3 (0x05)
                    }

                    EZVW = EZVH (0x8000000A)
                    Local0 = EZVK (0x80000005, EZVW)
                    If ((Local0 == 0x02))
                    {
                        EZVX = EZV3 (0x0B)
                    }
                    ElseIf ((Local0 == 0x03))
                    {
                        EZVX = EZV3 (0x0A)
                    }

                    EZW0 = EZVH (0x1B)
                    EZW1 = EZVH (0x4D)
                }
            }

            Method (EZV5, 0, Serialized)
            {
                EZW3 ()
                EZVM ()
            }

            Method (EZW3, 0, Serialized)
            {
                EZW4 (0x22)
                If ((AX3D == One))
                {
                    EZW4 (0x06)
                    EZW4 (0x05)
                    EZW4 (0x80000005)
                }
            }

            Method (EZW4, 1, Serialized)
            {
                Local0 = MM19 (Arg0)
                If ((Local0 != Ones))
                {
                    DerefOf (GSAT [Local0]) [Zero] = Ones
                }
            }

            Method (EZVM, 0, Serialized)
            {
                If ((((M085 == 0x0C) || (M085 == 0x0B)) || (M085 == 0x08)))
                {
                    Local0 = MM19 (0x1B)
                    If ((Local0 != Ones))
                    {
                        DerefOf (DerefOf (GSAT [Local0]) [0x03]) [0x03]
                             = DerefOf (DerefOf (DerefOf (GSAT [Local0]) [0x03]) [0x05]
                            )
                    }
                }
                Else
                {
                }

                If ((((M085 == 0x0C) || (M085 == 0x0B)) || (M085 == 0x08)))
                {
                    Local0 = MM19 (0x4D)
                    If ((Local0 != Ones))
                    {
                        DerefOf (DerefOf (GSAT [Local0]) [0x03]) [0x03]
                             = DerefOf (DerefOf (DerefOf (GSAT [Local0]) [0x03]) [0x05]
                            )
                    }
                }
                Else
                {
                }
            }

            Name (EZW2, "1.0")
            Name (EZVZ, "")
            Method (EZVY, 3, NotSerialized)
            {
                Local7 = EZVZ /* \GSA1.EZVZ */
                Local6 = DerefOf (Local7 [0x02])
                Return (Zero)
            }

            Method (EZV6, 0, Serialized)
            {
                Return (0xD6DC)
            }

            Method (EZV0, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Local1 = DerefOf (Local0 [One])
                    If ((DerefOf (DerefOf (Local0 [0x03]) [One]) == Zero))
                    {
                        Local7 = "I"
                        Local3 = ToHexString (DerefOf (Local0 [0x05]), Local4)
                        Local2 = ""
                        Local6 = Zero
                        Local4 = DerefOf (Local0 [0x03])
                        Local4 = (SizeOf (Local4) - 0x02)
                        While ((Local6 < Local4))
                        {
                            If ((Local6 != Zero))
                            {
                                Concatenate (Local2, ":", Local2)
                            }

                            Local5 = MM17 (DerefOf (DerefOf (Local0 [0x03]) [(0x02 + 
                                Local6)]))
                            Concatenate (Local2, Local5, Local2)
                            Local6++
                        }
                    }
                    Else
                    {
                        Local7 = "S"
                        Local3 = DerefOf (DerefOf (Local0 [0x03]) [0x04])
                        Local2 = MM18 (DerefOf (DerefOf (Local0 [0x03]) [0x02]))
                    }

                    Concatenate (Local1, ":", Local1)
                    Local4 = ToHexString (DerefOf (DerefOf (Local0 [0x03]) [Zero])
                        )
                    Concatenate (Local1, Local4, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local7, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local3, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local2, Local1)
                    Return (Local1)
                }

                Return (Ones)
            }

            Method (EZVC, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                }

                Return (Ones)
            }

            Method (EZVB, 1, NotSerialized)
            {
                Local0 = EZVC (Arg0)
                Local1 = MM01 (Local0)
                If ((ObjectType (Local1) == 0x04))
                {
                    Return (DerefOf (Local1 [0x02]))
                }

                Return (Ones)
            }

            Method (EZV1, 1, NotSerialized)
            {
                Local0 = EZVB (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Local2 = Zero
                    If ((Local2 == DerefOf (Local0 [0x03])))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Return (Ones)
            }

            Method (EZV2, 2, NotSerialized)
            {
                Local0 = EZVB (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((Arg1 == One))
                    {
                        Local1 = DerefOf (Local0 [0x03])
                    }
                    Else
                    {
                        Local1 = DerefOf (Local0 [0x04])
                    }
                }
            }

            Method (EZV3, 1, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero) {}
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x04090082)
                            {
                                Local1 = XDP9 (Local7, Local6)
                            }
                            Case (0x08090082)
                            {
                                Local1 = XDP9 (Local7, Local6)
                            }
                            Case (0x04080054)
                            {
                                Local1 = XDPC (Local7, Local6)
                            }
                            Case (0x08080054)
                            {
                                Local1 = XDPC (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local1 = NCT1 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                            DerefOf (DerefOf (Local0 [0x02]) [0x03]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x00100021)
                            {
                                Local1 = ISM2 (Local7, Local6)
                                If ((Local1 == Zero)) {}
                                If ((Arg0 == 0x0A))
                                {
                                    If ((Local1 > 0x05DC))
                                    {
                                        Local1 = Zero
                                    }
                                }
                            }
                            Case (0x00100023)
                            {
                                Local1 = ISM4 (Local7, Local6)
                                If ((Local1 == Zero)) {}
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        Return (Ones)
                    }
                }

                Return (Ones)
            }

            Method (EZV4, 2, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero) {}
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local1 = NCT2 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                                DerefOf (DerefOf (Local0 [0x02]) [0x03]), Local2)
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x04090082)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPA (Local7, Local6, Local2)
                                }
                                Case (0x08090082)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPA (Local7, Local6, Local2)
                                }
                                Case (0x04080054)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPB (Local7, Local6, Local2)
                                }
                                Case (0x08080054)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPB (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = Ones
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x00100021)
                                {
                                    Local1 = ISM1 (Local7, Local6, Local2)
                                    Local1 = ISMG (Local7, Local6, 0x03)
                                }
                                Case (0x00100023)
                                {
                                    Local1 = ISM3 (Local7, Local6, Local2)
                                    Local1 = ISMG (Local7, Local6, One)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                }

                Return (One)
            }

            Method (EZV9, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x05]))
                }

                Return (One)
            }

            Method (EZVA, 1, NotSerialized)
            {
                Local0 = MM02 (Arg0)
                Return (Local0)
            }

            Method (EZVF, 2, NotSerialized)
            {
                Local0 = MM13 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVG, 2, NotSerialized)
            {
                Local0 = MM12 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVH, 1, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero) {}
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x040800B0)
                            {
                                Local3 = XDP9 (Local7, Local6)
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = Zero
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x080800B1)
                            {
                                Local3 = XDP9 (Local7, Local6)
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = Zero
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x06100050)
                            {
                                Local1 = XDPE (Local7, Local6)
                            }
                            Case (0x0A100050)
                            {
                                Local1 = XDPE (Local7, Local6)
                            }
                            Case (0x04040C22)
                            {
                                Local1 = XDPM (Local7, Local6)
                            }
                            Case (0x08040C22)
                            {
                                Local1 = XDPM (Local7, Local6)
                            }
                            Case (0x0610008C)
                            {
                                Local1 = XDPO (Local7, Local6)
                            }
                            Case (0x0A10008C)
                            {
                                Local1 = XDPO (Local7, Local6)
                            }
                            Case (0x0610009E)
                            {
                                Local1 = XDPY (Local7, Local6)
                            }
                            Case (0x0A10009E)
                            {
                                Local1 = XDPY (Local7, Local6)
                            }
                            Case (0x06100066)
                            {
                                Local1 = XDPQ (Local7, Local6)
                            }
                            Case (0x0A100066)
                            {
                                Local1 = XDPQ (Local7, Local6)
                            }
                            Case (0x0004044B)
                            {
                                Local1 = XDPS (Local7, Local6)
                            }
                            Case (0x0004044C)
                            {
                                Local1 = XDPS (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x000204F0)
                            {
                                Local1 = ISMF (Local7, Local6)
                                If ((Local1 == One))
                                {
                                    Local1 = 0x02
                                }
                            }
                            Case (0x00100028)
                            {
                                Local1 = ISM5 (Local7, Local6)
                            }
                            Case (0x00100042)
                            {
                                Local1 = ISMH (Local7, Local6)
                            }
                            Case (0x00100046)
                            {
                                Local1 = ISMJ (Local7, Local6)
                            }
                            Case (0x001000E6)
                            {
                                Local1 = ISML (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x14))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x000204F0)
                            {
                                Local1 = ISMF (Local7, Local6)
                                If ((Local1 == One))
                                {
                                    Local1 = 0x02
                                }
                            }
                            Case (0x00100028)
                            {
                                Local1 = ISM5 (Local7, Local6)
                            }
                            Case (0x00100042)
                            {
                                Local1 = ISMN (Local7, Local6)
                            }
                            Case (0x00100046)
                            {
                                Local1 = ISMP (Local7, Local6)
                            }
                            Case (0x00100033)
                            {
                                Local1 = ISMT (Local7, Local6)
                            }
                            Case (0xEA38)
                            {
                                Local1 = ISMV (Local7, 0xEA38)
                            }
                            Case (0xEAB8)
                            {
                                Local1 = ISMV (Local7, 0xEAB8)
                            }
                            Case (0xEB38)
                            {
                                Local1 = ISMV (Local7, 0xEB38)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local1 = NCT1 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                            DerefOf (DerefOf (Local0 [0x02]) [0x03]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x04))
                    {
                        Local1 = M009 (DerefOf (DerefOf (Local0 [0x02]) [0x02]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x13))
                    {
                        Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local2 = Zero
                        Local1 = Zero
                        While ((Local2 < Local3))
                        {
                            Local1 = ((Local1 << One) | M009 (DerefOf (DerefOf (Local0 [
                                0x02]) [(0x03 + Local2)])))
                            Local2++
                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0C))
                    {
                        Local4 = (DerefOf (DerefOf (Local0 [0x02]) [0x02]) - 0x10)
                        Local1 = PIOA ((0x0A00 + (Local4 >> 0x04)), (Local4 & 
                            0x0F), One)
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0D))
                    {
                        Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local2 = Zero
                        Local1 = Zero
                        While ((Local2 < Local3))
                        {
                            Local4 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local2
                                )]) - 0x10)
                            Local1 = ((Local1 << One) | PIOA ((0x0A00 + (Local4 >> 0x04
                                )), (Local4 & 0x0F), One))
                            Local2++
                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                }

                Return (Ones)
            }

            Method (EZVI, 2, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero) {}
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x040800B0)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        XDPA (Local7, Local6, Local3)
                                        EZV4 (0x06, Zero)
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A)) {}
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x0001D4C0)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x080800B1)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        XDPA (Local7, Local6, Local3)
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A)) {}
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00015F90)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x06100050)
                                {
                                    Local1 = XDPF (Local7, Local6, Local2)
                                }
                                Case (0x0A100050)
                                {
                                    Local1 = XDPF (Local7, Local6, Local2)
                                }
                                Case (0x04040C22)
                                {
                                    Local1 = XDPN (Local7, Local6, Local2)
                                }
                                Case (0x08040C22)
                                {
                                    Local1 = XDPN (Local7, Local6, Local2)
                                }
                                Case (0x04040822)
                                {
                                    Local1 = XDPK (Local7, Local6, Local2)
                                }
                                Case (0x08040822)
                                {
                                    Local1 = XDPK (Local7, Local6, Local2)
                                }
                                Case (0x0610008C)
                                {
                                    Local1 = XDPP (Local7, Local6, Local2)
                                }
                                Case (0x0A10008C)
                                {
                                    Local1 = XDPP (Local7, Local6, Local2)
                                }
                                Case (0x0610009E)
                                {
                                    Local1 = XDPZ (Local7, Local6, Local2)
                                }
                                Case (0x0A10009E)
                                {
                                    Local1 = XDPZ (Local7, Local6, Local2)
                                }
                                Case (0x06100066)
                                {
                                    Local1 = XDPR (Local7, Local6, Local2)
                                }
                                Case (0x0A100066)
                                {
                                    Local1 = XDPR (Local7, Local6, Local2)
                                }
                                Case (0x0004044B)
                                {
                                    Local1 = XDPT (Local7, Local6, Local2)
                                }
                                Case (0x0004044C)
                                {
                                    Local1 = XDPT (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x000204F0)
                                {
                                    If ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, Local2)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00016472)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, 0x03)
                                        }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                        Local1 = ISMG (Local7, Local6, One)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = ISMG (Local7, Local6, Local2)
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                    }
                                }
                                Case (0x00100028)
                                {
                                    Local1 = ISM6 (Local7, Local6, Local2)
                                }
                                Case (0x00100042)
                                {
                                    Local1 = ISMI (Local7, Local6, Local2)
                                }
                                Case (0x00100046)
                                {
                                    Local1 = ISMK (Local7, Local6, Local2)
                                }
                                Case (0x001000E6)
                                {
                                    Local1 = ISMM (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x14))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x000204F0)
                                {
                                    If ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, Local2)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00016472)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, Local2)
                                        }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        Local1 = ISMG (Local7, Local6, Local2)
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = ISMG (Local7, Local6, Local2)
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                    }
                                }
                                Case (0x00100028)
                                {
                                    Local1 = ISM6 (Local7, Local6, Local2)
                                }
                                Case (0x00100042)
                                {
                                    Local1 = ISMO (Local7, Local6, Local2)
                                }
                                Case (0x00100046)
                                {
                                    Local1 = ISMQ (Local7, Local6, Local2)
                                    If ((Local2 == 0x09C4))
                                    {
                                        Local2 = 0x08FC
                                    }

                                    Local1 = ISMS (Local7, Local6, Local2)
                                }
                                Case (0x00100033)
                                {
                                    Local1 = ISMU (Local7, Local6, Local2)
                                }
                                Case (0xEA38)
                                {
                                    Local1 = ISMW (Local7, 0xEA38, Local2)
                                }
                                Case (0xEAB8)
                                {
                                    Local1 = ISMW (Local7, 0xEAB8, Local2)
                                }
                                Case (0xEB38)
                                {
                                    Local1 = ISMW (Local7, 0xEB38, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local1 = NCT2 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                                DerefOf (DerefOf (Local0 [0x02]) [0x03]), Local2)
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x04))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            M010 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), Local2)
                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0C))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local5 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local1
                                )]) - 0x10)
                            PIOB ((0x0A00 + (Local5 >> 0x04)), (Local5 & 0x0F), 
                                One, Local2)
                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0D))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local1 = Zero
                            While ((Local1 < Local3))
                            {
                                Local4 = ((Local2 >> ((Local3 - Local1) - One)) & 
                                    One)
                                Local5 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local1
                                    )]) - 0x10)
                                PIOB ((0x0A00 + (Local5 >> 0x04)), (Local5 & 0x0F), 
                                    One, Local4)
                                Local1++
                            }

                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                }

                Return (One)
            }

            Method (EZVJ, 2, NotSerialized)
            {
                Local0 = MM16 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVK, 2, NotSerialized)
            {
                Local0 = MM15 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZW7, 2, NotSerialized)
            {
                Local0 = MM21 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZW8, 2, NotSerialized)
            {
                Local0 = MM20 (Arg0, Arg1)
                Return (Local0)
            }

            Name (SIOQ, 0x2E)
            OperationRegion (SIOH, SystemIO, 0x2E, 0x02)
            Field (SIOH, ByteAcc, NoLock, Preserve)
            {
                SIOI,   8, 
                SIOJ,   8
            }

            IndexField (SIOI, SIOJ, ByteAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                SIOO,   8, 
                Offset (0x20), 
                SIOP,   16
            }

            Mutex (SIOK, 0x00)
            Method (SIOL, 1, NotSerialized)
            {
                Acquire (SIOK, 0x0FFF)
                SIOI = 0x87
                SIOI = One
                SIOI = 0x55
                If ((SIOQ == 0x2E))
                {
                    SIOI = 0x55
                }
                Else
                {
                    SIOI = 0xAA
                }

                SIOO = Arg0
            }

            Method (SIOM, 0, NotSerialized)
            {
                SIOI = 0x02
                SIOJ = 0x02
                Release (SIOK)
            }

            Method (SIOR, 0, NotSerialized)
            {
                Return (SIOP) /* \GSA1.SIOP */
            }

            Name (SIOG, 0x0A45)
            OperationRegion (SIO1, SystemIO, SIOG, 0x02)
            Field (SIO1, ByteAcc, Lock, WriteAsZeros)
            {
                SIO2,   8, 
                SIO3,   8
            }

            IndexField (SIO2, SIO3, ByteAcc, Lock, Preserve)
            {
                Offset (0x0B), 
                FTD1,   3, 
                FTD2,   3, 
                Offset (0x0C), 
                RE1V,   2, 
                FTE6,   1, 
                RE2V,   1, 
                FTE4,   1, 
                FTE5,   1, 
                Offset (0x0D), 
                FTA1,   8, 
                FTA2,   8, 
                FTA3,   8, 
                Offset (0x13), 
                FAE1,   1, 
                FAE2,   1, 
                FAE3,   1, 
                REV1,   1, 
                FTE1,   1, 
                FTE2,   1, 
                FTE3,   1, 
                Offset (0x14), 
                FBE1,   1, 
                FBE2,   1, 
                FBE3,   1, 
                REV2,   4, 
                Offset (0x15), 
                FP10,   7, 
                FP17,   1, 
                FP20,   7, 
                FP27,   1, 
                FP30,   7, 
                FP37,   1, 
                FTB1,   8, 
                FTB2,   8, 
                FTB3,   8, 
                Offset (0x29), 
                FET1,   8, 
                FET2,   8, 
                FET3,   8, 
                FET4,   8, 
                FET5,   8, 
                FET6,   8, 
                Offset (0x44), 
                BEEP,   8, 
                Offset (0x4C), 
                FTA6,   8, 
                FTB6,   8, 
                Offset (0x5C), 
                FBEC,   3, 
                Offset (0x60), 
                FC10,   8, 
                FC11,   8, 
                FC12,   8, 
                FC13,   8, 
                FC14,   8, 
                FC15,   8, 
                FC16,   8, 
                FC17,   8, 
                FC20,   8, 
                FC21,   8, 
                FC22,   8, 
                FC23,   8, 
                FC24,   8, 
                FC25,   8, 
                FC26,   8, 
                FC27,   8, 
                FC30,   8, 
                FC31,   8, 
                FC32,   8, 
                FC33,   8, 
                FC34,   8, 
                FC35,   8, 
                FC36,   8, 
                FC37,   8, 
                FC40,   8, 
                FC41,   8, 
                FC42,   8, 
                FC43,   8, 
                FC44,   8, 
                FC45,   8, 
                FC46,   8, 
                FC47,   8, 
                FTA4,   8, 
                FTB4,   8, 
                FTA5,   8, 
                FTB5,   8, 
                Offset (0xA0), 
                FC50,   8, 
                FC51,   8, 
                FC52,   8, 
                FC53,   8, 
                FC54,   8, 
                FC55,   8, 
                FC56,   8, 
                FC57,   8, 
                FC60,   8, 
                FC61,   8, 
                FC62,   8, 
                FC63,   8, 
                FC64,   8, 
                FC65,   8, 
                FC66,   8, 
                FC67,   8
            }

            Method (SIOE, 0, NotSerialized)
            {
                Return (FBEC) /* \GSA1.FBEC */
            }

            Method (SIOF, 1, NotSerialized)
            {
                FBEC = Arg0
            }

            Method (SIOA, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = Zero
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = Zero
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = Zero
                    }

                }
            }

            Method (SIO9, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = One
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = One
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = One
                    }

                }
            }

            Method (SIOD, 1, Serialized)
            {
                Local1 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (((FBE1 == Zero) && (FAE1 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (One)
                    {
                        If (((FBE2 == Zero) && (FAE2 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (0x02)
                    {
                        If (((FBE3 == Zero) && (FAE3 == Zero)))
                        {
                            Local1 = One
                        }
                    }

                }

                Return (Local1)
            }

            Method (SIO0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FET1) /* \GSA1.FET1 */
                    }
                    Case (One)
                    {
                        Return (FET2) /* \GSA1.FET2 */
                    }
                    Case (0x02)
                    {
                        Return (FET3) /* \GSA1.FET3 */
                    }
                    Case (0x03)
                    {
                        Return (FET4) /* \GSA1.FET4 */
                    }
                    Case (0x04)
                    {
                        Return (FET5) /* \GSA1.FET5 */
                    }
                    Case (0x05)
                    {
                        Return (FET6) /* \GSA1.FET6 */
                    }

                }
            }

            Method (SIO4, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (((FTB1 << 0x08) | FTA1))
                    }
                    Case (One)
                    {
                        Return (((FTB2 << 0x08) | FTA2))
                    }
                    Case (0x02)
                    {
                        Return (((FTB3 << 0x08) | FTA3))
                    }
                    Case (0x03)
                    {
                        Return (((FTB4 << 0x08) | FTA4))
                    }
                    Case (0x04)
                    {
                        Return (((FTB5 << 0x08) | FTA5))
                    }
                    Case (0x05)
                    {
                        Return (((FTB6 >> 0x08) | FTA6))
                    }

                }
            }

            Method (SIOC, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FP10 = Arg1
                    }
                    Case (One)
                    {
                        FP20 = Arg1
                    }
                    Case (0x02)
                    {
                        FP30 = Arg1
                    }

                }
            }

            Method (SIOB, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FP10) /* \GSA1.FP10 */
                    }
                    Case (One)
                    {
                        Return (FP20) /* \GSA1.FP20 */
                    }
                    Case (0x02)
                    {
                        Return (FP30) /* \GSA1.FP30 */
                    }

                }

                Return (Zero)
            }

            Method (SIO7, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC10) /* \GSA1.FC10 */
                    }
                    Case (One)
                    {
                        Return (FC20) /* \GSA1.FC20 */
                    }
                    Case (0x02)
                    {
                        Return (FC30) /* \GSA1.FC30 */
                    }
                    Case (0x03)
                    {
                        Return (FC40) /* \GSA1.FC40 */
                    }
                    Case (0x04)
                    {
                        Return (FC50) /* \GSA1.FC50 */
                    }
                    Case (0x05)
                    {
                        Return (FC60) /* \GSA1.FC60 */
                    }

                }

                Return (Zero)
            }

            Method (SIO5, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC11) /* \GSA1.FC11 */
                    }
                    Case (One)
                    {
                        Return (FC21) /* \GSA1.FC21 */
                    }
                    Case (0x02)
                    {
                        Return (FC31) /* \GSA1.FC31 */
                    }
                    Case (0x03)
                    {
                        Return (FC41) /* \GSA1.FC41 */
                    }
                    Case (0x04)
                    {
                        Return (FC51) /* \GSA1.FC51 */
                    }
                    Case (0x05)
                    {
                        Return (FC61) /* \GSA1.FC61 */
                    }

                }

                Return (Zero)
            }

            Method (SIO8, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC10 = Arg1
                    }
                    Case (One)
                    {
                        FC20 = Arg1
                    }
                    Case (0x02)
                    {
                        FC30 = Arg1
                    }
                    Case (0x03)
                    {
                        FC40 = Arg1
                    }
                    Case (0x04)
                    {
                        FC50 = Arg1
                    }
                    Case (0x05)
                    {
                        FC60 = Arg1
                    }

                }
            }

            Method (SIO6, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC11 = Arg1
                    }
                    Case (One)
                    {
                        FC21 = Arg1
                    }
                    Case (0x02)
                    {
                        FC31 = Arg1
                    }
                    Case (0x03)
                    {
                        FC41 = Arg1
                    }
                    Case (0x04)
                    {
                        FC51 = Arg1
                    }
                    Case (0x05)
                    {
                        FC61 = Arg1
                    }

                }
            }

            Name (ZRC8, Package (0x03)
            {
                Package (0x02)
                {
                    Zero, 
                    0x05
                }, 

                Package (0x02)
                {
                    One, 
                    0x60
                }, 

                Package (0x02)
                {
                    0x02, 
                    0x61
                }
            })
            Name (ZRCL, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x02, 0x00                     // .....
            })
            Name (ZRCT, Zero)
            Name (ZRCF, Zero)
            Name (ZRCG, 0x1E)
            Method (ZRCQ, 0, NotSerialized)
            {
                ZRCU (Zero)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        ZRCL [((Local6 * 0x07) + 0x02)] = ZRC1 (
                            Local1)
                        ZRC2 (Local1, 0x02)
                        If ((SIO4 (Local1) != 0xFFFF))
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = 0xFF
                        }
                        Else
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = Zero
                        }
                    }

                    Local6++
                }

                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            ZRC2 (Local1, 0x02)
                            SIOA (Local1)
                        }
                    }

                    Local6++
                }

                Sleep (0x1770)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            Local3 = SIO4 (Local1)
                            If (((Local3 == 0xFFFF) && (Local1 != 0x02)))
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x03
                            }
                            Else
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x04
                            }

                            SIO9 (Local1)
                        }

                        ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                            ))
                    }

                    Local6++
                }

                ZRCU (One)
            }

            Method (ZRCB, 1, Serialized)
            {
                ZRCU (Zero)
            }

            Method (ZRCP, 1, Serialized)
            {
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                            ))
                    }

                    Local6++
                }
            }

            Name (ZRD0, Zero)
            Method (ZRC0, 0, NotSerialized)
            {
                ZRCU (Zero)
                ZRCV ()
                ZRCU (One)
                ZRD0 = One
            }

            Method (ZRCU, 1, Serialized)
            {
                If (Arg0)
                {
                    ZRCT = One
                }
                Else
                {
                    ZRCT = Zero
                }
            }

            Method (ZRC9, 0, Serialized)
            {
                Return (0x20)
            }

            Method (ZRCW, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x05)]))
            }

            Method (ZRCX, 2, NotSerialized)
            {
                ZRCL [((Arg0 * 0x07) + 0x05)] = Arg1
            }

            Method (ZRCY, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x06)]))
            }

            Method (ZRCZ, 2, NotSerialized)
            {
                If (((ZRD1 == Zero) && (ZRD2 == One)))
                {
                    ZRD1 = One
                    Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                }

                ZRCL [((Arg0 * 0x07) + 0x06)] = Arg1
                Sleep (0x03E8)
                If ((Arg1 == Zero))
                {
                    ZRCM (Arg0, One)
                }
            }

            Method (ZRC5, 1, NotSerialized)
            {
                Return (SIO4 (Arg0))
            }

            Method (ZRCD, 1, NotSerialized)
            {
                If (ZRCF)
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                ElseIf ((Arg0 == 0x0A))
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                Else
                {
                    Return (SIO0 (Arg0))
                }
            }

            Method (ZRCE, 1, NotSerialized)
            {
                ZRCG = Arg0
            }

            Method (ZRCJ, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (DerefOf (ZRC8 [Local0]))
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCK, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCV, 0, NotSerialized)
            {
                If (((M085 == 0x0C) || (M085 == 0x0B)))
                {
                    DerefOf (ZRC8 [Zero]) [One] = 0x05
                    DerefOf (ZRC8 [One]) [One] = 0x87
                    DerefOf (ZRC8 [0x02]) [One] = 0x8D
                }
                ElseIf ((M085 == 0x0D))
                {
                    DerefOf (ZRC8 [Zero]) [One] = 0x05
                    DerefOf (ZRC8 [One]) [One] = 0x44
                    DerefOf (ZRC8 [0x02]) [One] = 0x8E
                }
                Else
                {
                }
            }

            Method (ZRC1, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((M011 ((M084 + 0x1502), (Local1 * 0x04), 0x07, 
                        One) == Zero))
                    {
                        Return (0x02)
                    }
                    ElseIf ((M011 ((M084 + 0x1502), (Local1 * 0x04), 
                        0x06, One) == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Ones)
            }

            Method (ZRC2, 2, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((Arg1 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x02)
                    }
                    ElseIf ((Arg1 == One))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x03)
                    }
                    Else
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, Zero)
                    }
                }
            }

            Method (ZRC7, 3, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    ZRCL [((Arg0 * 0x07) + Zero)] = Arg1
                    ZRCL [((Arg0 * 0x07) + One)] = Arg2
                }
            }

            Method (ZRCA, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local0 = DerefOf (ZRCL [((Arg0 * 0x07) + Zero)]
                        )
                    Local1 = DerefOf (ZRCL [((Arg0 * 0x07) + One)]
                        )
                    Return ((Local0 | (Local1 << 0x08)))
                }

                Return (Ones)
            }

            Method (ZRCR, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x04)]))
            }

            Method (ZRCM, 2, NotSerialized)
            {
                Local7 = ZRCK (Arg0)
                If ((Local7 != Ones))
                {
                    If (Arg1)
                    {
                        If ((ZRCR (Arg0) == 0x04))
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                        Else
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                    }
                    Else
                    {
                        ZRC2 (Arg0, Zero)
                        SIOA (Arg0)
                    }
                }
            }

            Name (ZRD1, Zero)
            Name (ZRD2, Zero)
            Method (ZRC3, 0, NotSerialized)
            {
                If ((ZRCT == One))
                {
                    If ((ZRD0 == One))
                    {
                        ZRCU (Zero)
                        ZRD0 = Zero
                        ZRCQ ()
                        ZRCU (One)
                    }

                    Local6 = Zero
                    Local5 = SizeOf (ZRC8)
                    While ((Local6 < Local5))
                    {
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x06)]))
                        {
                            Local0 = ZRCD (DerefOf (ZRCL [((Local6 * 0x07) + 0x05
                                )]))
                            Local7 = ZRCJ (Local6)
                            If ((ObjectType (Local7) == 0x04))
                            {
                                Local1 = DerefOf (Local7 [Zero])
                                If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                                {
                                    Local2 = DerefOf (ZRCL [((Local1 * 0x07) + One)]
                                        )
                                    Local3 = DerefOf (ZRCL [((Local1 * 0x07) + Zero)]
                                        )
                                    Local4 = SIO4 (Local1)
                                    If ((Local1 == 0x02))
                                    {
                                        If ((Local4 == 0xFFFF))
                                        {
                                            If (SIOD (Local1))
                                            {
                                                Local4 = 0xFFFF
                                            }
                                            Else
                                            {
                                                Local4 = 0x0BB8
                                            }
                                        }
                                    }

                                    If ((Local4 != 0xFFFF))
                                    {
                                        If ((Local0 <= Local3))
                                        {
                                            ZRCM (Local1, Zero)
                                        }

                                        If ((Local0 >= Local2))
                                        {
                                            ZRCM (Local1, One)
                                        }
                                    }
                                    Else
                                    {
                                        If ((Local0 <= Local3))
                                        {
                                            ZRCM (Local1, Zero)
                                        }

                                        If ((Local0 >= Local2))
                                        {
                                            ZRCM (Local1, One)
                                        }
                                    }
                                }
                            }
                        }

                        Local6++
                    }
                }
            }

            Scope (\_TZ)
            {
                ThermalZone (TZ10)
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        \GSA1.ZRC0 ()
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = Zero
                        If (\_OSI ("Windows 2001"))
                        {
                            Local0 = 0x04
                        }

                        If (\_OSI ("Windows 2001.1"))
                        {
                            Local0 = 0x05
                        }

                        If (\_OSI ("FreeBSD"))
                        {
                            Local0 = 0x06
                        }

                        If (\_OSI ("HP-UX"))
                        {
                            Local0 = 0x07
                        }

                        If (\_OSI ("OpenVMS"))
                        {
                            Local0 = 0x08
                        }

                        If (\_OSI ("Windows 2001 SP1"))
                        {
                            Local0 = 0x09
                        }

                        If (\_OSI ("Windows 2001 SP2"))
                        {
                            Local0 = 0x0A
                        }

                        If (\_OSI ("Windows 2001 SP3"))
                        {
                            Local0 = 0x0B
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            Local0 = 0x0C
                        }

                        If (\_OSI ("Windows 2006 SP1"))
                        {
                            Local0 = 0x0D
                        }

                        If (\_OSI ("Windows 2009"))
                        {
                            Local0 = 0x0E
                        }

                        If (\_OSI ("Windows 2012"))
                        {
                            Local0 = 0x0F
                        }

                        If (\_OSI ("Windows 2013"))
                        {
                            Local0 = 0x10
                        }

                        If (\_OSI ("Windows 2015"))
                        {
                            Local0 = 0x11
                        }

                        If (\_OSI ("Windows 2016"))
                        {
                            Local0 = 0x12
                        }

                        If (\_OSI ("Windows 2017"))
                        {
                            Local0 = 0x13
                        }

                        If (\_OSI ("Windows 2017.2"))
                        {
                            Local0 = 0x14
                        }

                        If (\_OSI ("Windows 2018"))
                        {
                            Local0 = 0x15
                        }

                        If (\_OSI ("Windows 2018.2"))
                        {
                            Local0 = 0x16
                        }

                        If (\_OSI ("Windows 2019"))
                        {
                            Local0 = 0x17
                        }

                        If (\_OSI ("Windows 2020"))
                        {
                            Local0 = 0x18
                        }

                        If (\_OSI ("Windows 2021"))
                        {
                            Local0 = 0x19
                        }

                        If (\_OSI ("Windows 2022"))
                        {
                            Local0 = 0x1A
                        }

                        If ((Local0 <= 0x0E))
                        {
                            \GSA1.ZRD2 = One
                            Return (Zero)
                        }

                        Return (0x0B)
                    }

                    Name (TZD, Package (0x00) {})
                    Method (_TZD, 0, Serialized)  // _TZD: Thermal Zone Devices
                    {
                        Return (TZD) /* \_TZ_.TZ10.TZD_ */
                    }

                    Name (PSL, Package (0x00) {})
                    Method (_PSL, 0, Serialized)  // _PSL: Passive List
                    {
                        Return (PSL) /* \_TZ_.TZ10.PSL_ */
                    }

                    Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                    {
                        Return (0x0B54)
                    }

                    Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
                    {
                        Return (0x0B72)
                    }

                    Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                    {
                        Return (0x0B7C)
                    }

                    Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                    {
                        Return (Zero)
                    }

                    Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                    {
                        Return (Zero)
                    }

                    Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                    {
                        Return (0x0A)
                    }

                    Method (_TZP, 0, Serialized)  // _TZP: Thermal Zone Polling
                    {
                        Return (0x0A)
                    }

                    Method (_TMP, 0, Serialized)  // _TMP: Temperature
                    {
                        \GSA1.ZRC3 ()
                        If ((\GSA1.ZRD1 == One))
                        {
                            Sleep (0x03E8)
                            Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                        }

                        Return (0x0B54)
                    }

                    Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
                    {
                    }
                }
            }

            Method (UDA0, 0, Serialized)
            {
            }

            Scope (\_TZ)
            {
                ThermalZone (UAD0)
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        Local0 = \GSA1.UDAA
                        \GSA1.PCI6 (((Local0 >> 0x14) & 0xFF), ((Local0 >> 0x0F
                            ) & 0x1F), ((Local0 >> 0x0C) & 0x07), ((Local0 >> 
                            Zero) & 0x0FFF), 0x08, One, Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = Zero
                        If (\_OSI ("Windows 2001"))
                        {
                            Local0 = 0x04
                        }

                        If (\_OSI ("Windows 2001.1"))
                        {
                            Local0 = 0x05
                        }

                        If (\_OSI ("FreeBSD"))
                        {
                            Local0 = 0x06
                        }

                        If (\_OSI ("HP-UX"))
                        {
                            Local0 = 0x07
                        }

                        If (\_OSI ("OpenVMS"))
                        {
                            Local0 = 0x08
                        }

                        If (\_OSI ("Windows 2001 SP1"))
                        {
                            Local0 = 0x09
                        }

                        If (\_OSI ("Windows 2001 SP2"))
                        {
                            Local0 = 0x0A
                        }

                        If (\_OSI ("Windows 2001 SP3"))
                        {
                            Local0 = 0x0B
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            Local0 = 0x0C
                        }

                        If (\_OSI ("Windows 2006 SP1"))
                        {
                            Local0 = 0x0D
                        }

                        If (\_OSI ("Windows 2009"))
                        {
                            Local0 = 0x0E
                        }

                        If (\_OSI ("Windows 2012"))
                        {
                            Local0 = 0x0F
                        }

                        If (\_OSI ("Windows 2013"))
                        {
                            Local0 = 0x10
                        }

                        If (\_OSI ("Windows 2015"))
                        {
                            Local0 = 0x11
                        }

                        If (\_OSI ("Windows 2016"))
                        {
                            Local0 = 0x12
                        }

                        If (\_OSI ("Windows 2017"))
                        {
                            Local0 = 0x13
                        }

                        If (\_OSI ("Windows 2017.2"))
                        {
                            Local0 = 0x14
                        }

                        If (\_OSI ("Windows 2018"))
                        {
                            Local0 = 0x15
                        }

                        If (\_OSI ("Windows 2018.2"))
                        {
                            Local0 = 0x16
                        }

                        If (\_OSI ("Windows 2019"))
                        {
                            Local0 = 0x17
                        }

                        If (\_OSI ("Windows 2020"))
                        {
                            Local0 = 0x18
                        }

                        If (\_OSI ("Windows 2021"))
                        {
                            Local0 = 0x19
                        }

                        If (\_OSI ("Windows 2022"))
                        {
                            Local0 = 0x1A
                        }

                        If ((Local0 == Zero))
                        {
                            Local0 = 0xFF
                        }

                        If ((Local0 <= 0x0E))
                        {
                            Return (Zero)
                        }

                        Return (0x0B)
                    }

                    Name (TZD, Package (0x00) {})
                    Method (_TZD, 0, Serialized)  // _TZD: Thermal Zone Devices
                    {
                        Return (TZD) /* \_TZ_.UAD0.TZD_ */
                    }

                    Name (PSL, Package (0x00) {})
                    Method (_PSL, 0, Serialized)  // _PSL: Passive List
                    {
                        Return (PSL) /* \_TZ_.UAD0.PSL_ */
                    }

                    Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                    {
                        Return (0x0B54)
                    }

                    Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
                    {
                        Return (0x0B72)
                    }

                    Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                    {
                        Return (0x0B7C)
                    }

                    Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                    {
                        Return (Zero)
                    }

                    Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                    {
                        Return (Zero)
                    }

                    Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                    {
                        Return (0x0A)
                    }

                    Method (_TZP, 0, Serialized)  // _TZP: Thermal Zone Polling
                    {
                        Return (0x0A)
                    }

                    Method (_TMP, 0, Serialized)  // _TMP: Temperature
                    {
                        If ((\GSA1.UDAA != Zero))
                        {
                            Local0 = \GSA1.UDAA
                            If ((\GSA1.PCI5 (((Local0 >> 0x14) & 0xFF), ((
                                Local0 >> 0x0F) & 0x1F), ((Local0 >> 0x0C) & 0x07), (
                                (Local0 >> Zero) & 0x0FFF), 0x08, One) == One))
                            {
                                \GSA1.PCI6 (((Local0 >> 0x14) & 0xFF), ((Local0 >> 0x0F
                                    ) & 0x1F), ((Local0 >> 0x0C) & 0x07), ((Local0 >> 
                                    Zero) & 0x0FFF), 0x08, One, Zero)
                            }
                        }

                        Return (0x0B54)
                    }

                    Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
                    {
                    }
                }
            }

            Name (EVT1, Zero)
            Method (EVT0, 0, Serialized)
            {
            }

            Method (EVT2, 1, Serialized)
            {
                EVT1 = Arg0
                Notify (\GSA1, 0xE2) // Hardware-Specific
            }

            Name (GGGB, "20231016")
            Name (GGGC, Zero)
            Method (GGG1, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG2, 0, Serialized)
            {
                Return (GGGD) /* \GSA1.GGGD */
            }

            Method (GGG3, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x03]))
            }

            Method (GGG4, 0, Serialized)
            {
                Return (DerefOf (GGGA [Zero]))
            }

            Method (GGG5, 0, Serialized)
            {
                Return (DerefOf (GGGA [One]))
            }

            Method (GGG6, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x04]))
            }

            Method (GGG7, 0, Serialized)
            {
                Return (GGG9 (Zero))
            }

            Method (GGG8, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGGM, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x05]))
            }

            Method (GGG9, 1, Serialized)
            {
                Local0 = Zero
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = GGGC /* \GSA1.GGGC */
                    }
                    Case (0x04)
                    {
                        Local0 = 0x60030507
                    }
                    Case (0x08)
                    {
                        Local0 = 0x0020005F
                    }
                    Case (0x0C)
                    {
                        Local0 = 0xD6DC
                    }
                    Case (0x10)
                    {
                        Local0 = CPEX /* \GSA1.CPEX */
                    }
                    Case (0x18)
                    {
                        Local0 = 0xFFED0000
                    }
                    Case (0x1C)
                    {
                        Local0 = 0xFF000000
                    }

                }

                Return (Local0)
            }

            Name (GGGL, Package (0x16)
            {
                0x23A1, 
                0x1FBE, 
                0x1C48, 
                0x1AB1, 
                0x17C8, 
                0x1530, 
                0x12E0, 
                0x11D1, 
                0x0FDF, 
                0x0E24, 
                0x0D59, 
                0x0BE4, 
                0x0A98, 
                0x0970, 
                0x08E8, 
                0x07F0, 
                0x0712, 
                0x06AC, 
                0x05F2, 
                0x054C, 
                0x04B8, 
                0x0474
            })
            Method (GGGH, 3, Serialized)
            {
                Local0 = 0x11D1
                If ((Arg0 == 0x03))
                {
                    Local5 = SizeOf (GGGL)
                    Local0 = Zero
                    If (((Arg1 > Zero) && (Arg1 <= Local5)))
                    {
                        Local0 = DerefOf (GGGL [(Arg1 - One)])
                    }

                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = ((0x001234DE + (Arg1 >> One)) / Arg1)
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }

                If (Local0)
                {
                    PIO7 (0x53, Zero, 0xB6)
                    PIO7 (0x52, Zero, (Local0 & 0xFF))
                    PIO7 (0x52, Zero, ((Local0 >> 0x08) & 0xFF))
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) | 0x03))
                    Sleep (Local1)
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) & 0xFC))
                }
                Else
                {
                    Sleep (Local1)
                }
            }

            Method (MPTS, 1, NotSerialized)
            {
                EZV8 (Arg0)
            }

            Method (MWAK, 1, NotSerialized)
            {
                PFM1 (Arg0)
                ZRCP (Arg0)
                EZV7 (Arg0)
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                GGGC = (GGGC | 0x10)
                GGGC = (GGGC | 0x20)
                GGGC = (GGGC | 0x40)
                PFM0 ()
                GGGC = (GGGC | 0x80)
                GGGC = (GGGC | 0x0800)
                EVT0 ()
                DIM0 ()
                GGGC = (GGGC | 0x2000)
                EZV5 ()
                GGGC = (GGGC | 0x4000)
                UDA0 ()
            }

            Method (_WDG, 0, Serialized)
            {
                Return (QWDG) /* \GSA1.QWDG */
            }

            Name (QWDG, Buffer (0x50)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x43, 0x01, 0x00, 0xEF, 0xBE, 0xAD, 0xDE,  // CC......
                /* 0018 */  0x00, 0x10, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x41, 0x01, 0x01,  // )...AA..
                /* 0028 */  0xEF, 0xBE, 0xAD, 0xDE, 0x01, 0x20, 0x00, 0x00,  // ..... ..
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x42, 0x42, 0x01, 0x02, 0xEF, 0xBE, 0xAD, 0xDE,  // BB......
                /* 0040 */  0x02, 0x40, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // .@......
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0xE2, 0x00, 0x01, 0x08   // ).......
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (WQCC, Buffer (0x2F0D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xFD, 0x2E, 0x00, 0x00, 0x26, 0xFF, 0x01, 0x00,  // ....&...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x3A, 0xB5, 0x01, 0x01, 0x08, 0x09, 0x42,  // .:.....B
                /* 0020 */  0x58, 0x09, 0x84, 0xC4, 0x39, 0xA0, 0x10, 0x81,  // X...9...
                /* 0028 */  0xE4, 0x13, 0x49, 0x0E, 0x0C, 0x4A, 0x02, 0x88,  // ..I..J..
                /* 0030 */  0xE4, 0x40, 0xC8, 0x05, 0x13, 0x13, 0x20, 0x02,  // .@.... .
                /* 0038 */  0x42, 0x5E, 0x05, 0xD8, 0x14, 0x60, 0x12, 0x44,  // B^...`.D
                /* 0040 */  0xFD, 0xFB, 0x43, 0x94, 0x06, 0x45, 0x09, 0x2C,  // ..C..E.,
                /* 0048 */  0x04, 0x42, 0x32, 0x05, 0xF8, 0x16, 0xE0, 0x58,  // .B2....X
                /* 0050 */  0x80, 0x61, 0x01, 0xB2, 0x05, 0x58, 0x86, 0x22,  // .a...X."
                /* 0058 */  0xA8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0060 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x84, 0x83,  // ...h....
                /* 0068 */  0x46, 0x89, 0x81, 0x90, 0x44, 0x58, 0x39, 0xC7,  // F...DX9.
                /* 0070 */  0x96, 0x72, 0x01, 0xA6, 0x05, 0x08, 0x17, 0x20,  // .r..... 
                /* 0078 */  0x1D, 0x43, 0x23, 0xA8, 0x1B, 0x4C, 0x52, 0x05,  // .C#..LR.
                /* 0080 */  0x88, 0x86, 0x11, 0x5A, 0x41, 0x70, 0x1A, 0xC4,  // ...ZAp..
                /* 0088 */  0x51, 0x44, 0x09, 0xC3, 0xF0, 0x8C, 0x19, 0x28,  // QD.....(
                /* 0090 */  0x5C, 0x90, 0x48, 0x86, 0x09, 0x7A, 0x02, 0x41,  // \.H..z.A
                /* 0098 */  0x4A, 0xC6, 0x90, 0x66, 0x2C, 0x02, 0x71, 0x06,  // J..f,.q.
                /* 00A0 */  0x1C, 0x2B, 0x46, 0xA8, 0x90, 0x98, 0x81, 0x04,  // .+F.....
                /* 00A8 */  0x3F, 0x81, 0xAE, 0x31, 0xE4, 0x19, 0x88, 0x58,  // ?..1...X
                /* 00B0 */  0x9F, 0x80, 0x40, 0xA2, 0x47, 0x09, 0x6E, 0x5C,  // ..@.G.n\
                /* 00B8 */  0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26,  // ..1..n`&
                /* 00C0 */  0x88, 0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40,  // .sx....@
                /* 00C8 */  0xFC, 0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x0C, 0x65,  // .......e
                /* 00D0 */  0x51, 0x80, 0x41, 0x0C, 0x29, 0x04, 0x11, 0x42,  // Q.A.)..B
                /* 00D8 */  0x8D, 0x02, 0x6C, 0x0D, 0x56, 0xC6, 0x20, 0x84,  // ..l.V. .
                /* 00E0 */  0x10, 0xC5, 0x08, 0x0C, 0x85, 0x61, 0x46, 0xB1,  // .....aF.
                /* 00E8 */  0xC3, 0x39, 0x0B, 0xA4, 0x36, 0x01, 0xCA, 0x40,  // .9..6..@
                /* 00F0 */  0x04, 0xCA, 0x10, 0x98, 0xFD, 0x41, 0x90, 0x40,  // .....A.@
                /* 00F8 */  0xE7, 0x01, 0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46,  // ....,.DF
                /* 0100 */  0xB6, 0x94, 0x80, 0x1C, 0x06, 0x12, 0x1C, 0x8E,  // ........
                /* 0108 */  0x27, 0xD2, 0xFC, 0xCC, 0x34, 0x2A, 0x26, 0x01,  // '...4*&.
                /* 0110 */  0x50, 0x1A, 0x40, 0x24, 0x0A, 0x42, 0xBF, 0x03,  // P.@$.B..
                /* 0118 */  0x2A, 0x40, 0xCA, 0xC9, 0x80, 0xD8, 0x1E, 0x97,  // *@......
                /* 0120 */  0xE6, 0x74, 0x80, 0xA7, 0xEE, 0xBB, 0xC1, 0x99,  // .t......
                /* 0128 */  0xF9, 0xAC, 0xE0, 0x2D, 0xF8, 0xFF, 0x7F, 0x46,  // ...-...F
                /* 0130 */  0xE0, 0x63, 0xF0, 0x50, 0x0F, 0x21, 0xE0, 0x11,  // .c.P.!..
                /* 0138 */  0xB2, 0x43, 0x82, 0x01, 0xF1, 0xDE, 0x6F, 0x05,  // .C....o.
                /* 0140 */  0x64, 0x2E, 0x06, 0x64, 0x07, 0x85, 0xE7, 0x03,  // d..d....
                /* 0148 */  0xB0, 0x4C, 0xF2, 0x34, 0x8F, 0xA1, 0xE2, 0xA9,  // .L.4....
                /* 0150 */  0x21, 0x8E, 0x04, 0x7C, 0x2A, 0x27, 0xC5, 0x08,  // !..|*'..
                /* 0158 */  0x7C, 0x8C, 0xF0, 0xE8, 0xF8, 0x28, 0x7C, 0x76,  // |....(|v
                /* 0160 */  0x38, 0xED, 0x62, 0x8F, 0x10, 0x54, 0xD6, 0x31,  // 8.b..T.1
                /* 0168 */  0x02, 0x3D, 0xF7, 0x23, 0x0C, 0xF8, 0xD2, 0xD0,  // .=.#....
                /* 0170 */  0xAC, 0x00, 0xA1, 0xF7, 0x00, 0x11, 0xBC, 0x0E,  // ........
                /* 0178 */  0xF8, 0xC6, 0x60, 0x71, 0x30, 0x3A, 0x51, 0xE0,  // ..`q0:Q.
                /* 0180 */  0x87, 0x6E, 0xBF, 0x02, 0x10, 0x42, 0x9F, 0xDB,  // .n...B..
                /* 0188 */  0x49, 0x3C, 0x50, 0x44, 0x48, 0xD0, 0x23, 0x86,  // I<PDH.#.
                /* 0190 */  0x60, 0xCE, 0x2A, 0xD6, 0x01, 0x3C, 0x09, 0x24,  // `.*..<.$
                /* 0198 */  0x28, 0x70, 0x88, 0x68, 0x68, 0xAE, 0x13, 0x53,  // (p.hh..S
                /* 01A0 */  0x43, 0x39, 0x91, 0xB8, 0x41, 0xA3, 0x9C, 0xC0,  // C9..A...
                /* 01A8 */  0xB1, 0x78, 0x9C, 0xC7, 0xF7, 0xD8, 0xE0, 0x23,  // .x.....#
                /* 01B0 */  0xC6, 0x39, 0xBF, 0x05, 0x78, 0x70, 0x9C, 0xC0,  // .9..xp..
                /* 01B8 */  0x12, 0x1F, 0x1E, 0x3E, 0x7B, 0x50, 0x51, 0x30,  // ...>{PQ0
                /* 01C0 */  0xA8, 0xE3, 0x07, 0xE0, 0xE6, 0xFF, 0x7F, 0xFC,  // ........
                /* 01C8 */  0x00, 0x2C, 0x41, 0x3C, 0x7E, 0x80, 0x33, 0x96,  // .,A<~.3.
                /* 01D0 */  0x82, 0xF3, 0x00, 0x3B, 0x7E, 0x00, 0xDC, 0xF8,  // ...;~...
                /* 01D8 */  0xFF, 0x1F, 0x3F, 0xB8, 0x8C, 0x91, 0x1B, 0x96,  // ..?.....
                /* 01E0 */  0x8E, 0xDC, 0xC0, 0xBE, 0x4D, 0x9C, 0x89, 0x21,  // ....M..!
                /* 01E8 */  0x1E, 0x14, 0x4C, 0xE0, 0xD0, 0x10, 0xB2, 0x30,  // ..L....0
                /* 01F0 */  0x74, 0xD0, 0x7C, 0x07, 0x34, 0x74, 0x40, 0xC6,  // t.|.4t@.
                /* 01F8 */  0x09, 0x06, 0xB8, 0x61, 0x3C, 0xC1, 0x00, 0x93,  // ...a<...
                /* 0200 */  0xF0, 0x67, 0x04, 0x54, 0x5C, 0x18, 0x14, 0x81,  // .g.T\...
                /* 0208 */  0xA3, 0x1E, 0x07, 0xE8, 0xC8, 0x3C, 0x30, 0xF8,  // .....<0.
                /* 0210 */  0x07, 0x19, 0x36, 0x97, 0xDA, 0x27, 0xAD, 0x61,  // ..6..'.a
                /* 0218 */  0x9A, 0xC0, 0x23, 0x83, 0xF3, 0xFF, 0x1F, 0x19,  // ..#.....
                /* 0220 */  0xB8, 0xE6, 0x7E, 0x00, 0x98, 0xE3, 0x84, 0x07,  // ..~.....
                /* 0228 */  0xC0, 0xC1, 0x5B, 0xBD, 0x01, 0x10, 0xA5, 0x13,  // ..[.....
                /* 0230 */  0x42, 0x12, 0x84, 0x33, 0xD6, 0xDB, 0xCD, 0x19,  // B..3....
                /* 0238 */  0xBC, 0x1C, 0xF8, 0x28, 0x63, 0x8C, 0xF7, 0x83,  // ...(c...
                /* 0240 */  0xA3, 0xC2, 0x9E, 0x7F, 0x10, 0x47, 0x39, 0x94,  // .....G9.
                /* 0248 */  0xA8, 0xD3, 0x1C, 0x40, 0xA4, 0xCB, 0x0F, 0xEE,  // ...@....
                /* 0250 */  0xFC, 0x03, 0xEB, 0xFF, 0x7F, 0xFE, 0x81, 0x78,  // .......x
                /* 0258 */  0x9A, 0x03, 0xA8, 0x72, 0x0C, 0xC1, 0x1D, 0x5E,  // ...r...^
                /* 0260 */  0xC0, 0x71, 0x61, 0xC0, 0x1D, 0x4B, 0x80, 0xC3,  // .qa..K..
                /* 0268 */  0x09, 0x04, 0xDC, 0xFF, 0xFF, 0x13, 0x08, 0xC0,  // ........
                /* 0270 */  0x92, 0x03, 0x1D, 0x68, 0x4F, 0x20, 0x54, 0xD0,  // ...hO T.
                /* 0278 */  0x09, 0x04, 0xFA, 0xB3, 0xC3, 0x27, 0x10, 0xE0,  // .....'..
                /* 0280 */  0x2A, 0x72, 0xC4, 0xA8, 0xFF, 0xFF, 0xF9, 0x00,  // *r......
                /* 0288 */  0xAE, 0xB5, 0x51, 0x6A, 0x9A, 0x6F, 0x20, 0xD8,  // ..Qj.o .
                /* 0290 */  0x03, 0x08, 0x38, 0xDE, 0x6B, 0x3E, 0x80, 0x80,  // ..8.k>..
                /* 0298 */  0x6B, 0x40, 0x0F, 0x20, 0xE0, 0x02, 0x39, 0xB2,  // k@. ..9.
                /* 02A0 */  0x33, 0x3A, 0x2E, 0x36, 0x6E, 0x7E, 0x02, 0x01,  // 3:.6n~..
                /* 02A8 */  0x26, 0x82, 0x1E, 0x7A, 0x3E, 0x7E, 0x70, 0x18,  // &..z>~p.
                /* 02B0 */  0xDC, 0x09, 0x04, 0xD0, 0xFA, 0xFF, 0x3F, 0x81,  // ......?.
                /* 02B8 */  0x00, 0xD3, 0xBB, 0xC1, 0x13, 0x08, 0x38, 0x43,  // ......8C
                /* 02C0 */  0x3C, 0x24, 0xF4, 0x23, 0x70, 0xF0, 0x73, 0x3D,  // <$.#p.s=
                /* 02C8 */  0x3D, 0x58, 0xC2, 0x8D, 0x79, 0xB0, 0x04, 0xD5,  // =X..y...
                /* 02D0 */  0x11, 0x04, 0x38, 0x9C, 0x34, 0x70, 0x07, 0x04,  // ..8.4p..
                /* 02D8 */  0xB8, 0x04, 0x3E, 0x4A, 0xFB, 0xD0, 0x01, 0x8E,  // ..>J....
                /* 02E0 */  0xE3, 0x95, 0x09, 0x3C, 0x58, 0x38, 0xA7, 0x88,  // ...<X8..
                /* 02E8 */  0xC7, 0x3F, 0xDF, 0x05, 0x5E, 0x0B, 0x3C, 0x58,  // .?..^.<X
                /* 02F0 */  0xF0, 0x1D, 0x4A, 0xE1, 0xFD, 0xFF, 0x07, 0x0B,  // ..J.....
                /* 02F8 */  0x78, 0x38, 0xF9, 0x00, 0x97, 0xD3, 0x10, 0x39,  // x8.....9
                /* 0300 */  0xF9, 0x00, 0x3A, 0x4F, 0x72, 0x60, 0x9B, 0x7E,  // ..:Or`.~
                /* 0308 */  0xF8, 0x77, 0x95, 0x08, 0xE7, 0xE5, 0x83, 0x00,  // .w......
                /* 0310 */  0x3B, 0xF8, 0xC0, 0xFB, 0xFF, 0x1F, 0x7C, 0x00,  // ;.....|.
                /* 0318 */  0x26, 0x3A, 0x3B, 0xF8, 0x00, 0xE9, 0xFF, 0xFF,  // &:;.....
                /* 0320 */  0xC1, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x03,  // ........
                /* 0328 */  0xFC, 0x2E, 0x17, 0xBE, 0x5E, 0x3C, 0xA5, 0xBC,  // ....^<..
                /* 0330 */  0xF8, 0xC0, 0x3B, 0xF8, 0x40, 0x7C, 0xC4, 0xE8,  // ..;.@|..
                /* 0338 */  0xE0, 0x03, 0x0C, 0xE7, 0xC5, 0x06, 0x80, 0x3F,  // .......?
                /* 0340 */  0xF8, 0x00, 0xAE, 0xFF, 0xFF, 0x07, 0x1F, 0xC0,  // ........
                /* 0348 */  0xD4, 0x70, 0x1F, 0x7C, 0x00, 0x4E, 0xFD, 0xFF,  // .p.|.N..
                /* 0350 */  0x0F, 0x3E, 0x00, 0xFF, 0xEE, 0x28, 0x6C, 0x84,  // .>...(l.
                /* 0358 */  0x0F, 0x3E, 0x20, 0x5C, 0xB5, 0x0E, 0x3E, 0xC0,  // .> \..>.
                /* 0360 */  0xE1, 0xFF, 0x7F, 0xF0, 0x81, 0x3D, 0xAF, 0x97,  // .....=..
                /* 0368 */  0x10, 0x76, 0xF0, 0x01, 0x26, 0x12, 0xD7, 0x48,  // .v..&..H
                /* 0370 */  0x4F, 0x3D, 0x16, 0x05, 0x83, 0x3A, 0xF8, 0x00,  // O=...:..
                /* 0378 */  0x0C, 0x3A, 0xAB, 0x3E, 0xF8, 0x80, 0xF3, 0xFF,  // .:.>....
                /* 0380 */  0x1F, 0xEB, 0x3C, 0xA0, 0x1F, 0x81, 0x25, 0x1D,  // ..<...%.
                /* 0388 */  0x40, 0xA0, 0x4B, 0x38, 0x80, 0x80, 0xEA, 0xDC,  // @.K8....
                /* 0390 */  0x03, 0x1C, 0x0E, 0x0A, 0xCF, 0x07, 0x60, 0x99,  // ......`.
                /* 0398 */  0xE5, 0xE1, 0xBE, 0x7F, 0xE0, 0xAF, 0x04, 0xEC,  // ........
                /* 03A0 */  0x04, 0x02, 0x8A, 0xA5, 0xE9, 0x04, 0x02, 0x0C,  // ........
                /* 03A8 */  0x27, 0xC6, 0x4E, 0xC4, 0x80, 0x97, 0xFF, 0xFF,  // '.N.....
                /* 03B0 */  0x09, 0x04, 0x60, 0xC3, 0xD1, 0xE0, 0x49, 0x0E,  // ..`...I.
                /* 03B8 */  0xF0, 0xFD, 0xFF, 0x3F, 0xC9, 0x01, 0x1C, 0x3F,  // ...?...?
                /* 03C0 */  0xF9, 0xC0, 0xB9, 0xF7, 0xF0, 0xFF, 0x3F, 0x81,  // ......?.
                /* 03C8 */  0x0F, 0x3E, 0xC0, 0x7F, 0x5C, 0xAF, 0x04, 0x3E,  // .>..\..>
                /* 03D0 */  0xF8, 0x00, 0x93, 0x35, 0xF2, 0x53, 0x8F, 0x23,  // ...5.S.#
                /* 03D8 */  0xBF, 0x22, 0x7C, 0xF0, 0x01, 0xA8, 0xF1, 0xFF,  // ."|.....
                /* 03E0 */  0x3F, 0xF8, 0x80, 0xCD, 0xDB, 0xC1, 0x07, 0xA4,  // ?.......
                /* 03E8 */  0xA2, 0x4F, 0x72, 0x34, 0x34, 0x84, 0x8C, 0x1C,  // .Or44...
                /* 03F0 */  0x5E, 0x50, 0xC3, 0xF1, 0x91, 0x02, 0x17, 0xF2,  // ^P......
                /* 03F8 */  0xDC, 0x03, 0xA8, 0x39, 0x72, 0x80, 0x0B, 0xC2,  // ...9r...
                /* 0400 */  0x47, 0x0E, 0x30, 0xCD, 0xCE, 0x07, 0x10, 0x18,  // G.0.....
                /* 0408 */  0x07, 0x37, 0x90, 0x1F, 0x43, 0x71, 0x27, 0x51,  // .7..Cq'Q
                /* 0410 */  0xE8, 0xFF, 0xFF, 0x03, 0x07, 0xC0, 0x96, 0x9B,  // ........
                /* 0418 */  0xC1, 0x83, 0x1B, 0x48, 0x0F, 0x1C, 0xF4, 0x04,  // ...H....
                /* 0420 */  0xEA, 0x03, 0x14, 0xFE, 0xC0, 0x81, 0x8B, 0x0C,  // ........
                /* 0428 */  0xA1, 0x93, 0x28, 0x70, 0x3D, 0x65, 0xF8, 0xFF,  // ..(p=e..
                /* 0430 */  0x7F, 0xE0, 0x00, 0xCF, 0xC9, 0x09, 0xDE, 0x3F,  // .......?
                /* 0438 */  0xC8, 0xE7, 0x0E, 0x70, 0xC9, 0x3B, 0x77, 0x80,  // ...p.;w.
                /* 0440 */  0xF2, 0x40, 0xC6, 0x0F, 0x1E, 0xC0, 0x43, 0xC4,  // .@....C.
                /* 0448 */  0xA9, 0x03, 0x15, 0xFB, 0xE0, 0x04, 0xE8, 0xFF,  // ........
                /* 0450 */  0xFF, 0x1F, 0x3C, 0x80, 0xCD, 0x68, 0x1F, 0x3C,  // ..<..h.<
                /* 0458 */  0xC0, 0x29, 0xFC, 0xE0, 0x41, 0x63, 0x43, 0xC8,  // .)..AcC.
                /* 0460 */  0xC9, 0xC1, 0x09, 0xEA, 0xF9, 0x13, 0x70, 0xE8,  // ......p.
                /* 0468 */  0x6C, 0xC4, 0x22, 0xF0, 0x91, 0x03, 0x9C, 0xF0,  // l.".....
                /* 0470 */  0xFC, 0xC8, 0x01, 0x3C, 0x34, 0x84, 0x9A, 0xF9,  // ...<4...
                /* 0478 */  0xFF, 0x3F, 0x81, 0x63, 0x70, 0x48, 0xDC, 0x23,  // .?.cpH.#
                /* 0480 */  0x80, 0xC2, 0xF8, 0x44, 0xE3, 0x23, 0x07, 0x5C,  // ...D.#.\
                /* 0488 */  0x49, 0x70, 0xA8, 0xF1, 0x79, 0xD8, 0x8F, 0x91,  // Ip..y...
                /* 0490 */  0xC7, 0xF9, 0x1A, 0x70, 0x20, 0x9E, 0xF7, 0xB3,  // ...p ...
                /* 0498 */  0x07, 0x8C, 0x93, 0x81, 0x27, 0x75, 0x4A, 0xD6,  // ....'uJ.
                /* 04A0 */  0x7E, 0x82, 0x20, 0x97, 0x09, 0x13, 0xF8, 0x78,  // ~. ....x
                /* 04A8 */  0xC0, 0xD0, 0xF8, 0x41, 0x04, 0xAC, 0x47, 0x82,  // ...A..G.
                /* 04B0 */  0x27, 0x03, 0xB0, 0xCC, 0xF9, 0x2D, 0x04, 0x73,  // '....-.s
                /* 04B8 */  0xE4, 0xC0, 0x00, 0xC6, 0x7B, 0xE4, 0x30, 0xEA,  // ....{.0.
                /* 04C0 */  0x51, 0xF9, 0x00, 0xE1, 0xA3, 0x87, 0xC7, 0x1F,  // Q.......
                /* 04C8 */  0x36, 0x42, 0x90, 0xF3, 0x7A, 0x1B, 0xF0, 0xC5,  // 6B..z...
                /* 04D0 */  0x23, 0x60, 0xD8, 0xE0, 0x26, 0xF0, 0xB1, 0x03,  // #`..&...
                /* 04D8 */  0x7C, 0x97, 0x83, 0x47, 0x0D, 0x9F, 0x10, 0x1E,  // |..G....
                /* 04E0 */  0x3B, 0xC0, 0x19, 0xEB, 0x54, 0x43, 0x23, 0x8D,  // ;...TC#.
                /* 04E8 */  0x06, 0x75, 0x56, 0xF0, 0xB9, 0xC0, 0x67, 0x82,  // .uV...g.
                /* 04F0 */  0x87, 0x16, 0x1F, 0x36, 0x0C, 0x72, 0xAE, 0x87,  // ...6.r..
                /* 04F8 */  0xF6, 0xBC, 0xF0, 0x40, 0xE0, 0xA1, 0x33, 0xAC,  // ...@..3.
                /* 0500 */  0x07, 0x0F, 0x76, 0x42, 0xC0, 0x5F, 0x59, 0x02,  // ..vB._Y.
                /* 0508 */  0xBE, 0x1A, 0x3C, 0x6F, 0x60, 0xFF, 0xFF, 0xE7,  // ..<o`...
                /* 0510 */  0x0E, 0x78, 0x87, 0x0C, 0xF8, 0xE3, 0xF1, 0x49,  // .x.....I
                /* 0518 */  0xC0, 0x67, 0x65, 0x1F, 0x80, 0xC8, 0x20, 0x50,  // .ge... P
                /* 0520 */  0x67, 0x66, 0x3E, 0xD2, 0xD3, 0x7A, 0x21, 0xF0,  // gf>..z!.
                /* 0528 */  0x39, 0xE1, 0xB0, 0xD8, 0xE1, 0x89, 0x8F, 0x07,  // 9.......
                /* 0530 */  0xFC, 0x47, 0xDC, 0xA7, 0x0C, 0xDF, 0x1A, 0x3C,  // .G.....<
                /* 0538 */  0x5F, 0x9F, 0x16, 0x7C, 0x06, 0x01, 0xD7, 0xB5,  // _..|....
                /* 0540 */  0xC3, 0x43, 0x38, 0x09, 0xDF, 0x13, 0x30, 0xA7,  // .C8...0.
                /* 0548 */  0x10, 0x60, 0x90, 0x2E, 0xD2, 0xDB, 0xE0, 0xED,  // .`......
                /* 0550 */  0xC0, 0xE2, 0x16, 0x2A, 0x1B, 0x27, 0x35, 0x3A,  // ...*.'5:
                /* 0558 */  0x26, 0x8B, 0x3D, 0x21, 0x68, 0x3C, 0xE7, 0x7E,  // &.=!h<.~
                /* 0560 */  0x6A, 0x07, 0xF8, 0x5A, 0xE1, 0x73, 0x81, 0x45,  // j..Z.s.E
                /* 0568 */  0x42, 0xE9, 0x3A, 0x62, 0x08, 0xCB, 0x3B, 0x8F,  // B.:b..;.
                /* 0570 */  0x18, 0x42, 0x83, 0xF1, 0x51, 0x8C, 0xC0, 0x51,  // .B..Q..Q
                /* 0578 */  0x10, 0x8F, 0xDD, 0x51, 0x21, 0x64, 0xE3, 0xD4,  // ...Q!d..
                /* 0580 */  0x83, 0xBE, 0xEA, 0x70, 0x02, 0x47, 0x3B, 0xC6,  // ...p.G;.
                /* 0588 */  0xF9, 0xAC, 0x00, 0x65, 0x60, 0x8F, 0x15, 0xC7,  // ...e`...
                /* 0590 */  0xE2, 0x23, 0x0E, 0xFC, 0xFF, 0xFF, 0x51, 0x0D,  // .#....Q.
                /* 0598 */  0xFE, 0xD0, 0xDF, 0x03, 0x4C, 0xC0, 0x0E, 0xD3,  // ....L...
                /* 05A0 */  0xB8, 0x63, 0x01, 0x9C, 0x19, 0xBC, 0x16, 0x54,  // .c.....T
                /* 05A8 */  0x3D, 0x0E, 0xDD, 0x16, 0xAC, 0xEE, 0x32, 0x80,  // =.....2.
                /* 05B0 */  0xC2, 0x7B, 0xA4, 0xC2, 0x1D, 0x9D, 0xC1, 0x02,  // .{......
                /* 05B8 */  0xE4, 0xCB, 0x80, 0x95, 0x1E, 0x08, 0xE8, 0x4C,  // .......L
                /* 05C0 */  0x42, 0x84, 0x89, 0x66, 0x78, 0xCC, 0xA1, 0x89,  // B..fx...
                /* 05C8 */  0x0F, 0xD4, 0xA3, 0xE3, 0x03, 0xF5, 0x31, 0x86,  // ......1.
                /* 05D0 */  0x1D, 0x14, 0x70, 0xA7, 0x26, 0x0C, 0xAC, 0x87,  // ..p.&...
                /* 05D8 */  0xCE, 0x61, 0x8D, 0x16, 0xF6, 0x88, 0x9F, 0x21,  // .a.....!
                /* 05E0 */  0x7C, 0xFF, 0xF0, 0xC5, 0xC8, 0xD7, 0x16, 0x9F,  // |.......
                /* 05E8 */  0x3C, 0xC0, 0x72, 0x80, 0x02, 0x2E, 0xD2, 0x8E,  // <.r.....
                /* 05F0 */  0x0F, 0xA8, 0x83, 0x90, 0xA5, 0x1E, 0x1F, 0x10,  // ........
                /* 05F8 */  0x18, 0x87, 0xE8, 0xF3, 0xC0, 0x59, 0x3E, 0x13,  // .....Y>.
                /* 0600 */  0x78, 0xC2, 0x8F, 0x23, 0x58, 0x61, 0x67, 0x08,  // x..#Xag.
                /* 0608 */  0x94, 0x24, 0x0A, 0x9D, 0xEC, 0x7D, 0x86, 0xE0,  // .$...}..
                /* 0610 */  0x87, 0x49, 0x83, 0x19, 0xC4, 0x67, 0x08, 0xC7,  // .I...g..
                /* 0618 */  0x3B, 0xC2, 0xA0, 0x47, 0xE7, 0xFF, 0xBF, 0xD6,  // ;..G....
                /* 0620 */  0x83, 0x10, 0x39, 0x3B, 0x1C, 0x9D, 0xE3, 0x9C,  // ..9;....
                /* 0628 */  0x21, 0x80, 0xEA, 0x41, 0x06, 0x7C, 0xA7, 0x07,  // !..A.|..
                /* 0630 */  0xE0, 0x7D, 0xD0, 0xE4, 0xA7, 0x07, 0xC0, 0xD9,  // .}......
                /* 0638 */  0x81, 0xEA, 0x2C, 0x8F, 0xF8, 0x6D, 0xC4, 0xB7,  // ..,..m..
                /* 0640 */  0x07, 0xEC, 0xE9, 0x01, 0xF7, 0xFF, 0x3F, 0x3D,  // ......?=
                /* 0648 */  0x00, 0x9C, 0x82, 0xF4, 0xE9, 0x01, 0xF0, 0xF4,  // ........
                /* 0650 */  0xFF, 0x3F, 0x3D, 0xC0, 0x39, 0x28, 0xBC, 0xF3,  // .?=.9(..
                /* 0658 */  0xF9, 0xF4, 0x00, 0xB0, 0x6D, 0xD0, 0x3E, 0x3D,  // ....m.>=
                /* 0660 */  0x00, 0xE7, 0xFF, 0xFF, 0xE9, 0x01, 0x78, 0xDC,  // ......x.
                /* 0668 */  0x50, 0x7D, 0x5E, 0x7B, 0x7A, 0x00, 0xD8, 0x06,  // P}^{z...
                /* 0670 */  0xCB, 0x4F, 0x0F, 0xE0, 0xFE, 0xFF, 0x1F, 0xBA,  // .O......
                /* 0678 */  0x81, 0xD8, 0xE9, 0x01, 0xC5, 0x61, 0xA1, 0xA7,  // .....a..
                /* 0680 */  0x07, 0x08, 0x87, 0x62, 0x36, 0xC8, 0x23, 0x0E,  // ...b6.#.
                /* 0688 */  0x5E, 0xFD, 0x48, 0xC8, 0xE1, 0x01, 0x7C, 0x67,  // ^.H...|g
                /* 0690 */  0x77, 0xFC, 0xE1, 0x01, 0xF0, 0x72, 0x5E, 0xC7,  // w....r^.
                /* 0698 */  0x1F, 0x1E, 0x80, 0xF7, 0x31, 0xDD, 0x87, 0x07,  // ....1...
                /* 06A0 */  0xFC, 0xFF, 0xFF, 0xF0, 0x00, 0x78, 0x38, 0xFE,  // .....x8.
                /* 06A8 */  0xE2, 0x44, 0x1D, 0x7F, 0x91, 0x87, 0x07, 0x36,  // .D.....6
                /* 06B0 */  0xEE, 0x28, 0xA1, 0x43, 0xBC, 0xC8, 0xC6, 0x3E,  // .(.C...>
                /* 06B8 */  0xB7, 0x33, 0xF1, 0x15, 0xFB, 0x20, 0x5E, 0x07,  // .3... ^.
                /* 06C0 */  0x7C, 0x7C, 0x00, 0xD8, 0xF3, 0xFF, 0x3F, 0x3E,  // ||....?>
                /* 06C8 */  0x80, 0xC3, 0xC3, 0xB9, 0x0A, 0x50, 0x77, 0xA3,  // .....Pw.
                /* 06D0 */  0x66, 0x97, 0x3C, 0x86, 0x15, 0x1D, 0x73, 0xAE,  // f.<...s.
                /* 06D8 */  0x02, 0x78, 0xF0, 0xFF, 0x3F, 0x3D, 0x00, 0x2F,  // .x..?=./
                /* 06E0 */  0x70, 0x9F, 0x1E, 0x00, 0x2F, 0xB2, 0x4E, 0x0F,  // p.../.N.
                /* 06E8 */  0xA8, 0xB3, 0x80, 0x65, 0x1E, 0x15, 0x34, 0xD9,  // ...e..4.
                /* 06F0 */  0x6A, 0x4F, 0x09, 0x3A, 0x3D, 0xB0, 0xBB, 0x03,  // jO.:=...
                /* 06F8 */  0xFE, 0xEC, 0x00, 0xB8, 0xFD, 0xFF, 0x9F, 0x1D,  // ........
                /* 0700 */  0x00, 0x07, 0x26, 0xCE, 0x0E, 0x80, 0x1A, 0x7D,  // ..&....}
                /* 0708 */  0x0B, 0xD4, 0x11, 0x0F, 0xA7, 0xF7, 0xA5, 0xA0,  // ........
                /* 0710 */  0x83, 0x0C, 0x4E, 0xE4, 0x2C, 0x35, 0xF0, 0xC0,  // ..N.,5..
                /* 0718 */  0xD6, 0x0C, 0xAE, 0x23, 0x00, 0xD3, 0x07, 0xA9,  // ...#....
                /* 0720 */  0x53, 0x83, 0x0F, 0x0D, 0x56, 0x46, 0x21, 0x1D,  // S...VF!.
                /* 0728 */  0x87, 0x07, 0x54, 0xF2, 0x23, 0x04, 0x05, 0x31,  // ..T.#..1
                /* 0730 */  0xA0, 0x63, 0x1D, 0xAA, 0xD0, 0x27, 0x33, 0x0F,  // .c...'3.
                /* 0738 */  0xE1, 0x18, 0x9D, 0xE4, 0xEA, 0x40, 0x27, 0xE6,  // .....@'.
                /* 0740 */  0x39, 0x72, 0x3C, 0x36, 0x2E, 0xA3, 0x56, 0x35,  // 9r<6..V5
                /* 0748 */  0x43, 0x10, 0xA9, 0x39, 0x12, 0xA0, 0x26, 0xE0,  // C..9..&.
                /* 0750 */  0x93, 0x03, 0x46, 0x97, 0x80, 0xFF, 0xFF, 0x85,  // ..F.....
                /* 0758 */  0x0A, 0x5C, 0xFA, 0x0E, 0x0E, 0x20, 0x47, 0xE7,  // .\... G.
                /* 0760 */  0xF7, 0x0F, 0xF8, 0x56, 0xEE, 0x1F, 0x80, 0x82,  // ...V....
                /* 0768 */  0x51, 0xF9, 0x5E, 0x06, 0x1E, 0x6D, 0x27, 0xAA,  // Q.^..m'.
                /* 0770 */  0xF7, 0x0F, 0x20, 0xAF, 0xE2, 0xFE, 0x01, 0xF2,  // .. .....
                /* 0778 */  0xFF, 0xFF, 0x8D, 0x15, 0xD8, 0xC3, 0x57, 0x38,  // ......W8
                /* 0780 */  0x6F, 0x01, 0xC7, 0x8F, 0x74, 0x22, 0xEC, 0x8E,  // o...t"..
                /* 0788 */  0x08, 0x30, 0x6C, 0xC8, 0x3E, 0x3C, 0x60, 0xFE,  // .0l.><`.
                /* 0790 */  0xFF, 0x77, 0x21, 0xC0, 0xD3, 0x68, 0x1F, 0x1E,  // .w!..h..
                /* 0798 */  0xE0, 0xDD, 0x85, 0x80, 0xC1, 0x7C, 0x7C, 0x17,  // .....||.
                /* 07A0 */  0x02, 0xBC, 0xFF, 0xFF, 0xEF, 0x1F, 0x80, 0x83,  // ........
                /* 07A8 */  0xBB, 0x10, 0xB8, 0xEE, 0x1F, 0xC0, 0x7F, 0xE4,  // ........
                /* 07B0 */  0xBE, 0x7F, 0x00, 0x5E, 0x62, 0xDD, 0x3F, 0xD0,  // ...^b.?.
                /* 07B8 */  0x31, 0xEF, 0x1F, 0x28, 0xD8, 0xC3, 0xB1, 0xEB,  // 1..(....
                /* 07C0 */  0x6B, 0x26, 0x39, 0x81, 0xC4, 0x88, 0x10, 0x29,  // k&9....)
                /* 07C8 */  0x81, 0xFF, 0xFF, 0xB1, 0xEE, 0x1F, 0x14, 0xC2,  // ........
                /* 07D0 */  0x81, 0x60, 0x14, 0x07, 0x42, 0x87, 0x07, 0x1E,  // .`..B...
                /* 07D8 */  0x00, 0x8E, 0x82, 0xF8, 0xC8, 0xE0, 0xC3, 0x83,  // ........
                /* 07E0 */  0x95, 0x1C, 0x1E, 0xD0, 0x53, 0x3A, 0x6E, 0x5F,  // ....S:n_
                /* 07E8 */  0x49, 0xD8, 0xE1, 0x01, 0xDE, 0x09, 0x84, 0xDD,  // I.......
                /* 07F0 */  0x85, 0x80, 0xB5, 0xB1, 0x83, 0x99, 0x08, 0x3C,  // .......<
                /* 07F8 */  0x3E, 0x38, 0xDA, 0xCF, 0x1A, 0xA0, 0x18, 0x1F,  // >8......
                /* 0800 */  0xF0, 0x39, 0x6B, 0x80, 0x6B, 0x7C, 0x3C, 0xE0,  // .9k.k|<.
                /* 0808 */  0xF8, 0xD0, 0xD0, 0x3E, 0x0D, 0xC4, 0x3C, 0x9C,  // ...>..<.
                /* 0810 */  0xA3, 0xC1, 0x0C, 0x10, 0xBC, 0xFF, 0xFF, 0x01,  // ........
                /* 0818 */  0x82, 0xEF, 0xF8, 0xE2, 0x01, 0x82, 0xEF, 0x6C,  // .......l
                /* 0820 */  0x02, 0xBC, 0x6D, 0x9C, 0x4D, 0x00, 0x35, 0x72,  // ..m.M.5r
                /* 0828 */  0xAE, 0x7D, 0xA8, 0x51, 0x5B, 0xDE, 0xB5, 0x0F,  // .}.Q[...
                /* 0830 */  0x31, 0xE3, 0xE3, 0x3D, 0x5C, 0x26, 0xEB, 0xCA,  // 1..=\&..
                /* 0838 */  0x87, 0x3A, 0x22, 0x59, 0xCE, 0x19, 0x09, 0x45,  // .:"Y...E
                /* 0840 */  0x65, 0x30, 0x53, 0xF8, 0x54, 0xE0, 0x70, 0x67,  // e0S.T.pg
                /* 0848 */  0x24, 0xF4, 0x79, 0x81, 0x8D, 0x8F, 0x9D, 0x1B,  // $.y.....
                /* 0850 */  0xE0, 0xFE, 0xFF, 0x8F, 0x25, 0xC0, 0xFB, 0x88,  // ....%...
                /* 0858 */  0x04, 0xFC, 0x75, 0x9C, 0x1B, 0x00, 0x69, 0x73,  // ..u...is
                /* 0860 */  0x3C, 0xE1, 0x2E, 0xCF, 0x0D, 0x40, 0xE6, 0xFF,  // <....@..
                /* 0868 */  0x7F, 0x6E, 0x00, 0x38, 0xE1, 0xE3, 0xDC, 0x00,  // .n.8....
                /* 0870 */  0xA8, 0x11, 0x77, 0x6E, 0x40, 0x89, 0x82, 0x90,  // ..wn@...
                /* 0878 */  0xD8, 0x4B, 0x30, 0x7A, 0xC6, 0x4F, 0xF4, 0xF1,  // .K0z.O..
                /* 0880 */  0x0D, 0xF4, 0x8A, 0xF8, 0xAC, 0x66, 0x94, 0xF8,  // .....f..
                /* 0888 */  0x98, 0x6B, 0x30, 0x9C, 0xFF, 0xFF, 0xB9, 0x11,  // .k0.....
                /* 0890 */  0xEE, 0xA8, 0xF8, 0x35, 0x18, 0xF0, 0x33, 0x8A,  // ...5..3.
                /* 0898 */  0x63, 0x38, 0x0A, 0x8F, 0xE1, 0x78, 0x1F, 0x1F,  // c8...x..
                /* 08A0 */  0x80, 0xFB, 0x58, 0x7C, 0x7C, 0x00, 0xBC, 0x08,  // ..X||...
                /* 08A8 */  0x3A, 0xC5, 0xA0, 0x05, 0x1E, 0x15, 0x34, 0xC1,  // :.....4.
                /* 08B0 */  0xE6, 0x05, 0xFC, 0xFF, 0xE7, 0xE0, 0x03, 0x80,  // ........
                /* 08B8 */  0xCF, 0x66, 0x0F, 0x0E, 0x00, 0xC3, 0x06, 0xF1,  // .f......
                /* 08C0 */  0xE0, 0x00, 0x18, 0xF9, 0xFF, 0x1F, 0x1C, 0xC0,  // ........
                /* 08C8 */  0x73, 0x29, 0xF2, 0xC1, 0x01, 0xE0, 0x97, 0xD1,  // s)......
                /* 08D0 */  0x83, 0x03, 0x50, 0xFE, 0xFF, 0x1F, 0x1C, 0x80,  // ..P.....
                /* 08D8 */  0xC7, 0xE9, 0xEC, 0xC1, 0x01, 0x60, 0xD8, 0x00,  // .....`..
                /* 08E0 */  0x1E, 0x1C, 0x80, 0xD1, 0xFF, 0xFF, 0xE0, 0x00,  // ........
                /* 08E8 */  0x3C, 0x04, 0x9E, 0xE7, 0xD1, 0x82, 0x5F, 0x0A,  // <....._.
                /* 08F0 */  0x1A, 0xD7, 0xDB, 0xCB, 0x51, 0xBF, 0xCB, 0x1F,  // ....Q...
                /* 08F8 */  0x4D, 0xEC, 0xE8, 0x07, 0xE9, 0x91, 0x9D, 0xF3,  // M.......
                /* 0900 */  0x01, 0x45, 0x38, 0x81, 0xD0, 0xE4, 0x20, 0x4F,  // .E8... O
                /* 0908 */  0x0F, 0x0D, 0x96, 0x46, 0x21, 0x21, 0x87, 0x07,  // ...F!!..
                /* 0910 */  0x54, 0xF4, 0x23, 0x04, 0x05, 0x31, 0xA0, 0x73,  // T.#..1.s
                /* 0918 */  0x41, 0xC8, 0xC8, 0xE1, 0x01, 0xA5, 0x62, 0xBC,  // A.....b.
                /* 0920 */  0x64, 0x20, 0xE7, 0x54, 0x27, 0x8A, 0x82, 0xDC,  // d .T'...
                /* 0928 */  0x1D, 0xE8, 0xCC, 0x3C, 0x49, 0xAE, 0xE1, 0x86,  // ...<I...
                /* 0930 */  0x89, 0xC0, 0xAD, 0x6A, 0x8A, 0x20, 0x52, 0x73,  // ...j. Rs
                /* 0938 */  0x26, 0x40, 0x4D, 0xC0, 0x47, 0x07, 0xCC, 0x9C,  // &@M.G...
                /* 0940 */  0x71, 0xF7, 0x4B, 0xB8, 0xE2, 0x60, 0xA4, 0xEF,  // q.K..`..
                /* 0948 */  0xE2, 0x00, 0x72, 0x74, 0x7E, 0x00, 0x81, 0x7F,  // ..rt~...
                /* 0950 */  0x4A, 0xC5, 0x1D, 0x10, 0x7C, 0x0C, 0x78, 0x15,  // J...|.x.
                /* 0958 */  0x38, 0xA0, 0x10, 0x8F, 0xA9, 0x70, 0x0F, 0x20,  // 8....p. 
                /* 0960 */  0xF8, 0xFF, 0xFF, 0x21, 0x1F, 0xB8, 0x1E, 0x53,  // ...!...S
                /* 0968 */  0x81, 0xBF, 0xDC, 0x03, 0x08, 0xA0, 0x26, 0xE1,  // ......&.
                /* 0970 */  0xDB, 0x40, 0x07, 0x10, 0x0E, 0xEB, 0xC4, 0x8B,  // .@......
                /* 0978 */  0xD4, 0x01, 0x84, 0x1F, 0x00, 0x62, 0x1F, 0xF0,  // .....b..
                /* 0980 */  0xA3, 0x10, 0x23, 0x70, 0x4A, 0x38, 0x1D, 0x3F,  // ..#pJ8.?
                /* 0988 */  0x78, 0x3E, 0x18, 0x65, 0x20, 0xD1, 0xD1, 0x81,  // x>.e ...
                /* 0990 */  0xAB, 0x3E, 0x85, 0x50, 0x10, 0x1F, 0x18, 0x1C,  // .>.P....
                /* 0998 */  0xEB, 0xF8, 0x81, 0x1E, 0x94, 0x15, 0x4F, 0x82,  // ......O.
                /* 09A0 */  0xDC, 0x3E, 0xD8, 0xFF, 0xFF, 0xF6, 0x01, 0xB8,  // .>......
                /* 09A8 */  0x38, 0xA9, 0xC0, 0x39, 0x0C, 0xF8, 0xF0, 0xC2,  // 8..9....
                /* 09B0 */  0xE6, 0x06, 0xFC, 0x66, 0xEF, 0xB9, 0x81, 0x2B,  // ...f...+
                /* 09B8 */  0xE5, 0xDC, 0x7C, 0x39, 0xA0, 0x73, 0xE3, 0x17,  // ..|9.s..
                /* 09C0 */  0x12, 0xCC, 0x71, 0xC0, 0xE7, 0x0A, 0xCF, 0x0D,  // ..q.....
                /* 09C8 */  0x18, 0x5C, 0x47, 0xF0, 0x83, 0x7A, 0xE9, 0x28,  // .\G..z.(
                /* 09D0 */  0xF6, 0xCA, 0x42, 0xA7, 0x08, 0xEB, 0xD8, 0xE0,  // ..B.....
                /* 09D8 */  0x29, 0x82, 0xE7, 0xFF, 0x7F, 0xB7, 0x01, 0x26,  // )......&
                /* 09E0 */  0xD2, 0xEE, 0x36, 0x28, 0x31, 0x77, 0x1B, 0x0A,  // ..6(1w..
                /* 09E8 */  0xE2, 0x39, 0x39, 0x28, 0x84, 0x6C, 0xDC, 0x28,  // .99(.l.(
                /* 09F0 */  0xD0, 0x77, 0x10, 0x1F, 0x32, 0x1C, 0xED, 0x6A,  // .w..2..j
                /* 09F8 */  0x03, 0x34, 0xA1, 0x2C, 0x72, 0xD6, 0xD0, 0x67,  // .4.,r..g
                /* 0A00 */  0xF0, 0xDC, 0x51, 0xF5, 0x38, 0x34, 0x8D, 0xA3,  // ..Q.84..
                /* 0A08 */  0xA8, 0xEE, 0x12, 0xAE, 0x81, 0x9E, 0xEB, 0x6B,  // .......k
                /* 0A10 */  0xEF, 0xE9, 0x3E, 0x91, 0x58, 0x33, 0x82, 0x0E,  // ..>.X3..
                /* 0A18 */  0x25, 0xB5, 0xDD, 0x75, 0xC8, 0x05, 0x07, 0x78,  // %..u...x
                /* 0A20 */  0xDB, 0xBD, 0xE0, 0x00, 0xA1, 0xFF, 0xFF, 0x05,  // ........
                /* 0A28 */  0x07, 0x98, 0x08, 0x5E, 0xA2, 0xAE, 0xF5, 0xB8,  // ...^....
                /* 0A30 */  0x00, 0xAF, 0x04, 0xCD, 0xF5, 0x08, 0x8F, 0xFF,  // ........
                /* 0A38 */  0x8C, 0x03, 0x07, 0x8D, 0x1D, 0xDE, 0x08, 0x47,  // .......G
                /* 0A40 */  0xFE, 0xA6, 0x68, 0x84, 0x23, 0x0D, 0x15, 0xEC,  // ..h.#...
                /* 0A48 */  0x98, 0x98, 0x58, 0x58, 0x5D, 0x72, 0xB8, 0x4C,  // ..XX]r.L
                /* 0A50 */  0x18, 0x89, 0x59, 0xB3, 0xCE, 0x10, 0x3C, 0xFE,  // ..Y...<.
                /* 0A58 */  0x25, 0x87, 0x82, 0x78, 0xEC, 0xBE, 0xE4, 0x00,  // %..x....
                /* 0A60 */  0x6C, 0xFA, 0xFF, 0xCF, 0x0D, 0x77, 0x0D, 0x80,  // l....w..
                /* 0A68 */  0x33, 0x97, 0xB7, 0x88, 0x27, 0x03, 0x8F, 0x0D,  // 3...'...
                /* 0A70 */  0xF8, 0x9D, 0x6E, 0xC0, 0x17, 0x0C, 0x42, 0x4A,  // ..n...BJ
                /* 0A78 */  0xAE, 0x01, 0xE8, 0xFB, 0x10, 0x26, 0xC9, 0xDC,  // .....&..
                /* 0A80 */  0x80, 0x1E, 0x92, 0x75, 0xCD, 0x0D, 0x34, 0x07,  // ...u..4.
                /* 0A88 */  0x98, 0xA7, 0x97, 0x27, 0x21, 0xE0, 0x71, 0x11,  // ...'!.q.
                /* 0A90 */  0xF6, 0xB1, 0x83, 0x4B, 0x39, 0x09, 0x51, 0x10,  // ...K9.Q.
                /* 0A98 */  0xCF, 0xDF, 0x67, 0x18, 0x9F, 0x84, 0xE0, 0xCD,  // ..g.....
                /* 0AA0 */  0xDD, 0x27, 0x21, 0x58, 0xFF, 0xFF, 0x93, 0x10,  // .'!X....
                /* 0AA8 */  0xB0, 0x19, 0x89, 0x51, 0x7C, 0x12, 0x02, 0xE7,  // ...Q|...
                /* 0AB0 */  0xD8, 0xD8, 0xC9, 0x91, 0x1D, 0x84, 0x80, 0xB7,  // ........
                /* 0AB8 */  0xDE, 0x83, 0x10, 0xA0, 0x46, 0xEF, 0x41, 0x08,  // ....F.A.
                /* 0AC0 */  0xC5, 0x61, 0xFD, 0x07, 0x21, 0x04, 0xC2, 0x79,  // .a..!..y
                /* 0AC8 */  0x3D, 0x08, 0xD9, 0xF5, 0x80, 0x35, 0x20, 0x76,  // =....5 v
                /* 0AD0 */  0xEA, 0x3D, 0xF5, 0xD0, 0xE4, 0x18, 0x84, 0x52,  // .=.....R
                /* 0AD8 */  0x0A, 0x23, 0x35, 0xC7, 0x20, 0x54, 0xFE, 0x63,  // .#5. T.c
                /* 0AE0 */  0x10, 0xF9, 0xFF, 0x83, 0xB0, 0x63, 0x10, 0xC0,  // .....c..
                /* 0AE8 */  0xFC, 0xFF, 0xFF, 0xD8, 0xF0, 0xC9, 0xC6, 0x86,  // ........
                /* 0AF0 */  0xD6, 0x01, 0xA2, 0xF3, 0x86, 0xCF, 0xFB, 0x3E,  // .......>
                /* 0AF8 */  0x7B, 0x78, 0x72, 0xC0, 0x10, 0xC9, 0xF7, 0x4B,  // {xr....K
                /* 0B00 */  0x80, 0x11, 0x23, 0xF1, 0xFD, 0x12, 0x38, 0xFD,  // ..#...8.
                /* 0B08 */  0xFF, 0xEF, 0x41, 0xC0, 0x75, 0x12, 0xEF, 0x41,  // ..A.u..A
                /* 0B10 */  0x80, 0x19, 0xE5, 0xF7, 0x20, 0x74, 0x92, 0x7B,  // .... t.{
                /* 0B18 */  0x10, 0x94, 0x61, 0x1E, 0x08, 0x3F, 0x08, 0x31,  // ..a..?.1
                /* 0B20 */  0xE5, 0xF7, 0x20, 0x94, 0x66, 0x18, 0x29, 0xBB,  // .. .f.).
                /* 0B28 */  0x07, 0xA1, 0xB4, 0x9C, 0xCC, 0x29, 0x88, 0xEF,  // .....)..
                /* 0B30 */  0x41, 0x80, 0x9B, 0xFF, 0xFF, 0x3D, 0x08, 0x60,  // A....=.`
                /* 0B38 */  0xDB, 0xE9, 0x1D, 0x30, 0xF2, 0xFF, 0xBF, 0x0D,  // ...0....
                /* 0B40 */  0x01, 0xFB, 0x43, 0x26, 0xC0, 0x2F, 0xC1, 0x97,  // ..C&./..
                /* 0B48 */  0x21, 0x10, 0xFC, 0xFF, 0x2F, 0x43, 0xC0, 0x5C,  // !.../C.\
                /* 0B50 */  0xDB, 0x02, 0x75, 0x19, 0xE2, 0xB0, 0xD6, 0xFA,  // ..u.....
                /* 0B58 */  0x5A, 0xD0, 0x65, 0x88, 0x8F, 0x26, 0x76, 0xF4,  // Z.e..&v.
                /* 0B60 */  0x43, 0x7E, 0x9A, 0xE1, 0xFA, 0xCE, 0x96, 0xF4,  // C~......
                /* 0B68 */  0xD8, 0x60, 0x65, 0x14, 0xD2, 0x71, 0x7C, 0x40,  // .`e..q|@
                /* 0B70 */  0x25, 0x3F, 0xBD, 0x50, 0x10, 0x03, 0xFA, 0x2A,  // %?.P...*
                /* 0B78 */  0x04, 0xB8, 0xBA, 0x81, 0x00, 0x0B, 0x41, 0x73,  // ......As
                /* 0B80 */  0x46, 0x5D, 0x54, 0x3C, 0x67, 0x83, 0x78, 0xCE,  // F]T<g.x.
                /* 0B88 */  0x8E, 0x07, 0x21, 0x2B, 0x73, 0x46, 0xDD, 0x0E,  // ..!+sF..
                /* 0B90 */  0x7C, 0x99, 0xC1, 0x10, 0xFC, 0xFF, 0xC7, 0xB9,  // |.......
                /* 0B98 */  0x82, 0x00, 0xCD, 0x51, 0xF9, 0x3C, 0xE7, 0x69,  // ...Q.<.i
                /* 0BA0 */  0x83, 0xE3, 0x66, 0x57, 0x1A, 0x24, 0xB9, 0x7D,  // ..fW.$.}
                /* 0BA8 */  0x00, 0xEF, 0x69, 0xFB, 0xF6, 0x01, 0x78, 0x09,  // ..i...x.
                /* 0BB0 */  0x7F, 0xFB, 0x40, 0x9D, 0x05, 0x2C, 0x06, 0x48,  // ..@..,.H
                /* 0BB8 */  0xB7, 0x0F, 0x66, 0xF4, 0x00, 0x40, 0x8E, 0x76,  // ..f..@.v
                /* 0BC0 */  0x58, 0x82, 0xF1, 0xAF, 0x1F, 0xA8, 0xE0, 0x14,  // X.......
                /* 0BC8 */  0x8A, 0x77, 0x76, 0x40, 0x05, 0x82, 0xD1, 0xFF,  // .wv@....
                /* 0BD0 */  0x1F, 0xCE, 0x20, 0x1E, 0xB6, 0x4F, 0x76, 0x00,  // .. ..Ov.
                /* 0BD8 */  0xB3, 0xEE, 0x5E, 0x80, 0x99, 0xFF, 0xFF, 0x49,  // ..^....I
                /* 0BE0 */  0x05, 0xB8, 0x0C, 0xC9, 0x77, 0x2F, 0xC0, 0xDD,  // ....w/..
                /* 0BE8 */  0xB4, 0x1E, 0x57, 0x00, 0x7B, 0x03, 0x3E, 0x20,  // ..W.{.> 
                /* 0BF0 */  0xCC, 0x71, 0x05, 0x3C, 0xFF, 0xFF, 0xE3, 0x0A,  // .q.<....
                /* 0BF8 */  0xC0, 0xFF, 0xFF, 0xFF, 0x71, 0x05, 0xE0, 0xC0,  // ....q...
                /* 0C00 */  0xA8, 0x1E, 0x57, 0x00, 0x33, 0xB2, 0xDE, 0x01,  // ..W.3...
                /* 0C08 */  0x3A, 0xAE, 0xE0, 0x64, 0x1E, 0x17, 0x74, 0x5C,  // :..d..t\
                /* 0C10 */  0x61, 0x13, 0x8B, 0xF9, 0xEA, 0x09, 0xE3, 0xEC,  // a.......
                /* 0C18 */  0xE0, 0x83, 0x83, 0x21, 0x2C, 0x89, 0x42, 0xE7,  // ...!,.B.
                /* 0C20 */  0x46, 0xF8, 0xFF, 0x7F, 0x25, 0xE7, 0x46, 0x40,  // F...%.F@
                /* 0C28 */  0xC1, 0x49, 0x83, 0xDC, 0x42, 0x40, 0x73, 0x7A,  // .I..B@sz
                /* 0C30 */  0x78, 0x6F, 0x7C, 0x6E, 0x04, 0xEE, 0x10, 0x3E,  // xo|n...>
                /* 0C38 */  0x3B, 0x00, 0x5E, 0x12, 0xBD, 0x0D, 0x74, 0x09,  // ;.^...t.
                /* 0C40 */  0xC6, 0x25, 0x3C, 0x39, 0x21, 0x30, 0x0E, 0xCB,  // .%<9!0..
                /* 0C48 */  0xB3, 0x89, 0xD2, 0xFC, 0x38, 0x68, 0x2A, 0x38,  // ....8h*8
                /* 0C50 */  0x9D, 0x19, 0xFC, 0xFF, 0x3F, 0x32, 0x38, 0x0F,  // ....?28.
                /* 0C58 */  0x8C, 0x54, 0x93, 0xE8, 0xE8, 0xC0, 0x75, 0x9E,  // .T....u.
                /* 0C60 */  0x9F, 0x28, 0x88, 0x0F, 0x0C, 0x3E, 0x38, 0x01,  // .(...>8.
                /* 0C68 */  0xCC, 0x9A, 0x1B, 0x9C, 0x0B, 0x09, 0x66, 0x6E,  // ......fn
                /* 0C70 */  0xC0, 0xEF, 0xBC, 0xE0, 0xFF, 0xFF, 0x1D, 0x0B,  // ........
                /* 0C78 */  0x60, 0x04, 0x94, 0xEF, 0x58, 0x80, 0xBB, 0x7B,  // `...X..{
                /* 0C80 */  0x8A, 0x2F, 0x36, 0x60, 0xFA, 0xFF, 0x5F, 0x6C,  // ./6`.._l
                /* 0C88 */  0x80, 0x6D, 0xFC, 0x1B, 0x26, 0x8A, 0xC3, 0x72,  // .m..&..r
                /* 0C90 */  0x2E, 0x36, 0x88, 0xF3, 0xA5, 0xA1, 0x43, 0xC4,  // .6....C.
                /* 0C98 */  0xAD, 0x1D, 0x43, 0x47, 0x1B, 0xCC, 0x15, 0x13,  // ..CG....
                /* 0CA0 */  0xE0, 0xD7, 0xFF, 0xFF, 0x8A, 0x09, 0xB0, 0x59,  // .......Y
                /* 0CA8 */  0xF3, 0x79, 0x05, 0x84, 0xFF, 0xFF, 0xF3, 0x0A,  // .y......
                /* 0CB0 */  0x30, 0x55, 0xBA, 0x44, 0x5D, 0x31, 0x71, 0xCA,  // 0U.D]1q.
                /* 0CB8 */  0x1F, 0x09, 0x3A, 0xAF, 0xB0, 0x39, 0x9E, 0x05,  // ..:..9..
                /* 0CC0 */  0x3F, 0xAE, 0xE0, 0xB4, 0x02, 0xEA, 0xB8, 0xC2,  // ?.......
                /* 0CC8 */  0x55, 0xC2, 0x48, 0xCB, 0x82, 0x75, 0x7E, 0xE0,  // U.H..u~.
                /* 0CD0 */  0xE9, 0x4F, 0x2D, 0x14, 0xC4, 0x03, 0xF7, 0x71,  // .O-....q
                /* 0CD8 */  0x05, 0x60, 0xCE, 0xFF, 0x7F, 0x6E, 0xF0, 0xAF,  // .`...n..
                /* 0CE0 */  0x01, 0x70, 0xE6, 0xF2, 0x0A, 0xF1, 0xE4, 0xE0,  // .p......
                /* 0CE8 */  0x83, 0x1D, 0xE0, 0xE3, 0x0E, 0x08, 0xEC, 0x91,  // ........
                /* 0CF0 */  0x7C, 0x09, 0x02, 0x8C, 0xFD, 0xFF, 0x2F, 0x41,  // |...../A
                /* 0CF8 */  0xC0, 0x6F, 0x24, 0xBE, 0x04, 0x01, 0xEE, 0x3C,  // .o$....<
                /* 0D00 */  0x5F, 0x82, 0x00, 0x35, 0x81, 0x0E, 0xCB, 0xE8,  // _..5....
                /* 0D08 */  0x80, 0x77, 0x40, 0xE4, 0x6C, 0x7C, 0x08, 0xC2,  // .w@.l|..
                /* 0D10 */  0x84, 0x3A, 0x2C, 0xA3, 0xE2, 0xC0, 0x48, 0xF4,  // .:,...H.
                /* 0D18 */  0x61, 0x99, 0xFE, 0xFF, 0xE1, 0x2D, 0xF3, 0x0E,  // a....-..
                /* 0D20 */  0x44, 0x41, 0x7C, 0x58, 0x06, 0xD8, 0x75, 0x07,  // DA|X..u.
                /* 0D28 */  0x02, 0x8C, 0xFC, 0xFF, 0xEF, 0xCA, 0x00, 0x7F,  // ........
                /* 0D30 */  0x61, 0x1E, 0x6C, 0xC0, 0xFE, 0xFF, 0x3F, 0xD8,  // a.l...?.
                /* 0D38 */  0x00, 0x37, 0xA9, 0x97, 0x45, 0xB4, 0xF4, 0xCB,  // .7..E...
                /* 0D40 */  0x22, 0x14, 0x94, 0xC0, 0x61, 0x0E, 0x88, 0x89,  // "...a...
                /* 0D48 */  0xBD, 0x2C, 0xA2, 0x64, 0xC2, 0x48, 0xCC, 0x65,  // .,.d.H.e
                /* 0D50 */  0x11, 0x75, 0x63, 0xE6, 0x20, 0xBE, 0x2C, 0x02,  // .uc. .,.
                /* 0D58 */  0x5C, 0xFA, 0xFF, 0x9F, 0x6C, 0x00, 0x7B, 0x37,  // \...l.{7
                /* 0D60 */  0x17, 0x2B, 0xB9, 0x2C, 0x42, 0x4C, 0x72, 0x59,  // .+.,BLrY
                /* 0D68 */  0x04, 0x8A, 0xBA, 0xE6, 0x06, 0x9A, 0xC3, 0x4B,  // .......K
                /* 0D70 */  0x6D, 0xA7, 0x20, 0x40, 0xCA, 0xFF, 0xFF, 0xB4,  // m. @....
                /* 0D78 */  0x08, 0x70, 0x02, 0xEA, 0x69, 0x11, 0x70, 0x77,  // .p..i.pw
                /* 0D80 */  0x09, 0xC2, 0x9C, 0x16, 0xC1, 0xF1, 0xFF, 0x3F,  // .......?
                /* 0D88 */  0x2D, 0x02, 0xFC, 0xFF, 0xFF, 0x9F, 0x16, 0x01,  // -.......
                /* 0D90 */  0xCE, 0x0E, 0xEB, 0xC1, 0x06, 0x98, 0xFC, 0xFF,  // ........
                /* 0D98 */  0x0F, 0x36, 0xC0, 0x47, 0xF7, 0x69, 0x11, 0x9D,  // .6.G.i..
                /* 0DA0 */  0xE3, 0xB4, 0x88, 0x40, 0x38, 0xAF, 0xA0, 0xB1,  // ...@8...
                /* 0DA8 */  0xBB, 0xBE, 0x2F, 0xA2, 0xC6, 0xA4, 0xD3, 0x22,  // ../...."
                /* 0DB0 */  0x4A, 0x33, 0x8C, 0x94, 0x9D, 0x16, 0x51, 0x5A,  // J3....QZ
                /* 0DB8 */  0x0E, 0x38, 0x14, 0xC4, 0xA7, 0x45, 0x80, 0x57,  // .8...E.W
                /* 0DC0 */  0xFF, 0xFF, 0x93, 0x0D, 0x60, 0x2C, 0xE5, 0xD8,  // ....`,..
                /* 0DC8 */  0x7C, 0x91, 0xA0, 0xA7, 0x45, 0x18, 0x53, 0xF4,  // |...E.S.
                /* 0DD0 */  0xD9, 0xC1, 0x73, 0x03, 0x06, 0xF7, 0x17, 0xFC,  // ..s.....
                /* 0DD8 */  0xA0, 0x5E, 0x50, 0x8A, 0x1D, 0xB3, 0xDF, 0x01,  // .^P.....
                /* 0DE0 */  0x3A, 0x34, 0xC2, 0xBC, 0x0B, 0x01, 0xBE, 0xFE,  // :4......
                /* 0DE8 */  0xFF, 0x77, 0x46, 0x80, 0x21, 0x87, 0x9B, 0x77,  // .wF.!..w
                /* 0DF0 */  0x21, 0xC0, 0x4C, 0xA8, 0x3B, 0x23, 0xEA, 0x40,  // !.L.;#.@
                /* 0DF8 */  0xE0, 0x90, 0x77, 0x46, 0xC4, 0x5D, 0x08, 0x73,  // ..wF.].s
                /* 0E00 */  0x6C, 0xE4, 0x04, 0x8E, 0x75, 0x69, 0x44, 0x05,  // l...uiD.
                /* 0E08 */  0xBA, 0x34, 0x92, 0xFF, 0xFF, 0xA5, 0x11, 0xE0,  // .4......
                /* 0E10 */  0xFF, 0xFF, 0xFF, 0x64, 0x03, 0x2C, 0xA5, 0x9D,  // ...d.,..
                /* 0E18 */  0x6C, 0x50, 0x62, 0x4E, 0x36, 0x14, 0xC4, 0x73,  // lPbN6..s
                /* 0E20 */  0x72, 0xD0, 0x93, 0x0D, 0xD4, 0x68, 0x97, 0x46,  // r....h.F
                /* 0E28 */  0xA0, 0x2A, 0xF2, 0x64, 0x03, 0xDA, 0xAB, 0xC8,  // .*.d....
                /* 0E30 */  0x31, 0xD5, 0x8C, 0xA0, 0x93, 0xCD, 0x8B, 0x7A,  // 1......z
                /* 0E38 */  0x61, 0x47, 0x1B, 0xA0, 0x7E, 0x58, 0x79, 0xB4,  // aG..~Xy.
                /* 0E40 */  0x01, 0xE7, 0xFF, 0xFF, 0x68, 0x03, 0x2C, 0xB5,  // ....h.,.
                /* 0E48 */  0xDF, 0x1A, 0x51, 0x92, 0x20, 0x94, 0xE5, 0xD6,  // ..Q. ...
                /* 0E50 */  0x08, 0x79, 0xCC, 0x2F, 0x4B, 0x46, 0x7B, 0x6F,  // .y./KF{o
                /* 0E58 */  0x04, 0x38, 0xF6, 0xFF, 0xBF, 0x37, 0x02, 0xFC,  // .8...7..
                /* 0E60 */  0xFF, 0xFF, 0xDF, 0x1B, 0x01, 0xFE, 0x60, 0xBD,  // ......`.
                /* 0E68 */  0x0D, 0x01, 0x66, 0xEE, 0x3E, 0xBE, 0x0D, 0x71,  // ..f.>..q
                /* 0E70 */  0x29, 0x10, 0x52, 0xFA, 0x5A, 0xD0, 0x80, 0xCF,  // ).R.Z...
                /* 0E78 */  0xAB, 0xCF, 0x53, 0x23, 0xE2, 0x28, 0xF1, 0xFF,  // ..S#.(..
                /* 0E80 */  0x4F, 0x60, 0x7D, 0xD7, 0x45, 0x7A, 0x6A, 0xB0,  // O`}.Ezj.
                /* 0E88 */  0x32, 0x0A, 0x29, 0x39, 0x3D, 0xA0, 0xB2, 0x1F,  // 2.)9=...
                /* 0E90 */  0x5E, 0x28, 0x88, 0x01, 0x7D, 0x6C, 0xB0, 0x92,  // ^(..}l..
                /* 0E98 */  0xEB, 0x0D, 0x7A, 0x38, 0x47, 0x73, 0x40, 0x6F,  // ..z8Gs@o
                /* 0EA0 */  0x0D, 0x4E, 0x72, 0x14, 0x02, 0x8A, 0xBA, 0x4E,  // .Nr....N
                /* 0EA8 */  0x20, 0xA0, 0xB9, 0x38, 0x3C, 0x94, 0xBD, 0x81,  //  ..8<...
                /* 0EB0 */  0x00, 0x0F, 0x39, 0x93, 0x46, 0xED, 0xD9, 0x93,  // ..9.F...
                /* 0EB8 */  0x36, 0x85, 0x27, 0xED, 0x70, 0xF7, 0x1E, 0xF4,  // 6.'.p...
                /* 0EC0 */  0xED, 0xC0, 0x97, 0x19, 0x0C, 0xC1, 0x30, 0x57,  // ......0W
                /* 0EC8 */  0x10, 0xA0, 0x79, 0x4B, 0x02, 0xDF, 0xE5, 0x83,  // ..yK....
                /* 0ED0 */  0xFD, 0xFF, 0x2F, 0x1F, 0xC0, 0x78, 0x88, 0xBE,  // ../..x..
                /* 0ED8 */  0x7C, 0x00, 0x5E, 0xE2, 0x3E, 0x12, 0x74, 0xF9,  // |.^.>.t.
                /* 0EE0 */  0xC0, 0xC5, 0x7F, 0x05, 0xE8, 0xF2, 0xC1, 0xEE,  // ........
                /* 0EE8 */  0x75, 0x98, 0xF1, 0x3B, 0xF4, 0x89, 0x81, 0x42,  // u..;...B
                /* 0EF0 */  0x38, 0x2E, 0x85, 0xC2, 0x1E, 0x1C, 0x50, 0xF1,  // 8.....P.
                /* 0EF8 */  0xE0, 0x28, 0x88, 0x07, 0xED, 0x78, 0x97, 0x0F,  // .(...x..
                /* 0F00 */  0xF4, 0xC8, 0x7C, 0xF9, 0xC0, 0x10, 0x8C, 0x73,  // ..|....s
                /* 0F08 */  0x70, 0x80, 0x76, 0xFA, 0x60, 0x07, 0x07, 0x60,  // p.v.`..`
                /* 0F10 */  0x72, 0x67, 0x22, 0x07, 0x07, 0x08, 0xFF, 0xFF,  // rg".....
                /* 0F18 */  0xF3, 0x07, 0xDC, 0x73, 0x06, 0x98, 0xC7, 0x07,  // ...s....
                /* 0F20 */  0x7C, 0xCE, 0x19, 0x80, 0x27, 0x94, 0xE7, 0x0C,  // |...'...
                /* 0F28 */  0xC0, 0x8C, 0xB6, 0x3B, 0x13, 0x5A, 0xEB, 0x9D,  // ...;.Z..
                /* 0F30 */  0x89, 0xFC, 0xFF, 0xEF, 0x4C, 0xB8, 0xDB, 0x02,  // ....L...
                /* 0F38 */  0x53, 0x78, 0x67, 0x42, 0x69, 0xBB, 0x33, 0x01,  // SxgBi.3.
                /* 0F40 */  0xA4, 0x10, 0x34, 0x69, 0xD4, 0x61, 0xD1, 0x93,  // ..4i.a..
                /* 0F48 */  0x36, 0x88, 0x27, 0xED, 0xBB, 0x0A, 0x9C, 0xCB,  // 6.'.....
                /* 0F50 */  0x07, 0xEE, 0xAE, 0x02, 0xEF, 0xCE, 0x04, 0x9C,  // ........
                /* 0F58 */  0xEE, 0x2A, 0xE0, 0xF8, 0xFF, 0xDF, 0x55, 0x70,  // .*....Up
                /* 0F60 */  0xB7, 0x0F, 0xE0, 0x3D, 0xCA, 0xB7, 0x0F, 0xC0,  // ...=....
                /* 0F68 */  0x4C, 0xE4, 0x4B, 0x13, 0x0A, 0xD6, 0x12, 0x6E,  // L.K....n
                /* 0F70 */  0x1F, 0x88, 0x4B, 0x13, 0xE6, 0x00, 0xC0, 0x63,  // ..K....c
                /* 0F78 */  0xDF, 0x9A, 0x50, 0x81, 0x29, 0x74, 0x6D, 0xF2,  // ..P.)tm.
                /* 0F80 */  0xD1, 0x81, 0x07, 0x84, 0xA3, 0x20, 0xBE, 0x35,  // ..... .5
                /* 0F88 */  0x01, 0x2E, 0xFE, 0xFF, 0xB7, 0x26, 0x70, 0x9E,  // .....&p.
                /* 0F90 */  0x34, 0xC0, 0x7B, 0x6B, 0x02, 0x4E, 0x27, 0x0D,  // 4.{k.N'.
                /* 0F98 */  0xC0, 0x93, 0xF1, 0x93, 0x06, 0xA0, 0xE5, 0xFF,  // ........
                /* 0FA0 */  0x7F, 0x6D, 0x02, 0xCB, 0x49, 0x98, 0x5D, 0x9B,  // .m..I.].
                /* 0FA8 */  0x00, 0x06, 0x39, 0xB9, 0x36, 0x01, 0x42, 0xFE,  // ..9.6.B.
                /* 0FB0 */  0xFF, 0xE3, 0x86, 0x7D, 0x5C, 0x60, 0xB7, 0x0F,  // ...}\`..
                /* 0FB8 */  0x60, 0x3E, 0xCC, 0xD7, 0x26, 0xC0, 0xDE, 0x01,  // `>..&...
                /* 0FC0 */  0x80, 0x5F, 0x9B, 0x00, 0x33, 0xFF, 0xFF, 0x6B,  // ._..3..k
                /* 0FC8 */  0x13, 0x30, 0x3A, 0x69, 0x80, 0xF3, 0xDA, 0x04,  // .0:i....
                /* 0FD0 */  0xDC, 0x4F, 0x1A, 0xC0, 0x7F, 0x9C, 0x4F, 0x1A,  // .O....O.
                /* 0FD8 */  0xC0, 0xFD, 0xFF, 0x7F, 0x10, 0x80, 0x2D, 0xF0,  // ......-.
                /* 0FE0 */  0xA4, 0x81, 0x3A, 0x04, 0x58, 0xF0, 0xA1, 0x9B,  // ..:.X...
                /* 0FE8 */  0x5C, 0x01, 0xEC, 0x71, 0x88, 0x04, 0x26, 0x78,  // \..q..&x
                /* 0FF0 */  0xE0, 0x28, 0x67, 0x79, 0x9C, 0x06, 0xAF, 0x70,  // .(gy...p
                /* 0FF8 */  0x4A, 0x1A, 0x43, 0xA0, 0xF3, 0x3E, 0xA8, 0x08,  // J.C..>..
                /* 1000 */  0xEF, 0x27, 0x06, 0xD7, 0x79, 0x03, 0x25, 0x89,  // .'..y.%.
                /* 1008 */  0x42, 0x27, 0x1F, 0xF8, 0x56, 0x4E, 0x3E, 0x80,  // B'..VN>.
                /* 1010 */  0x82, 0xF3, 0x06, 0xB8, 0xAE, 0x1B, 0xA5, 0x1D,  // ........
                /* 1018 */  0x20, 0x80, 0xBC, 0xF8, 0x03, 0x04, 0xC8, 0xFF,  //  .......
                /* 1020 */  0xFF, 0x07, 0x08, 0x60, 0xA7, 0x72, 0x89, 0xBA,  // ...`.r..
                /* 1028 */  0xC6, 0xE1, 0x54, 0xBF, 0x0F, 0x74, 0x80, 0x60,  // ..T..t.`
                /* 1030 */  0xD7, 0x38, 0x7E, 0x37, 0xF7, 0x65, 0x4E, 0x60,  // .8~7.eN`
                /* 1038 */  0xBA, 0xC6, 0x71, 0x95, 0x30, 0x52, 0xB5, 0x5C,  // ..q.0R.\
                /* 1040 */  0x9D, 0x1C, 0xB8, 0x0E, 0x18, 0xC1, 0x19, 0xC4,  // ........
                /* 1048 */  0xC3, 0x76, 0xAC, 0x53, 0x3D, 0x7A, 0x4C, 0x56,  // .v.S=zLV
                /* 1050 */  0x7C, 0x27, 0xD0, 0x11, 0xC4, 0x41, 0x8E, 0x71,  // |'...A.q
                /* 1058 */  0x40, 0xF1, 0x48, 0x0F, 0xAE, 0x6C, 0x63, 0x43,  // @.H..lcC
                /* 1060 */  0x1F, 0x93, 0xAC, 0x19, 0x51, 0x80, 0x47, 0x73,  // ....Q.Gs
                /* 1068 */  0x2E, 0x98, 0xD9, 0x01, 0xBF, 0xFB, 0x3F, 0xDC,  // ......?.
                /* 1070 */  0xFF, 0xFF, 0xEC, 0xE0, 0x24, 0x9B, 0x1D, 0x5A,  // ....$..Z
                /* 1078 */  0xC7, 0x8D, 0x84, 0x8C, 0xA6, 0x76, 0x48, 0xCD,  // .....vH.
                /* 1080 */  0xE6, 0x91, 0xC1, 0x93, 0x03, 0x7E, 0x47, 0x06,  // .....~G.
                /* 1088 */  0x4F, 0x0E, 0x5C, 0xD1, 0x4E, 0x5F, 0xE8, 0xC9,  // O.\.N_..
                /* 1090 */  0x79, 0x22, 0xAF, 0x02, 0x11, 0xDE, 0x69, 0x7C,  // y"....i|
                /* 1098 */  0x99, 0x04, 0x8E, 0x48, 0xBE, 0x4C, 0x02, 0x67,  // ...H.L.g
                /* 10A0 */  0x39, 0x77, 0x20, 0xD4, 0x53, 0xC1, 0x67, 0x05,  // 9w .S.g.
                /* 10A8 */  0x53, 0xF8, 0x02, 0xE0, 0x70, 0x47, 0x04, 0xF4,  // S...pG..
                /* 10B0 */  0x1D, 0x08, 0x1F, 0x06, 0x42, 0xFF, 0xFF, 0x3B,  // ....B..;
                /* 10B8 */  0x10, 0x70, 0x1C, 0x89, 0xEF, 0x08, 0xE0, 0xBA,  // .p......
                /* 10C0 */  0x02, 0x01, 0x6F, 0xF3, 0x57, 0x20, 0x40, 0x8D,  // ..o.W @.
                /* 10C8 */  0x90, 0x2B, 0x10, 0x5A, 0xD8, 0x15, 0x08, 0x71,  // .+.Z...q
                /* 10D0 */  0x97, 0xC4, 0x8C, 0xDF, 0x72, 0xAE, 0x40, 0x14,  // ....r.@.
                /* 10D8 */  0xC2, 0x42, 0x60, 0x24, 0x03, 0x42, 0x07, 0x07,  // .B`$.B..
                /* 10E0 */  0x1E, 0xFC, 0x0A, 0x44, 0x41, 0x7C, 0xBD, 0xF0,  // ...DA|..
                /* 10E8 */  0xED, 0xC3, 0xFF, 0xFF, 0x2B, 0x10, 0xBC, 0x73,  // ....+..s
                /* 10F0 */  0x03, 0xBC, 0x9B, 0x24, 0x70, 0x3A, 0x37, 0x80,  // ...$p:7.
                /* 10F8 */  0x2B, 0xE0, 0xE8, 0xD0, 0x63, 0xF6, 0x25, 0x08,  // +...c.%.
                /* 1100 */  0xC6, 0x00, 0x81, 0xE9, 0x39, 0x08, 0x7C, 0x17,  // ....9.|.
                /* 1108 */  0x3D, 0x0F, 0x10, 0x07, 0xEC, 0x73, 0x10, 0x76,  // =....s.v
                /* 1110 */  0x7C, 0xC0, 0xF4, 0xE4, 0xE2, 0xFF, 0xFF, 0x79,  // |......y
                /* 1118 */  0x00, 0x7C, 0x37, 0x21, 0x1C, 0xB0, 0x6F, 0x42,  // .|7!..oB
                /* 1120 */  0xD8, 0x8B, 0x2A, 0x30, 0x85, 0xF2, 0xBD, 0x16,  // ..*0....
                /* 1128 */  0x7C, 0x87, 0x1E, 0xF0, 0x8E, 0x0F, 0xF8, 0x1C,  // |.......
                /* 1130 */  0x7A, 0x00, 0x17, 0xFF, 0xFF, 0x43, 0x0F, 0x5C,  // z....C.\
                /* 1138 */  0xF5, 0x87, 0x1E, 0x40, 0x8D, 0xCE, 0x43, 0x0F,  // ...@..C.
                /* 1140 */  0x5A, 0xF7, 0x35, 0x12, 0xC2, 0x6D, 0x81, 0xA9,  // Z.5..m..
                /* 1148 */  0xBD, 0x46, 0xA2, 0x74, 0x5E, 0x23, 0x01, 0x4A,  // .F.t^#.J
                /* 1150 */  0xFC, 0xFF, 0xAF, 0x91, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                /* 1158 */  0xD7, 0x48, 0x98, 0x47, 0x73, 0xF8, 0xB3, 0xC6,  // .H.Gs...
                /* 1160 */  0x1D, 0xCD, 0x81, 0xF7, 0x48, 0x7C, 0x63, 0x02,  // ....H|c.
                /* 1168 */  0xDF, 0x1D, 0x08, 0x78, 0xBB, 0xBF, 0x03, 0x01,  // ...x....
                /* 1170 */  0x52, 0xFE, 0xFF, 0x80, 0xF4, 0x0E, 0x84, 0x82,  // R.......
                /* 1178 */  0xB5, 0xB8, 0x7B, 0x24, 0x94, 0x03, 0x00, 0x17,  // ..{$....
                /* 1180 */  0x74, 0x91, 0x44, 0x49, 0x81, 0xD1, 0x4D, 0xD2,  // t.DI..M.
                /* 1188 */  0x47, 0x07, 0x1E, 0xFD, 0x12, 0x44, 0x41, 0x7C,  // G....DA|
                /* 1190 */  0x91, 0x04, 0x58, 0xFA, 0xFF, 0xBF, 0x48, 0x02,  // ..X...H.
                /* 1198 */  0x6C, 0x3A, 0xF6, 0x80, 0xF7, 0x22, 0x09, 0x9C,  // l:..."..
                /* 11A0 */  0xC6, 0x07, 0x96, 0xFF, 0xFF, 0xB1, 0x07, 0x30,  // .......0
                /* 11A8 */  0x20, 0xFF, 0x26, 0x09, 0xC8, 0x73, 0x26, 0x40,  //  .&..s&@
                /* 11B0 */  0xD9, 0x4D, 0x12, 0x90, 0xF7, 0xFF, 0xBF, 0x49,  // .M.....I
                /* 11B8 */  0x02, 0xFC, 0xFF, 0xFF, 0xDF, 0x24, 0x01, 0x3F,  // .....$.?
                /* 11C0 */  0x4E, 0x6E, 0x92, 0x80, 0xAE, 0x43, 0x0B, 0xBB,  // Nn...C..
                /* 11C8 */  0x03, 0x01, 0x73, 0xFB, 0x77, 0x20, 0xD0, 0xFD,  // ..s.w ..
                /* 11D0 */  0xFF, 0x6F, 0x92, 0x80, 0x8F, 0x03, 0x00, 0xBF,  // .o......
                /* 11D8 */  0x49, 0x02, 0x3C, 0xFB, 0xFF, 0xDF, 0x24, 0x01,  // I.<...$.
                /* 11E0 */  0xDE, 0x1E, 0x7B, 0xC0, 0x39, 0x3E, 0x38, 0xFF,  // ..{.9>8.
                /* 11E8 */  0xFF, 0x63, 0x0F, 0xE0, 0x59, 0xFF, 0x4D, 0x12,  // .c..Y.M.
                /* 11F0 */  0x90, 0x77, 0x5C, 0x28, 0xED, 0x26, 0x09, 0xB4,  // .w\(.&..
                /* 11F8 */  0xFE, 0xFF, 0x37, 0x49, 0x80, 0xFF, 0xFF, 0xFF,  // ..7I....
                /* 1200 */  0x9B, 0x24, 0xC0, 0x02, 0x2B, 0x37, 0x49, 0x40,  // .$..+7I@
                /* 1208 */  0xD7, 0xA1, 0x85, 0xDD, 0x81, 0x80, 0xC3, 0xFF,  // ........
                /* 1210 */  0xFF, 0x0E, 0x04, 0x56, 0xFF, 0x37, 0x49, 0x40,  // ...V.7I@
                /* 1218 */  0xDF, 0x01, 0x80, 0xDF, 0x24, 0x01, 0x06, 0xFC,  // ....$...
                /* 1220 */  0xFF, 0x6F, 0x92, 0x00, 0xFF, 0xFF, 0xFF, 0x37,  // .o.....7
                /* 1228 */  0x49, 0xD8, 0xC7, 0x1E, 0x70, 0xDE, 0x24, 0x81,  // I...p.$.
                /* 1230 */  0xFB, 0xB1, 0x07, 0xF8, 0x07, 0x38, 0xF6, 0x00,  // .....8..
                /* 1238 */  0x6A, 0xB2, 0xBD, 0x70, 0x74, 0xEC, 0xE1, 0x67,  // j..pt..g
                /* 1240 */  0x01, 0x67, 0x5D, 0xA6, 0x06, 0xFC, 0xFF, 0x7F,  // .g].....
                /* 1248 */  0x93, 0xC4, 0x2B, 0x1C, 0x08, 0x39, 0xE5, 0x38,  // ..+..9.8
                /* 1250 */  0x1D, 0xA0, 0xEE, 0x92, 0x3C, 0x17, 0x8C, 0x52,  // ....<..R
                /* 1258 */  0x9C, 0x7B, 0x50, 0x17, 0x4B, 0xC3, 0x19, 0xC4,  // .{P.K...
                /* 1260 */  0x1E, 0xEE, 0x92, 0x00, 0x79, 0xFF, 0xFF, 0x77,  // ....y..w
                /* 1268 */  0x49, 0x80, 0x0D, 0xC1, 0x6E, 0x02, 0xE8, 0xD3,  // I...n...
                /* 1270 */  0x88, 0x27, 0xF3, 0xB2, 0xE3, 0xD1, 0x9C, 0x9C,  // .'......
                /* 1278 */  0x4F, 0x02, 0xC0, 0x6F, 0x1C, 0x3E, 0x09, 0x80,  // O..o.>..
                /* 1280 */  0x6B, 0x70, 0x70, 0x4E, 0x2E, 0x01, 0x5F, 0x1B,  // kppN.._.
                /* 1288 */  0x1E, 0x6B, 0x3C, 0x38, 0x70, 0xFC, 0xFF, 0x07,  // .k<8p...
                /* 1290 */  0x07, 0xF6, 0x73, 0x0F, 0x1F, 0x1C, 0x78, 0xEE,  // ..s...x.
                /* 1298 */  0xA8, 0x80, 0xE9, 0x91, 0xFB, 0x76, 0x05, 0x38,  // .....v.8
                /* 12A0 */  0xFA, 0xFF, 0x9F, 0xA5, 0x5C, 0xE0, 0x76, 0x05,  // ....\.v.
                /* 12A8 */  0xA8, 0x09, 0x72, 0xBB, 0x42, 0x71, 0x38, 0xD8,  // ..r.Bq8.
                /* 12B0 */  0xED, 0x0A, 0x71, 0x47, 0xC5, 0x1E, 0xAF, 0x30,  // ..qG...0
                /* 12B8 */  0xD0, 0xBA, 0x5E, 0x51, 0x08, 0x47, 0x80, 0x51,  // ..^Q.G.Q
                /* 12C0 */  0x00, 0x08, 0x1D, 0x1E, 0xB8, 0x64, 0x38, 0x0A,  // .....d8.
                /* 12C8 */  0xE2, 0x11, 0xF9, 0x96, 0x0A, 0xF8, 0xFF, 0xFF,  // ........
                /* 12D0 */  0xDF, 0x52, 0x01, 0xBE, 0x87, 0x3B, 0x0F, 0xA0,  // .R...;..
                /* 12D8 */  0xFF, 0xFF, 0x17, 0x2D, 0xFC, 0x71, 0x00, 0x78,  // ...-.q.x
                /* 12E0 */  0x5E, 0xB5, 0xC0, 0x37, 0x3C, 0x38, 0x57, 0x2D,  // ^..7<8W-
                /* 12E8 */  0xDC, 0xF0, 0x80, 0xE7, 0x65, 0x0B, 0x7C, 0x37,  // ....e.|7
                /* 12F0 */  0x60, 0xC0, 0xC3, 0xA1, 0x0A, 0xDE, 0xFF, 0xFF,  // `.......
                /* 12F8 */  0x50, 0x05, 0x38, 0x49, 0x70, 0xA8, 0x02, 0xD4,  // P.8Ip...
                /* 1300 */  0x28, 0x5B, 0xA0, 0x0E, 0x55, 0xFC, 0x38, 0x64,  // ([..U.8d
                /* 1308 */  0xA5, 0x0F, 0x18, 0x0D, 0xD7, 0x10, 0x6F, 0xC0,  // ......o.
                /* 1310 */  0xFC, 0xB6, 0xE0, 0xAB, 0x9E, 0xC0, 0x74, 0xFF,  // ......t.
                /* 1318 */  0xE5, 0xCA, 0x28, 0xA4, 0xE4, 0x74, 0x87, 0xCA,  // ..(..t..
                /* 1320 */  0x7E, 0xFA, 0xA1, 0x20, 0x06, 0xF4, 0x0D, 0xD1,  // ~.. ....
                /* 1328 */  0x27, 0x07, 0x9C, 0x0A, 0x10, 0x4D, 0xC1, 0x08,  // '....M..
                /* 1330 */  0x27, 0xF4, 0xE6, 0x09, 0xFC, 0xFE, 0xFF, 0x04,  // '.......
                /* 1338 */  0xEC, 0xE6, 0x09, 0x9E, 0x6B, 0x03, 0xBB, 0x21,  // ....k..!
                /* 1340 */  0x02, 0x0B, 0x39, 0x93, 0x46, 0xED, 0xD9, 0x93,  // ..9.F...
                /* 1348 */  0x36, 0x85, 0x27, 0xED, 0xBB, 0x0A, 0x9C, 0xDB,  // 6.'.....
                /* 1350 */  0x07, 0xEE, 0xAE, 0x02, 0xEF, 0x86, 0x08, 0x7C,  // .......|
                /* 1358 */  0xAE, 0x59, 0xE0, 0xBB, 0x7C, 0x00, 0xEF, 0x18,  // .Y..|...
                /* 1360 */  0x97, 0x0F, 0x10, 0xFF, 0xFF, 0x2F, 0x1F, 0xC0,  // ...../..
                /* 1368 */  0x30, 0xEE, 0x23, 0x41, 0x97, 0x0F, 0x5C, 0xFC,  // 0.#A..\.
                /* 1370 */  0x57, 0x80, 0x2E, 0x1F, 0xEC, 0x82, 0x88, 0x19,  // W.......
                /* 1378 */  0xBF, 0x43, 0x9F, 0x18, 0x28, 0x84, 0xE3, 0x52,  // .C..(..R
                /* 1380 */  0x28, 0xEC, 0xC1, 0x01, 0x15, 0x0F, 0x8E, 0x82,  // (.......
                /* 1388 */  0x78, 0xD0, 0xBE, 0x05, 0xC1, 0xB9, 0x7C, 0x60,  // x.....|`
                /* 1390 */  0x6E, 0x41, 0xC0, 0x94, 0xC0, 0xB7, 0x20, 0xF0,  // nA.... .
                /* 1398 */  0x9D, 0x33, 0xC0, 0x7B, 0x3B, 0x04, 0x56, 0xFF,  // .3.{;.V.
                /* 13A0 */  0xFF, 0x73, 0x06, 0x60, 0xA8, 0xC6, 0x39, 0x03,  // .s.`..9.
                /* 13A8 */  0x50, 0xA3, 0xED, 0xCE, 0x84, 0xD6, 0x7A, 0x67,  // P.....zg
                /* 13B0 */  0x82, 0x70, 0x1C, 0x64, 0x0A, 0xEF, 0x4C, 0x28,  // .p.d..L(
                /* 13B8 */  0x6D, 0x77, 0x26, 0x40, 0xC6, 0xFF, 0xFF, 0xCE,  // mw&@....
                /* 13C0 */  0x04, 0x78, 0x38, 0xA5, 0xC3, 0x3F, 0x8D, 0xE2,  // .x8..?..
                /* 13C8 */  0x4E, 0xE9, 0xC0, 0x7B, 0x54, 0x3E, 0x8C, 0x82,  // N..{T>..
                /* 13D0 */  0xEF, 0xF6, 0x01, 0xBC, 0x73, 0xDC, 0x3E, 0x40,  // ....s.>@
                /* 13D8 */  0xF3, 0xFF, 0xBF, 0x7D, 0x00, 0xE7, 0xC8, 0x97,  // ...}....
                /* 13E0 */  0x26, 0x14, 0xAC, 0x25, 0xDC, 0x3E, 0x10, 0x97,  // &..%.>..
                /* 13E8 */  0x26, 0xCC, 0x01, 0x80, 0xC7, 0xBE, 0x35, 0xA1,  // &.....5.
                /* 13F0 */  0x02, 0x53, 0xE8, 0xDA, 0xE4, 0xA3, 0x03, 0x0F,  // .S......
                /* 13F8 */  0x08, 0x47, 0x41, 0x7C, 0x6B, 0x02, 0xFC, 0x9D,  // .GA|k...
                /* 1400 */  0x34, 0xC0, 0x3B, 0x3E, 0xF0, 0xFF, 0xFF, 0x4F,  // 4.;>...O
                /* 1408 */  0x1A, 0x80, 0xBB, 0x1E, 0xD7, 0x26, 0x40, 0x9E,  // .....&@.
                /* 1410 */  0xB3, 0x63, 0xEB, 0x6B, 0x13, 0xA0, 0xE0, 0xFF,  // .c.k....
                /* 1418 */  0x7F, 0x6D, 0x02, 0x0C, 0x3A, 0xB9, 0x36, 0x01,  // .m..:.6.
                /* 1420 */  0xBA, 0x8E, 0x0B, 0xEC, 0xF6, 0x01, 0xCC, 0x83,  // ........
                /* 1428 */  0xDC, 0x3E, 0x90, 0xFF, 0xFF, 0x6B, 0x13, 0x60,  // .>...k.`
                /* 1430 */  0xEC, 0x00, 0xC0, 0xAF, 0x4D, 0x80, 0xEB, 0x93,  // ....M...
                /* 1438 */  0x06, 0x38, 0xC7, 0x07, 0x96, 0xFF, 0xFF, 0x49,  // .8.....I
                /* 1440 */  0x03, 0xB0, 0x5A, 0xE4, 0xDA, 0x04, 0xC8, 0xBB,  // ..Z.....
                /* 1448 */  0x2E, 0xB0, 0x6B, 0x13, 0xB0, 0xFC, 0xFF, 0x5F,  // ..k...._
                /* 1450 */  0x9B, 0x00, 0xB7, 0x97, 0x15, 0xFC, 0xB5, 0x09,  // ........
                /* 1458 */  0xF0, 0x73, 0x59, 0xE1, 0xB7, 0x0F, 0xE0, 0xFA,  // .sY.....
                /* 1460 */  0xFF, 0xBF, 0x7D, 0xE0, 0x8E, 0x0E, 0xBE, 0x36,  // ..}....6
                /* 1468 */  0x01, 0xEE, 0x0E, 0x00, 0xFC, 0xDA, 0x04, 0xB8,  // ........
                /* 1470 */  0x3E, 0x69, 0x80, 0x73, 0x7C, 0xB8, 0xFF, 0xFF,  // >i.s|...
                /* 1478 */  0x49, 0x03, 0xF0, 0xDD, 0xE4, 0xA4, 0x01, 0xA8,  // I.......
                /* 1480 */  0xC9, 0xF3, 0x36, 0xD0, 0x49, 0x83, 0x9F, 0x05,  // ..6.I...
                /* 1488 */  0x9C, 0x6F, 0x91, 0xBA, 0x36, 0xC1, 0x50, 0x38,  // .o..6.P8
                /* 1490 */  0x10, 0x32, 0x82, 0x04, 0x13, 0x01, 0xEA, 0xE2,  // .2......
                /* 1498 */  0xC4, 0xB3, 0xC0, 0x48, 0x39, 0x89, 0x8E, 0x1A,  // ...H9...
                /* 14A0 */  0xFC, 0x16, 0x65, 0x38, 0x83, 0xF8, 0xC4, 0xE0,  // ..e8....
                /* 14A8 */  0x8B, 0x13, 0xBC, 0xFF, 0xFF, 0xC5, 0x09, 0xF0,  // ........
                /* 14B0 */  0x32, 0x38, 0x1B, 0x39, 0x67, 0xA0, 0x27, 0xF3,  // 28.9g.'.
                /* 14B8 */  0x9A, 0xE1, 0xD1, 0x3C, 0x18, 0xF9, 0x86, 0xE9,  // ...<....
                /* 14C0 */  0xC9, 0x01, 0xB7, 0xF1, 0xFB, 0x7C, 0x80, 0x9B,  // .....|..
                /* 14C8 */  0x1C, 0x5C, 0x71, 0x83, 0x83, 0x76, 0x66, 0x08,  // .\q..vf.
                /* 14D0 */  0xF8, 0x20, 0xF0, 0x40, 0xE1, 0xC1, 0x01, 0xC3,  // . .@....
                /* 14D8 */  0x13, 0x83, 0x07, 0x07, 0xAE, 0x0B, 0x19, 0xFF,  // ........
                /* 14E0 */  0xFF, 0x5F, 0xC8, 0x00, 0xC3, 0x50, 0xBE, 0xD7,  // ._...P..
                /* 14E8 */  0x00, 0x9E, 0xA2, 0xDC, 0x6B, 0x80, 0xF0, 0xFF,  // ....k...
                /* 14F0 */  0xFF, 0x20, 0x00, 0x26, 0xB9, 0xF7, 0x1A, 0x14,  // . .&....
                /* 14F8 */  0x87, 0xE5, 0xDF, 0x6B, 0x10, 0x17, 0x32, 0xEC,  // ...k..2.
                /* 1500 */  0xC1, 0x06, 0x03, 0xAD, 0x8B, 0x0D, 0x85, 0xB0,  // ........
                /* 1508 */  0x50, 0x18, 0xC9, 0x84, 0xD0, 0xE1, 0x81, 0x0B,  // P.......
                /* 1510 */  0x83, 0xA3, 0x20, 0x1E, 0xB9, 0xAF, 0x64, 0x80,  // .. ...d.
                /* 1518 */  0xBB, 0x70, 0x77, 0x1B, 0xE8, 0x61, 0xAE, 0x64,  // .pw..a.d
                /* 1520 */  0x40, 0xF5, 0xC6, 0x02, 0xAE, 0xE1, 0xFD, 0xFF,  // @.......
                /* 1528 */  0xDF, 0x6E, 0x60, 0x0F, 0x0F, 0x78, 0xDE, 0x6F,  // .n`..x.o
                /* 1530 */  0xC0, 0x77, 0xDD, 0x03, 0x3C, 0x9C, 0x63, 0x00,  // .w..<.c.
                /* 1538 */  0x57, 0x55, 0xCE, 0x31, 0x90, 0xFE, 0xFF, 0xE7,  // WU.1....
                /* 1540 */  0x18, 0xC0, 0x82, 0xB8, 0x7B, 0x2A, 0x4A, 0x14,  // ....{*J.
                /* 1548 */  0x84, 0xC4, 0x3E, 0x31, 0x74, 0x84, 0x39, 0xD9,  // ..>1t.9.
                /* 1550 */  0x3E, 0x07, 0x2C, 0xF0, 0xD3, 0x3E, 0x6C, 0x8F,  // >.,..>l.
                /* 1558 */  0xF8, 0xA8, 0x63, 0x9C, 0x99, 0x47, 0x74, 0xCE,  // ..c..Gt.
                /* 1560 */  0xB5, 0x0F, 0x8E, 0x1E, 0x08, 0x74, 0x57, 0x45,  // .....tWE
                /* 1568 */  0x49, 0xA2, 0xD0, 0xA9, 0x0A, 0xBE, 0x93, 0xE3,  // I.......
                /* 1570 */  0x03, 0x7A, 0x0A, 0x67, 0x79, 0xC2, 0x6F, 0x06,  // .z.gy.o.
                /* 1578 */  0x87, 0xE7, 0x53, 0x15, 0xF0, 0x3C, 0xC9, 0x80,  // ..S..<..
                /* 1580 */  0xCB, 0x99, 0x00, 0x65, 0xC7, 0x07, 0xA0, 0xF6,  // ...e....
                /* 1588 */  0xFF, 0x3F, 0x3E, 0x80, 0x21, 0xDF, 0xF1, 0x01,  // .?>.!...
                /* 1590 */  0x50, 0x23, 0xEA, 0xD6, 0x8C, 0x16, 0x79, 0x54,  // P#....yT
                /* 1598 */  0xD0, 0xE5, 0xC1, 0x2A, 0x05, 0x78, 0x1C, 0x22,  // ...*.x."
                /* 15A0 */  0x99, 0xEE, 0x4B, 0x8B, 0x3D, 0x8F, 0x83, 0x1C,  // ..K.=...
                /* 15A8 */  0x1D, 0xC0, 0xA7, 0xE4, 0xE8, 0x00, 0xE8, 0x32,  // .......2
                /* 15B0 */  0x76, 0x91, 0xD1, 0xD1, 0x01, 0x8C, 0xFF, 0xFF,  // v.......
                /* 15B8 */  0xA3, 0x03, 0x30, 0x89, 0x7B, 0x74, 0x00, 0xD4,  // ..0.{t..
                /* 15C0 */  0x48, 0x3A, 0x3A, 0xA0, 0x25, 0x1E, 0x1D, 0xD0,  // H::.%...
                /* 15C8 */  0x22, 0xE7, 0xA1, 0x19, 0xB2, 0x61, 0xE8, 0xE8,  // "....a..
                /* 15D0 */  0x80, 0x3A, 0x39, 0x58, 0xCE, 0xD1, 0x01, 0x45,  // .:9X...E
                /* 15D8 */  0x65, 0x30, 0x53, 0xF8, 0xE8, 0xE0, 0x03, 0x18,  // e0S.....
                /* 15E0 */  0x9C, 0xA3, 0x03, 0xEE, 0x00, 0x06, 0xEF, 0xE8,  // ........
                /* 15E8 */  0x00, 0x9C, 0x0E, 0x60, 0xE0, 0x3A, 0x39, 0x60,  // ...`.:9`
                /* 15F0 */  0xFE, 0xFF, 0x27, 0x07, 0x60, 0x5B, 0xF7, 0xE4,  // ..'.`[..
                /* 15F8 */  0x00, 0xA8, 0x11, 0x74, 0x72, 0x40, 0x49, 0x19,  // ...tr@I.
                /* 1600 */  0xB9, 0x4F, 0x0A, 0x9A, 0xAD, 0x8F, 0x54, 0x31,  // .O....T1
                /* 1608 */  0x42, 0x9E, 0x4D, 0xC5, 0x23, 0x23, 0x07, 0x07,  // B.M.##..
                /* 1610 */  0x60, 0x79, 0xCA, 0x04, 0x4E, 0x07, 0x07, 0x58,  // `y..N..X
                /* 1618 */  0xFF, 0xFF, 0x83, 0x03, 0x60, 0x23, 0xF3, 0x09,  // ....`#..
                /* 1620 */  0x06, 0xD0, 0x75, 0x70, 0x60, 0x27, 0x18, 0x36,  // ..up`'.6
                /* 1628 */  0xC7, 0x43, 0xF4, 0x34, 0x7C, 0x82, 0x01, 0x5C,  // .C.4|..\
                /* 1630 */  0xFD, 0xFF, 0x4F, 0x0E, 0x80, 0xB1, 0xCE, 0x27,  // ..O....'
                /* 1638 */  0x07, 0x40, 0xDA, 0xF5, 0xD2, 0x27, 0x07, 0x60,  // .@...'.`
                /* 1640 */  0x7C, 0x84, 0x01, 0xC3, 0xFF, 0xFF, 0xE4, 0x00,  // |.......
                /* 1648 */  0x58, 0x0D, 0x7D, 0x84, 0x01, 0xD4, 0x9D, 0xE9,  // X.}.....
                /* 1650 */  0x80, 0xED, 0xFF, 0xFF, 0x08, 0x03, 0x98, 0x2F,  // ......./
                /* 1658 */  0x7D, 0xCC, 0x05, 0x34, 0x1D, 0x05, 0x7C, 0xCC,  // }..4..|.
                /* 1660 */  0xB5, 0xD5, 0xC1, 0x6A, 0x8C, 0x8F, 0xB9, 0x38,  // ...j...8
                /* 1668 */  0x88, 0x47, 0x80, 0x13, 0x78, 0x74, 0x00, 0xFB,  // .G..xt..
                /* 1670 */  0xFF, 0xFF, 0xE8, 0x00, 0x30, 0x24, 0xF8, 0xD1,  // ....0$..
                /* 1678 */  0x01, 0x90, 0x76, 0x98, 0x62, 0x47, 0x07, 0x30,  // ..v.bG.0
                /* 1680 */  0xFC, 0xFF, 0x4F, 0x53, 0x00, 0x93, 0x8A, 0x9F,  // ..OS....
                /* 1688 */  0xA6, 0x00, 0x5D, 0x47, 0x07, 0xF6, 0xFF, 0x3F,  // ..]G...?
                /* 1690 */  0x4D, 0x01, 0x6C, 0x4B, 0x7E, 0x72, 0x00, 0x84,  // M.lK~r..
                /* 1698 */  0xFC, 0xFF, 0xCF, 0x01, 0x18, 0x45, 0x4F, 0x03,  // .....EO.
                /* 16A0 */  0x9D, 0x1C, 0xB8, 0x24, 0x08, 0x69, 0x59, 0xA4,  // ...$.iY.
                /* 16A8 */  0xC6, 0x55, 0xD9, 0xA8, 0x85, 0x70, 0x8A, 0x75,  // .U...p.u
                /* 16B0 */  0x5E, 0x1D, 0xA8, 0xD6, 0x11, 0x4B, 0x23, 0x84,  // ^....K#.
                /* 16B8 */  0x60, 0x7A, 0xBE, 0x02, 0x90, 0x51, 0xEA, 0xC9,  // `z...Q..
                /* 16C0 */  0xA0, 0x53, 0x83, 0x0F, 0x0D, 0xCE, 0x4C, 0xA1,  // .S....L.
                /* 16C8 */  0x84, 0x87, 0x07, 0x54, 0xA6, 0xC3, 0x03, 0x05,  // ...T....
                /* 16D0 */  0xF1, 0xC0, 0x9D, 0xEB, 0xF0, 0x80, 0x56, 0x01,  // ......V.
                /* 16D8 */  0xA2, 0x7B, 0xC0, 0x41, 0x46, 0x38, 0xA9, 0x04,  // .{.AF8..
                /* 16E0 */  0x83, 0xDC, 0x1D, 0xE8, 0xD4, 0x3C, 0x4B, 0xAE,  // .....<K.
                /* 16E8 */  0xE1, 0x12, 0x83, 0xC0, 0xAD, 0x6A, 0x8E, 0x20,  // .....j. 
                /* 16F0 */  0x52, 0x73, 0x28, 0x40, 0x4D, 0xC0, 0x47, 0x07,  // Rs(@M.G.
                /* 16F8 */  0xCC, 0xCD, 0x01, 0x5C, 0xC9, 0x20, 0xE4, 0xE4,  // ...\. ..
                /* 1700 */  0x9E, 0x81, 0xC6, 0x8D, 0xF7, 0x82, 0x6A, 0xF1,  // ......j.
                /* 1708 */  0x30, 0x4A, 0x32, 0x38, 0xA0, 0x37, 0x7D, 0xEB,  // 0J28.7}.
                /* 1710 */  0x1A, 0x1C, 0x68, 0x9C, 0x5D, 0x0D, 0x44, 0x50,  // ..h.].DP
                /* 1718 */  0xDF, 0x31, 0x03, 0x84, 0xFF, 0xFF, 0x63, 0x06,  // .1....c.
                /* 1720 */  0x0E, 0x9D, 0xDF, 0x56, 0x7C, 0x41, 0xE0, 0x12,  // ...V|A..
                /* 1728 */  0x2E, 0x08, 0x14, 0xC4, 0x17, 0x05, 0xC7, 0x83,  // ........
                /* 1730 */  0x90, 0x92, 0x51, 0xA3, 0x4F, 0x0D, 0x2F, 0x2B,  // ..Q.O./+
                /* 1738 */  0x98, 0x38, 0x97, 0x15, 0xA0, 0x39, 0x26, 0x0B,  // .8...9&.
                /* 1740 */  0x1B, 0x37, 0x68, 0x8C, 0x09, 0xD0, 0x06, 0x49,  // .7h....I
                /* 1748 */  0x6E, 0x2B, 0xC0, 0x23, 0xFC, 0x6D, 0x05, 0x74,  // n+.#.m.t
                /* 1750 */  0xE9, 0x6F, 0x2B, 0x40, 0x57, 0xEC, 0x41, 0x00,  // .o+@W.A.
                /* 1758 */  0x34, 0x18, 0x35, 0x0B, 0xF8, 0xFF, 0x23, 0x9C,  // 4.5...#.
                /* 1760 */  0x56, 0xA8, 0x53, 0x3F, 0xA5, 0x88, 0x31, 0xC3,  // V.S?..1.
                /* 1768 */  0x1C, 0x73, 0xAC, 0x30, 0x21, 0xC2, 0x9E, 0x49,  // .s.0!..I
                /* 1770 */  0x98, 0xE6, 0xB1, 0x35, 0x32, 0xCF, 0xCF, 0x04,  // ...52...
                /* 1778 */  0x43, 0xAD, 0x55, 0x17, 0x17, 0x5C, 0xC8, 0x17,  // C.U..\..
                /* 1780 */  0x81, 0x2E, 0x2E, 0xB8, 0xD3, 0x1C, 0xBB, 0xB8,  // ........
                /* 1788 */  0xC0, 0x88, 0x74, 0x71, 0xA1, 0x10, 0x0E, 0x03,  // ..tq....
                /* 1790 */  0xA3, 0x28, 0x10, 0x3A, 0x48, 0x70, 0xF1, 0x70,  // .(.:Hp.p
                /* 1798 */  0x14, 0xC4, 0xC7, 0x07, 0x5F, 0xA2, 0xE0, 0x5C,  // ...._..\
                /* 17A0 */  0x5C, 0x30, 0xB7, 0x39, 0xC0, 0xCC, 0xB1, 0xC3,  // \0.9....
                /* 17A8 */  0x67, 0x17, 0xB8, 0xC7, 0x0E, 0x78, 0xC3, 0x03,  // g....x..
                /* 17B0 */  0x3E, 0x67, 0x00, 0x1F, 0x3B, 0xC0, 0x73, 0x7A,  // >g..;.sz
                /* 17B8 */  0xF1, 0xFF, 0x9F, 0xC0, 0xA7, 0x14, 0xF0, 0x8E,  // ........
                /* 17C0 */  0x0F, 0xF8, 0x9C, 0x52, 0x80, 0xFB, 0x15, 0x0D,  // ...R....
                /* 17C8 */  0x7C, 0xED, 0xAF, 0x68, 0x80, 0xC6, 0xFF, 0xFF,  // |..h....
                /* 17D0 */  0xD1, 0x84, 0xDD, 0x01, 0xD8, 0x15, 0x0D, 0xE0,  // ........
                /* 17D8 */  0xFC, 0xFF, 0xFF, 0x8A, 0x06, 0xB0, 0x25, 0xFE,  // ......%.
                /* 17E0 */  0x15, 0x0D, 0x10, 0xFA, 0xFF, 0xBF, 0xA2, 0x81,  // ........
                /* 17E8 */  0xE7, 0x3A, 0xC0, 0xAE, 0x68, 0x00, 0xA3, 0xFF,  // .:..h...
                /* 17F0 */  0xFF, 0x57, 0x34, 0x80, 0x01, 0xF5, 0xAF, 0x68,  // .W4....h
                /* 17F8 */  0x80, 0x9A, 0xC8, 0x4F, 0x00, 0x1D, 0x4D, 0xF8,  // ...O..M.
                /* 1800 */  0x59, 0xC0, 0x12, 0x80, 0x34, 0xD9, 0x93, 0xF6,  // Y...4...
                /* 1808 */  0x1C, 0xCF, 0x82, 0x2B, 0x3C, 0xA7, 0x68, 0x1E,  // ...+<.h.
                /* 1810 */  0x8C, 0x60, 0xE8, 0x93, 0x12, 0x85, 0x70, 0x5C,  // .`....p\
                /* 1818 */  0x0A, 0x85, 0x3D, 0x30, 0xA1, 0xE2, 0xC1, 0x51,  // ..=0...Q
                /* 1820 */  0x10, 0x0F, 0xDB, 0x67, 0x07, 0xF6, 0xFF, 0x3F,  // ...g...?
                /* 1828 */  0x3B, 0x60, 0x87, 0xE8, 0x83, 0x09, 0x3F, 0x3B,  // ;`....?;
                /* 1830 */  0x00, 0x4F, 0x02, 0x9F, 0x1D, 0xC0, 0x77, 0x8E,  // .O....w.
                /* 1838 */  0x81, 0x33, 0xBC, 0xF3, 0x8B, 0x18, 0xE2, 0x39,  // .3.....9
                /* 1840 */  0x06, 0xB8, 0x1E, 0x02, 0x7C, 0x8E, 0x01, 0xD7,  // ....|...
                /* 1848 */  0x49, 0x03, 0x78, 0x9F, 0xD6, 0x7C, 0xD2, 0x80,  // I.x..|..
                /* 1850 */  0xF5, 0xFF, 0x3F, 0x69, 0x00, 0x06, 0xB4, 0x9D,  // ..?i....
                /* 1858 */  0xA9, 0x50, 0xB0, 0xD6, 0x7A, 0xD2, 0x40, 0x5C,  // .P..z.@\
                /* 1860 */  0xA7, 0x3C, 0x1B, 0x5F, 0x34, 0x30, 0xFA, 0x2E,  // .<._40..
                /* 1868 */  0x96, 0x28, 0x65, 0x14, 0x52, 0x72, 0xD0, 0x40,  // .(e.Rr.@
                /* 1870 */  0x65, 0x3F, 0x14, 0x50, 0x10, 0x03, 0x3A, 0xD8,  // e?.P..:.
                /* 1878 */  0x41, 0x03, 0x7D, 0xB1, 0xF4, 0x41, 0x03, 0x73,  // A.}..A.s
                /* 1880 */  0x59, 0x04, 0x7E, 0x04, 0xBE, 0x2C, 0x82, 0xE7,  // Y.~..,..
                /* 1888 */  0x96, 0xC1, 0x2E, 0x8B, 0xC0, 0x42, 0xCE, 0xA4,  // .....B..
                /* 1890 */  0x51, 0x7B, 0xF6, 0xA4, 0x4D, 0xE1, 0x49, 0xFB,  // Q{..M.I.
                /* 1898 */  0xF6, 0x01, 0xE7, 0xFF, 0x7F, 0xFB, 0x00, 0xC7,  // ........
                /* 18A0 */  0x65, 0x11, 0xF8, 0xDC, 0x3E, 0x00, 0x4F, 0x16,  // e...>.O.
                /* 18A8 */  0x6E, 0x1F, 0x80, 0x9A, 0xD0, 0xD7, 0x26, 0xB4,  // n.....&.
                /* 18B0 */  0x88, 0x6B, 0x13, 0x14, 0x94, 0xF7, 0x45, 0x0F,  // .k....E.
                /* 18B8 */  0x88, 0xC5, 0xBE, 0x36, 0xA1, 0x02, 0x53, 0xE8,  // ...6..S.
                /* 18C0 */  0xDE, 0xE4, 0x23, 0x80, 0xFF, 0xFF, 0x70, 0x0E,  // ..#...p.
                /* 18C8 */  0x08, 0x47, 0x41, 0x7C, 0x6D, 0x02, 0xFC, 0x8D,  // .GA|m...
                /* 18D0 */  0x0F, 0xCE, 0x49, 0x03, 0x77, 0x3F, 0x04, 0x9C,  // ..I.w?..
                /* 18D8 */  0x5C, 0xF8, 0x80, 0xFB, 0xFF, 0xFF, 0xDE, 0x60,  // \......`
                /* 18E0 */  0x0D, 0x47, 0x0D, 0x40, 0x8D, 0xBA, 0x7B, 0x13,  // .G.@..{.
                /* 18E8 */  0x5A, 0xED, 0xBD, 0x09, 0xC2, 0x4D, 0x03, 0xA3,  // Z....M..
                /* 18F0 */  0xF0, 0xDE, 0x84, 0xD2, 0x76, 0x6F, 0x02, 0x48,  // ....vo.H
                /* 18F8 */  0x71, 0x68, 0x87, 0xF1, 0xFF, 0x3F, 0xB4, 0xC3,  // qh...?..
                /* 1900 */  0xBE, 0x7E, 0x80, 0xE3, 0xDE, 0x04, 0x9C, 0xAE,  // .~......
                /* 1908 */  0x1F, 0x80, 0x27, 0x0F, 0xD7, 0x0F, 0x40, 0x8D,  // ..'...@.
                /* 1910 */  0x98, 0xB7, 0x81, 0x2E, 0x4E, 0x38, 0x71, 0x8B,  // ....N8q.
                /* 1918 */  0xD4, 0xF5, 0x83, 0x1D, 0x02, 0x1F, 0xDB, 0x8D,  // ........
                /* 1920 */  0xDD, 0xF5, 0x30, 0xF5, 0xFF, 0x1F, 0x08, 0x46,  // ..0....F
                /* 1928 */  0x0E, 0xA0, 0xEE, 0x1F, 0x5C, 0x08, 0x8C, 0x2E,  // ....\...
                /* 1930 */  0x4E, 0x70, 0xEF, 0x1F, 0x80, 0xAF, 0x94, 0xD7,  // Np......
                /* 1938 */  0x3D, 0x8F, 0x99, 0x0E, 0x8E, 0x9F, 0x33, 0x30,  // =.....30
                /* 1940 */  0xB1, 0x6E, 0x0B, 0x74, 0x70, 0xC0, 0xE0, 0x94,  // .n.tp...
                /* 1948 */  0x81, 0x9F, 0xD4, 0xB3, 0x44, 0xB1, 0x27, 0x11,  // ....D.'.
                /* 1950 */  0x3A, 0x46, 0x58, 0x67, 0x3E, 0xF0, 0x1D, 0x59,  // :FXg>..Y
                /* 1958 */  0x80, 0x85, 0xB0, 0x73, 0x02, 0xE2, 0xFF, 0x4F,  // ...s...O
                /* 1960 */  0x50, 0xCA, 0x39, 0x81, 0x82, 0xF8, 0xBC, 0xE0,  // P.9.....
                /* 1968 */  0x13, 0x87, 0x6D, 0x9C, 0x13, 0x50, 0xD0, 0x3E,  // ..m..P.>
                /* 1970 */  0x5A, 0xF8, 0xA4, 0xE2, 0xE3, 0x82, 0x4F, 0x2C,  // Z.....O,
                /* 1978 */  0xC0, 0x71, 0x48, 0x46, 0xF1, 0xAC, 0xE1, 0xCE,  // .qHF....
                /* 1980 */  0xA0, 0x62, 0x01, 0xAA, 0xC7, 0xA1, 0x69, 0x1C,  // .b....i.
                /* 1988 */  0x45, 0x75, 0x02, 0x3C, 0x0E, 0x54, 0x73, 0x7D,  // Eu.<.Ts}
                /* 1990 */  0x57, 0x38, 0xDD, 0x63, 0x63, 0x97, 0x7E, 0x76,  // W8.cc.~v
                /* 1998 */  0x6C, 0x01, 0xDE, 0x22, 0x8E, 0x2D, 0x80, 0x1A,  // l..".-..
                /* 19A0 */  0xA1, 0x97, 0x30, 0xD4, 0x81, 0xE0, 0xFF, 0x9F,  // ..0.....
                /* 19A8 */  0xA0, 0xF0, 0x4B, 0x18, 0xE2, 0xD8, 0x82, 0x39,  // ..K....9
                /* 19B0 */  0x87, 0x71, 0x02, 0x4B, 0xBD, 0x85, 0xA1, 0x44,  // .q.K...D
                /* 19B8 */  0x52, 0x48, 0xC8, 0xF9, 0x01, 0x15, 0xFD, 0x82,  // RH......
                /* 19C0 */  0x41, 0x41, 0x0C, 0xE8, 0x5C, 0x17, 0x59, 0xF4,  // AA..\.Y.
                /* 19C8 */  0xB1, 0x05, 0x1B, 0xE4, 0xD8, 0x02, 0x14, 0xCF,  // ........
                /* 19D0 */  0x20, 0xC0, 0x58, 0xDA, 0xA0, 0x51, 0x62, 0xCE,  //  .X..Qb.
                /* 19D8 */  0x20, 0x14, 0xC4, 0x83, 0x76, 0xD0, 0x33, 0x08,  //  ...v.3.
                /* 19E0 */  0xD4, 0x68, 0x87, 0x30, 0xA0, 0x2A, 0x72, 0xD6,  // .h.0.*r.
                /* 19E8 */  0x10, 0xFF, 0xFF, 0x67, 0x10, 0xD8, 0x97, 0x86,  // ...g....
                /* 19F0 */  0x63, 0xAA, 0x19, 0x41, 0x67, 0x90, 0x37, 0xA0,  // c..Ag.7.
                /* 19F8 */  0xA7, 0x32, 0x1F, 0x42, 0x80, 0xB7, 0x89, 0x43,  // .2.B...C
                /* 1A00 */  0x08, 0xA0, 0x26, 0xFA, 0x21, 0x04, 0x25, 0xEA,  // ..&.!.%.
                /* 1A08 */  0x08, 0xE4, 0xA3, 0x18, 0x51, 0x7B, 0xC4, 0x7F,  // ....Q{..
                /* 1A10 */  0x1B, 0xD0, 0x30, 0x62, 0x1C, 0xCE, 0x91, 0xBD,  // ..0b....
                /* 1A18 */  0x01, 0x1C, 0xC0, 0x13, 0xC0, 0xC9, 0x9D, 0x88,  // ........
                /* 1A20 */  0xE7, 0x76, 0x94, 0x16, 0x7F, 0x2B, 0x66, 0xE7,  // .v...+f.
                /* 1A28 */  0x10, 0x54, 0x60, 0x0A, 0xC5, 0x3B, 0x43, 0xA0,  // .T`..;C.
                /* 1A30 */  0x02, 0x9D, 0x21, 0x28, 0x88, 0x47, 0xEE, 0x9B,  // ..!(.G..
                /* 1A38 */  0x95, 0xC7, 0xCE, 0x21, 0x7D, 0xDC, 0x60, 0xA3,  // ...!}.`.
                /* 1A40 */  0xF4, 0x61, 0x0C, 0xDC, 0xFF, 0xFF, 0xC3, 0x18,  // .a......
                /* 1A48 */  0xF0, 0x18, 0xC4, 0x63, 0x08, 0x3B, 0x0E, 0xB1,  // ...c.;..
                /* 1A50 */  0x23, 0x8B, 0x9D, 0x1C, 0x37, 0xD0, 0xC0, 0x01,  // #...7...
                /* 1A58 */  0xCF, 0xF9, 0xDC, 0x80, 0xE1, 0xE8, 0x7D, 0x6F,  // ......}o
                /* 1A60 */  0x03, 0xCF, 0xDC, 0xD8, 0x39, 0x14, 0x58, 0x0E,  // ....9.X.
                /* 1A68 */  0x1A, 0x77, 0x9A, 0xF0, 0xB5, 0x01, 0x73, 0x0E,  // .w....s.
                /* 1A70 */  0x05, 0xA6, 0x63, 0xF2, 0x39, 0x14, 0xFB, 0xFF,  // ..c.9...
                /* 1A78 */  0x1F, 0x37, 0xFC, 0xD3, 0x0A, 0x30, 0x3F, 0xD4,  // .7...0?.
                /* 1A80 */  0xF9, 0xB4, 0x02, 0x18, 0x3B, 0xA9, 0x60, 0x2F,  // ....;.`/
                /* 1A88 */  0x00, 0x4F, 0x2C, 0xD8, 0xD3, 0x0A, 0x60, 0xE4,  // .O,...`.
                /* 1A90 */  0xFF, 0x7F, 0x5A, 0x01, 0xD8, 0xA6, 0xFD, 0xB4,  // ..Z.....
                /* 1A98 */  0x02, 0x08, 0xF9, 0xFF, 0x9F, 0x56, 0x00, 0x1B,  // .....V..
                /* 1AA0 */  0x56, 0x4E, 0x2B, 0x80, 0x1A, 0x75, 0xC7, 0x4F,  // VN+..u.O
                /* 1AA8 */  0xB4, 0xDA, 0xE3, 0x27, 0x39, 0xAD, 0xF8, 0xF0,  // ...'9...
                /* 1AB0 */  0x77, 0x88, 0xBE, 0xA7, 0xE1, 0xF5, 0x1D, 0x55,  // w......U
                /* 1AB8 */  0x50, 0xCA, 0x28, 0xA4, 0xE3, 0xEC, 0x80, 0x4A,  // P.(....J
                /* 1AC0 */  0x7E, 0xBA, 0xA0, 0x20, 0x06, 0xF4, 0x51, 0x05,  // ~.. ..Q.
                /* 1AC8 */  0x98, 0xFF, 0xFF, 0x8F, 0x2A, 0x60, 0xBC, 0x7B,  // ....*`.{
                /* 1AD0 */  0x01, 0xA6, 0x47, 0xE5, 0xEB, 0x07, 0xE0, 0x49,  // ..G....I
                /* 1AD8 */  0xCB, 0xF5, 0x03, 0xB4, 0xFF, 0xFF, 0xEB, 0x07,  // ........
                /* 1AE0 */  0x70, 0x8C, 0xFC, 0x4A, 0xD0, 0xF5, 0x03, 0x27,  // p..J...'
                /* 1AE8 */  0xE1, 0xFA, 0x81, 0x18, 0xED, 0xEB, 0x07, 0x9C,  // ........
                /* 1AF0 */  0xD0, 0x87, 0x06, 0x0A, 0xE1, 0xB8, 0x14, 0x0A,  // ........
                /* 1AF8 */  0x7B, 0x76, 0x40, 0xDD, 0xBD, 0x0C, 0x66, 0x10,  // {v@...f.
                /* 1B00 */  0x0F, 0xDB, 0xE1, 0xAE, 0x1F, 0xE8, 0x03, 0x02,  // ........
                /* 1B08 */  0x1B, 0x22, 0x3B, 0x3A, 0xC0, 0x3B, 0x7F, 0xB0,  // .";:.;..
                /* 1B10 */  0xA3, 0x03, 0x30, 0x21, 0xF0, 0xD1, 0x01, 0xFE,  // ..0!....
                /* 1B18 */  0x09, 0x04, 0x7B, 0xD2, 0x00, 0xF3, 0xF8, 0x80,  // ..{.....
                /* 1B20 */  0xCF, 0xFF, 0xFF, 0xA4, 0x01, 0xB8, 0xF2, 0x72,  // .......r
                /* 1B28 */  0x6F, 0x02, 0xD4, 0x81, 0x84, 0x3D, 0xB3, 0x20,  // o....=. 
                /* 1B30 */  0x07, 0xD4, 0xF3, 0x40, 0xC8, 0xBD, 0x09, 0xF0,  // ...@....
                /* 1B38 */  0xF0, 0xFF, 0xBF, 0x37, 0x01, 0xD6, 0xE6, 0x8C,  // ...7....
                /* 1B40 */  0xBB, 0x37, 0x01, 0x6E, 0x6E, 0x2B, 0xF8, 0xEB,  // .7.nn+..
                /* 1B48 */  0x07, 0xF0, 0x16, 0x73, 0xFD, 0x80, 0xF8, 0xFF,  // ...s....
                /* 1B50 */  0xBF, 0x37, 0x01, 0x86, 0xAE, 0x1F, 0xF8, 0x7B,  // .7.....{
                /* 1B58 */  0x13, 0xE0, 0xF9, 0xA4, 0x01, 0xCE, 0xF1, 0x81,  // ........
                /* 1B60 */  0xF1, 0xFF, 0x7F, 0xD2, 0x00, 0x4C, 0x9A, 0x39,  // .....L.9
                /* 1B68 */  0x69, 0x00, 0x6A, 0x24, 0x9D, 0x34, 0x50, 0xB0,  // i.j$.4P.
                /* 1B70 */  0x64, 0x6C, 0xBA, 0x37, 0xE1, 0x6E, 0xEE, 0x3E,  // dl.7.n.>
                /* 1B78 */  0x56, 0x70, 0x59, 0x07, 0x0D, 0xD4, 0x91, 0xC7,  // VpY.....
                /* 1B80 */  0x72, 0x0E, 0x1A, 0x28, 0x2A, 0x83, 0x99, 0xC2,  // r..(*...
                /* 1B88 */  0x67, 0x1E, 0x1F, 0x34, 0x6C, 0xE4, 0x24, 0x0D,  // g..4l.$.
                /* 1B90 */  0x35, 0xCC, 0x99, 0x07, 0x04, 0xFF, 0xFF, 0x93,  // 5.......
                /* 1B98 */  0x06, 0x30, 0x19, 0x02, 0xEE, 0x06, 0x07, 0x57,  // .0.....W
                /* 1BA0 */  0xDC, 0xC9, 0x01, 0xA8, 0xAB, 0x39, 0x39, 0x00,  // .....99.
                /* 1BA8 */  0x6A, 0xC2, 0x5F, 0xE0, 0x50, 0xE0, 0x16, 0x03,  // j._.P...
                /* 1BB0 */  0xA4, 0x93, 0x03, 0xBB, 0x37, 0xF8, 0xBE, 0x82,  // ....7...
                /* 1BB8 */  0xB9, 0x89, 0x3C, 0x7C, 0xF2, 0x4B, 0x0B, 0x8E,  // ..<|.K..
                /* 1BC0 */  0x60, 0xEC, 0x4B, 0x1C, 0x2A, 0x30, 0x85, 0x4E,  // `.K.*0.N
                /* 1BC8 */  0x3C, 0x3E, 0x3E, 0xF0, 0x40, 0xC7, 0x07, 0x0A,  // <>>.@...
                /* 1BD0 */  0xE2, 0xA1, 0xFB, 0x12, 0x87, 0xF9, 0xFF, 0x5F,  // ......._
                /* 1BD8 */  0xE2, 0x00, 0x43, 0xB9, 0xAE, 0x9E, 0xE8, 0xE3,  // ..C.....
                /* 1BE0 */  0x04, 0x03, 0x3C, 0xDF, 0x73, 0x03, 0x86, 0xA3,  // ..<.s...
                /* 1BE8 */  0xF7, 0xDC, 0xE0, 0xDF, 0x3B, 0xB1, 0x07, 0x3E,  // ....;..>
                /* 1BF0 */  0x60, 0x7D, 0x5A, 0xC1, 0x1D, 0xF8, 0xC0, 0xF6,  // `}Z.....
                /* 1BF8 */  0xFF, 0x3F, 0xAD, 0x80, 0x79, 0x4C, 0x3E, 0x37,  // .?..yL>7
                /* 1C00 */  0x01, 0x9E, 0xDC, 0x1C, 0x57, 0x00, 0x69, 0x47,  // ....W.iG
                /* 1C08 */  0x15, 0x18, 0x37, 0x80, 0x67, 0x16, 0xEC, 0x71,  // ..7.g..q
                /* 1C10 */  0x05, 0x18, 0xFC, 0xFF, 0x8F, 0x2B, 0x80, 0x9D,  // .....+..
                /* 1C18 */  0xF3, 0x21, 0x8C, 0xE3, 0x0A, 0x60, 0xE2, 0xB8,  // .!...`..
                /* 1C20 */  0x0B, 0x9C, 0x2F, 0xEF, 0xF8, 0xE3, 0x0A, 0x30,  // ../....0
                /* 1C28 */  0xF8, 0xFF, 0x1F, 0x57, 0x80, 0xD5, 0xE5, 0x1D,  // ...W....
                /* 1C30 */  0xF0, 0x70, 0xFE, 0xF3, 0xE5, 0x1D, 0xF0, 0x66,  // .p.....f
                /* 1C38 */  0x75, 0x6A, 0x3A, 0x6C, 0x58, 0x33, 0xB4, 0x08,  // uj:lX3..
                /* 1C40 */  0x7C, 0x79, 0x07, 0x56, 0xFF, 0xFF, 0xCB, 0x3B,  // |y.V...;
                /* 1C48 */  0xE0, 0x19, 0x94, 0x5F, 0x3F, 0x80, 0xFB, 0x1D,  // ..._?...
                /* 1C50 */  0x18, 0x2C, 0x63, 0x38, 0x0A, 0x8F, 0xE1, 0x5D,  // .,c8...]
                /* 1C58 */  0xFB, 0xF5, 0x03, 0x38, 0xFE, 0xFF, 0xAF, 0x1F,  // ...8....
                /* 1C60 */  0xF0, 0xEC, 0x5C, 0x3F, 0x00, 0x35, 0xD1, 0xAF,  // ..\?.5..
                /* 1C68 */  0x1F, 0x28, 0x51, 0x10, 0x92, 0x72, 0xF5, 0x04,  // .(Q..r..
                /* 1C70 */  0xC1, 0x98, 0xDF, 0x02, 0x7C, 0xF3, 0x04, 0x38,  // ....|..8
                /* 1C78 */  0xF1, 0xFF, 0xBF, 0x79, 0x02, 0x6E, 0x4F, 0x2B,  // ...y.nO+
                /* 1C80 */  0x80, 0x83, 0x9B, 0x27, 0x58, 0x4E, 0x2B, 0xC0,  // ...'XN+.
                /* 1C88 */  0xFC, 0xFF, 0x7F, 0x5A, 0xC1, 0xE9, 0x39, 0xAD,  // ...Z..9.
                /* 1C90 */  0x00, 0xD2, 0x4E, 0x2A, 0xD8, 0x8B, 0x27, 0xE0,  // ..N*..'.
                /* 1C98 */  0xFB, 0xA4, 0x81, 0x3B, 0xAD, 0x80, 0xF3, 0xFF,  // ...;....
                /* 1CA0 */  0x7F, 0xF1, 0x04, 0x76, 0xC7, 0x0C, 0xDC, 0xC5,  // ...v....
                /* 1CA8 */  0x13, 0x60, 0xE5, 0xFF, 0xDF, 0xCF, 0x69, 0x05,  // .`....i.
                /* 1CB0 */  0x50, 0xA3, 0xED, 0xB4, 0x82, 0x82, 0xB5, 0xD6,  // P.......
                /* 1CB8 */  0x8B, 0x27, 0xFA, 0xBA, 0xC2, 0xEF, 0x9D, 0x00,  // .'......
                /* 1CC0 */  0x77, 0xFE, 0xFF, 0x57, 0x2F, 0x58, 0x07, 0x20,  // w..W/X. 
                /* 1CC8 */  0xDC, 0xBD, 0x13, 0xE0, 0xC4, 0x21, 0xC0, 0xB7,  // .....!..
                /* 1CD0 */  0x0F, 0xC0, 0xCB, 0x45, 0xCB, 0xB7, 0x0F, 0xDC,  // ...E....
                /* 1CD8 */  0x4B, 0xC1, 0xB7, 0x0F, 0x36, 0xDA, 0xB7, 0x0F,  // K...6...
                /* 1CE0 */  0x7C, 0x68, 0x03, 0xFF, 0xFF, 0xE3, 0x00, 0x83,  // |h......
                /* 1CE8 */  0x70, 0x5C, 0x0A, 0x85, 0x3D, 0x3A, 0xA0, 0x6E,  // p\..=:.n
                /* 1CF0 */  0x5E, 0x06, 0x33, 0x88, 0x47, 0xED, 0x70, 0xB7,  // ^.3.G.p.
                /* 1CF8 */  0x0F, 0xF4, 0xF9, 0x80, 0x8D, 0x90, 0x9D, 0x1C,  // ........
                /* 1D00 */  0xE0, 0x1D, 0x3F, 0xD8, 0xC9, 0x01, 0x98, 0x10,  // ..?.....
                /* 1D08 */  0xF8, 0xE4, 0x00, 0x86, 0x6B, 0x10, 0xF6, 0xA0,  // ....k...
                /* 1D10 */  0x01, 0xDE, 0xF1, 0x01, 0x9F, 0x83, 0x06, 0x60,  // .......`
                /* 1D18 */  0xE5, 0xFF, 0x7F, 0xD0, 0x80, 0x65, 0xE8, 0xA0,  // .....e..
                /* 1D20 */  0x01, 0xA8, 0x09, 0x7B, 0xD0, 0x40, 0x8D, 0xDA,  // ...{.@..
                /* 1D28 */  0xE1, 0xC7, 0xA6, 0x83, 0x06, 0x1B, 0x70, 0x04,  // ......p.
                /* 1D30 */  0x1F, 0x33, 0x00, 0xB6, 0xFC, 0xFF, 0x8F, 0x19,  // .3......
                /* 1D38 */  0x80, 0xED, 0xD0, 0x94, 0x3A, 0x66, 0x00, 0x5E,  // ....:f.^
                /* 1D40 */  0x24, 0x1D, 0x8F, 0xD0, 0x12, 0x9F, 0x01, 0xBA,  // $.......
                /* 1D48 */  0x65, 0xD4, 0x38, 0x6A, 0xDD, 0xF5, 0xD8, 0x31,  // e.8j...1
                /* 1D50 */  0xD7, 0xC7, 0x0A, 0x2E, 0xEB, 0xA0, 0x81, 0x3A,  // .......:
                /* 1D58 */  0x53, 0x59, 0xCE, 0x41, 0x03, 0x45, 0x65, 0x30,  // SY.A.Ee0
                /* 1D60 */  0x53, 0xF8, 0xA0, 0xE6, 0x83, 0x86, 0x8D, 0xDC,  // S.......
                /* 1D68 */  0x3A, 0x21, 0xFE, 0xFF, 0x09, 0x86, 0x39, 0xA8,  // :!....9.
                /* 1D70 */  0x01, 0xCD, 0xE1, 0x91, 0x5B, 0x27, 0x68, 0xC4,  // ....['h.
                /* 1D78 */  0x9D, 0x1C, 0x80, 0xBA, 0xA2, 0xF3, 0x0E, 0xA0,  // ........
                /* 1D80 */  0x46, 0xE0, 0x8D, 0x1B, 0x2D, 0xF8, 0xA1, 0xA0,  // F...-...
                /* 1D88 */  0x93, 0x03, 0x0E, 0xE5, 0x74, 0xC2, 0xBE, 0x72,  // ....t..r
                /* 1D90 */  0x1B, 0x3A, 0x7C, 0x10, 0x03, 0x85, 0x78, 0x0B,  // .:|...x.
                /* 1D98 */  0x38, 0x88, 0x04, 0xC5, 0x5D, 0x3C, 0x51, 0xB2,  // 8...]<Q.
                /* 1DA0 */  0x28, 0x24, 0xE3, 0xF4, 0x40, 0xFE, 0xFF, 0xA7,  // ($..@...
                /* 1DA8 */  0x07, 0x16, 0xFC, 0x0C, 0x41, 0x41, 0x0C, 0xE8,  // ....AA..
                /* 1DB0 */  0x54, 0xA7, 0x07, 0xF4, 0x89, 0x93, 0x8D, 0xD2,  // T.......
                /* 1DB8 */  0x41, 0x2E, 0x9E, 0x40, 0xF1, 0xE6, 0x00, 0xAE,  // A..@....
                /* 1DC0 */  0x83, 0x27, 0xB0, 0x38, 0x80, 0x80, 0x6F, 0x40,  // .'.8..o@
                /* 1DC8 */  0x47, 0x79, 0x88, 0xFC, 0x00, 0x02, 0x3C, 0x47,  // Gy....<G
                /* 1DD0 */  0xE5, 0x03, 0x08, 0x30, 0xFA, 0xFF, 0x1F, 0x40,  // ...0...@
                /* 1DD8 */  0x80, 0x91, 0xA3, 0x03, 0x08, 0xA0, 0x26, 0xF4,  // ......&.
                /* 1DE0 */  0x49, 0x08, 0x75, 0x00, 0xB1, 0x88, 0x03, 0x08,  // I.u.....
                /* 1DE8 */  0xE2, 0xDC, 0xC9, 0x0E, 0x20, 0x70, 0x03, 0x9F,  // .... p..
                /* 1DF0 */  0x86, 0x50, 0x51, 0x29, 0x14, 0xF4, 0xF4, 0x80,  // .PQ)....
                /* 1DF8 */  0x8A, 0x06, 0x47, 0x41, 0x3C, 0x72, 0x47, 0x3B,  // ..GA<rG;
                /* 1E00 */  0x3D, 0xA0, 0x8F, 0x63, 0x6C, 0x94, 0xEC, 0xF0,  // =..cl...
                /* 1E08 */  0x00, 0xEF, 0x14, 0x07, 0x9C, 0x0E, 0x0F, 0x60,  // .......`
                /* 1E10 */  0xF8, 0xFF, 0x1F, 0x1E, 0x30, 0x47, 0x0D, 0xF0,  // ....0G..
                /* 1E18 */  0x1E, 0xE2, 0x80, 0xD3, 0x51, 0x03, 0x70, 0x24,  // ....Q.p$
                /* 1E20 */  0xE9, 0xA8, 0x01, 0xA8, 0x91, 0x77, 0x74, 0x42,  // .....wtB
                /* 1E28 */  0x49, 0x82, 0x90, 0xDC, 0xA3, 0x13, 0x1A, 0xE4,  // I.......
                /* 1E30 */  0x05, 0x20, 0xF8, 0x09, 0xF9, 0xFF, 0x3F, 0x32,  // . ....?2
                /* 1E38 */  0xCF, 0xF9, 0xE0, 0x3C, 0x82, 0x27, 0x27, 0x80,  // ...<.''.
                /* 1E40 */  0x4D, 0x27, 0x41, 0xE0, 0x7C, 0xFE, 0x00, 0xE3,  // M'A.|...
                /* 1E48 */  0xFF, 0xFF, 0xFC, 0x01, 0xAC, 0x2D, 0x9D, 0x3F,  // .....-.?
                /* 1E50 */  0x00, 0x35, 0xC2, 0x4E, 0x4E, 0xA8, 0xF3, 0x87,  // .5.NN...
                /* 1E58 */  0x85, 0x1E, 0x49, 0x11, 0x27, 0x27, 0x76, 0x12,  // ..I.''v.
                /* 1E60 */  0x8E, 0x1B, 0xFC, 0xAD, 0xC9, 0x07, 0x05, 0x9F,  // ........
                /* 1E68 */  0x3F, 0x30, 0xA7, 0x52, 0xE0, 0x78, 0x72, 0x02,  // ?0.R.xr.
                /* 1E70 */  0x46, 0xFF, 0xFF, 0xC3, 0x03, 0x60, 0x49, 0xD3,  // F....`I.
                /* 1E78 */  0xE1, 0x01, 0x50, 0x23, 0xF1, 0x54, 0x8A, 0x96,  // ..P#.T..
                /* 1E80 */  0x7C, 0x2A, 0x85, 0x34, 0xE3, 0x18, 0xF1, 0xDF,  // |*.4....
                /* 1E88 */  0xB7, 0x23, 0xF9, 0xF4, 0x80, 0x91, 0x77, 0x18,  // .#....w.
                /* 1E90 */  0x42, 0x1D, 0x27, 0x7C, 0x18, 0x02, 0xC6, 0xFF,  // B.'|....
                /* 1E98 */  0xFF, 0xC3, 0x10, 0x60, 0xE6, 0x04, 0xE2, 0x31,  // ...`...1
                /* 1EA0 */  0x73, 0x09, 0x07, 0x10, 0x0A, 0xE2, 0x31, 0xFB,  // s.....1.
                /* 1EA8 */  0xBC, 0xEF, 0x31, 0xE3, 0x66, 0xE2, 0xFB, 0x81,  // ..1.f...
                /* 1EB0 */  0x6F, 0x01, 0x3E, 0x0A, 0xC2, 0x3F, 0x0D, 0x01,  // o.>..?..
                /* 1EB8 */  0xDE, 0x3D, 0x9D, 0x40, 0x20, 0xFD, 0xFF, 0x4F,  // .=.@ ..O
                /* 1EC0 */  0x20, 0x80, 0x85, 0xD8, 0xC7, 0x52, 0xB4, 0x8C,  //  ....R..
                /* 1EC8 */  0x63, 0x29, 0xA4, 0x13, 0x08, 0xAC, 0xC8, 0xC7,  // c)......
                /* 1ED0 */  0x21, 0x54, 0x58, 0x0A, 0x9D, 0x4B, 0x7D, 0x7C,  // !TX..K}|
                /* 1ED8 */  0xE0, 0xE1, 0xE0, 0x28, 0x88, 0x8F, 0xA5, 0x80,  // ...(....
                /* 1EE0 */  0xB7, 0xB3, 0x06, 0xB8, 0xC7, 0x07, 0x86, 0xFF,  // ........
                /* 1EE8 */  0xFF, 0x59, 0x03, 0xB0, 0x2A, 0xEA, 0xAC, 0x01,  // .Y..*...
                /* 1EF0 */  0xA8, 0x09, 0x7E, 0x78, 0x42, 0x0B, 0x01, 0xD2,  // ..~xB...
                /* 1EF8 */  0xE1, 0x09, 0xCE, 0x45, 0x81, 0x0D, 0x3D, 0xFC,  // ...E..=.
                /* 1F00 */  0x91, 0xFA, 0x72, 0xE3, 0x03, 0x36, 0x3B, 0x3C,  // ..r..6;<
                /* 1F08 */  0xF1, 0xB8, 0x87, 0x27, 0x20, 0xF1, 0xFF, 0x3F,  // ...' ..?
                /* 1F10 */  0x3C, 0x01, 0x26, 0x63, 0x8E, 0x19, 0x15, 0xEC,  // <.&c....
                /* 1F18 */  0xB8, 0x42, 0x41, 0x7C, 0x5C, 0x81, 0x37, 0xC2,  // .BA|\.7.
                /* 1F20 */  0x9A, 0x11, 0x74, 0x74, 0x02, 0xCC, 0x8C, 0x0E,  // ..tt....
                /* 1F28 */  0xD6, 0x99, 0x1C, 0xF6, 0xE8, 0xC0, 0xF8, 0xFF,  // ........
                /* 1F30 */  0x1F, 0x1D, 0xEC, 0x23, 0x33, 0x39, 0xAC, 0x00,  // ...#39..
                /* 1F38 */  0x8A, 0x4C, 0x1D, 0x56, 0x00, 0x35, 0x69, 0x9E,  // .L.V.5i.
                /* 1F40 */  0x06, 0x3A, 0xAC, 0xE0, 0xD2, 0x1D, 0x56, 0x10,  // .:....V.
                /* 1F48 */  0xE7, 0x2C, 0xEC, 0x61, 0x05, 0x4E, 0x12, 0x58,  // .,.a.N.X
                /* 1F50 */  0x1D, 0x56, 0x78, 0x06, 0x18, 0x29, 0x26, 0xD1,  // .Vx..)&.
                /* 1F58 */  0x49, 0x83, 0x6B, 0x3C, 0xB3, 0x50, 0x10, 0x9F,  // I.k<.P..
                /* 1F60 */  0x19, 0x7C, 0x58, 0x01, 0xEB, 0xFF, 0xFF, 0xB0,  // .|X.....
                /* 1F68 */  0x02, 0x9C, 0x63, 0xDD, 0x49, 0xA0, 0x8E, 0x0D,  // ..c.I...
                /* 1F70 */  0xF8, 0xDD, 0x48, 0xC0, 0x77, 0x0B, 0x80, 0x33,  // ..H.w..3
                /* 1F78 */  0x11, 0x36, 0x35, 0xE0, 0x77, 0x1E, 0x01, 0xDF,  // .65.w...
                /* 1F80 */  0x0D, 0x08, 0xAC, 0xFF, 0xFF, 0xDB, 0x28, 0xF8,  // ......(.
                /* 1F88 */  0x40, 0xF9, 0xED, 0x1A, 0x4E, 0x9C, 0x5B, 0x0D,  // @...N.[.
                /* 1F90 */  0xD0, 0x84, 0xB2, 0xB0, 0x69, 0x43, 0x1F, 0xC5,  // ....iC..
                /* 1F98 */  0x31, 0x1C, 0x85, 0xC7, 0xF0, 0xF0, 0x98, 0xC0,  // 1.......
                /* 1FA0 */  0xD7, 0x1A, 0xE0, 0xAD, 0xEA, 0x5A, 0x03, 0xA8,  // .....Z..
                /* 1FA8 */  0x09, 0xFB, 0x4A, 0xD0, 0xFF, 0xFF, 0x5A, 0xC3,  // ..J...Z.
                /* 1FB0 */  0x61, 0x1D, 0xFE, 0xAA, 0x8F, 0x38, 0xD5, 0x30,  // a....8.0
                /* 1FB8 */  0x9F, 0x10, 0xE4, 0x58, 0xC2, 0x02, 0xDF, 0x44,  // ...X...D
                /* 1FC0 */  0x51, 0x17, 0x51, 0x07, 0x3D, 0x3A, 0xA0, 0xA2,  // Q.Q.=:..
                /* 1FC8 */  0xC1, 0x51, 0x10, 0xDF, 0x44, 0x01, 0x6F, 0xE1,  // .Q..D.o.
                /* 1FD0 */  0x46, 0x87, 0x3E, 0x07, 0x78, 0xB8, 0x4F, 0x06,  // F.>.x.O.
                /* 1FD8 */  0x87, 0xFC, 0x00, 0xC1, 0x2E, 0xA2, 0x80, 0xD7,  // ........
                /* 1FE0 */  0xFF, 0xFF, 0x31, 0x03, 0xBC, 0xAE, 0x8E, 0x19,  // ..1.....
                /* 1FE8 */  0x80, 0x1A, 0x89, 0x97, 0x31, 0xD4, 0x51, 0xC0,  // ....1.Q.
                /* 1FF0 */  0x92, 0x17, 0x29, 0xE0, 0x08, 0x47, 0xFB, 0x22,  // ..)..G."
                /* 1FF8 */  0xCA, 0xC6, 0x7D, 0x3A, 0xA1, 0x43, 0x54, 0x3C,  // ..}:.CT<
                /* 2000 */  0x36, 0x42, 0x50, 0xE4, 0x4D, 0x8C, 0x42, 0x58,  // 6BP.M.BX
                /* 2008 */  0x1E, 0x8C, 0xC4, 0x41, 0xE8, 0x9C, 0xC1, 0xE5,  // ...A....
                /* 2010 */  0xC0, 0x51, 0x10, 0x0F, 0xDC, 0xE7, 0x0C, 0x38,  // .Q.....8
                /* 2018 */  0x43, 0x3A, 0x87, 0x53, 0xF4, 0xAD, 0x10, 0x78,  // C:.S...x
                /* 2020 */  0x9E, 0x33, 0xC0, 0x37, 0x3A, 0x38, 0x47, 0x70,  // .3.7:8Gp
                /* 2028 */  0x0F, 0x38, 0xC1, 0xFF, 0xFF, 0x7D, 0x13, 0xF0,  // .8...}..
                /* 2030 */  0x72, 0x28, 0x81, 0x73, 0xDB, 0xE6, 0x17, 0x4E,  // r(.s...N
                /* 2038 */  0xC0, 0xCD, 0x59, 0x00, 0x0E, 0x5C, 0xC4, 0xC3,  // ..Y..\..
                /* 2040 */  0x3B, 0x3A, 0x60, 0x0A, 0xE5, 0xD1, 0x81, 0xE7,  // ;:`.....
                /* 2048 */  0xFF, 0x7F, 0x82, 0x01, 0xEE, 0xB2, 0x4E, 0x30,  // ......N0
                /* 2050 */  0x80, 0x9A, 0x3C, 0x27, 0x18, 0x14, 0xAC, 0xF3,  // ..<'....
                /* 2058 */  0x9D, 0x60, 0xD0, 0x43, 0x8B, 0xFA, 0xE0, 0x14,  // .`.C....
                /* 2060 */  0x38, 0x81, 0x33, 0xDD, 0x4C, 0x51, 0x69, 0x60,  // 8.3.LQi`
                /* 2068 */  0xA4, 0xE4, 0xDC, 0x85, 0xCA, 0x7E, 0xDE, 0xA0,  // .....~..
                /* 2070 */  0x20, 0x06, 0x74, 0xB0, 0x63, 0x06, 0x94, 0x31,  //  .t.c..1
                /* 2078 */  0x78, 0x86, 0x67, 0x51, 0xFC, 0xD9, 0x14, 0x28,  // x.gQ...(
                /* 2080 */  0xFF, 0xFF, 0x6F, 0x91, 0xC0, 0x32, 0xC2, 0xF1,  // ..o..2..
                /* 2088 */  0x16, 0x25, 0xFA, 0x78, 0x4B, 0x41, 0x3C, 0x55,  // .%.xKA<U
                /* 2090 */  0x5F, 0x3E, 0xE0, 0x5C, 0x6B, 0x8E, 0xE8, 0x2C,  // _>.\k..,
                /* 2098 */  0xDF, 0x6B, 0x00, 0x5B, 0x57, 0x0A, 0x23, 0x9C,  // .k.[W.#.
                /* 20A0 */  0xCD, 0x7B, 0x0D, 0x60, 0xEB, 0xFF, 0x4F, 0x70,  // .{.`..Op
                /* 20A8 */  0x32, 0xEF, 0x5C, 0xBE, 0xD7, 0x00, 0x8C, 0xB0,  // 2.\.....
                /* 20B0 */  0x75, 0xAF, 0x01, 0xD4, 0xA8, 0x5D, 0xA0, 0x2E,  // u....]..
                /* 20B8 */  0x7A, 0x38, 0xF5, 0x4F, 0x06, 0xDD, 0x6B, 0x70,  // z8.O..kp
                /* 20C0 */  0xD3, 0x7D, 0xA9, 0x33, 0xD0, 0x01, 0x85, 0x09,  // .}.3....
                /* 20C8 */  0x91, 0xA0, 0xDE, 0xD3, 0x08, 0x3D, 0x3C, 0x58,  // .....=<X
                /* 20D0 */  0x29, 0x85, 0x2E, 0x36, 0x98, 0xFF, 0xFF, 0xC5,  // )..6....
                /* 20D8 */  0x06, 0xE0, 0x81, 0xBC, 0x49, 0xA3, 0x4E, 0xDC,  // ....I.N.
                /* 20E0 */  0x9E, 0xB4, 0x41, 0x3C, 0x69, 0x87, 0x85, 0x90,  // ..A<i...
                /* 20E8 */  0x8D, 0x49, 0xA3, 0xE7, 0xFC, 0x1C, 0xC0, 0xEF,  // .I......
                /* 20F0 */  0x2C, 0xEC, 0x66, 0x03, 0x3C, 0x47, 0x79, 0xDA,  // ,.f.<Gy.
                /* 20F8 */  0xB0, 0x67, 0xF0, 0xFC, 0x53, 0xF5, 0x38, 0x34,  // .g..S.84
                /* 2100 */  0x8D, 0xA3, 0xA8, 0xEE, 0xCE, 0xA0, 0x91, 0x9E,  // ........
                /* 2108 */  0x6C, 0x63, 0xF3, 0x95, 0xC2, 0x31, 0xE9, 0x8A,  // lc...1..
                /* 2110 */  0x6C, 0x98, 0xD7, 0xEF, 0xCA, 0x86, 0x4F, 0xAE,  // l.....O.
                /* 2118 */  0x21, 0xEC, 0xFF, 0x7F, 0x0D, 0x01, 0xCE, 0xDA,  // !.......
                /* 2120 */  0x4E, 0xDD, 0x80, 0xAE, 0x71, 0x05, 0x8C, 0x79,  // N...q..y
                /* 2128 */  0xC6, 0x4F, 0x13, 0x9E, 0xE3, 0x21, 0x7A, 0x1A,  // .O...!z.
                /* 2130 */  0x3E, 0x75, 0x03, 0x83, 0xF1, 0x3C, 0x7D, 0xB0,  // >u...<}.
                /* 2138 */  0x53, 0x37, 0x70, 0xFF, 0xFF, 0xDF, 0xB4, 0xC0,  // S7p.....
                /* 2140 */  0x77, 0x2F, 0x38, 0x60, 0xCC, 0xA9, 0x1B, 0xE0,  // w/8`....
                /* 2148 */  0x83, 0xC0, 0x63, 0x06, 0xA0, 0x26, 0xF0, 0x31,  // ..c..&.1
                /* 2150 */  0x03, 0xC5, 0x41, 0x80, 0x74, 0xCC, 0xF0, 0xFF,  // ..A.t...
                /* 2158 */  0x1F, 0x33, 0x76, 0xD0, 0x67, 0xE6, 0xC3, 0xF0,  // .3v.g...
                /* 2160 */  0x78, 0x0E, 0xED, 0x38, 0x8F, 0x04, 0x73, 0xD0,  // x..8..s.
                /* 2168 */  0x00, 0x9C, 0x6B, 0x9F, 0x31, 0xC1, 0x3C, 0x60,  // ..k.1.<`
                /* 2170 */  0x1F, 0x34, 0x00, 0xC7, 0xFF, 0xFF, 0x83, 0x06,  // .4......
                /* 2178 */  0xB8, 0x0C, 0x1E, 0x34, 0x00, 0x35, 0xEA, 0x2E,  // ...4.5..
                /* 2180 */  0x7D, 0x28, 0x0E, 0xAB, 0x3D, 0x68, 0x40, 0x1B,  // }(..=h@.
                /* 2188 */  0xF1, 0x11, 0x61, 0xD4, 0xDD, 0xFA, 0x50, 0xBA,  // ..a...P.
                /* 2190 */  0x28, 0xA4, 0xE3, 0xA0, 0x81, 0x4A, 0x7E, 0x2C,  // (....J~,
                /* 2198 */  0xA0, 0x20, 0x06, 0x74, 0xAC, 0x83, 0x06, 0xD4,  // . .t....
                /* 21A0 */  0x4B, 0x1F, 0xE0, 0xEE, 0xFF, 0x7F, 0xE9, 0x83,  // K.......
                /* 21A8 */  0x29, 0x67, 0xCE, 0xA8, 0x2D, 0x7B, 0xCE, 0xA6,  // )g..-{..
                /* 21B0 */  0xF0, 0x9C, 0x7D, 0xFD, 0x00, 0xEF, 0xF1, 0x18,  // ..}.....
                /* 21B8 */  0xF8, 0x5F, 0x3F, 0x80, 0xB7, 0xC2, 0xEB, 0x07,  // ._?.....
                /* 21C0 */  0x20, 0xE6, 0xFF, 0x4F, 0x50, 0xDA, 0xF5, 0x03,  //  ..OP...
                /* 21C8 */  0x05, 0x6B, 0xA9, 0x0F, 0x05, 0x0D, 0x38, 0xF2,  // .k....8.
                /* 21D0 */  0x2B, 0x2C, 0x3F, 0x7E, 0x18, 0xE2, 0xA1, 0x9C,  // +,?~....
                /* 21D8 */  0xC9, 0xBB, 0x7C, 0xA0, 0x84, 0x51, 0x48, 0xC8,  // ..|..QH.
                /* 21E0 */  0xC9, 0x01, 0x15, 0xFD, 0x50, 0x40, 0x41, 0x0C,  // ....P@A.
                /* 21E8 */  0xE8, 0x5C, 0x27, 0x07, 0xB4, 0x8A, 0xCB, 0x07,  // .\'.....
                /* 21F0 */  0x19, 0xCE, 0x11, 0xBD, 0x30, 0xF8, 0xF4, 0x01,  // ....0...
                /* 21F8 */  0xF0, 0xF0, 0xFF, 0x7F, 0xFA, 0x00, 0xCC, 0x58,  // .......X
                /* 2200 */  0x3C, 0x7D, 0x00, 0x6A, 0xE2, 0xDE, 0x5C, 0xD1,  // <}.j..\.
                /* 2208 */  0xF1, 0xC7, 0xA6, 0xD3, 0x87, 0x27, 0xFB, 0xF4,  // .....'..
                /* 2210 */  0x01, 0x23, 0xF2, 0x0D, 0x10, 0x15, 0x96, 0x42,  // .#.....B
                /* 2218 */  0x57, 0x40, 0x9F, 0x1C, 0x78, 0x38, 0x38, 0x0A,  // W@..x88.
                /* 2220 */  0xE2, 0x51, 0xFB, 0xE4, 0x00, 0xE7, 0xF4, 0x81,  // .Q......
                /* 2228 */  0xB9, 0xD4, 0x01, 0xA7, 0xFF, 0xFF, 0x15, 0x10,  // ........
                /* 2230 */  0x60, 0x9D, 0xC6, 0x73, 0x06, 0x20, 0xE2, 0xFF,  // `..s. ..
                /* 2238 */  0x7F, 0x0E, 0x80, 0x21, 0xE8, 0x9C, 0x81, 0x92,  // ...!....
                /* 2240 */  0x72, 0xCB, 0xA5, 0x87, 0x26, 0x8C, 0xC8, 0x71,  // r...&..q
                /* 2248 */  0x68, 0x84, 0x4C, 0xD6, 0x31, 0x03, 0x75, 0xF5,  // h.L.1.u.
                /* 2250 */  0xF7, 0x79, 0x07, 0x70, 0x74, 0xCC, 0x00, 0xDF,  // .y.pt...
                /* 2258 */  0xC1, 0x01, 0x78, 0x7B, 0x3C, 0x38, 0x00, 0xD1,  // ..x{<8..
                /* 2260 */  0xFF, 0xFF, 0x39, 0x00, 0x8C, 0xF2, 0x0E, 0x6F,  // ..9....o
                /* 2268 */  0xA8, 0xA3, 0x80, 0xE5, 0x1E, 0xDE, 0x90, 0x28,  // .......(
                /* 2270 */  0xEF, 0x36, 0x6C, 0x6E, 0x81, 0x6B, 0x86, 0xD1,  // .6ln.k..
                /* 2278 */  0x09, 0x40, 0xA7, 0x37, 0x94, 0xB4, 0xD3, 0x1B,  // .@.7....
                /* 2280 */  0x40, 0x89, 0xF3, 0x87, 0x07, 0xCD, 0x25, 0x1C,  // @.....%.
                /* 2288 */  0x3F, 0x28, 0x88, 0x07, 0xED, 0x78, 0xA0, 0xA8,  // ?(...x..
                /* 2290 */  0xE3, 0x07, 0x9C, 0x38, 0xC7, 0x0F, 0x20, 0xF0,  // ...8.. .
                /* 2298 */  0xFF, 0x3F, 0x06, 0x81, 0x49, 0xD8, 0xB4, 0xA1,  // .?..I...
                /* 22A0 */  0x8F, 0xE2, 0x18, 0x8E, 0xC2, 0x63, 0x78, 0x17,  // .....cx.
                /* 22A8 */  0x4E, 0xE0, 0xF3, 0x07, 0xF0, 0x16, 0x79, 0xFE,  // N.....y.
                /* 22B0 */  0x00, 0xD4, 0xC8, 0x3A, 0x07, 0xA1, 0x38, 0x2C,  // ...:..8,
                /* 22B8 */  0xF3, 0x1C, 0x84, 0x3C, 0x7F, 0xF0, 0x89, 0x3F,  // ...<...?
                /* 22C0 */  0x20, 0x78, 0x66, 0x86, 0x26, 0x47, 0x21, 0x20,  //  xf.&G! 
                /* 22C8 */  0xF7, 0xFF, 0x3F, 0x0A, 0x01, 0xF6, 0x4D, 0x9E,  // ..?...M.
                /* 22D0 */  0x1D, 0x00, 0x35, 0x61, 0x8F, 0x64, 0xE8, 0xF0,  // ..5a.d..
                /* 22D8 */  0x27, 0x49, 0xE4, 0x18, 0xCF, 0xD0, 0xC3, 0xF0,  // 'I......
                /* 22E0 */  0x41, 0x12, 0xEC, 0xFF, 0xFF, 0x83, 0x24, 0xC0,  // A.....$.
                /* 22E8 */  0x6A, 0x95, 0xC7, 0x0C, 0x10, 0xFD, 0xFF, 0x8F,  // j.......
                /* 22F0 */  0x19, 0xC0, 0x58, 0xD8, 0x01, 0x0E, 0x75, 0xCC,  // ..X...u.
                /* 22F8 */  0xB0, 0xD0, 0x03, 0x1C, 0xF2, 0x98, 0x81, 0x39,  // .......9
                /* 2300 */  0xCB, 0x03, 0x2C, 0xFB, 0xFF, 0x9F, 0xE5, 0x01,  // ..,.....
                /* 2308 */  0x16, 0xB8, 0x3C, 0x7C, 0x00, 0x6A, 0xE4, 0x1C,  // ..<|.j..
                /* 2310 */  0x99, 0x50, 0xA3, 0xB6, 0xBC, 0x23, 0x13, 0xF5,  // .P...#..
                /* 2318 */  0x79, 0x10, 0x15, 0x42, 0x8C, 0xA0, 0x3E, 0xB9,  // y..B..>.
                /* 2320 */  0x81, 0xF9, 0xFF, 0x7F, 0x62, 0x02, 0x4C, 0x9D,  // ....b.L.
                /* 2328 */  0x1B, 0x80, 0xF7, 0xC9, 0xD0, 0x67, 0x73, 0xC0,  // .....gs.
                /* 2330 */  0xD5, 0xA5, 0xE1, 0x84, 0x2B, 0x1C, 0xAE, 0x20,  // ....+.. 
                /* 2338 */  0xCF, 0xA6, 0xE2, 0x91, 0x91, 0x83, 0x03, 0xDC,  // ........
                /* 2340 */  0xFF, 0xFF, 0xF9, 0x05, 0x98, 0x1C, 0x1C, 0x00,  // ........
                /* 2348 */  0xEF, 0x3E, 0x0F, 0x0E, 0x80, 0x1A, 0x49, 0x07,  // .>....I.
                /* 2350 */  0x07, 0x14, 0x2C, 0x39, 0x38, 0x20, 0xEE, 0x62,  // ..,98 .b
                /* 2358 */  0x4C, 0xA4, 0x80, 0xFF, 0xFF, 0x3C, 0xCE, 0x90,  // L....<..
                /* 2360 */  0x1D, 0x65, 0x01, 0x76, 0x09, 0x3D, 0x39, 0x00,  // .e.v.=9.
                /* 2368 */  0x62, 0xFE, 0xFF, 0x27, 0x79, 0x3D, 0x0D, 0x7C,  // b..'y=.|
                /* 2370 */  0x86, 0xF7, 0xC8, 0x14, 0x08, 0x06, 0x75, 0xD0,  // ......u.
                /* 2378 */  0xF3, 0x01, 0x01, 0x3F, 0xD0, 0xE3, 0x3C, 0xBC,  // ...?..<.
                /* 2380 */  0x23, 0x61, 0x92, 0xE0, 0x50, 0x67, 0x00, 0x8F,  // #a..Pg..
                /* 2388 */  0xA4, 0xF9, 0xD3, 0x0C, 0x99, 0xB0, 0xA7, 0x12,  // ........
                /* 2390 */  0x92, 0x49, 0x1B, 0x12, 0xEA, 0xAC, 0x48, 0x26,  // .I....H&
                /* 2398 */  0xA4, 0xE9, 0xBC, 0x3A, 0x44, 0x7C, 0x52, 0x34,  // ...:D|R4
                /* 23A0 */  0x4C, 0x02, 0x8F, 0x9E, 0xA1, 0x71, 0x82, 0x01,  // L....q..
                /* 23A8 */  0xC6, 0x07, 0x9A, 0xD3, 0xC1, 0xF1, 0x9F, 0x4B,  // .......K
                /* 23B0 */  0xB4, 0x08, 0xE7, 0x1C, 0x2F, 0x94, 0xE1, 0x02,  // ..../...
                /* 23B8 */  0x3D, 0x2B, 0xF8, 0x44, 0xCF, 0xB0, 0x82, 0x1F,  // =+.D....
                /* 23C0 */  0xC4, 0x6B, 0x00, 0x83, 0x09, 0x14, 0xC5, 0xA3,  // .k......
                /* 23C8 */  0x31, 0xE4, 0xAB, 0x00, 0x83, 0x6A, 0xF5, 0xB6,  // 1....j..
                /* 23D0 */  0x20, 0x70, 0xC3, 0x1A, 0x28, 0x98, 0x21, 0x8E,  //  p..(.!.
                /* 23D8 */  0x0E, 0x3B, 0x4C, 0x43, 0x7A, 0x20, 0xCF, 0x19,  // .;LCz ..
                /* 23E0 */  0xBE, 0x07, 0x98, 0xE0, 0x84, 0x9F, 0x19, 0xCA,  // ........
                /* 23E8 */  0xBD, 0xF3, 0x4B, 0x3C, 0xAA, 0x30, 0x9A, 0x83,  // ..K<.0..
                /* 23F0 */  0x22, 0x70, 0xA1, 0x31, 0x87, 0x02, 0x4F, 0xE2,  // "p.1..O.
                /* 23F8 */  0x6D, 0xC2, 0x87, 0x03, 0xE6, 0x7E, 0x82, 0xBA,  // m....~..
                /* 2400 */  0x40, 0x3C, 0x43, 0xC4, 0x78, 0x2B, 0x32, 0x42,  // @<C.x+2B
                /* 2408 */  0x8D, 0x02, 0x6C, 0xA1, 0x13, 0x04, 0xA3, 0x04,  // ..l.....
                /* 2410 */  0x61, 0x28, 0x1C, 0x33, 0x8A, 0xA7, 0x79, 0x16,  // a(.3..y.
                /* 2418 */  0x41, 0x6A, 0x13, 0xA0, 0x0C, 0x44, 0xC6, 0x10,  // Aj...D..
                /* 2420 */  0x11, 0x08, 0xED, 0x0F, 0x82, 0x48, 0x78, 0x4C,  // .....HxL
                /* 2428 */  0xE8, 0x5C, 0xE0, 0x48, 0xA3, 0x41, 0x1D, 0x31,  // .\.H.A.1
                /* 2430 */  0x7C, 0x36, 0xF0, 0xB9, 0xE0, 0x1C, 0x0F, 0xFA,  // |6......
                /* 2438 */  0x10, 0x0D, 0x72, 0x74, 0x07, 0x57, 0xE7, 0xA1,  // ..rt.W..
                /* 2440 */  0x80, 0x0C, 0x8F, 0x1D, 0x47, 0x7C, 0xB6, 0xF0,  // ....G|..
                /* 2448 */  0x29, 0x01, 0xFB, 0xFF, 0x27, 0xE8, 0x1A, 0x50,  // )...'..P
                /* 2450 */  0xD7, 0x83, 0xC7, 0x09, 0xB0, 0x8C, 0xE8, 0x59,  // .......Y
                /* 2458 */  0x04, 0xF6, 0x78, 0x7C, 0x34, 0xF0, 0x29, 0xC0,  // ..x|4.).
                /* 2460 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED,  // ..?.....
                /* 2468 */  0x91, 0x9E, 0xD6, 0x1B, 0x82, 0xCF, 0x05, 0x26,  // .......&
                /* 2470 */  0xB0, 0xD8, 0x13, 0x2A, 0x1D, 0x0F, 0xF8, 0xCF,  // ...*....
                /* 2478 */  0x5A, 0x8F, 0x06, 0x11, 0xDE, 0x0C, 0x3C, 0x5F,  // Z.....<_
                /* 2480 */  0x9F, 0x6D, 0x98, 0x93, 0x93, 0x0D, 0xFA, 0xB2,  // .m......
                /* 2488 */  0x80, 0x21, 0x18, 0xF8, 0x84, 0x42, 0x45, 0x9D,  // .!...BE.
                /* 2490 */  0x50, 0x50, 0x27, 0x0B, 0x1F, 0x2A, 0xD8, 0xDD,  // PP'..*..
                /* 2498 */  0xE0, 0xA1, 0x81, 0x1D, 0x50, 0xD8, 0xA9, 0x87,  // ....P...
                /* 24A0 */  0x9C, 0x4A, 0x40, 0x7F, 0x9E, 0xC1, 0x1D, 0x33,  // .J@....3
                /* 24A8 */  0xE0, 0xDE, 0x2A, 0x70, 0x33, 0xE2, 0xC7, 0x5F,  // ..*p3.._
                /* 24B0 */  0x72, 0xD4, 0x01, 0x8D, 0xB3, 0xE3, 0x83, 0x8E,  // r.......
                /* 24B8 */  0x01, 0xFC, 0xAC, 0x03, 0xFF, 0xC6, 0xF4, 0xFF,  // ........
                /* 24C0 */  0x8F, 0x11, 0xE6, 0x49, 0x22, 0x56, 0x8C, 0xC3,  // ...I"V..
                /* 24C8 */  0x39, 0x97, 0x93, 0x78, 0x6F, 0xAA, 0x12, 0x46,  // 9..xo..F
                /* 24D0 */  0x90, 0x5D, 0xDE, 0x78, 0xC8, 0x21, 0xC9, 0x43,  // .].x.!.C
                /* 24D8 */  0x3A, 0x8F, 0x47, 0x10, 0x4E, 0xE0, 0x21, 0xE2,  // :.G.N.!.
                /* 24E0 */  0x87, 0xC1, 0xCF, 0x12, 0x0F, 0x3F, 0x6C, 0x12,  // .....?l.
                /* 24E8 */  0xEF, 0x3F, 0x9E, 0xC0, 0x51, 0xF9, 0x94, 0x62,  // .?..Q..b
                /* 24F0 */  0x84, 0xE0, 0x0F, 0x1F, 0xE7, 0xFC, 0x16, 0x60,  // .......`
                /* 24F8 */  0x02, 0x5F, 0x8F, 0x7C, 0xC2, 0x45, 0x0C, 0x00,  // ._.|.E..
                /* 2500 */  0x05, 0x7E, 0x42, 0xA7, 0xE8, 0xB3, 0xD0, 0x89,  // .~B.....
                /* 2508 */  0xE1, 0x0E, 0x05, 0x7C, 0x44, 0xD8, 0x01, 0xF0,  // ...|D...
                /* 2510 */  0xF3, 0x0D, 0xC0, 0xA0, 0xFF, 0xFF, 0xF9, 0x06,  // ........
                /* 2518 */  0xBC, 0xA7, 0x87, 0xE7, 0x1B, 0x80, 0xC5, 0xFF,  // ........
                /* 2520 */  0xFF, 0xF3, 0x0D, 0xE0, 0x70, 0x02, 0xC1, 0x1E,  // ....p...
                /* 2528 */  0x6F, 0xCE, 0xE1, 0x7C, 0x9E, 0x5F, 0x1E, 0x2D,  // o..|._.-
                /* 2530 */  0xA2, 0x84, 0x88, 0x12, 0x27, 0x42, 0x94, 0x27,  // ....'B.'
                /* 2538 */  0x88, 0x78, 0xBE, 0xBE, 0x60, 0xCE, 0x37, 0x80,  // .x..`.7.
                /* 2540 */  0x8B, 0x68, 0x87, 0x1B, 0x54, 0x98, 0xF3, 0x0D,  // .h..T...
                /* 2548 */  0x10, 0xFF, 0xFF, 0x9F, 0x6F, 0x00, 0xE7, 0x27,  // ....o..'
                /* 2550 */  0x89, 0xE7, 0x1B, 0x70, 0xC6, 0x7F, 0xAA, 0xE8,  // ...p....
                /* 2558 */  0x7C, 0x03, 0x18, 0xFD, 0xFF, 0x9F, 0x6F, 0x00,  // |.....o.
                /* 2560 */  0x46, 0x61, 0x3D, 0xDF, 0x80, 0xEB, 0x5C, 0xF1,  // Fa=...\.
                /* 2568 */  0xF4, 0xF2, 0x68, 0xF3, 0x66, 0x61, 0xC0, 0x78,  // ..h.fa.x
                /* 2570 */  0x1E, 0xC6, 0xCB, 0x0D, 0xF6, 0x74, 0x03, 0xFC,  // .....t..
                /* 2578 */  0xFE, 0xFF, 0x87, 0x41, 0x80, 0xA7, 0xF7, 0x88,  // ...A....
                /* 2580 */  0x87, 0x41, 0x60, 0xF5, 0xFF, 0x3F, 0xDD, 0x00,  // .A`..?..
                /* 2588 */  0xFC, 0xFF, 0xFF, 0x1F, 0x06, 0xC1, 0x79, 0xB8,  // ......y.
                /* 2590 */  0x09, 0xF6, 0x34, 0xE3, 0xCB, 0xC3, 0x31, 0x04,  // ..4...1.
                /* 2598 */  0x7C, 0x17, 0x84, 0x79, 0xBE, 0x01, 0x6C, 0x28,  // |..y..l(
                /* 25A0 */  0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65,  // ..S.Q..e
                /* 25A8 */  0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6,  // j.iP.O..
                /* 25B0 */  0x8C, 0x55, 0x78, 0x42, 0x28, 0x12, 0x84, 0x0E,  // .UxB(...
                /* 25B8 */  0x09, 0x8E, 0xFB, 0x4E, 0x10, 0x88, 0x43, 0xBF,  // ...N..C.
                /* 25C0 */  0x3D, 0x04, 0x62, 0x31, 0xEF, 0x02, 0x81, 0x58,  // =.b1...X
                /* 25C8 */  0xAC, 0x0E, 0x10, 0x26, 0xDA, 0x08, 0x10, 0x55,  // ...&...U
                /* 25D0 */  0x02, 0xC2, 0xE4, 0xBF, 0x1D, 0x04, 0xE2, 0x10,  // ........
                /* 25D8 */  0x5A, 0x40, 0x98, 0x78, 0x2F, 0x20, 0x2C, 0xCE,  // Z@.x/ ,.
                /* 25E0 */  0x4A, 0x05, 0xE2, 0x50, 0x6E, 0x40, 0x58, 0x98,  // J..Pn@X.
                /* 25E8 */  0xD5, 0x09, 0xC4, 0xF1, 0xEC, 0x1C, 0x1F, 0xA8,  // ........
                /* 25F0 */  0x21, 0x10, 0x26, 0xE3, 0xD1, 0x23, 0x10, 0xC7,  // !.&..#..
                /* 25F8 */  0x07, 0xA1, 0x82, 0x34, 0x81, 0x30, 0x51, 0xA6,  // ...4.0Q.
                /* 2600 */  0x40, 0x98, 0x44, 0x59, 0x20, 0x4C, 0xA4, 0xAF,  // @.DY L..
                /* 2608 */  0x41, 0xD1, 0x9F, 0x81, 0x40, 0x1C, 0x05, 0x84,  // A...@...
                /* 2610 */  0x0A, 0x79, 0xCE, 0x68, 0x53, 0x12, 0x20, 0x0B,  // .y.hS. .
                /* 2618 */  0x44, 0x40, 0x96, 0xFB, 0x60, 0x09, 0x44, 0xC4,  // D@..`.D.
                /* 2620 */  0x83, 0x08, 0xC8, 0x41, 0xC4, 0x01, 0xB1, 0x58,  // ...A...X
                /* 2628 */  0x20, 0x02, 0x72, 0x44, 0x75, 0x40, 0x2C, 0x30,  //  .rDu@,0
                /* 2630 */  0x88, 0x80, 0x1C, 0x5E, 0x1E, 0x10, 0x93, 0x62,  // ...^...b
                /* 2638 */  0xEF, 0xFF, 0x3F, 0x1C, 0xEA, 0x0F, 0x88, 0x49,  // ..?....I
                /* 2640 */  0x04, 0x11, 0x90, 0x05, 0x7F, 0x02, 0x02, 0x11,  // ........
                /* 2648 */  0xF9, 0x20, 0x1A, 0x0E, 0xF9, 0x09, 0x04, 0x22,  // . ....."
                /* 2650 */  0xC1, 0x40, 0x04, 0xE4, 0x80, 0x8F, 0x03, 0x01,  // .@......
                /* 2658 */  0x39, 0x2E, 0x88, 0x80, 0x1C, 0xF9, 0xDD, 0x10,  // 9.......
                /* 2660 */  0x88, 0xE4, 0x07, 0x11, 0x90, 0xF3, 0x8B, 0x04,  // ........
                /* 2668 */  0x62, 0x6A, 0x1E, 0x4C, 0x02, 0xB2, 0xAE, 0x3F,  // bj.L...?
                /* 2670 */  0x7C, 0x20, 0xA2, 0x12, 0x44, 0x40, 0x56, 0xFA,  // | ..D@V.
                /* 2678 */  0x5E, 0x08, 0x44, 0x64, 0x83, 0x08, 0xC8, 0xB2,  // ^.Dd....
                /* 2680 */  0x1F, 0x0D, 0x81, 0x48, 0x08, 0x10, 0x1D, 0x01,  // ...H....
                /* 2688 */  0xC8, 0x0B, 0x4C, 0x40, 0x0E, 0x07, 0xA2, 0xE3,  // ..L@....
                /* 2690 */  0x00, 0x31, 0x0A, 0xC4, 0xA4, 0x83, 0x68, 0xD0,  // .1....h.
                /* 2698 */  0xE4, 0xB9, 0x10, 0x88, 0x48, 0x03, 0x11, 0x90,  // ....H...
                /* 26A0 */  0xA5, 0xFD, 0x27, 0x02, 0x11, 0xA1, 0x20, 0x02,  // ..'... .
                /* 26A8 */  0xB2, 0x50, 0xAD, 0x03, 0xA1, 0x20, 0x3A, 0x1A,  // .P... :.
                /* 26B0 */  0x90, 0x87, 0x86, 0x80, 0x1C, 0x09, 0x44, 0x07,  // ......D.
                /* 26B8 */  0x03, 0xA2, 0x16, 0x88, 0x45, 0x04, 0x11, 0x90,  // ....E...
                /* 26C0 */  0x43, 0xBE, 0x26, 0x02, 0x91, 0xC8, 0x20, 0x3A,  // C.&... :
                /* 26C8 */  0x32, 0x10, 0xBD, 0x40, 0x4C, 0xC2, 0x57, 0xE2,  // 2..@L.W.
                /* 26D0 */  0x61, 0x80, 0xFD, 0x42, 0x04, 0x64, 0x55, 0x20,  // a..B.dU 
                /* 26D8 */  0x1A, 0x3C, 0x79, 0xC0, 0x1C, 0x3C, 0x03, 0x11,  // .<y..<..
                /* 26E0 */  0x90, 0x35, 0x7E, 0x53, 0x04, 0x64, 0xC1, 0x20,  // .5~S.d. 
                /* 26E8 */  0x02, 0x72, 0x74, 0x20, 0xAA, 0xE3, 0x91, 0x22,  // .rt ..."
                /* 26F0 */  0x20, 0xE7, 0x03, 0x11, 0x90, 0xC3, 0x02, 0xD1,  //  .......
                /* 26F8 */  0xA4, 0x9A, 0x81, 0x58, 0x6E, 0x10, 0x0D, 0x92,  // ...Xn...
                /* 2700 */  0xFC, 0x35, 0x04, 0x64, 0x65, 0x20, 0x02, 0x72,  // .5.de .r
                /* 2708 */  0x46, 0x20, 0x1A, 0x18, 0x88, 0x2A, 0x57, 0x0D,  // F ...*W.
                /* 2710 */  0xC4, 0x62, 0x80, 0xE8, 0xF0, 0x40, 0x9E, 0x44,  // .b...@.D
                /* 2718 */  0x81, 0x88, 0x3A, 0x10, 0x01, 0x59, 0xDB, 0x2B,  // ..:..Y.+
                /* 2720 */  0x4A, 0x40, 0x56, 0x0A, 0x22, 0x20, 0x0B, 0x7F,  // J@V." ..
                /* 2728 */  0xB7, 0x08, 0xC8, 0x29, 0x40, 0x04, 0x64, 0x3D,  // ...)@.d=
                /* 2730 */  0xCF, 0x90, 0x40, 0x44, 0x1C, 0x88, 0x80, 0x9C,  // ..@D....
                /* 2738 */  0x12, 0x88, 0x46, 0xF6, 0xFD, 0xFF, 0x3F, 0x64,  // ..F...?d
                /* 2740 */  0xD0, 0x57, 0x4C, 0x20, 0x92, 0x05, 0x44, 0x07,  // .WL ..D.
                /* 2748 */  0x08, 0x62, 0xFC, 0x00, 0x41, 0x41, 0x04, 0xE4,  // .b..AA..
                /* 2750 */  0x9C, 0xEF, 0x99, 0x40, 0x24, 0x34, 0x88, 0x80,  // ...@$4..
                /* 2758 */  0xC9, 0x37, 0x44, 0xC0, 0x04, 0x44, 0x83, 0x26,  // .7D..D.&
                /* 2760 */  0x8F, 0x98, 0x40, 0x44, 0x21, 0x88, 0x80, 0x9C,  // ..@D!...
                /* 2768 */  0x1C, 0x88, 0xCA, 0x78, 0x99, 0x09, 0xC8, 0x1A,  // ...x....
                /* 2770 */  0x3E, 0x29, 0x81, 0x88, 0x22, 0x10, 0x01, 0x59,  // >).."..Y
                /* 2778 */  0xDC, 0x0B, 0x4A, 0x83, 0x23, 0x20, 0x3A, 0x1C,  // ..J.# :.
                /* 2780 */  0x10, 0xF5, 0x87, 0x03, 0x0A, 0xA2, 0xC1, 0x92,  // ........
                /* 2788 */  0x37, 0x93, 0x06, 0x4B, 0x40, 0x34, 0x58, 0xF2,  // 7..K@4X.
                /* 2790 */  0xC7, 0xD2, 0x60, 0x09, 0x88, 0x0E, 0x0B, 0x44,  // ..`....D
                /* 2798 */  0xFF, 0x61, 0x81, 0x82, 0x08, 0xC8, 0xAA, 0x9F,  // .a......
                /* 27A0 */  0x6C, 0x02, 0x72, 0x04, 0x10, 0x1D, 0x02, 0x48,  // l.r....H
                /* 27A8 */  0x81, 0x43, 0x00, 0x05, 0x11, 0x90, 0x65, 0x25,  // .C....e%
                /* 27B0 */  0x00, 0x62, 0x22, 0x41, 0x74, 0x98, 0x20, 0x11,  // .b"At. .
                /* 27B8 */  0x0E, 0x13, 0x14, 0x44, 0x40, 0x4E, 0x91, 0xE1,  // ...D@N..
                /* 27C0 */  0xE0, 0x40, 0x41, 0x34, 0x30, 0xD2, 0x61, 0x60,  // .@A40.a`
                /* 27C8 */  0x14, 0x44, 0x40, 0xCE, 0x0C, 0x44, 0x89, 0x03,  // .D@..D..
                /* 27D0 */  0xB1, 0xF4, 0x20, 0x02, 0xB2, 0x96, 0x12, 0x83,  // .. .....
                /* 27D8 */  0xA2, 0x2D, 0x80, 0x98, 0x4E, 0x10, 0x01, 0x39,  // .-..N..9
                /* 27E0 */  0x31, 0x10, 0x8D, 0x0F, 0x44, 0xB3, 0xC7, 0x00,  // 1...D...
                /* 27E8 */  0x62, 0x4A, 0x6A, 0x0C, 0x8A, 0xF6, 0x00, 0x62,  // bJj....b
                /* 27F0 */  0x1A, 0x41, 0x04, 0xE4, 0xB4, 0x40, 0x34, 0x3A,  // .A...@4:
                /* 27F8 */  0x10, 0xCD, 0x10, 0x04, 0x88, 0x05, 0x02, 0xD1,  // ........
                /* 2800 */  0x40, 0x48, 0x91, 0x81, 0x50, 0x10, 0x1D, 0x5B,  // @H..P..[
                /* 2808 */  0x48, 0x12, 0x20, 0x26, 0x19, 0x44, 0x40, 0x56,  // H. &.D@V
                /* 2810 */  0x1F, 0x05, 0x88, 0x45, 0x01, 0xD1, 0xA1, 0x80,  // ...E....
                /* 2818 */  0x54, 0x39, 0x14, 0x50, 0x10, 0x01, 0x39, 0x2A,  // T9.P..9*
                /* 2820 */  0x10, 0xCD, 0x0D, 0x44, 0x43, 0x67, 0x39, 0x68,  // ...DCg9h
                /* 2828 */  0xD0, 0x2E, 0xFF, 0xFF, 0x83, 0x03, 0x2D, 0x73,  // ......-s
                /* 2830 */  0x70, 0xA0, 0x20, 0x02, 0x72, 0x4C, 0x20, 0x9A,  // p. .rL .
                /* 2838 */  0x19, 0x88, 0x8A, 0x4F, 0x03, 0xC4, 0x92, 0x80,  // ...O....
                /* 2840 */  0x08, 0xC8, 0x9A, 0xDA, 0x00, 0x31, 0x81, 0x20,  // .....1. 
                /* 2848 */  0x02, 0xB2, 0xBC, 0x38, 0x40, 0x4C, 0x2C, 0x88,  // ...8@L,.
                /* 2850 */  0x80, 0xAC, 0x3B, 0xCF, 0x41, 0x80, 0x82, 0xE8,  // ..;.A...
                /* 2858 */  0x08, 0x47, 0xFA, 0x00, 0x31, 0x6D, 0x20, 0x3A,  // .G..1m :
                /* 2860 */  0x8C, 0x10, 0x20, 0x9A, 0x18, 0x88, 0xC6, 0x0D,  // .. .....
                /* 2868 */  0x04, 0xC4, 0xC2, 0x83, 0x08, 0xC8, 0x4A, 0x1A,  // ......J.
                /* 2870 */  0x1D, 0x74, 0x28, 0x88, 0x0E, 0x33, 0x04, 0x88,  // .t(..3..
                /* 2878 */  0xA6, 0x05, 0xA2, 0xB2, 0x1F, 0x79, 0x02, 0x72,  // .....y.r
                /* 2880 */  0x06, 0x10, 0x1D, 0x38, 0x48, 0xA5, 0x43, 0x03,  // ...8H.C.
                /* 2888 */  0x05, 0x11, 0x90, 0x55, 0x66, 0x02, 0x62, 0x9A,  // ...Uf.b.
                /* 2890 */  0x41, 0x04, 0xE4, 0x00, 0xA1, 0x80, 0x58, 0x1A,  // A.....X.
                /* 2898 */  0x10, 0x1D, 0x6A, 0x48, 0xA9, 0x43, 0x03, 0x05,  // ..jH.C..
                /* 28A0 */  0xD1, 0x81, 0x80, 0x00, 0xD1, 0xE8, 0x40, 0x34,  // ......@4
                /* 28A8 */  0x77, 0x2A, 0x20, 0xA6, 0xA2, 0x15, 0x10, 0x13,  // w* .....
                /* 28B0 */  0x56, 0xEB, 0x80, 0x43, 0x41, 0x04, 0xE4, 0xBC,  // V..CA...
                /* 28B8 */  0x40, 0x34, 0x3C, 0x10, 0x4D, 0x91, 0xEB, 0x00,  // @4<.M...
                /* 28C0 */  0x41, 0x41, 0x04, 0x64, 0xA9, 0xBD, 0x80, 0x98,  // AA.d....
                /* 28C8 */  0x6E, 0x10, 0x1D, 0xA0, 0x48, 0xB0, 0x83, 0x05,  // n...H...
                /* 28D0 */  0x05, 0xD1, 0xB1, 0x89, 0x24, 0x03, 0x62, 0xC9,  // ....$.b.
                /* 28D8 */  0x40, 0x04, 0xE4, 0x64, 0xCD, 0x80, 0x58, 0x4E,  // @..d..XN
                /* 28E0 */  0x10, 0x1D, 0x5C, 0x48, 0xB5, 0xC3, 0x01, 0x05,  // ..\H....
                /* 28E8 */  0x11, 0x90, 0x73, 0x64, 0x03, 0x62, 0xA9, 0x40,  // ..sd.b.@
                /* 28F0 */  0x04, 0xE4, 0x4C, 0xE1, 0x80, 0x58, 0x40, 0x10,  // ..L..X@.
                /* 28F8 */  0x0D, 0x9C, 0x94, 0x3B, 0x14, 0x51, 0x10, 0x1D,  // ...;.Q..
                /* 2900 */  0x14, 0x48, 0xBB, 0x83, 0x02, 0x8D, 0x07, 0xC4,  // .H......
                /* 2908 */  0x22, 0x81, 0x08, 0x98, 0x00, 0xD1, 0x80, 0xF9,  // ".......
                /* 2910 */  0x0E, 0x01, 0x34, 0xDF, 0xFF, 0x7F, 0xC0, 0xB4,  // ..4.....
                /* 2918 */  0x1F, 0x10, 0xCB, 0x0E, 0x22, 0x20, 0x2B, 0x48,  // ...." +H
                /* 2920 */  0x08, 0xC4, 0xF4, 0x80, 0xE8, 0x80, 0x43, 0x80,  // ......C.
                /* 2928 */  0x68, 0x5A, 0x20, 0x9A, 0x3F, 0xE2, 0x41, 0x89,  // hZ .?.A.
                /* 2930 */  0x56, 0x3C, 0x8C, 0xD0, 0x8E, 0x87, 0x11, 0x0A,  // V<......
                /* 2938 */  0xA2, 0xC3, 0x0B, 0x01, 0xA2, 0xA1, 0x81, 0x68,  // .......h
                /* 2940 */  0x80, 0x90, 0x07, 0x02, 0x0A, 0x22, 0x20, 0x2B,  // ....." +
                /* 2948 */  0x2B, 0x09, 0xC4, 0x64, 0x82, 0x08, 0xC8, 0x32,  // +..d...2
                /* 2950 */  0x53, 0x02, 0x31, 0xD1, 0x20, 0x1A, 0x3C, 0x89,  // S.1. .<.
                /* 2958 */  0x39, 0x78, 0x0A, 0xA2, 0x43, 0x06, 0xA9, 0x79,  // 9x..C..y
                /* 2960 */  0x18, 0xA2, 0x20, 0x3A, 0x4C, 0x11, 0x20, 0xBA,  // .. :L. .
                /* 2968 */  0x94, 0x40, 0x2C, 0x10, 0x88, 0x80, 0x1C, 0x0F,  // .@,.....
                /* 2970 */  0x88, 0xCA, 0xED, 0x79, 0xE8, 0xA2, 0x20, 0x3A,  // ...y.. :
                /* 2978 */  0xC4, 0x90, 0xA2, 0x87, 0x18, 0x0A, 0xA2, 0x41,  // .......A
                /* 2980 */  0x90, 0xA4, 0x07, 0x0F, 0x0A, 0xA2, 0x01, 0x13,  // ........
                /* 2988 */  0x20, 0x1A, 0x1D, 0x88, 0xC6, 0x68, 0x0A, 0xC4,  //  ....h..
                /* 2990 */  0x32, 0x81, 0xE8, 0x30, 0x40, 0xA2, 0x02, 0xB1,  // 2..0@...
                /* 2998 */  0x84, 0x20, 0x3A, 0x00, 0x91, 0xAC, 0x07, 0x0F,  // . :.....
                /* 29A0 */  0x0A, 0xA2, 0x03, 0x03, 0xE9, 0x0A, 0x4C, 0x41,  // ......LA
                /* 29A8 */  0x74, 0x68, 0x22, 0x61, 0x81, 0x98, 0x62, 0x10,  // th"a..b.
                /* 29B0 */  0x1D, 0x02, 0x48, 0xD9, 0x43, 0x00, 0x05, 0xD1,  // ..H.C...
                /* 29B8 */  0x21, 0x80, 0x00, 0xD1, 0xB4, 0x40, 0x34, 0x6C,  // !....@4l
                /* 29C0 */  0x5B, 0x20, 0x96, 0x1C, 0x44, 0x87, 0x05, 0x12,  // [ ..D...
                /* 29C8 */  0x17, 0x88, 0x85, 0x02, 0x11, 0x90, 0x05, 0xD6,  // ........
                /* 29D0 */  0x05, 0x62, 0x6A, 0x41, 0x74, 0x10, 0x22, 0x40,  // .bjAt."@
                /* 29D8 */  0x54, 0x46, 0xDE, 0x43, 0x1C, 0xED, 0x0B, 0xC4,  // TF.C....
                /* 29E0 */  0x44, 0x81, 0xE8, 0x70, 0x41, 0x0A, 0x1F, 0x04,  // D..pA...
                /* 29E8 */  0x28, 0x88, 0x80, 0x1C, 0x1C, 0x88, 0xCA, 0x48,  // (......H
                /* 29F0 */  0x0C, 0xC4, 0x62, 0x81, 0x08, 0xC8, 0x21, 0x13,  // ..b...!.
                /* 29F8 */  0xFF, 0xFF, 0x0F, 0x03, 0xB4, 0xF1, 0x61, 0x80,  // ......a.
                /* 2A00 */  0x82, 0x08, 0xC8, 0x92, 0x22, 0x1F, 0x54, 0x28,  // ....".T(
                /* 2A08 */  0x88, 0x80, 0xAC, 0x2F, 0xF3, 0x41, 0x85, 0x82,  // .../.A..
                /* 2A10 */  0xE8, 0xA0, 0x45, 0x80, 0xA8, 0x8E, 0xCE, 0x03,  // ..E.....
                /* 2A18 */  0xA7, 0x20, 0x3A, 0x48, 0x10, 0x20, 0x2A, 0x36,  // . :H. *6
                /* 2A20 */  0x34, 0x10, 0x53, 0x0E, 0xA2, 0x03, 0x01, 0x29,  // 4.S....)
                /* 2A28 */  0x0D, 0xC4, 0x72, 0x80, 0x08, 0xC8, 0x59, 0x5A,  // ..r...YZ
                /* 2A30 */  0x1F, 0x38, 0x28, 0x88, 0x80, 0xAC, 0x35, 0x36,  // .8(...56
                /* 2A38 */  0x30, 0x05, 0xD1, 0x81, 0x85, 0xD4, 0x06, 0x62,  // 0......b
                /* 2A40 */  0xBA, 0x40, 0x74, 0x88, 0x20, 0x40, 0x34, 0x35,  // .@t. @45
                /* 2A48 */  0x10, 0x4D, 0x91, 0xFB, 0x30, 0x40, 0x41, 0x34,  // .M..0@A4
                /* 2A50 */  0x48, 0x12, 0x1C, 0x88, 0x65, 0x04, 0x11, 0x90,  // H...e...
                /* 2A58 */  0x15, 0x17, 0x3F, 0xE0, 0x51, 0x10, 0x01, 0x59,  // ..?.Q..Y
                /* 2A60 */  0x4A, 0xF2, 0x41, 0x50, 0x10, 0x1D, 0xC4, 0x08,  // J.AP....
                /* 2A68 */  0x10, 0x0D, 0x0C, 0x44, 0xC5, 0x37, 0x3F, 0xE8,  // ...D.7?.
                /* 2A70 */  0x50, 0x10, 0x1D, 0x1C, 0x48, 0xF4, 0x83, 0x03,  // P...H...
                /* 2A78 */  0x05, 0xD1, 0x81, 0x80, 0x54, 0x07, 0x62, 0x72,  // ....T.br
                /* 2A80 */  0x41, 0x74, 0xA0, 0x21, 0xDD, 0x0F, 0x3A, 0x14,  // At.!..:.
                /* 2A88 */  0x44, 0x87, 0x24, 0x12, 0xFE, 0x10, 0x43, 0x41,  // D.$...CA
                /* 2A90 */  0x74, 0x20, 0x21, 0x40, 0x54, 0x42, 0xF9, 0x03,  // t !@TB..
                /* 2A98 */  0x09, 0x05, 0xD1, 0xC0, 0x09, 0x10, 0x15, 0x9C,  // ........
                /* 2AA0 */  0x7E, 0x60, 0x14, 0x44, 0x07, 0x10, 0xD2, 0xFE,  // ~`.D....
                /* 2AA8 */  0x90, 0x47, 0x41, 0x04, 0xE4, 0xA0, 0x40, 0x34,  // .GA...@4
                /* 2AB0 */  0x36, 0x10, 0x8D, 0x5D, 0x1F, 0x88, 0x69, 0xC8,  // 6..]..i.
                /* 2AB8 */  0x7F, 0x08, 0xA3, 0x27, 0x57, 0x1D, 0xC2, 0x08,  // ...'W...
                /* 2AC0 */  0x88, 0x0E, 0x45, 0xC4, 0xC0, 0x6D, 0xF6, 0xE0,  // ..E..m..
                /* 2AC8 */  0x08, 0x88, 0x0E, 0x54, 0x04, 0x88, 0xE6, 0x07,  // ...T....
                /* 2AD0 */  0xA2, 0xE9, 0x1D, 0x00, 0x31, 0x29, 0x12, 0x80,  // ....1)..
                /* 2AD8 */  0x98, 0x14, 0x0B, 0x40, 0x4C, 0x98, 0x85, 0xFF,  // ...@L...
                /* 2AE0 */  0x3F, 0x10, 0x93, 0xE7, 0x01, 0x88, 0x89, 0x05,  // ?.......
                /* 2AE8 */  0xD1, 0xC1, 0x91, 0x00, 0x51, 0x29, 0x22, 0x80,  // ....Q)".
                /* 2AF0 */  0xA9, 0x0A, 0x20, 0xA6, 0x0B, 0x44, 0x07, 0x20,  // .. ..D. 
                /* 2AF8 */  0xE2, 0x02, 0x88, 0xA9, 0x04, 0xD1, 0x01, 0x81,  // ........
                /* 2B00 */  0xD8, 0x00, 0x62, 0xCA, 0x41, 0x74, 0x40, 0x20,  // ..b.At@ 
                /* 2B08 */  0x3A, 0x80, 0x29, 0x88, 0x80, 0x89, 0x10, 0x20,  // :.).... 
                /* 2B10 */  0x26, 0x12, 0x44, 0x07, 0x2C, 0x62, 0x04, 0x88,  // &.D.,b..
                /* 2B18 */  0x49, 0x06, 0xD1, 0xE1, 0x8E, 0x38, 0x01, 0x62,  // I....8.b
                /* 2B20 */  0x31, 0x40, 0x74, 0x08, 0x20, 0x52, 0x80, 0x29,  // 1@t. R.)
                /* 2B28 */  0x88, 0x0E, 0x6E, 0x44, 0x0B, 0x10, 0x53, 0x0D,  // ..nD..S.
                /* 2B30 */  0xA2, 0x43, 0x08, 0xF1, 0x02, 0xC4, 0xE4, 0x80,  // .C......
                /* 2B38 */  0xE8, 0x00, 0x44, 0x80, 0x68, 0x4C, 0x20, 0x9A,  // ..D.hL .
                /* 2B40 */  0x52, 0x0C, 0x10, 0xCB, 0x0C, 0xA2, 0x01, 0x13,  // R.......
                /* 2B48 */  0x35, 0x40, 0x4C, 0x8B, 0x1B, 0x20, 0x96, 0x0D,  // 5@L.. ..
                /* 2B50 */  0x44, 0x40, 0x4E, 0x0A, 0x44, 0x75, 0xCB, 0x01,  // D@N.Du..
                /* 2B58 */  0x62, 0x29, 0x40, 0x74, 0x08, 0x20, 0x76, 0x0E,  // b)@t. v.
                /* 2B60 */  0x01, 0x14, 0x44, 0x40, 0xD6, 0xEB, 0x07, 0x88,  // ..D@....
                /* 2B68 */  0xA9, 0x07, 0xD1, 0xC1, 0x8C, 0x18, 0x02, 0x62,  // .......b
                /* 2B70 */  0x89, 0x40, 0x04, 0xE4, 0x5C, 0x8E, 0x80, 0x58,  // .@..\..X
                /* 2B78 */  0x4A, 0x10, 0x1D, 0x2E, 0x88, 0x25, 0x20, 0x96,  // J....% .
                /* 2B80 */  0x1A, 0x44, 0x87, 0x13, 0xE2, 0x09, 0x88, 0xE9,  // .D......
                /* 2B88 */  0x10, 0x05, 0xC4, 0xB4, 0xA8, 0x02, 0x62, 0xCA,  // ......b.
                /* 2B90 */  0x40, 0x04, 0x64, 0x75, 0xB2, 0x80, 0x98, 0x56,  // @.du...V
                /* 2B98 */  0x10, 0x1D, 0x30, 0x88, 0x2E, 0x20, 0xA6, 0x1F,  // ..0.. ..
                /* 2BA0 */  0x44, 0x87, 0x0D, 0x22, 0x0C, 0x88, 0x65, 0x02,  // D.."..e.
                /* 2BA8 */  0xD1, 0x60, 0x88, 0xB2, 0xC1, 0x50, 0x10, 0x01,  // .`...P..
                /* 2BB0 */  0x39, 0xAB, 0x34, 0x20, 0x16, 0x1C, 0x44, 0x03,  // 9.4 ..D.
                /* 2BB8 */  0x23, 0xD6, 0x80, 0x58, 0x20, 0x10, 0x1D, 0x7C,  // #..X ..|
                /* 2BC0 */  0x88, 0x36, 0x20, 0x16, 0x0F, 0x44, 0x47, 0x5A,  // .6 ..DGZ
                /* 2BC8 */  0x62, 0xEE, 0x00, 0x40, 0xCD, 0xFD, 0xFF, 0x81,  // b..@....
                /* 2BD0 */  0x58, 0x38, 0x20, 0x1A, 0x15, 0x88, 0x4A, 0x57,  // X8 ...JW
                /* 2BD8 */  0x07, 0xC4, 0x82, 0x80, 0x68, 0x00, 0x44, 0x1E,  // ....h.D.
                /* 2BE0 */  0x10, 0x4B, 0x07, 0xA2, 0x43, 0x01, 0xB1, 0x77,  // .K..C..w
                /* 2BE8 */  0x28, 0xA0, 0x20, 0x3A, 0x10, 0x12, 0x7D, 0x40,  // (. :..}@
                /* 2BF0 */  0x2C, 0x03, 0x88, 0x0E, 0x04, 0x44, 0xE0, 0x81,  // ,....D..
                /* 2BF8 */  0x80, 0x82, 0x08, 0xC8, 0x09, 0x0C, 0x02, 0xB1,  // ........
                /* 2C00 */  0x3C, 0x20, 0x3A, 0xC4, 0x90, 0xA7, 0xC5, 0x43,  // < :....C
                /* 2C08 */  0x0E, 0x03, 0xD1, 0x00, 0x88, 0xC4, 0x01, 0x50,  // .......P
                /* 2C10 */  0x10, 0x1D, 0x08, 0x88, 0xC5, 0x03, 0x01, 0x05,  // ........
                /* 2C18 */  0x11, 0x90, 0x15, 0x7A, 0x04, 0x62, 0x72, 0x41,  // ...z.brA
                /* 2C20 */  0x74, 0x50, 0x22, 0x22, 0x81, 0x98, 0x78, 0x10,  // tP""..x.
                /* 2C28 */  0x01, 0x39, 0x82, 0xCA, 0xC1, 0x52, 0x10, 0x1D,  // .9...R..
                /* 2C30 */  0x4E, 0x88, 0x4B, 0x60, 0x0A, 0xA2, 0xC3, 0x08,  // N.K`....
                /* 2C38 */  0xB1, 0x79, 0x40, 0xA0, 0x20, 0x3A, 0xFC, 0x11,  // .y@. :..
                /* 2C40 */  0x9D, 0x40, 0x2C, 0x0B, 0x88, 0x80, 0x9C, 0x47,  // .@,....G
                /* 2C48 */  0x28, 0x10, 0x3B, 0xCC, 0x1E, 0x14, 0x35, 0x0A,  // (.;...5.
                /* 2C50 */  0xC4, 0x22, 0x80, 0x08, 0xC8, 0xFA, 0x95, 0x02,  // ."......
                /* 2C58 */  0xB1, 0x34, 0x20, 0x3A, 0x40, 0x10, 0xA9, 0x40,  // .4 :@..@
                /* 2C60 */  0x2C, 0x28, 0x88, 0x06, 0x4B, 0xAC, 0x0E, 0x96,  // ,(..K...
                /* 2C68 */  0x82, 0x08, 0xC8, 0x3A, 0xC4, 0x02, 0x31, 0x51,  // ...:..1Q
                /* 2C70 */  0x20, 0x3A, 0x30, 0x13, 0x20, 0x9A, 0x15, 0x88,  //  :0. ...
                /* 2C78 */  0x66, 0x35, 0x0B, 0xC4, 0x92, 0x83, 0xE8, 0x90,  // f5......
                /* 2C80 */  0x41, 0xE4, 0x1E, 0x0A, 0x28, 0x88, 0x80, 0x1C,  // A...(...
                /* 2C88 */  0x0C, 0x88, 0xA6, 0x04, 0xA2, 0x29, 0xED, 0x0E,  // .....)..
                /* 2C90 */  0x84, 0x82, 0x08, 0xC8, 0xA9, 0xFD, 0x02, 0x31,  // .......1
                /* 2C98 */  0x09, 0x82, 0x81, 0x98, 0x04, 0xC3, 0x40, 0x4C,  // ......@L
                /* 2CA0 */  0x10, 0x88, 0x0E, 0x20, 0xC4, 0xF1, 0x01, 0x84,  // ... ....
                /* 2CA8 */  0x82, 0xE8, 0x50, 0x43, 0x80, 0xA8, 0x04, 0xC9,  // ..PC....
                /* 2CB0 */  0x40, 0x4C, 0x84, 0x66, 0x20, 0xA6, 0x48, 0xF3,  // @L.f .H.
                /* 2CB8 */  0xFF, 0x1F, 0x88, 0x29, 0xF2, 0x0C, 0xC4, 0xF4,  // ...)....
                /* 2CC0 */  0x81, 0xE8, 0x00, 0x48, 0x4C, 0x03, 0x31, 0xCD,  // ...HL.1.
                /* 2CC8 */  0x20, 0x3A, 0xCC, 0x10, 0xD5, 0xC0, 0x14, 0x44,  //  :.....D
                /* 2CD0 */  0x87, 0x14, 0x22, 0xFB, 0xC0, 0x42, 0x41, 0x04,  // .."..BA.
                /* 2CD8 */  0x64, 0xB5, 0xBA, 0x81, 0x98, 0x74, 0x10, 0x0D,  // d....t..
                /* 2CE0 */  0x84, 0xF8, 0x06, 0xA6, 0x20, 0x1A, 0x08, 0x11,  // .... ...
                /* 2CE8 */  0x3E, 0x10, 0x0A, 0xA2, 0x03, 0x33, 0x51, 0x0E,  // >....3Q.
                /* 2CF0 */  0xC4, 0x64, 0x83, 0xE8, 0x50, 0x41, 0x9C, 0x03,  // .d..PA..
                /* 2CF8 */  0x31, 0x35, 0x20, 0x02, 0xB2, 0x1A, 0xE9, 0x40,  // 15 ....@
                /* 2D00 */  0x4C, 0x1B, 0x88, 0x0E, 0x1E, 0x44, 0x3B, 0x10,  // L....D;.
                /* 2D08 */  0x93, 0x0A, 0xA2, 0x83, 0x20, 0xF1, 0x0E, 0xC4,  // .... ...
                /* 2D10 */  0x84, 0x83, 0xE8, 0x20, 0x47, 0xCC, 0x1F, 0x0C,  // ... G...
                /* 2D18 */  0x28, 0x88, 0x06, 0x46, 0xD4, 0x0F, 0x98, 0x82,  // (..F....
                /* 2D20 */  0xE8, 0x30, 0x43, 0xDC, 0x1F, 0x66, 0x28, 0x88,  // .0C..f(.
                /* 2D28 */  0x0E, 0x1A, 0xC4, 0x3E, 0x10, 0xCB, 0x01, 0xA2,  // ...>....
                /* 2D30 */  0x81, 0x11, 0xFD, 0x40, 0x4C, 0x1E, 0x88, 0x0E,  // ...@L...
                /* 2D38 */  0x3D, 0xC4, 0xFF, 0xA1, 0x87, 0x82, 0xE8, 0x90,  // =.......
                /* 2D40 */  0x45, 0x0A, 0x1C, 0x74, 0x28, 0x88, 0x0E, 0x59,  // E..t(..Y
                /* 2D48 */  0x24, 0xC1, 0x00, 0x28, 0x88, 0x0E, 0x59, 0x24,  // $..(..Y$
                /* 2D50 */  0x02, 0x10, 0x4B, 0x06, 0xA2, 0x81, 0x92, 0x0A,  // ..K.....
                /* 2D58 */  0x40, 0x4C, 0x37, 0x88, 0x0E, 0x32, 0xA4, 0xC3,  // @L7..2..
                /* 2D60 */  0x41, 0x86, 0x82, 0x08, 0xC8, 0xAA, 0x42, 0x00,  // A.....B.
                /* 2D68 */  0x31, 0x8D, 0x20, 0x02, 0x26, 0x29, 0x80, 0x29,  // 1. .&).)
                /* 2D70 */  0x88, 0x0E, 0x16, 0x24, 0x06, 0x10, 0x8B, 0x02,  // ...$....
                /* 2D78 */  0x22, 0x20, 0x27, 0xA9, 0x01, 0xC4, 0x72, 0x81,  // " '...r.
                /* 2D80 */  0x08, 0xC8, 0x09, 0x7B, 0x00, 0xB1, 0xBC, 0x20,  // ...{... 
                /* 2D88 */  0x02, 0x26, 0x41, 0x0E, 0x19, 0x14, 0x44, 0x87,  // .&A...D.
                /* 2D90 */  0x0C, 0x92, 0xE4, 0x90, 0x41, 0x41, 0x74, 0xB8,  // ....AAt.
                /* 2D98 */  0x20, 0x4D, 0x0E, 0x3B, 0x14, 0x44, 0x87, 0x5C,  //  M.;.D.\
                /* 2DA0 */  0x52, 0x05, 0x88, 0x29, 0xC8, 0xF2, 0xFF, 0x3F,  // R..)...?
                /* 2DA8 */  0x5C, 0xD0, 0x30, 0x87, 0x0B, 0x0A, 0xA2, 0x81,  // \.0.....
                /* 2DB0 */  0x91, 0x32, 0x03, 0xA3, 0x20, 0x3A, 0x28, 0x90,  // .2.. :(.
                /* 2DB8 */  0x36, 0x40, 0x4C, 0x3B, 0x88, 0x0E, 0x38, 0x24,  // 6@L;..8$
                /* 2DC0 */  0xCE, 0x01, 0x87, 0x82, 0xE8, 0x90, 0x42, 0xF2,  // ......B.
                /* 2DC8 */  0x0C, 0x9E, 0x82, 0x68, 0x90, 0xA4, 0xCF, 0x20,  // ...h... 
                /* 2DD0 */  0x29, 0x88, 0x0E, 0x10, 0x24, 0xD0, 0xA1, 0x81,  // )...$...
                /* 2DD8 */  0x82, 0xE8, 0x60, 0x40, 0x12, 0x1D, 0x0C, 0x28,  // ..`@...(
                /* 2DE0 */  0x88, 0x0E, 0x84, 0x04, 0x88, 0x46, 0x07, 0xA2,  // .....F..
                /* 2DE8 */  0x11, 0x1A, 0x1D, 0x5E, 0x28, 0x88, 0x0E, 0xED,  // ...^(...
                /* 2DF0 */  0x24, 0xD2, 0x20, 0x29, 0x88, 0x0E, 0x98, 0x24,  // $. )...$
                /* 2DF8 */  0x13, 0x10, 0x8B, 0x0B, 0xA2, 0x03, 0x1A, 0xE9,  // ........
                /* 2E00 */  0x34, 0x78, 0x0A, 0x22, 0x60, 0x52, 0x0A, 0x98,  // 4x."`R..
                /* 2E08 */  0x82, 0xE8, 0x70, 0x43, 0x52, 0x1D, 0x26, 0x28,  // ..pCR.&(
                /* 2E10 */  0x88, 0x0E, 0x16, 0xA4, 0x15, 0x10, 0x93, 0x04,  // ........
                /* 2E18 */  0xA2, 0x83, 0x09, 0x01, 0xA2, 0x61, 0x81, 0x68,  // .....a.h
                /* 2E20 */  0xDA, 0x5A, 0x83, 0xA2, 0x20, 0x3A, 0xB4, 0x92,  // .Z.. :..
                /* 2E28 */  0x5C, 0x40, 0x4C, 0x45, 0x2F, 0x20, 0x96, 0x09,  // \@LE/ ..
                /* 2E30 */  0x44, 0x87, 0x46, 0x02, 0x44, 0xD5, 0x06, 0x1B,  // D.F.D...
                /* 2E38 */  0x38, 0x05, 0xD1, 0xC1, 0x9B, 0x24, 0x3B, 0x14,  // 8....$;.
                /* 2E40 */  0x50, 0x10, 0x01, 0x39, 0x4A, 0x33, 0x20, 0x16,  // P..9J3 .
                /* 2E48 */  0x0C, 0x44, 0x87, 0x62, 0x52, 0xED, 0x70, 0x44,  // .D.bR.pD
                /* 2E50 */  0x41, 0x74, 0x98, 0x24, 0xD9, 0x80, 0x58, 0x28,  // At.$..X(
                /* 2E58 */  0x10, 0x01, 0x39, 0x5A, 0xB8, 0x83, 0x0C, 0x05,  // ..9Z....
                /* 2E60 */  0xD1, 0x61, 0x8E, 0x94, 0x03, 0x62, 0x21, 0x40,  // .a...b!@
                /* 2E68 */  0x74, 0x70, 0x24, 0xED, 0x80, 0x29, 0x88, 0x06,  // tp$..)..
                /* 2E70 */  0x45, 0xE2, 0x0D, 0x8A, 0x82, 0xE8, 0xE0, 0x40,  // E......@
                /* 2E78 */  0xF2, 0x0D, 0x9C, 0x82, 0xE8, 0xA0, 0xCA, 0x80,  // ........
                /* 2E80 */  0xD8, 0x41, 0x35, 0x10, 0xCB, 0x5F, 0xF0, 0x30,  // .A5.._.0
                /* 2E88 */  0x42, 0x13, 0xFE, 0xFF, 0x0F, 0x0E, 0x14, 0x44,  // B......D
                /* 2E90 */  0x07, 0x07, 0x02, 0x44, 0xB3, 0x46, 0x3C, 0xD8,  // ...D.F<.
                /* 2E98 */  0x50, 0x10, 0x1D, 0xB0, 0x49, 0x46, 0x20, 0x26,  // P...IF &
                /* 2EA0 */  0xA4, 0xE3, 0xE1, 0x81, 0x86, 0x04, 0x62, 0xAA,  // ......b.
                /* 2EA8 */  0x40, 0x74, 0x60, 0x20, 0x29, 0x0F, 0x49, 0x14,  // @t` ).I.
                /* 2EB0 */  0x44, 0x87, 0x2F, 0x12, 0xF3, 0x30, 0x44, 0x41,  // D./..0DA
                /* 2EB8 */  0x74, 0x78, 0x20, 0x35, 0x0F, 0x0F, 0x14, 0x44,  // tx 5...D
                /* 2EC0 */  0x07, 0x06, 0xD2, 0xF3, 0xC0, 0x40, 0x41, 0x74,  // .....@At
                /* 2EC8 */  0xF8, 0x24, 0x41, 0x81, 0x98, 0x62, 0x10, 0x1D,  // .$A..b..
                /* 2ED0 */  0xB8, 0x48, 0xD2, 0x03, 0x17, 0x05, 0xD1, 0x01,  // .H......
                /* 2ED8 */  0x8A, 0x44, 0x3D, 0x34, 0x50, 0x10, 0x0D, 0x96,  // .D=4P...
                /* 2EE0 */  0x64, 0x1D, 0x2C, 0x05, 0xD1, 0x20, 0x48, 0x5A,  // d.,.. HZ
                /* 2EE8 */  0x10, 0x96, 0x0A, 0x84, 0xB7, 0x3D, 0xFA, 0xD0,  // .....=..
                /* 2EF0 */  0xBC, 0x20, 0x4C, 0x73, 0x5F, 0x10, 0x1A, 0x78,  // . Ls_..x
                /* 2EF8 */  0x00, 0xB4, 0xF1, 0x71, 0x85, 0x46, 0x06, 0xA1,  // ...q.F..
                /* 2F00 */  0x95, 0x8F, 0x08, 0x34, 0xF4, 0x80, 0x29, 0x08,  // ...4..).
                /* 2F08 */  0x2F, 0x0D, 0xC2, 0xFE, 0xFF                     // /....
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (Zero) {}
                ElseIf ((Arg0 == 0xE2))
                {
                    Return (EVT1) /* \GSA1.EVT1 */
                }

                Return (Zero)
            }

            Name (SAA0, Buffer (0x10)
            {
                /* 0000 */  0xF0, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00   // ........
            })
            Name (CCAA, Zero)
            Name (CCAB, Zero)
            Name (CCAC, Zero)
            Name (ECD0, Zero)
            Name (ECD1, Zero)
            Name (ECD2, Zero)
            Method (WCAA, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCAA == Zero)) {}
                }
                ElseIf ((CCAA != Zero)) {}
                CCAA = Arg0
            }

            Method (WED0, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD0 == Zero)) {}
                }
                ElseIf ((ECD0 != Zero)) {}
                ECD0 = Arg0
            }

            Method (WED1, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD1 == Zero)) {}
                }
                ElseIf ((ECD1 != Zero)) {}
                ECD1 = Arg0
            }

            Method (WED2, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD2 == Zero)) {}
                }
                ElseIf ((ECD2 != Zero)) {}
                ECD2 = Arg0
            }

            Method (GETA, 1, NotSerialized)
            {
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WQAA, 1, NotSerialized)
            {
                Return (GETA (Arg0))
            }

            Method (SETA, 2, NotSerialized)
            {
                SAA0 = Arg1
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (SETA (Arg0, Arg1))
            }

            Name (DDDD, Zero)
            Method (WMBB, 3, Serialized)
            {
                DDDD++
                If (Zero) {}
                ElseIf ((Arg1 == One))
                {
                    Return (GGG1 ())
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Return (GGG2 ())
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Return (GGG3 ())
                }
                ElseIf ((Arg1 == 0x04))
                {
                    Return (GGG4 ())
                }
                ElseIf ((Arg1 == 0x05))
                {
                    Return (GGG5 ())
                }
                ElseIf ((Arg1 == 0x06))
                {
                    Return (GGG6 ())
                }
                ElseIf ((Arg1 == 0x07))
                {
                    Return (GGG7 ())
                }
                ElseIf ((Arg1 == 0x08))
                {
                    Return (GGG8 ())
                }
                ElseIf ((Arg1 == 0x0A))
                {
                    Return (ToBuffer (GGG9 (Arg2)))
                }
                ElseIf ((Arg1 == 0x0D))
                {
                    CreateWordField (Arg2, Zero, GGGI)
                    CreateWordField (Arg2, 0x02, GGGJ)
                    CreateWordField (Arg2, 0x04, GGGK)
                    GGGH (GGGI, GGGJ, GGGK)
                }
                ElseIf ((Arg1 == 0x0E))
                {
                    \GSA1.MPTS (ToInteger (Arg2))
                }
                ElseIf ((Arg1 == 0x0F))
                {
                    \GSA1.MWAK (ToInteger (Arg2))
                }
                ElseIf ((Arg1 == 0x10))
                {
                    Return (GGGM ())
                }
                ElseIf (((Arg1 >= 0x5E) && (Arg1 <= 0x6D)))
                {
                    Name (SMD9, Buffer (0x04) {})
                    CreateWordField (SMD9, Zero, SMDA)
                    CreateDWordField (SMD9, Zero, SMDB)
                    CreateByteField (Arg2, Zero, SMD7)
                    CreateByteField (Arg2, One, SMD2)
                    CreateByteField (Arg2, 0x02, SMD3)
                    CreateByteField (Arg2, 0x03, SMD4)
                    CreateWordField (Arg2, 0x04, SMD5)
                    If ((Arg1 == 0x5E))
                    {
                        Local0 = SMMH (SMD7, SMD2, SMD3, SMD5)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x5F))
                    {
                        Local0 = SMMG (SMD7, SMD2, SMD3, SMD4)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x60))
                    {
                        CreateDWordField (Arg2, 0x03, SMDE)
                        CreateField (Arg2, 0x38, (SMDE * 0x08), SMDF)
                        Local0 = SMMF (SMD7, SMD2, SMD3, SMDF)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x61))
                    {
                        Local0 = Zero
                        If ((SMD7 == 0x02))
                        {
                            Local0 = SMBB ()
                        }
                        ElseIf ((SMD7 == 0x03))
                        {
                            Local0 = SMAB ()
                        }

                        Return (ToBuffer (Local0))
                    }
                    ElseIf ((Arg1 == 0x62))
                    {
                        Local0 = SMMC (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x63))
                    {
                        Local0 = SMMD (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x64))
                    {
                        Local0 = SMBB ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x65))
                    {
                        Local0 = SMM0 (SMD7, SMD2, SMD3)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x66))
                    {
                        Local0 = SMM1 (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x67))
                    {
                        Local0 = SMM2 (SMD7, SMD2, SMD3, SMD4)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x68))
                    {
                        Local0 = SMM3 (SMD7, SMD2, SMD3)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x69))
                    {
                        Local0 = SMM4 (SMD7, SMD2, SMD3, SMD5)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6A))
                    {
                        Local0 = SMM5 (SMD7, SMD2, SMD3)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6B))
                    {
                        CreateDWordField (Arg2, 0x03, SMD8)
                        CreateField (Arg2, 0x38, (SMD8 * 0x08), SMD6)
                        Local0 = SMM6 (SMD7, SMD2, SMD3, SMD6)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6C))
                    {
                        Local0 = SMM7 (SMD7, SMD2, SMD3)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6D))
                    {
                        CreateDWordField (Arg2, 0x03, SMDC)
                        CreateField (Arg2, 0x38, (SMDC * 0x08), SMDD)
                        Local0 = SMMB (SMD7, SMD2, SMD3, SMDD)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                }
                ElseIf (((Arg1 >= 0x6E) && (Arg1 <= 0x75)))
                {
                    CreateWordField (Arg2, Zero, PID0)
                    CreateByteField (Arg2, 0x02, PID1)
                    CreateWordField (Arg2, 0x02, PID2)
                    CreateDWordField (Arg2, 0x02, PID3)
                    If ((Arg1 == 0x6E))
                    {
                        Local0 = PIO6 (PID0, Zero)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6F))
                    {
                        PIO7 (PID0, Zero, PID1)
                    }
                    ElseIf ((Arg1 == 0x70))
                    {
                        Local0 = PIO6 (PID0, One)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x71))
                    {
                        PIO7 (PID0, One, PID2)
                    }
                    ElseIf ((Arg1 == 0x72))
                    {
                        Local0 = PIO6 (PID0, 0x02)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x73))
                    {
                        PIO7 (PID0, 0x02, PID3)
                    }
                }
                ElseIf ((Arg1 == 0x76)) {}
                ElseIf ((Arg1 == 0x77)) {}
                ElseIf (((Arg1 >= 0x78) && (Arg1 <= 0x8B)))
                {
                    CreateByteField (Arg2, Zero, PCE0)
                    CreateByteField (Arg2, One, PCE1)
                    CreateByteField (Arg2, 0x02, PCE2)
                    CreateWordField (Arg2, 0x04, PCE3)
                    CreateByteField (Arg2, 0x06, PCE4)
                    CreateWordField (Arg2, 0x06, PCE5)
                    CreateDWordField (Arg2, 0x08, PCE6)
                    CreateQWordField (Arg2, 0x08, PCE7)
                    If ((Arg1 == 0x78))
                    {
                        Local0 = PCI4 ()
                        Return (ToBuffer (Local0))
                    }
                    ElseIf ((Arg1 == 0x79))
                    {
                        Return (PCIE (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7A))
                    {
                        PCIF (PCE0, PCE1, PCE2, PCE3, PCE4)
                    }
                    ElseIf ((Arg1 == 0x7B))
                    {
                        Return (PCIG (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7C))
                    {
                        PCIH (PCE0, PCE1, PCE2, PCE3, PCE5)
                    }
                    ElseIf ((Arg1 == 0x7D))
                    {
                        Return (PCI7 (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7E))
                    {
                        PCI8 (PCE0, PCE1, PCE2, PCE3, PCE6)
                    }
                    ElseIf ((Arg1 == 0x7F))
                    {
                        Local2 = PCII (PCE0, PCE1, PCE2, PCE3)
                        Return (ToBuffer (Local2))
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        PCIJ (PCE0, PCE1, PCE2, PCE3, PCE7)
                    }

                    CreateByteField (Arg2, 0x06, PCE8)
                    CreateByteField (Arg2, 0x07, PCE9)
                    CreateDWordField (Arg2, 0x08, PCEA)
                    CreateQWordField (Arg2, 0x08, PCEB)
                    If ((Arg1 == 0x81))
                    {
                        If (((((((PCE8 + PCE9) <= 0x40) && 
                            (PCE0 <= 0xFF)) && (PCE1 <= 0x1F)) && (PCE2 <= 0x07)) && 
                            (PCE3 <= 0x03FF)))
                        {
                            Return (ToBuffer (PCI5 (PCE0, PCE1, PCE2, PCE3, PCE8, PCE9)))
                        }
                        Else
                        {
                            Return (Ones)
                        }
                    }
                    ElseIf ((Arg1 == 0x82))
                    {
                        If (((((((PCE8 + PCE9) <= 0x40) && 
                            (PCE0 <= 0xFF)) && (PCE1 <= 0x1F)) && (PCE2 <= 0x07)) && 
                            (PCE3 <= 0x03FF)))
                        {
                            PCI6 (PCE0, PCE1, PCE2, PCE3, PCE8, PCE9, PCEB)
                        }
                    }
                }
                ElseIf (((Arg1 >= 0x8C) && (Arg1 <= 0x9F)))
                {
                    CreateQWordField (Arg2, Zero, MED0)
                    CreateByteField (Arg2, 0x08, MED1)
                    CreateWordField (Arg2, 0x08, MED2)
                    CreateDWordField (Arg2, 0x08, MED3)
                    CreateQWordField (Arg2, 0x08, MED4)
                    CreateQWordField (Arg2, Zero, MED5)
                    CreateByteField (Arg2, 0x08, MED6)
                    CreateByteField (Arg2, 0x09, MED7)
                    CreateDWordField (Arg2, 0x0C, MED8)
                    CreateQWordField (Arg2, Zero, MED9)
                    CreateByteField (Arg2, 0x08, MEDA)
                    CreateByteField (Arg2, 0x09, MEDB)
                    CreateQWordField (Arg2, 0x10, MEDC)
                    If ((Arg1 == 0x8C))
                    {
                        Return (MEM4 (MED0, Zero))
                    }
                    ElseIf ((Arg1 == 0x8D))
                    {
                        MEM5 (MED0, Zero, MED1)
                    }
                    ElseIf ((Arg1 == 0x8E))
                    {
                        Return (MEM4 (MED0, One))
                    }
                    ElseIf ((Arg1 == 0x8F))
                    {
                        MEM5 (MED0, One, MED2)
                    }
                    ElseIf ((Arg1 == 0x90))
                    {
                        Return (MEM4 (MED0, 0x02))
                    }
                    ElseIf ((Arg1 == 0x91))
                    {
                        MEM5 (MED0, 0x02, MED3)
                    }
                    ElseIf ((Arg1 == 0x92))
                    {
                        Return (ToBuffer (MEM4 (MED0, 0x03)))
                    }
                    ElseIf ((Arg1 == 0x93))
                    {
                        MEM5 (MED0, 0x03, MED4)
                    }
                    ElseIf ((Arg1 == 0x94))
                    {
                        If (((MEDA + MEDB) <= 0x40))
                        {
                            Return (ToBuffer (MEMC (MED9, MEDA, MEDB)))
                        }
                        Else
                        {
                            Return (Ones)
                        }
                    }
                    ElseIf ((Arg1 == 0x95))
                    {
                        If (((MEDA + MEDB) <= 0x40))
                        {
                            MEMD (MED9, MEDA, MEDB, MEDC)
                        }
                    }
                }
                ElseIf ((Arg1 == 0xBE))
                {
                    EVT2 (Arg2)
                }
                ElseIf ((Arg1 == 0x09))
                {
                    Return (EZW2) /* \GSA1.EZW2 */
                }
                ElseIf (((Arg1 >= 0x0114) && (Arg1 <= 0x0121)))
                {
                    CreateDWordField (Arg2, Zero, EZVD)
                    CreateQWordField (Arg2, 0x08, EZW6)
                    CreateDWordField (Arg2, 0x04, EZVE)
                    CreateWordField (Arg2, 0x04, EZVL)
                    If ((Arg1 == 0x0114))
                    {
                        Return (EZW7 (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x0115))
                    {
                        Return (EZW8 (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x0116))
                    {
                        Local0 = EZVH (EZVD)
                        If ((ObjectType (Local0) == 0x02))
                        {
                            Local1 = EZVK (EZVD, Local0)
                            Local2 = EZW7 (EZVD, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((Arg1 == 0x0117))
                    {
                        Local0 = EZW8 (EZVD, EZVE)
                        If ((Local0 != Ones))
                        {
                            Local1 = EZVJ (EZVD, Local0)
                            EZVI (EZVD, Local1)
                        }
                    }
                    ElseIf ((Arg1 == 0x0118))
                    {
                        Return (EZV3 (EZVD))
                    }
                    ElseIf ((Arg1 == 0x0119))
                    {
                        EZV4 (EZVD, EZVE)
                    }
                    ElseIf ((Arg1 == 0x011A))
                    {
                        Return (EZV6 ())
                    }
                    ElseIf ((Arg1 == 0x011B))
                    {
                        Return (EZVF (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x011C))
                    {
                        Return (EZVG (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x011D))
                    {
                        Return (EZV0 (EZVD))
                    }
                    ElseIf ((Arg1 == 0x011E))
                    {
                        Return (EZVJ (EZVD, DerefOf (Arg2 [0x04])))
                    }
                    ElseIf ((Arg1 == 0x011F))
                    {
                        Name (B2F2, Buffer (0x3C) {})
                        Local0 = EZVL /* \GSA1.WMBB.EZVL */
                        Local1 = Zero
                        While (((Local1 * 0x02) < Local0))
                        {
                            B2F2 [Local1] = DerefOf (Arg2 [(0x06 + (Local1 * 
                                0x02))])
                            Local1++
                        }

                        Local3 = ToString (B2F2, Local1)
                        Return (EZVK (EZVD, Local3))
                    }
                    ElseIf ((Arg1 == 0x0120))
                    {
                        Return (EZVH (EZVD))
                    }
                    ElseIf ((Arg1 == 0x0121))
                    {
                        Name (B1F1, Buffer (0x3C) {})
                        Local0 = EZVL /* \GSA1.WMBB.EZVL */
                        Local1 = Zero
                        While (((Local1 * 0x02) < Local0))
                        {
                            B1F1 [Local1] = DerefOf (Arg2 [(0x06 + (Local1 * 
                                0x02))])
                            Local1++
                        }

                        Local3 = ToString (B1F1, Local1)
                        EZVI (EZVD, Local3)
                    }
                }
                ElseIf ((Arg1 == 0x0122))
                {
                    Return (ZRC9 ())
                }
                ElseIf ((Arg1 == 0x0123))
                {
                    Return (ZRCY (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0124))
                {
                    ZRCZ (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0125))
                {
                    Return (ZRCD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0126))
                {
                    ZRCE (DerefOf (Arg2 [Zero]))
                }
                ElseIf ((Arg1 == 0x0127))
                {
                    Return (ZRCW (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0128))
                {
                    ZRCX (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0129))
                {
                    Return (ZRCA (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x012A))
                {
                    ZRC7 (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]), DerefOf (
                        Arg2 [0x02]))
                    Return (ToHexString (ZRCL, Local1))
                }
                ElseIf ((Arg1 == 0x012B))
                {
                    ZRCM (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x012C))
                {
                    Return (DIMC ())
                }
                ElseIf ((Arg1 == 0x012D))
                {
                    Return (DIMH (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0130))
                {
                    Return (DIMD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0136))
                {
                    Return (DIM1 (DerefOf (Arg2 [Zero])))
                }
            }

            Method (ADBG, 1, Serialized)
            {
                If (CondRefOf (\MDBG))
                {
                    Return (\MDBG (Arg0))
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ArticNOI", 0x00000001)
{
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.VGA_.AFNC, MethodObj)    // 2 Arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : A9
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FD210510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 00000000BD051000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 A9 41 4C 41 53 4B 41  // TPM2L.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 10 05 BD 00 00 00 00              // ............


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000AC84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 44164 (0xAC84)

    0000: 56 46 43 54 84 AC 00 00 01 7F 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 3F 74 00 00 00 00  // ..........?t....
    0060: 01 00 00 00 00 AC 00 00 55 AA 56 E9 26 26 00 00  // ........U.V.&&..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 5C 03 00 00 00 00 49 42 4D 19 A4 A1 00 00 00 00  // \.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 30 03 00 00 00 00 00 00 31 32 2F 33 30 2F 32 31  // 0.......12/30/21
    00C0: 20 30 30 3A 34 36 00 00 38 00 00 00 E9 19 27 00  //  00:46..8.....'.
    00D0: E9 23 27 00 00 00 10 02 0D 00 00 00 01 02 40 00  // .#'...........@.
    00E0: 00 C1 3F 74 00 00 00 00 69 00 69 00 55 00 00 00  // ..?t....i.i.U...
    00F0: 5A 00 D0 07 AC 0D D8 0E 7C 99 05 00 00 00 00 00  // Z.......|.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0160: 00 00 00 00 16 00 34 03 0F FC 40 01 00 00 00 00  // ......4...@.....
    0170: 08 00 08 00 08 80 41 CC F3 28 42 CD A3 10 80 E8  // ......A..(B.....
    0180: 0D 7E E3 78 CE FF FF 00 00 00 00 00 00 20 7E C5  // .~.x......... ~.
    0190: FF 01 00 00 00 00 00 00 00 00 F0 43 87 B2 6A 3A  // ...........C..j:
    01A0: 47 3A C7 00 10 00 00 33 00 2E 74 53 05 80 0F 08  // G:.....3..tS....
    01B0: 21 04 FF 3C 00 C0 22 02 02 A2 82 04 65 D5 74 0E  // !..<..".....e.t.
    01C0: 00 E0 81 0A 00 1E 90 08 F0 3E A7 68 C4 48 21 00  // .........>.h.H!.
    01D0: 21 00 21 00 01 00 C0 02 48 02 91 01 02 00 18 80  // !.!.....H.......
    01E0: 01 40 06 06 1E 11 07 52 80 18 0C 0E 12 00 00 00  // .@.....R........
    01F0: 0E F0 02 00 00 00 08 00 80 01 06 00 08 40 18 10  // .............@..
    0200: 70 00 00 00 20 00 00 00 04 00 00 00 1C 04 00 00  // p... ...........
    0210: C8 F0 FF 00 30 00 00 00 00 00 F8 08 40 00 00 00  // ....0.......@...
    0220: 00 00 00 04 00 00 00 00 1C 32 00 30 52 54 90 00  // .........2.0RT..
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E4  // ................
    0240: 27 09 40 10 18 00 64 00 00 00 00 C0 98 07 00 00  // '.@...d.........
    0250: 40 FA 01 A0 00 24 00 00 00 80 10 90 01 18 00 00  // @....$..........
    0260: 08 00 80 81 47 01 00 F0 A0 1F 11 30 00 00 00 00  // ....G......0....
    0270: 82 FC D0 41 05 89 00 04 31 31 33 2D 30 30 31 2D  // ...A....113-001-
    0280: 58 54 37 00 4E 41 56 49 32 34 00 50 43 49 5F 45  // XT7.NAVI24.PCI_E
    0290: 58 50 52 45 53 53 00 47 44 44 52 36 00 0D 0A 4E  // XPRESS.GDDR6...N
    02A0: 41 56 49 32 34 20 58 54 20 41 30 20 34 47 42 20  // AVI24 XT A0 4GB 
    02B0: 47 36 20 4D 30 31 30 32 4A 41 42 2E 52 4F 4D 20  // G6 M0102JAB.ROM 
    02C0: 38 35 57 20 47 32 31 30 20 31 31 33 20 20 20 20  // 85W G210 113    
    02D0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02E0: 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A  //            .....
    02F0: 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 32  //  ...(C) 1988-202
    0300: 30 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72  // 0, Advanced Micr
    0310: 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00  // o Devices, Inc..
    0320: 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56  // ATOMBIOSBK-AMD V
    0330: 45 52 30 32 30 2E 30 30 34 2E 30 30 30 2E 30 32  // ER020.004.000.02
    0340: 38 2E 30 30 30 30 30 30 00 4D 30 31 30 32 4A 41  // 8.000000.M0102JA
    0350: 42 2E 52 4F 4D 00 32 33 38 34 34 31 31 20 00 35  // B.ROM.2384411 .5
    0360: 39 38 37 34 32 20 20 00 20 20 20 20 20 20 20 20  // 98742  .        
    0370: 00 54 55 4C 5F 4E 41 56 49 32 34 5F 50 32 31 47  // .TUL_NAVI24_P21G
    0380: 5F 53 41 4D 5F 34 47 5F 4E 49 43 4B 5C 63 6F 6E  // _SAM_4G_NICK\con
    0390: 66 69 67 2E 68 00 00 00 2C 00 02 03 41 54 4F 4D  // fig.h...,...ATOM
    03A0: 00 C0 2B 27 E1 02 81 03 35 02 5E 27 00 00 00 00  // ..+'....5.^'....
    03B0: 8C 14 15 24 5C 03 F0 A4 B4 03 00 00 58 0A 00 00  // ...$\.......X...
    03C0: 00 00 03 00 50 43 49 52 02 10 3F 74 00 00 18 00  // ....PCIR..?t....
    03D0: 00 00 00 03 56 00 04 14 00 00 00 00 41 4D 44 20  // ....V.......AMD 
    03E0: 41 54 4F 4D 42 49 4F 53 00 DC 7E ED 52 00 00 00  // ATOMBIOS..~.R...
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 4A 00 02 01  // ............J...
    0420: 00 00 00 00 28 08 28 1A BC 07 F0 1A 00 04 5C 04  // ....(.(.......\.
    0430: 50 09 44 0A 00 00 30 0C 34 06 24 1B 3C 0C AC 1B  // P.D...0.4.$.<...
    0440: 00 00 98 1B 94 0C 00 00 B4 0C C8 0C 74 07 20 1A  // ............t. .
    0450: D4 0C 00 00 00 00 A0 06 24 0D 00 00 00 00 00 00  // ........$.......
    0460: B4 19 00 00 00 00 00 00 5C 00 02 01 00 00 00 00  // ........\.......
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 06 00 00 00 C8 00 00 00 00 00 34 21  // ..............4!
    0490: 00 00 B8 0B 00 00 00 00 7D 00 00 01 00 00 00 00  // ........}.......
    04A0: 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 D8 01 05 04 10 00 38 00 4C 00 60 01  // ..........8.L.`.
    04D0: 78 01 48 00 30 75 00 00 0C 00 03 05 3E 00 00 00  // x.H.0u......>...
    04E0: 40 9C 00 00 0C 00 03 05 3E 00 00 00 FF FF FF 00  // @.......>.......
    04F0: 0C 00 03 05 77 21 00 00 00 00 00 00 FF FF FF 00  // ....w!..........
    0500: 0C 00 03 04 3E 00 00 00 00 00 00 00 00 00 00 00  // ....>...........
    0510: 48 3F 00 00 03 00 44 00 00 16 00 00 00 04 01 1F  // H?....D.........
    0520: 00 00 00 04 02 2C 00 00 00 04 03 3E 00 00 00 04  // .....,.....>....
    0530: 08 1B 50 00 00 04 09 25 60 00 00 04 0A 35 90 00  // ..P....%`....5..
    0540: 00 04 10 21 B0 00 00 04 11 2F F0 00 00 04 18 2A  // ...!...../.....*
    0550: 40 01 00 04 78 69 00 00 03 00 44 00 00 16 00 00  // @...xi....D.....
    0560: 00 04 01 1F 00 00 00 04 02 2C 00 00 00 04 03 3E  // .........,.....>
    0570: 00 00 00 04 08 1B 50 00 00 04 09 25 60 00 00 04  // ......P....%`...
    0580: 0A 35 90 00 00 04 10 21 B0 00 00 04 11 2F F0 00  // .5.....!...../..
    0590: 00 04 18 2A 40 01 00 04 F0 D2 00 00 03 00 44 00  // ...*@.........D.
    05A0: 00 1D 00 00 00 04 01 26 00 00 00 04 02 30 00 00  // .......&.....0..
    05B0: 00 04 03 3E 00 00 00 04 08 22 40 00 00 04 09 2C  // ...>....."@....,
    05C0: 60 00 00 04 0A 37 70 00 00 04 10 27 90 00 00 04  // `....7p....'....
    05D0: 11 32 C0 00 00 04 18 2E 00 01 00 04 68 3C 01 00  // .2..........h<..
    05E0: 03 00 44 00 00 1D 00 00 00 04 01 26 00 00 00 04  // ..D........&....
    05F0: 02 30 00 00 00 04 03 3E 00 00 00 04 08 22 40 00  // .0.....>....."@.
    0600: 00 04 09 2C 60 00 00 04 0A 37 70 00 00 04 10 27  // ...,`....7p....'
    0610: 90 00 00 04 11 32 C0 00 00 04 18 2E 00 01 00 04  // .....2..........
    0620: 00 00 00 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0630: 00 01 02 03 02 03 00 01 00 07 05 00 08 30 00 00  // .............0..
    0640: 9B 00 00 00 07 30 00 00 46 25 00 00 08 31 00 00  // .....0..F%...1..
    0650: 9B 00 00 00 07 31 00 00 46 25 00 00 08 32 00 00  // .....1..F%...2..
    0660: 9B 00 00 00 07 32 00 00 46 25 00 00 08 33 00 00  // .....2..F%...3..
    0670: 9B 00 00 00 07 33 00 00 46 25 00 00 56 00 00 00  // .....3..F%..V...
    0680: 05 00 00 00 46 00 00 00 30 00 00 00 50 00 00 00  // ....F...0...P...
    0690: 30 00 00 00 FF FF FF FF 00 00 00 00 6C 00 02 01  // 0...........l...
    06A0: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    06B0: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    06C0: B5 5D 00 00 1A 18 05 00 B5 5D 00 00 1C 1C 06 00  // .].......]......
    06D0: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    06E0: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    06F0: A1 5D 00 00 08 08 94 00 A5 5D 00 00 08 08 95 00  // .].......]......
    0700: A9 5D 00 00 08 08 97 00 D4 00 04 04 00 00 00 00  // .]..............
    0710: 24 F4 00 00 10 27 88 13 00 00 00 00 00 00 00 00  // $....'..........
    0720: 5E 01 4E 0C 01 01 00 00 55 00 00 00 10 27 3F 74  // ^.N.....U....'?t
    0730: 00 03 02 01 00 02 02 00 C8 91 05 00 80 EA 82 2B  // ...............+
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 01 00  // ............T...
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 10 11 3D 10  // ..............=.
    0760: 4D 1C 02 00 00 45 00 00 00 00 00 00 00 00 00 00  // M....E..........
    0770: 00 00 00 00 00 00 AA 0A 22 00 00 00 AA FA 03 00  // ........".......
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 48 00 01 04  // ............H...
    07E0: 88 00 02 00 13 31 28 00 1E 21 00 00 3A 00 00 00  // .....1(..!..:...
    07F0: 08 00 00 00 0C 31 31 00 1E 22 00 00 41 00 00 00  // .....11.."..A...
    0800: 80 00 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    0810: 00 02 04 02 00 FF 14 06 0F 0E 00 00 FF 14 06 0F  // ................
    0820: 0E 00 00 FF 6C 00 03 04 1C 00 04 14 50 C3 00 00  // ....l.......P...
    0830: 74 B7 01 00 01 54 04 00 00 00 00 00 4C 00 00 00  // t....T......L...
    0840: E8 03 84 03 46 05 52 03 01 00 00 00 80 00 00 00  // ....F.R.........
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 DC 05 00 00 84 03 84 03 46 05 84 03  // ............F...
    0870: 00 00 00 00 00 00 00 00 00 0C 00 00 61 60 01 00  // ............a`..
    0880: 00 00 00 80 80 8D 5B 00 00 00 00 00 00 00 00 00  // ......[.........
    0890: 28 01 04 09 00 01 00 00 00 01 01 00 00 01 00 00  // (...............
    08A0: 01 02 01 00 00 01 00 00 02 03 01 00 00 01 00 00  // ................
    08B0: 03 04 01 00 00 01 00 00 04 05 00 00 00 01 00 00  // ................
    08C0: 05 06 00 00 00 00 00 00 06 07 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 FF FF 00 00 00 02 01 03 03 0C C0 30  // ...............0
    0920: D2 00 00 00 15 00 00 00 15 00 00 00 15 00 00 00  // ................
    0930: 00 80 01 00 FF 00 05 00 05 00 FF 00 FF FF FF 00  // ................
    0940: FF FF 00 00 01 20 1F 00 01 20 1F 00 01 14 21 00  // ..... ... ....!.
    0950: 00 00 1F 00 0F 00 00 00 10 00 00 00 55 00 00 00  // ............U...
    0960: 00 00 00 00 00 00 00 00 E2 04 E2 04 E2 04 E2 04  // ................
    0970: A0 0F A0 0F A0 0F A0 0F 01 00 00 00 14 14 14 14  // ................
    0980: 14 14 14 14 14 14 14 14 14 14 14 14 98 3A 00 00  // .............:..
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 F4 00 03 05 01 0B 00 00  // ................
    09C0: D0 07 4E 0C 00 00 4E 0C 10 27 00 00 C8 91 05 00  // ..N...N..'......
    09D0: 20 A1 07 00 FF 00 00 00 00 53 07 00 30 75 00 00  //  ........S..0u..
    09E0: 0C A3 00 00 B0 81 00 00 B0 CC 00 00 CC F1 00 00  // ................
    09F0: 48 A3 00 00 00 00 00 00 20 30 05 00 00 00 00 00  // H....... 0......
    0A00: 70 DF 00 00 D4 30 00 00 12 00 00 00 00 00 00 00  // p....0..........
    0A10: 28 1D 01 00 A0 09 01 00 00 00 00 00 33 33 81 01  // (...........33..
    0A20: 7D 1A 09 96 30 14 C9 02 90 01 90 01 24 04 18 00  // }...0.......$...
    0A30: 28 1D 01 00 88 13 00 00 02 00 00 00 02 00 00 00  // (...............
    0A40: 02 00 00 00 02 00 00 00 01 00 00 00 01 00 00 00  // ................
    0A50: 01 80 00 00 7D 1F 1E 96 05 80 00 00 FF FF 0F 00  // ....}...........
    0A60: 71 00 FF 2F 4D 00 00 A5 00 00 00 00 00 00 00 00  // q../M...........
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 EC 01 02 06  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 24 50 53 50 61 2B 20 E3 1B 00 00 00 00 00 00 00  // $PSPa+ .........
    0AD0: 00 00 00 00 40 04 00 00 00 00 03 00 00 00 00 00  // ....@...........
    0AE0: 01 00 00 00 00 30 00 00 00 00 05 00 00 00 00 00  // .....0..........
    0AF0: 03 00 00 00 00 30 00 00 00 30 05 00 00 00 00 00  // .....0...0......
    0B00: 04 00 00 00 00 AC 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 05 00 00 00 00 01 00 00 00 0A 03 00 00 00 00 00  // ................
    0B20: 06 00 00 00 00 B0 00 00 00 F4 09 00 00 00 00 00  // ................
    0B30: 07 00 00 00 40 04 00 00 C0 0B 03 00 00 00 00 00  // ....@...........
    0B40: 09 00 00 00 08 00 00 00 18 0C 00 00 00 00 00 00  // ................
    0B50: 11 00 00 00 00 C2 00 00 00 20 06 00 00 00 00 00  // ......... ......
    0B60: 12 00 00 00 00 50 00 00 00 A4 07 00 00 00 00 00  // .....P..........
    0B70: 14 00 00 00 00 30 00 00 00 10 03 00 00 00 00 00  // .....0..........
    0B80: 21 00 00 00 C0 00 00 00 00 0B 03 00 00 00 00 00  // !...............
    0B90: 23 00 00 00 00 50 00 00 00 E4 0A 00 00 00 00 00  // #....P..........
    0BA0: 2D 00 00 00 00 A0 00 00 00 40 03 00 00 00 00 00  // -........@......
    0BB0: 2E 00 00 00 00 C0 00 00 00 60 05 00 00 00 00 00  // .........`......
    0BC0: 33 00 00 00 00 60 00 00 00 E0 03 00 00 00 00 00  // 3....`..........
    0BD0: 35 00 00 00 10 00 00 00 20 0C 00 00 00 00 00 00  // 5....... .......
    0BE0: 36 00 00 00 00 40 00 00 00 F4 07 00 00 00 00 00  // 6....@..........
    0BF0: 37 00 00 00 00 10 00 00 00 34 08 00 00 00 00 00  // 7........4......
    0C00: 38 00 00 00 40 04 00 00 00 05 03 00 00 00 00 00  // 8...@...........
    0C10: 3D 00 00 00 00 20 00 00 00 C4 09 00 00 00 00 00  // =.... ..........
    0C20: 40 00 00 00 00 30 00 00 00 A4 0A 00 00 00 00 00  // @....0..........
    0C30: 42 00 00 00 00 10 00 00 00 E4 09 00 00 00 00 00  // B...............
    0C40: 49 00 00 00 00 C0 00 00 00 40 04 00 00 00 00 00  // I........@......
    0C50: 4A 00 00 00 00 C2 00 00 00 E2 06 00 00 00 00 00  // J...............
    0C60: 4C 00 00 00 00 10 00 00 00 D4 0A 00 00 00 00 00  // L...............
    0C70: 71 00 00 00 00 80 01 00 00 44 08 00 00 00 00 00  // q........D......
    0C80: 01 00 00 00 00 00 00 00 03 01 00 00 00 0C 00 00  // ................
    0C90: 00 00 00 00 00 00 00 00 0C 00 02 01 00 00 00 00  // ................
    0CA0: 00 00 00 00 58 00 02 06 03 0A 01 00 08 02 04 02  // ....X...........
    0CB0: 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0 00 00  // d...e...f...g...
    0CC0: E8 C0 00 00 A0 21 00 00 03 6B 01 00 10 27 00 00  // .....!...k...'..
    0CD0: 08 04 01 00 00 00 00 00 9F 30 00 00 00 00 00 00  // .........0......
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 02 02  // ............ ...
    0D00: 00 00 00 00 00 00 00 00 08 00 00 00 04 00 00 00  // ................
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 14 00 02 02  // ................
    0D20: 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00  // ................
    0D30: 0C 00 02 02 08 00 00 00 00 00 00 00 50 00 03 03  // ............P...
    0D40: 00 00 00 00 00 20 06 00 00 C2 00 00 00 00 00 00  // ..... ..........
    0D50: 7D 00 E4 0C 08 08 70 00 10 27 00 00 74 B7 01 00  // }.....p..'..t...
    0D60: 10 08 01 00 B8 D3 00 00 E4 25 00 00 00 00 00 00  // .........%......
    0D70: 6B E1 CA 00 00 00 00 00 00 00 00 00 00 00 00 00  // k...............
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 90 0C 02 05  // ................
    0D90: B7 00 0F 01 13 07 8F 07 13 0C 00 00 00 00 00 00  // ................
    0DA0: 03 08 08 02 00 10 00 00 0F 00 00 00 00 00 2D 00  // ..............-.
    0DB0: 00 70 04 04 72 00 00 00 00 00 00 00 00 00 00 08  // .p..r...........
    0DC0: 00 00 00 04 00 00 04 00 00 00 0A 08 00 00 40 00  // ..............@.
    0DD0: 00 00 10 00 00 0F 00 00 00 00 00 37 00 00 70 04  // ...........7..p.
    0DE0: 04 72 00 00 00 00 00 00 00 00 00 81 08 00 00 00  // .r..............
    0DF0: 04 00 00 04 00 C0 00 0A 08 00 00 40 00 4B 34 5A  // ...........@.K4Z
    0E00: 41 46 33 32 35 42 4D 00 00 10 00 00 0F 00 00 00  // AF325BM.........
    0E10: 00 00 3B 00 00 70 04 04 72 01 00 00 00 00 00 00  // ..;..p..r.......
    0E20: 00 00 16 08 00 00 00 04 00 00 04 00 C0 00 0A 08  // ................
    0E30: 00 00 40 00 48 35 36 47 34 32 41 53 38 44 58 30  // ..@.H56G42AS8DX0
    0E40: 31 34 00 06 00 00 00 52 50 01 00 48 7E 01 01 4C  // 14.....RP..H~..L
    0E50: 7E 01 01 50 7E 01 01 54 7E 01 01 78 7E 01 01 FF  // ~..P~..T~..x~...
    0E60: FF FF 00 00 00 09 09 38 38 3E 49 08 08 10 6B 99  // .......88>I...k.
    0E70: 00 00 1B 27 88 07 00 82 F1 44 92 FF FF FF 01 00  // ...'.....D......
    0E80: 00 0A 0A 38 38 2A 42 06 06 10 6B DD 00 00 1B 28  // ...88*B...k....(
    0E90: 88 07 00 00 A1 28 82 00 00 00 00 A8 61 00 01 09  // .....(......a...
    0EA0: 05 09 0D DB 01 1E 0F 03 05 03 05 02 02 05 03 05  // ................
    0EB0: 08 02 03 01 0A 0A 0A 0A 02 04 0A 0A 1E 03 1E 48  // ...............H
    0EC0: E8 01 00 03 0C 0A 02 02 04 0A 10 15 01 02 09 04  // ................
    0ED0: 04 01 00 00 00 00 00 00 00 00 00 50 C3 00 01 0A  // ...........P....
    0EE0: 05 0F 17 B6 03 3C 1E 04 08 05 08 02 02 08 04 06  // .....<..........
    0EF0: 08 02 03 01 0A 0A 0A 0A 02 04 0A 0A 3C 05 3C 90  // ............<.<.
    0F00: D0 03 00 05 0C 0A 02 02 04 0A 11 1B 01 02 09 04  // ................
    0F10: 07 01 00 00 00 00 00 00 00 00 00 CC 55 01 01 0F  // ............U...
    0F20: 05 1B 29 7F 06 69 35 07 0E 08 0E 04 04 0E 06 08  // ..)..i5.........
    0F30: 10 02 03 02 0B 0A 0A 0A 02 04 0A 0A 69 09 69 FC  // ............i.i.
    0F40: AC 06 00 09 0C 0A 02 02 04 0A 17 28 01 02 0A 04  // ...........(....
    0F50: 0C 01 00 00 00 00 00 00 00 00 00 A0 86 01 01 10  // ................
    0F60: 05 1E 2D 6C 07 78 3C 08 0F 09 0F 04 04 10 06 08  // ..-l.x<.........
    0F70: 10 02 03 02 0C 0A 0A 0A 02 04 0A 0A 78 0A 78 20  // ............x.x 
    0F80: A1 07 00 0A 0C 0A 02 02 04 0A 18 2B 01 02 0A 04  // ...........+....
    0F90: 0D 01 00 00 00 00 00 00 00 00 00 48 E8 01 01 14  // ...........H....
    0FA0: 06 26 39 47 09 96 4B 0A 13 0C 13 05 05 14 07 09  // .&9G..K.........
    0FB0: 14 02 03 03 0D 0D 0A 0A 02 04 0D 0D 96 0D 96 68  // ...............h
    0FC0: 89 09 00 0D 0C 0A 02 02 05 0D 1D 33 01 02 0A 04  // ...........3....
    0FD0: 10 01 00 00 00 00 00 00 00 00 00 40 13 02 01 15  // ...........@....
    0FE0: 07 2D 44 18 0A B4 5A 0C 17 0E 17 06 06 18 08 0A  // .-D...Z.........
    0FF0: 18 02 03 03 0E 0F 0A 0A 02 04 0F 0F B4 0F B4 B0  // ................
    1000: 71 0B 00 0F 0C 0A 02 02 06 0F 1F 3C 01 02 0B 04  // q..........<....
    1010: 13 01 00 00 00 00 00 00 00 00 00 78 5D 02 01 16  // ...........x]...
    1020: 07 2D 44 81 0B B4 5A 0C 17 0E 17 06 06 18 08 0A  // .-D...Z.........
    1030: 18 02 03 03 0E 0F 0A 0A 02 04 0F 0F B4 0F B4 B0  // ................
    1040: 71 0B 00 0F 0C 0A 02 02 06 0F 1F 3C 01 02 0B 04  // q..........<....
    1050: 13 01 00 00 00 00 00 00 00 00 00 20 BF 02 01 18  // ........... ....
    1060: 07 34 4E 5C 0D D2 69 0E 1A 10 1A 08 08 1C 09 0B  // .4N\..i.........
    1070: 20 02 03 03 0F 12 0A 0A 02 04 12 12 D2 12 D2 F8  //  ...............
    1080: 59 0D 00 12 0C 0A 02 02 07 12 21 43 01 02 0B 04  // Y.........!C....
    1090: 16 01 00 00 00 00 00 00 00 00 00 B0 24 03 01 1A  // ............$...
    10A0: 08 3C 5A 4A 0F F0 78 10 1E 12 1E 08 08 1F 0A 0C  // .<ZJ..x.........
    10B0: 20 02 03 03 10 14 0A 0A 02 04 14 14 F0 14 F0 40  //  ..............@
    10C0: 42 0F 00 14 0C 0A 02 02 08 14 23 4C 01 02 0C 04  // B.........#L....
    10D0: 19 01 00 00 00 00 00 00 00 00 00 58 86 03 01 1C  // ...........X....
    10E0: 08 44 66 25 11 0E 87 12 24 15 22 09 09 22 0C 0E  // .Df%....$.".."..
    10F0: 24 02 03 03 11 17 0A 0A 02 04 17 17 0E 17 0E 88  // $...............
    1100: 2A 11 00 17 0C 0A 02 02 09 17 26 54 01 02 0C 04  // *.........&T....
    1110: 1C 01 01 01 01 00 00 00 00 00 00 20 A0 03 01 1D  // ........... ....
    1120: 08 48 6C A2 11 1D 8E 13 24 16 24 09 09 24 0D 0F  // .Hl.....$.$..$..
    1130: 24 02 04 03 11 18 0B 0B 02 04 18 18 1D 18 1D 9D  // $...............
    1140: 1A 12 00 18 0D 0B 02 02 09 18 28 59 02 02 0D 04  // ..........(Y....
    1150: 1E 01 01 01 01 00 00 00 00 00 00 58 B8 03 01 1E  // ...........X....
    1160: 08 4A 70 18 12 25 93 14 26 17 26 0A 0A 26 0D 10  // .Jp..%..&.&..&..
    1170: 28 02 04 03 11 1A 0B 0B 02 04 1A 1A 25 1A 25 F5  // (...........%.%.
    1180: 94 12 00 1A 0D 0B 02 02 0A 1A 29 5B 02 02 0D 04  // ..........)[....
    1190: 1F 01 01 01 01 00 00 00 00 00 00 4C 4F 00 02 09  // ...........LO...
    11A0: 05 06 0A 81 01 19 0D 03 04 03 04 02 02 04 04 04  // ................
    11B0: 08 02 03 00 00 03 0A 0A 02 03 04 08 19 03 1C 82  // ................
    11C0: 8B 01 00 03 0C 0A 02 02 04 08 0D 10 01 02 09 04  // ................
    11D0: 04 06 00 00 00 00 00 00 00 00 00 50 C3 00 02 10  // ...........P....
    11E0: 05 0E 16 B6 03 3C 1E 05 08 06 08 02 02 08 05 05  // .....<..........
    11F0: 08 02 03 01 0A 05 0A 0A 02 03 04 08 3C 05 44 90  // ............<.D.
    1200: D0 03 00 05 0C 0A 02 02 04 08 15 18 01 02 0A 04  // ................
    1210: 0A 06 00 00 00 00 00 00 00 00 00 CC 55 01 02 10  // ............U...
    1220: 05 16 24 7F 06 69 35 09 0E 0B 0E 03 03 0E 07 07  // ..$..i5.........
    1230: 0C 02 03 01 0D 09 0A 0A 02 03 04 08 69 09 77 FC  // ............i.w.
    1240: AC 06 00 09 0C 0A 02 02 04 08 15 24 01 02 0C 04  // ...........$....
    1250: 11 06 00 00 00 00 00 00 00 00 00 A0 86 01 02 12  // ................
    1260: 06 19 28 6C 07 78 3C 0A 0F 0C 0F 03 03 0F 07 07  // ..(l.x<.........
    1270: 0C 02 03 01 0D 0A 0A 0A 02 03 04 08 78 0A 87 20  // ............x.. 
    1280: A1 07 00 0A 0C 0A 02 02 04 08 17 27 01 02 0D 04  // ...........'....
    1290: 13 06 00 00 00 00 00 00 00 00 00 48 E8 01 02 14  // ...........H....
    12A0: 06 20 33 47 09 96 4B 0D 13 0F 13 04 04 13 09 09  // . 3G..K.........
    12B0: 10 02 03 02 0E 0D 0A 0A 02 03 05 0A 96 0D A9 68  // ...............h
    12C0: 89 09 00 0D 0C 0A 02 02 05 0A 1A 2F 01 02 0F 04  // .........../....
    12D0: 18 06 00 00 00 00 00 00 00 00 00 1C 19 02 02 15  // ................
    12E0: 06 23 38 35 0A A5 53 0E 15 11 15 04 04 15 09 09  // .#85..S.........
    12F0: 10 02 03 02 0E 0E 0A 0A 02 03 06 0B A5 0E BA 8C  // ................
    1300: 7D 0A 00 0E 0C 0A 02 02 06 0B 1B 34 01 02 10 04  // }..........4....
    1310: 1B 06 00 00 00 00 00 00 00 00 00 F0 49 02 02 16  // ............I...
    1320: 06 26 3D 22 0B B4 5A 0F 17 12 17 04 04 17 0A 0A  // .&="..Z.........
    1330: 10 02 03 02 0E 0F 0A 0A 02 03 06 0C B4 0F CB B0  // ................
    1340: 71 0B 00 0F 0C 0A 02 02 06 0C 1C 38 01 02 11 04  // q..........8....
    1350: 1D 06 00 00 00 00 00 00 00 00 00 20 BF 02 02 18  // ........... ....
    1360: 06 2C 47 5C 0D D2 69 12 1B 15 1B 05 05 1B 0B 0B  // .,G\..i.........
    1370: 14 02 03 02 0E 12 0A 0A 02 03 07 0E D2 12 ED F8  // ................
    1380: 59 0D 00 12 0C 0A 02 02 07 0E 1E 40 01 02 12 04  // Y..........@....
    1390: 22 06 00 00 00 00 00 00 00 00 00 B0 24 03 02 1A  // "...........$...
    13A0: 06 32 50 4A 0F F0 78 14 1E 18 1E 06 06 1E 0C 0C  // .2PJ..x.........
    13B0: 18 02 03 02 0E 14 0A 0A 02 03 08 10 F0 14 0E 40  // ...............@
    13C0: 42 0F 00 14 0C 0A 02 02 08 10 20 46 01 02 13 04  // B......... F....
    13D0: 26 06 00 00 01 00 00 00 00 00 00 58 86 03 02 1B  // &..........X....
    13E0: 06 39 5B 25 11 0E 87 17 22 1B 22 06 06 22 0E 0E  // .9[%....".".."..
    13F0: 18 02 03 02 0E 17 0A 0A 02 03 09 12 0E 17 30 88  // ..............0.
    1400: 2A 11 00 17 0C 0A 02 02 09 12 21 4E 01 02 15 04  // *.........!N....
    1410: 2B 06 01 01 01 00 00 00 00 00 00 BC 9F 03 02 1C  // +...............
    1420: 06 3C 60 A1 11 1D 8F 18 24 1D 24 07 07 24 0E 0E  // .<`.....$.$..$..
    1430: 1C 02 03 02 0E 18 0A 0A 02 03 0A 13 1D 18 41 AC  // ..............A.
    1440: 1E 12 00 18 0C 0A 02 02 0A 13 22 53 01 02 16 04  // .........."S....
    1450: 2E 06 01 01 01 00 00 00 00 00 00 90 D0 03 02 1C  // ................
    1460: 06 3F 65 8E 12 2C 96 19 26 1E 26 07 07 26 0F 0F  // .?e..,..&.&..&..
    1470: 1C 02 03 02 0E 19 0A 0A 02 03 0A 14 2C 19 52 D0  // ............,.R.
    1480: 12 13 00 19 0C 0A 02 02 0A 14 22 57 01 02 17 04  // .........."W....
    1490: 30 06 01 01 01 00 00 00 00 00 00 00 00 00 00 05  // 0...............
    14A0: 00 00 00 55 50 01 00 A0 7E 01 01 A4 7E 01 01 7C  // ...UP...~...~..|
    14B0: 7E 01 01 2C 7E 01 01 FF FF FF 00 00 1E 00 00 00  // ~..,~...........
    14C0: 00 00 00 00 00 00 00 00 00 8C 40 50 85 01 00 FF  // ..........@P....
    14D0: FF FF 01 00 1E 00 00 00 00 00 00 00 00 00 00 00  // ................
    14E0: 00 8C 40 30 83 01 00 FF FF FF 02 00 1E 00 00 00  // ..@0............
    14F0: 00 00 00 00 00 00 00 00 00 8C 40 50 85 01 00 FF  // ..........@P....
    1500: FF FF 03 00 1E 00 00 00 00 00 00 00 00 00 00 00  // ................
    1510: 00 8C 40 30 83 01 00 00 00 00 00 8F 00 00 00 4F  // ..@0...........O
    1520: 50 01 00 50 50 01 00 51 50 01 00 53 50 01 00 54  // P..PP..QP..SP..T
    1530: 50 01 00 56 50 01 00 57 50 01 00 58 50 01 00 5E  // P..VP..WP..XP..^
    1540: 50 01 00 73 50 01 00 60 50 01 00 76 50 01 00 5D  // P..sP..`P..vP..]
    1550: 50 01 00 64 50 01 00 6B 50 01 00 72 50 01 00 78  // P..dP..kP..rP..x
    1560: 50 01 00 7A 50 01 00 00 7E 01 01 04 7E 01 01 08  // P..zP...~...~...
    1570: 7E 01 01 0C 7E 01 01 10 7E 01 01 14 7E 01 01 18  // ~...~...~...~...
    1580: 7E 01 01 1C 7E 01 01 20 7E 01 01 24 7E 01 01 28  // ~...~.. ~..$~..(
    1590: 7E 01 01 30 7E 01 01 34 7E 01 01 38 7E 01 01 3C  // ~..0~..4~..8~..<
    15A0: 7E 01 01 40 7E 01 01 44 7E 01 01 58 7E 01 01 5C  // ~..@~..D~..X~..\
    15B0: 7E 01 01 60 7E 01 01 64 7E 01 01 68 7E 01 01 6C  // ~..`~..d~..h~..l
    15C0: 7E 01 01 70 7E 01 01 74 7E 01 01 80 7E 01 01 84  // ~..p~..t~...~...
    15D0: 7E 01 01 88 7E 01 01 8C 7E 01 01 90 7E 01 01 94  // ~...~...~...~...
    15E0: 7E 01 01 98 7E 01 01 9C 7E 01 01 A8 7E 01 01 AC  // ~...~...~...~...
    15F0: 7E 01 01 B0 7E 01 01 B4 7E 01 01 B8 7E 01 01 BC  // ~...~...~...~...
    1600: 7E 01 01 C0 7E 01 01 C4 7E 01 01 C8 7E 01 01 CC  // ~...~...~...~...
    1610: 7E 01 01 D0 7E 01 01 D4 7E 01 01 D8 7E 01 01 DC  // ~...~...~...~...
    1620: 7E 01 01 E0 7E 01 01 E4 7E 01 01 E8 7E 01 01 EC  // ~...~...~...~...
    1630: 7E 01 01 F0 7E 01 01 F4 7E 01 01 F8 7E 01 01 FC  // ~...~...~...~...
    1640: 7E 01 01 00 7F 01 01 04 7F 01 01 08 7F 01 01 0C  // ~...............
    1650: 7F 01 01 10 7F 01 01 14 7F 01 01 18 7F 01 01 1C  // ................
    1660: 7F 01 01 20 7F 01 01 24 7F 01 01 28 7F 01 01 2C  // ... ...$...(...,
    1670: 7F 01 01 30 7F 01 01 34 7F 01 01 38 7F 01 01 3C  // ...0...4...8...<
    1680: 7F 01 01 40 7F 01 01 44 7F 01 01 48 7F 01 01 4C  // ...@...D...H...L
    1690: 7F 01 01 50 7F 01 01 54 7F 01 01 58 7F 01 01 5C  // ...P...T...X...\
    16A0: 7F 01 01 60 7F 01 01 64 7F 01 01 68 7F 01 01 6C  // ...`...d...h...l
    16B0: 7F 01 01 70 7F 01 01 74 7F 01 01 78 7F 01 01 7C  // ...p...t...x...|
    16C0: 7F 01 01 80 7F 01 01 84 7F 01 01 88 7F 01 01 8C  // ................
    16D0: 7F 01 01 90 7F 01 01 94 7F 01 01 98 7F 01 01 9C  // ................
    16E0: 7F 01 01 A0 7F 01 01 A4 7F 01 01 A8 7F 01 01 AC  // ................
    16F0: 7F 01 01 B0 7F 01 01 B4 7F 01 01 B8 7F 01 01 BC  // ................
    1700: 7F 01 01 C0 7F 01 01 C4 7F 01 01 C8 7F 01 01 CC  // ................
    1710: 7F 01 01 D0 7F 01 01 D4 7F 01 01 D8 7F 01 01 DC  // ................
    1720: 7F 01 01 E0 7F 01 01 E4 7F 01 01 E8 7F 01 01 EC  // ................
    1730: 7F 01 01 F0 7F 01 01 F4 7F 01 01 F8 7F 01 01 FC  // ................
    1740: 7F 01 01 02 1D 00 03 03 1D 00 03 8C 1C 00 03 A1  // ................
    1750: 04 00 05 18 04 00 05 55 02 00 05 FF FF FF 00 1A  // .......U........
    1760: 27 21 00 05 00 DB 00 00 00 2A 00 00 04 00 00 F4  // '!.......*......
    1770: 29 E5 0F 00 00 00 00 00 00 00 00 00 00 00 00 09  // )...............
    1780: 00 13 00 00 00 13 00 0E 00 14 00 40 00 18 00 00  // ...........@....
    1790: 00 17 00 00 00 17 00 00 00 17 00 08 00 17 00 04  // ................
    17A0: 20 00 F0 00 00 00 00 07 00 03 00 00 00 03 04 00  //  ...............
    17B0: 00 03 05 00 00 00 00 9C 00 B4 00 46 04 48 44 00  // ...........F.HD.
    17C0: 00 08 00 00 00 08 00 17 10 B0 00 13 30 B0 00 0E  // ............0...
    17D0: 00 00 40 1C 0F DE 00 20 40 04 70 00 00 F0 01 01  // ..@.... @.p.....
    17E0: 10 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 90 C0  // ................
    1810: 04 00 00 00 00 00 01 00 00 00 00 03 00 00 00 00  // ................
    1820: 00 00 00 00 14 1A 1B 1B 1B 1C 1C 00 00 00 00 00  // ................
    1830: 00 00 00 0F 48 00 01 08 00 C0 02 00 08 00 00 4A  // ....H..........J
    1840: A5 4A 05 00 00 00 00 18 00 04 50 00 00 00 00 00  // .J........P.....
    1850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1900: 00 00 00 00 00 00 00 1C 03 8E 03 AA 02 8E 03 E3  // ................
    1910: 00 AA 02 E3 00 71 00 E3 00 71 00 55 01 71 00 1C  // .....q...q.U.q..
    1920: 03 55 01 1C 03 8E 03 CF 00 30 FF FF 0C 00 F3 00  // .U.......0......
    1930: 80 01 90 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1970: 08 80 01 05 00 00 00 0E 10 00 40 3F FF 3F 0F 00  // ..........@?.?..
    1980: 00 00 00 2B 00 00 00 22 00 00 00 10 00 00 00 10  // ...+..."........
    1990: 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 7C  // ...............|
    19A0: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 13  // ................
    19B0: 54 67 02 54 31 02 76 88 00 00 00 38 10 72 56 94  // Tg.T1.v....8.rV.
    19C0: 0A 00 00 00 00 00 00 01 00 00 00 01 46 57 23 74  // ............FW#t
    19D0: 16 30 52 88 00 00 00 19 30 54 67 82 0A 00 00 00  // .0R.....0Tg.....
    19E0: 00 00 00 01 00 00 00 67 54 20 31 54 31 02 76 88  // .......gT 1T1.v.
    19F0: 00 00 00 19 60 74 53 82 0A 00 00 00 00 00 00 01  // ....`tS.........
    1A00: 00 00 00 01 64 57 23 74 10 23 65 88 00 00 00 10  // ....dW#t.#e.....
    1A10: 39 72 56 84 0A 00 00 00 00 00 00 00 6C 00 04 02  // 9rV.........l...
    1A20: 05 03 0E 00 21 06 40 00 00 00 00 00 FF 00 05 07  // ....!.@.........
    1A30: 0C 00 06 00 00 00 08 00 00 00 01 03 0E 00 21 06  // ..............!.
    1A40: 40 00 00 00 00 00 FF 00 01 07 0C 00 0E 00 00 02  // @...............
    1A50: 08 00 00 00 04 03 0E 00 21 06 44 00 00 00 00 00  // ........!.D.....
    1A60: FF 00 04 07 0C 00 0E 00 00 03 08 00 00 00 02 03  // ................
    1A70: 0E 00 21 06 44 00 00 00 00 00 FF 00 02 07 0C 00  // ..!.D...........
    1A80: 0E 00 00 01 08 00 00 00 08 00 01 01 00 00 00 00  // ................
    1A90: C8 00 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ............-...
    1AA0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    1AB0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    1AC0: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    1AD0: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    1AE0: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    1AF0: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    1B00: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    1B10: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    1B20: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    1B30: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    1B40: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    1B50: 00 00 00 00 00 00 EC 3C 34 00 02 01 00 00 00 00  // .......<4.......
    1B60: 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15  // .*.*..***..*.**.
    1B70: 00 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F  // .***.....?.?..??
    1B80: 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F 74 00 01 01  // ?..?.???.???t...
    1B90: 10 01 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A  // ...........j...j
    1BA0: 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA  // ...U...U........
    1BB0: 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A  // e...f...!..."..j
    1BC0: 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01 0A EB  // #..U$...E...F...
    1BD0: 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01 0A 70  // u...v......p...p
    1BE0: D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72  // ...q...q...r...r
    1BF0: E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74  // ...s...s...t...t
    1C00: 14 00 02 01 02 00 08 00 80 00 00 02 00 04 00 08  // ................
    1C10: 40 00 FF FF 82 0A 13 00 02 22 03 F7 09 00 00 67  // @........".....g
    1C20: 4A 00 00 84 00 08 00 00 00 1C 00 00 00 00 00 00  // J...............
    1C30: 71 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00  // q...............
    1C40: 00 00 01 00 00 00 0D 00 00 00 07 0C 00 00 B0 04  // ................
    1C50: 00 00 65 04 00 00 08 07 00 00 1D 04 00 00 E2 04  // ..e.............
    1C60: 00 00 1D 04 00 00 E2 04 00 00 B0 04 00 00 C1 04  // ................
    1C70: 00 00 C1 04 00 00 2A 03 00 00 C1 04 00 00 00 00  // ......*.........
    1C80: 00 00 00 00 00 00 00 00 00 00 F4 01 00 00 E0 01  // ................
    1C90: 00 00 61 00 00 00 F4 01 00 00 5F 01 00 00 AA 01  // ..a......._.....
    1CA0: 00 00 5F 01 00 00 AA 01 00 00 A2 01 00 00 E7 01  // .._.............
    1CB0: 00 00 E7 01 00 00 2C 01 00 00 E7 01 00 00 00 00  // ......,.........
    1CC0: 00 00 00 00 00 00 00 00 00 00 81 00 00 00 10 00  // ................
    1CD0: 00 00 1E 00 00 00 01 01 01 01 01 01 01 01 01 01  // ................
    1CE0: 01 01 01 01 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    1CF0: 00 00 00 00 00 00 9F 0B 00 00 9F 0B 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 9F 0B 00 00 B0 04  // ................
    1D10: 00 00 B0 04 00 00 0F 00 00 00 D8 0E 00 00 D8 0E  // ................
    1D20: 00 00 64 00 00 00 69 00 00 00 01 00 00 00 01 00  // ..d...i.........
    1D30: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 64 00  // ..............d.
    1D40: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1D50: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1D60: 00 00 64 00 00 00 01 00 00 00 00 00 00 00 00 00  // ..d.............
    1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DF0: 00 00 00 00 00 00 F4 01 00 00 F4 01 00 00 00 00  // ................
    1E00: 00 00 00 00 00 00 00 00 00 00 F4 01 00 00 61 00  // ..............a.
    1E10: 00 00 61 00 00 00 06 00 00 00 FA 00 00 00 E8 03  // ..a.............
    1E20: 00 00 19 00 00 00 32 00 00 00 00 00 00 00 00 00  // ......2.........
    1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00  // ................
    1E40: 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00 19 00  // ................
    1E50: 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00 19 00  // ................
    1E60: 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EF0: 00 00 00 00 00 00 06 00 00 00 06 00 00 00 5A 00  // ..............Z.
    1F00: 5A 00 5F 00 5F 00 28 0A 28 0A D6 06 D6 06 28 0A  // Z._._.(.(.....(.
    1F10: 28 0A CA 08 CA 08 00 00 00 00 00 00 00 00 00 00  // (...............
    1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F30: 00 00 00 00 00 00 05 00 00 00 FF FD 7F A3 6B 30  // ..............k0
    1F40: 04 00 55 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..U.............
    1F50: 00 00 5A 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..Z.............
    1F60: 00 00 4F 00 08 00 00 00 00 00 69 00 69 00 69 00  // ..O.......i.i.i.
    1F70: 73 00 73 00 73 00 73 00 00 00 00 00 00 00 00 00  // s.s.s.s.........
    1F80: 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F90: 00 00 00 00 00 00 F0 0A 48 0D D8 0E 68 10 C0 12  // ........H...h...
    1FA0: 00 00 0E 38 00 00 FF 3F 00 00 32 00 32 00 00 00  // ...8...?..2.2...
    1FB0: F0 0A F0 0A 32 00 00 00 00 00 48 0D 86 0B C0 12  // ....2.....H.....
    1FC0: 68 10 4C 00 00 00 00 00 00 00 00 00 00 00 00 00  // h.L.............
    1FD0: 00 00 00 00 00 00 00 00 02 00 00 00 80 3F 00 00  // .............?..
    1FE0: 00 00 1B 2F 1D 3E 6F F0 85 BE C8 07 3D 3F 54 03  // .../.>o.....=?T.
    1FF0: 00 00 00 00 02 00 10 58 89 3F 44 FA 8D 3E 4B 02  // .......X.?D..>K.
    2000: D4 3D 97 73 E9 3D AC CA 06 3F E0 01 00 00 00 01  // .=.s.=...?......
    2010: 04 00 6D 56 5D 3F 99 2A F8 3E 65 A5 89 3D 95 2B  // ..mV]?.*.>e..=.+
    2020: BC 3D A3 CC 06 3F 61 00 00 00 00 00 02 00 00 00  // .=...?a.........
    2030: 80 3F 00 00 00 00 BC 22 B8 3D 25 7A D9 3D 5C C9  // .?.....".=%z.=\.
    2040: 06 3F F4 01 00 00 00 00 02 00 06 81 A5 3F 7B 83  // .?...........?{.
    2050: AF 3E 7C ED 19 3E 58 AD 0C 3E 53 CB 06 3F 5F 01  // .>|..>X..>S..?_.
    2060: 00 00 00 00 02 00 2F DD 94 3F 25 75 A2 3E AA 0E  // ....../..?%u.>..
    2070: F9 3D 06 0D FD 3D 53 CB 06 3F AA 01 00 00 00 00  // .=...=S..?......
    2080: 02 00 06 81 A5 3F 7B 83 AF 3E 7C ED 19 3E 58 AD  // .....?{..>|..>X.
    2090: 0C 3E 53 CB 06 3F 5F 01 00 00 00 00 02 00 2F DD  // .>S..?_......./.
    20A0: 94 3F 25 75 A2 3E AA 0E F9 3D 06 0D FD 3D 53 CB  // .?%u.>...=...=S.
    20B0: 06 3F AA 01 00 00 00 00 02 00 64 5D 3C 3F 3A 92  // .?........d]<?:.
    20C0: EB 3E F7 92 46 3D 14 22 A0 3D FB CB 06 3F A2 01  // .>..F=.".=...?..
    20D0: 00 00 00 00 02 00 BD 52 46 3F F9 0F E9 3E 29 05  // .......RF?...>).
    20E0: 5D 3D A2 9C A8 3D FB CB 06 3F E7 01 00 00 00 00  // ]=...=...?......
    20F0: 02 00 BD 52 46 3F F9 0F E9 3E 29 05 5D 3D A2 9C  // ...RF?...>).]=..
    2100: A8 3D FB CB 06 3F E7 01 00 00 00 00 02 00 15 8C  // .=...?..........
    2110: 1A 3F B2 9D 2F 3F D6 39 06 3D CE 70 83 3D F2 CD  // .?../?.9.=.p.=..
    2120: 06 3F 2C 01 00 00 00 00 02 00 BD 52 46 3F F9 0F  // .?,........RF?..
    2130: E9 3E 29 05 5D 3D A2 9C A8 3D FB CB 06 3F E7 01  // .>).]=...=...?..
    2140: 00 00 F4 01 9F 0B 00 00 00 00 00 00 00 00 00 00  // ................
    2150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2160: 00 00 AA 01 E2 04 00 00 00 00 00 00 00 00 00 00  // ................
    2170: 00 00 5F 01 1D 04 00 00 00 00 00 00 00 00 00 00  // .._.............
    2180: 00 00 E0 01 B0 04 00 00 00 00 00 00 00 00 00 00  // ................
    2190: 00 00 61 00 1E 02 A4 02 65 04 A2 01 B0 04 00 00  // ..a.....e.......
    21A0: 00 00 00 00 00 00 00 00 00 00 E7 01 C1 04 00 00  // ................
    21B0: 00 00 00 00 00 00 00 00 00 00 E7 01 C1 04 00 00  // ................
    21C0: 00 00 00 00 00 00 00 00 00 00 2C 01 2A 03 00 00  // ..........,.*...
    21D0: 00 00 00 00 00 00 00 00 00 00 E7 01 C1 04 00 00  // ................
    21E0: 00 00 00 00 00 00 00 00 00 00 F4 01 08 07 00 00  // ................
    21F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F3 E5  // ................
    2200: 45 3F 52 0F D1 3B 04 21 39 3E 9B 8F 63 3F AE 12  // E?R..;.!9>..c?..
    2210: 2C 3D 17 B7 D1 3C 9B 8F 63 3F AE 12 2C 3D 42 26  // ,=...<..c?..,=B&
    2220: 19 3D EA 95 7A 3F 3D 0A 97 3D 20 46 C8 BD EA 95  // .=..z?=..= F....
    2230: 7A 3F 3D 0A 97 3D F5 10 0D BD 9F 0B 00 00 B0 04  // z?=..=..........
    2240: 00 00 65 04 00 00 08 07 00 00 1D 04 00 00 E2 04  // ..e.............
    2250: 00 00 1D 04 00 00 E2 04 00 00 B0 04 00 00 C1 04  // ................
    2260: 00 00 C1 04 00 00 2A 03 00 00 C1 04 00 00 00 03  // ......*.........
    2270: 03 03 08 07 00 00 4C 01 FA 01 F0 0A 80 0C 8C 0A  // ......L.........
    2280: 48 0D 48 0D 10 0E 88 13 18 15 18 15 18 15 F4 01  // H.H.............
    2290: 20 03 F4 01 01 00 01 02 5D 00 01 00 00 00 00 00  //  .......].......
    22A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22B0: E8 03 1E 02 00 00 06 00 64 00 00 00 00 00 28 00  // ........d.....(.
    22C0: 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // d...............
    22D0: 00 00 00 00 00 00 D9 12 75 12 0F 12 AB 11 45 11  // ........u.....E.
    22E0: E1 10 7A 10 17 10 B0 0F 4C 0F E8 0E 82 0E 6E 0D  // ..z.....L.....n.
    22F0: 57 0C 42 0B 2B 0A 00 00 00 00 03 02 01 00 00 00  // W.B.+...........
    2300: 00 00 00 00 00 00 00 00 00 00 00 03 01 03 51 00  // ..............Q.
    2310: 6B 02 32 00 3C 00 90 01 90 01 90 01 90 01 90 01  // k.2.<...........
    2320: 90 01 90 01 90 01 90 01 90 01 28 00 D0 07 AC 0D  // ..........(.....
    2330: D8 0E 28 0A 5A 00 F4 01 00 00 01 00 01 02 00 00  // ..(.Z...........
    2340: 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2360: 00 00 A3 3B 88 BD 34 D7 B9 3E 52 27 A0 BE 00 00  // ...;..4..>R'....
    2370: 00 00 00 00 00 00 00 00 00 00 C7 BA B8 BC DD 7B  // ...............{
    2380: B8 3D AD 4C F8 BC 00 00 00 00 00 00 00 00 00 00  // .=.L............
    2390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23D0: 00 00 00 00 00 00 34 01 34 01 01 01 00 00 00 00  // ......4.4.......
    23E0: 00 00 34 01 34 01 19 00 19 00 00 00 00 00 00 00  // ..4.4...........
    23F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2420: 00 00 00 01 F0 0A 23 00 00 00 F4 FD 5E 41 C8 07  // ......#.....^A..
    2430: 7D 3E 10 18 8C 42 8A B0 01 3F 00 00 00 00 86 0B  // }>...B...?......
    2440: 86 0B 48 0D 48 0D B0 01 96 00 96 00 00 00 00 00  // ..H.H...........
    2450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 01  // ..............%.
    2460: 25 01 A4 01 00 00 00 00 00 00 00 00 00 00 00 00  // %...............
    2470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24A0: 00 00 00 00 00 00 00 00 00 00 00 00 90 40 00 00  // .............@..
    24B0: 00 00 00 00 90 40 00 00 00 00 00 00 34 01 19 00  // .....@......4...
    24C0: 00 00 CD CC BC 40 00 00 00 00 00 00 00 00 00 00  // .....@..........
    24D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2580: 00 00 00 00 00 00 00 00 90 40 00 00 00 00 00 00  // .........@......
    2590: 90 40 00 00 00 00 00 00 34 01 01 00 00 00 CD CC  // .@......4.......
    25A0: BC 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .@..............
    25B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2690: 00 00 00 00 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    26A0: 66 56 66 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8  // fVfW.......... .
    26B0: 48 1C 0B C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66  // H...u....f_f^f]f
    26C0: 5B 66 5A 66 59 66 58 07 1F CB E8 62 1D E8 34 1B  // [fZfYfX....b..4.
    26D0: 32 D2 8D 3E 30 03 89 55 16 E8 C3 0C E8 86 0C E8  // 2..>0..U........
    26E0: 43 1A 75 19 E8 D1 0D E8 B0 02 E8 30 18 0B C0 74  // C.u........0...t
    26F0: 0C E8 39 00 E8 63 43 E8 7D 0C E8 B8 43 E8 A9 00  // ..9..cC.}...C...
    2700: B4 80 E8 29 1B 8A C7 66 C1 E0 10 8A E3 B0 20 66  // ...)...f...... f
    2710: A3 A4 A1 E8 B0 02 E8 90 0C E8 56 1D 66 5F 66 5E  // ..........V.f_f^
    2720: 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E 8B 1E  // f]f[fZfYfX......
    2730: 08 00 83 3E 3D 27 00 75 04 89 1E 3B 27 1E 2E 8E  // ...>='.u...;'...
    2740: 1E 33 27 9C FA 66 C7 06 08 01 65 F0 00 F0 C7 06  // .3'..f....e.....
    2750: 40 00 5E 27 89 1E 42 00 C7 06 B4 01 5E 27 89 1E  // @.^'..B.....^'..
    2760: B6 01 C7 06 7C 00 86 6F 89 1E 7E 00 C7 06 0C 01  // ....|..o..~.....
    2770: 99 73 89 1E 0E 01 C7 06 A8 04 B8 69 89 1E AA 04  // .s.........i....
    2780: 2E 8E 1E 3B 27 8B C3 A3 BA 69 A3 CA 69 A3 DC 69  // ...;'....i..i..i
    2790: 9D 1F C3 50 4D 49 44 5E 27 EA 59 00 00 00 A0 00  // ...PMID^'.Y.....
    27A0: B0 00 B8 00 C0 00 00 00 00 BB 00 00 E8 E3 0B 66  // ...............f
    27B0: C1 E8 10 A3 62 03 BB 0B 00 E8 D6 0B 8D 3E 30 03  // ....b........>0.
    27C0: 66 89 45 18 C3 00 E8 84 1C 80 FC A0 75 05 E8 3D  // f.E.........u..=
    27D0: 00 EB 11 80 FC 4F 75 05 E8 9D 31 EB 07 E8 F2 36  // .....Ou...1....6
    27E0: EB 02 B4 01 E8 8B 1C CF E8 62 1C E8 20 00 EB 02  // .........b.. ...
    27F0: B4 01 E8 7D 1C CB E8 54 1C 80 FC 4F 75 05 E8 77  // ...}...T...Ou..w
    2800: 31 EB 07 E8 CC 36 EB 02 B4 01 E8 65 1C CB 1E 06  // 1....6.....e....
    2810: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    2820: 3C 04 75 29 2E A1 1A 00 66 C1 E0 10 2E A1 18 00  // <.u)....f.......
    2830: 8D 36 32 02 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C  // .62..<..0.....^.
    2840: 89 46 04 66 C1 E8 10 89 46 00 E9 2B 01 3C 05 75  // .F.f....F..+.<.u
    2850: 18 E8 DA 19 E8 AD 19 2E A1 08 00 8B EC 89 56 10  // ..............V.
    2860: 89 46 00 89 5E 04 E9 0F 01 3C 06 75 32 E8 0A 0B  // .F..^....<.u2...
    2870: 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 14 0B 88 46  // f.....F........F
    2880: 18 E8 FE 0A 66 89 46 0C BB 09 00 E8 04 0B 33 C0  // ....f.F.......3.
    2890: 66 89 46 00 2E 8B 16 62 03 89 56 10 E9 D9 00 3C  // f.F....b..V....<
    28A0: 0B 75 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89  // .u$..u..........
    28B0: 5E 0C 89 4E 14 E9 C0 00 8A C7 E8 D3 00 E8 38 01  // ^..N..........8.
    28C0: 0F 84 AC 00 E9 B1 00 3C 17 75 1D E8 98 0D 74 06  // .......<.u....t.
    28D0: E8 83 09 E8 8E 12 E8 13 07 E8 78 0A 33 C9 8B C8  // ..........x.3...
    28E0: 8B EC 89 4E 14 E9 90 00 3C 18 75 45 0A FF 75 10  // ...N....<.uE..u.
    28F0: E8 1F 0D 8B EC 89 46 0C E8 4F 07 89 4E 10 EB 78  // ......F..O..N..x
    2900: E8 63 0D 75 6B BB 00 4C E8 E0 1A 66 0B C0 74 60  // .c.uk..L...f..t`
    2910: 23 C9 74 5C E8 37 0D BE 00 4C E8 A2 0A 74 51 BE  // #.t\.7...L...tQ.
    2920: 00 4C B0 40 E8 F1 0A E8 E8 0C 8B EC 89 46 0C EB  // .L.@.........F..
    2930: 47 3C 82 75 1A 80 FB 05 75 15 0A FF 75 0A E8 2D  // G<.u....u...u..-
    2940: 0C 8B EC 89 46 14 EB 30 E8 0A 0C 74 1B EB 29 3C  // ....F..0...t..)<
    2950: 8E 75 15 80 FF 01 74 08 80 FF 02 75 0B 80 C1 02  // .u....t....u....
    2960: 80 C1 02 E8 54 0C EB 10 8B EC C6 46 19 02 EB 0F  // ....T......F....
    2970: 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66  // ...F....2....f.f
    2980: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3  // _f^f]f[fZfYfX...
    2990: 51 8A C8 B8 01 00 D3 E0 59 C3 E8 FB 1A C3 0C 01  // Q.......Y.......
    29A0: C3 00 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42  // ..PQ...C.3.B...B
    29B0: E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 EE 16  // .a.....a........
    29C0: E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76  // .aYX...V...>...v
    29D0: 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06  // ................
    29E0: 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4  // !..3.2..........
    29F0: 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8 1E 08  // .&!.^...W..u....
    2A00: 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 0C  // t%.$....t.......
    2A10: 15 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C  // .#.t.......t._.\
    2A20: 28 E8 91 05 0B F6 C3 5F C3 50 E8 D3 07 E8 5E 14  // (......_.P....^.
    2A30: 0A C9 74 11 E8 CA 11 3C 00 75 1F E8 CB 01 8A EB  // ..t....<.u......
    2A40: F6 C5 04 74 15 8D 9C A6 00 E8 9F 19 0A C0 74 0A  // ...t..........t.
    2A50: E8 88 04 74 05 33 C9 E8 51 05 E8 AC 01 58 C3 51  // ...t.3..Q....X.Q
    2A60: B9 5F 00 E8 F7 15 59 C3 51 E8 1A 00 75 14 E8 69  // ._....Y.Q...u..i
    2A70: 01 3C 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01  // .<.u.. ..'.u....
    2A80: EB 02 33 C9 59 C3 53 E8 61 19 66 3D 00 FF FF FF  // ..3.Y.S.a.f=....
    2A90: 75 0E 83 C3 04 E8 53 19 66 3D FF FF FF 00 75 00  // u.....S.f=....u.
    2AA0: 5B C3 50 52 32 D2 E8 42 19 02 D0 02 D4 66 C1 E8  // [.PR2..B.....f..
    2AB0: 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8  // ............ZX..
    2AC0: 3E 07 8D 9C A4 01 E8 E9 00 A9 DD 0F 74 52 E8 38  // >...........tR.8
    2AD0: 01 F6 C3 08 74 0C 8D 5C 28 E8 DD 00 75 04 E8 62  // ....t..\(...u..b
    2AE0: 00 C3 B5 02 E8 FC 00 E8 1F 01 F6 C3 04 74 21 8D  // .............t!.
    2AF0: 5C 28 E8 22 01 E8 6D 03 74 05 B5 03 E8 E4 00 E8  // \(."..m.t.......
    2B00: 41 04 E8 FA 00 80 FD 00 75 38 B5 02 E8 E6 00 C3  // A.......u8......
    2B10: 8D 9C C0 01 B8 00 55 E8 63 0D B5 02 E8 D6 00 C3  // ......U.c.......
    2B20: A9 02 00 74 1D B5 04 E8 B9 00 E8 DC 00 8D 5C 28  // ...t..........\(
    2B30: E8 E4 00 E8 51 16 E8 BC 00 8D 5C 28 E8 D8 00 E8  // ....Q.....\(....
    2B40: 01 04 C3 B5 01 E8 9B 00 B5 02 E8 A8 00 E8 B9 00  // ................
    2B50: F6 C3 04 75 10 8D 9C C0 01 B8 00 55 E8 1E 0D B5  // ...u.......U....
    2B60: 02 E8 17 00 C3 E8 AF 00 B5 02 8D 5C 28 E8 57 00  // ...........\(.W.
    2B70: 75 02 B5 01 E8 04 00 E8 C9 03 C3 8D 9C AC 02 B1  // u...............
    2B80: 02 E8 0B 18 B5 02 E8 6C 00 C3 8D 9C A4 01 E8 21  // .......l.......!
    2B90: 00 E8 75 00 F6 C3 04 74 12 8D 5C 28 E8 78 00 E8  // ..u....t..\(.x..
    2BA0: 5D 00 E8 59 07 8D 5C 28 E8 E5 15 B8 02 00 E8 0E  // ]..Y..\(........
    2BB0: FF C3 B9 48 00 E8 A5 14 C3 53 81 C3 05 01 E8 2A  // ...H.....S.....*
    2BC0: 18 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53  // .$.<.[....=..u.S
    2BD0: 83 C3 18 E8 15 18 5B A8 01 C3 53 83 C3 12 E8 0A  // ......[...S.....
    2BE0: 18 5B C3 8D 9C AC 02 32 C9 E8 A3 17 C3 8D 9C AC  // .[.....2........
    2BF0: 02 E8 F7 17 C3 8D 9C AC 02 B1 01 E8 91 17 C3 8D  // ................
    2C00: 9C AC 02 B1 01 E8 9F 17 C3 66 50 8D 9C A0 01 E8  // .........fP.....
    2C10: D9 17 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00 00  // ....fX.UWQ......
    2C20: BB 08 00 2B D9 D1 E3 8D 58 4E E8 BE 17 E8 E3 01  // ...+....XN......
    2C30: E2 EE 8D 5C 4B E8 B3 17 B9 03 00 8B D0 BF 8F 2C  // ...\K..........,
    2C40: 85 55 06 74 17 66 8B 05 8D 9A 4C 02 E8 FC 16 8B  // .U.t.f....L.....
    2C50: 45 04 8D 9A 50 02 E8 0A 17 83 C5 08 83 C7 08 E2  // E...P...........
    2C60: DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 7D 17 0B C0  // ..|^...3....}...
    2C70: 74 09 E8 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9  // t..]............
    2C80: 55 32 ED E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75  // U2..o..\(.N.=..u
    2C90: 10 83 C3 14 E8 54 17 24 70 C0 E8 04 8A E8 E8 54  // .....T.$p......T
    2CA0: FF 5D 8D 9C A6 00 E8 42 17 0A C0 74 46 8D 9C A8  // .].....B...tF...
    2CB0: 00 E8 37 17 3C 02 75 3B 66 C1 E8 10 3C 04 72 33  // ..7.<.u;f...<.r3
    2CC0: 8D 9C A8 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8  // ....2...........
    2CD0: 19 17 0B C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E  // ....t.......u...
    2CE0: 00 83 C5 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B  // ....UX..ps....I.
    2CF0: C9 75 DA 59 5F 5D C3 20 03 58 02 3C 00 01 00 00  // .u.Y_]. .X.<....
    2D00: 04 00 03 3C 00 00 08 80 02 E0 01 3C 00 20 00 51  // ...<.......<. .Q
    2D10: 8D 1D E8 D6 16 8D 9A C0 01 E8 47 16 8D 5D 02 E8  // ..........G..]..
    2D20: C9 16 8D 9A C2 01 E8 89 00 8D 5D 05 E8 BC 16 8D  // ..........].....
    2D30: 9A C6 01 E8 7C 00 8D 5D 08 E8 AF 16 8B C8 8A DC  // ....|..]........
    2D40: 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC  // f...............
    2D50: C0 ED 06 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4  // ................
    2D60: 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3  // .....?..........
    2D70: 8D 9A CC 01 E8 EC 15 8D 9A CA 01 8B C1 E8 E3 15  // ................
    2D80: 8D 9A CE 01 33 C0 8A C6 E8 D8 15 8D 9A D0 01 33  // ....3..........3
    2D90: C0 8A C2 E8 CD 15 8D 5D 0C E8 4F 16 8D 9A D2 01  // .......]..O.....
    2DA0: E8 0F 00 8D 5D 0F E8 42 16 8D 9A D6 01 E8 B3 15  // ....]..B........
    2DB0: 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A  // Y.....f.........
    2DC0: E8 C0 ED 04 8B C1 E8 9A 15 83 C3 02 8B C2 E8 92  // ................
    2DD0: 15 C3 8D 5D 11 E8 13 16 8A E0 BA 06 00 C0 E8 07  // ...]............
    2DE0: 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03  // t.........$.<.u.
    2DF0: 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80  // ..@<.u.......t..
    2E00: E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A D8 01 E8  // ....t...........
    2E10: 51 15 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C  // Q..<.t=.....$?.<
    2E20: 8D 9A 50 02 E8 3C 15 0F B6 C2 83 C0 1F C1 E0 03  // ..P..<..........
    2E30: 8D 9A 4C 02 E8 2C 15 0F B6 DE C1 EB 06 C1 E3 02  // ..L..,..........
    2E40: 2E F7 A7 EF 2D 2E F7 B7 ED 2D 8D 9A 4E 02 E8 12  // ....-....-..N...
    2E50: 15 83 C5 08 C3 10 00 0A 00 04 00 03 00 05 00 04  // ................
    2E60: 00 10 00 09 00 8D 9C A6 00 E8 7F 15 0A C0 74 1F  // ..............t.
    2E70: 8D 9C A8 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8  // ....Q.....Y..t..
    2E80: 69 15 32 C0 66 3D 00 03 0C 00 75 03 0B DB C3 33  // i.2.f=....u....3
    2E90: DB C3 66 50 52 E8 53 15 3C 02 75 39 80 FC 03 72  // ..fPR.S.<.u9...r
    2EA0: 34 66 C1 E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83  // 4f...2.<.v*.....
    2EB0: C3 04 3B DA 73 1F E8 32 15 8A E0 80 E4 E0 C0 EC  // ..;.s..2........
    2EC0: 05 24 1F 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B  // .$.8.t.2........
    2ED0: DB 5A 66 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00  // .ZfX.3.ZfX.Q....
    2EE0: E8 08 15 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00  // .....t..........
    2EF0: 74 10 E8 F6 14 66 C1 E8 10 80 E4 07 75 04 B0 01  // t....f......u...
    2F00: EB 02 32 C0 0A C0 59 C3 66 50 52 E8 DD 14 3C 70  // ..2...Y.fPR...<p
    2F10: 75 2B 66 C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B  // u+f...2........;
    2F20: DA 73 1A E8 C5 14 38 C8 74 0D 66 C1 E8 10 32 E4  // .s....8.t.f...2.
    2F30: 83 C0 03 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A  // .........ZfX.3.Z
    2F40: 66 58 C3 57 66 51 8D 9C C0 01 8B FB 8B DF E8 3D  // fX.WfQ.........=
    2F50: 00 0B C9 74 0B 66 8B D1 E8 D0 0B 83 C7 1C EB EC  // ...t.f..........
    2F60: 66 59 5F C3 50 53 51 B9 07 00 53 8B DA E8 7B 14  // fY_.PSQ...S...{.
    2F70: 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 F3 10 59  // ...[t.f........Y
    2F80: 5B 58 C3 51 53 B9 07 00 E8 00 11 5B 59 C3 66 50  // [X.QS......[Y.fP
    2F90: 53 83 C3 06 E8 54 14 5B 8B C8 66 C1 E1 10 53 83  // S....T.[..f...S.
    2FA0: C3 02 E8 46 14 8B C8 5B 66 58 C3 8D 9C A0 01 32  // ...F...[fX.....2
    2FB0: C9 E8 DB 13 C3 57 B9 20 00 E8 DB 10 5F C3 53 51  // .....W. ...._.SQ
    2FC0: E8 19 00 32 E4 8A C5 C1 E0 02 59 8D 9C 78 01 03  // ...2......Y..x..
    2FD0: D8 E8 17 14 5B C3 B1 02 E8 07 00 C3 B1 01 E8 01  // ....[...........
    2FE0: 00 C3 53 8D 9C 98 01 E8 BD 13 5B C3 33 C9 E8 34  // ..S.......[.3..4
    2FF0: 11 75 3C 66 BA 22 F0 FF FF 66 33 C0 E8 3C 03 33  // .u<f."...f3..<.3
    3000: C0 E8 1A 02 74 1C A9 DD 0F 74 F6 E8 1B FA F6 C3  // ....t....t......
    3010: 04 75 05 F6 C3 18 74 E9 E8 1F 00 50 E8 A0 FA 58  // .u....t....P...X
    3020: EB DF E8 0B 00 75 08 E8 20 00 8B C1 E8 90 FA C3  // .....u.. .......
    3030: 66 50 E8 1F 03 8B C8 66 58 C3 66 52 66 BA FF FF  // fP.....fX.fRf...
    3040: FF FF 33 D0 E8 F4 02 66 5A C3 50 53 52 E8 E0 FF  // ..3....fZ.PSR...
    3050: 75 09 33 C0 E8 C7 01 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    3060: E8 82 06 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // ......u....Z[X.V
    3070: 66 33 C0 66 BA 00 F0 FF FF E8 A5 05 66 C1 E6 10  // f3.f........f...
    3080: E8 A8 01 0B C0 74 03 E8 05 00 E8 85 05 5E C3 50  // .....t.......^.P
    3090: 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC 00 E8 7F 00  // Q.l.P2..........
    30A0: 8D 9C 08 03 E8 44 13 38 E8 74 0A 8A C5 E8 9B 12  // .....D.8.t......
    30B0: B0 02 E8 75 02 58 E8 79 00 66 51 8D 9C A4 01 E8  // ...u.X.y.fQ.....
    30C0: 29 13 66 8B C8 8B D3 8D 9C D0 02 E8 1D 13 66 3B  // ).f...........f;
    30D0: C1 75 16 53 8D 9C AA 01 E8 10 13 8B C8 8D 9C D6  // .u.S............
    30E0: 02 E8 07 13 3B C1 5B 74 05 B0 02 E8 3C 02 66 59  // ....;.[t....<.fY
    30F0: E8 71 FE E8 FF 01 66 25 FF 0F 00 00 59 58 66 BA  // .q....f%....YXf.
    3100: FF FF FF FF 33 D0 E8 18 05 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    3110: 9C C8 02 E8 D5 12 8A C4 E8 30 12 66 58 5B C3 53  // .........0.fX[.S
    3120: 66 50 8D 9C C8 02 E8 C2 12 8A E0 E8 1D 12 66 58  // fP............fX
    3130: 5B C3 8D 9C C8 02 E8 B2 12 32 C0 E8 0D 12 C3 66  // [........2.....f
    3140: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    3150: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    3160: 66 F7 F1 66 8B C8 66 5A C3 53 E8 48 01 66 C1 E2  // f..f..fZ.S.H.f..
    3170: 10 E8 36 01 8D 9C 98 01 E8 70 12 8A E8 8D 9C AC  // ..6......p......
    3180: 02 E8 67 12 8A C8 E8 96 0B 8A EB 5B C3 57 53 53  // ..g........[.WSS
    3190: E8 D6 FF E8 14 01 5B E8 A8 0B 74 61 80 FD 00 75  // ......[...ta...u
    31A0: 29 53 E8 19 FE 66 8B D0 E8 54 FA 8A CD 51 E8 25  // )S...f...T...Q.%
    31B0: FE 8A FD 59 E8 88 FF 5B E8 30 12 66 25 FF FF 00  // ...Y...[.0.f%...
    31C0: 00 66 3B C8 73 34 32 DB EB 33 80 FD 02 75 11 E8  // .f;.s42..3...u..
    31D0: 2C 01 8D 1F E8 14 12 3D 74 40 76 1E 32 DB EB 1D  // ,......=t@v.2...
    31E0: 80 FD 03 75 15 53 E8 C1 00 B3 03 E8 10 0B 5B E8  // ...u.S........[.
    31F0: F9 11 3B C2 76 04 32 DB EB 03 80 CB 01 5B 5F C3  // ..;.v.2......[_.
    3200: 53 8B F0 E8 17 0D 23 F0 74 09 8B C6 E8 7C 0B 8B  // S.....#.t....|..
    3210: F3 0B DB 5B C3 51 E8 31 FE E8 0F 00 59 C3 51 50  // ...[.Q.1....Y.QP
    3220: E8 FA 0C 8B C8 58 E8 02 00 59 C3 57 53 E8 2B 0D  // .....X...Y.WS.+.
    3230: 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83  // ..t......;.u....
    3240: FB FF 74 0B 83 C7 02 85 D9 74 F2 8B C3 EB 02 33  // ..t......t.....3
    3250: C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF  // ...[_.3....t....
    3260: 8B DE B9 00 01 E8 F5 0D 83 C6 08 E8 5F 0C EB E8  // ............_...
    3270: BB F0 46 B8 5A A5 E8 EA 10 C3 53 66 50 8D 9C 08  // ..F.Z.....SfP...
    3280: 03 E8 67 11 8A E8 66 58 5B C3 53 66 50 8D 9C C8  // ..g...fX[.SfP...
    3290: 02 E8 57 11 8A C8 66 58 5B C3 53 66 50 8D 9C C9  // ..W...fX[.SfP...
    32A0: 02 E8 47 11 8A C8 66 58 5B C3 53 8D 5C 14 E8 3A  // ..G...fX[.S.\..:
    32B0: 11 8B D0 5B C3 53 66 50 8D 5C 16 E8 2D 11 8B D0  // ...[.SfP.\..-...
    32C0: 66 58 5B C3 53 66 50 8D 9C 18 03 E8 1D 11 66 8B  // fX[.SfP.......f.
    32D0: D0 66 58 5B C3 53 66 50 8D 9C 1C 03 E8 0C 11 66  // .fX[.SfP.......f
    32E0: 8B D0 66 58 5B C3 53 66 50 8D 5C 10 E8 FC 10 8B  // ..fX[.SfP.\.....
    32F0: C8 66 58 5B C3 53 8D 5C 08 E8 EF 10 5B C3 53 66  // .fX[.S.\....[.Sf
    3300: 50 8D 5C 0C E8 E4 10 8B D0 66 58 5B C3 8D 5C 04  // P.\......fX[..\.
    3310: E8 D8 10 C3 51 8D 5C 04 32 C9 E8 72 10 59 C3 8D  // ....Q.\.2..r.Y..
    3320: 9C 18 03 66 8B C2 E8 22 10 C3 53 51 8A E8 E8 DC  // ...f..."..SQ....
    3330: FF 24 FD 0A E8 E8 DC FF 59 5B C3 53 66 50 51 66  // .$......Y[.SfPQf
    3340: 8B C8 BB 00 00 E8 24 0A 23 C2 0B C1 E8 26 0A 59  // ......$.#....&.Y
    3350: 66 58 5B C3 BB 00 00 E8 12 0A 66 25 DF 0F 00 00  // fX[.......f%....
    3360: C3 80 FA 14 C3 E8 D3 0C E8 61 0C E8 3F 0C 75 06  // .........a..?.u.
    3370: E8 BC 0B E8 43 0C C3 B0 01 C3 55 B3 01 E8 29 0E  // ....C.....U...).
    3380: 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66  // ].fSf........3.f
    3390: 5B C3 55 66 C1 E3 10 BB 00 00 E8 0C 0E 5D C3 E8  // [.Uf.........]..
    33A0: 61 0D BB 0A 00 E8 CD 09 C3 BB 0A 00 E8 BD 09 66  // a..............f
    33B0: 8B C8 E8 4E 0D BB 0A 00 66 2B C1 E8 B7 09 C3 E8  // ...N....f+......
    33C0: 29 00 0B C9 74 22 E8 A6 FC E8 24 07 66 51 66 8B  // )...t"....$.fQf.
    33D0: C8 BB 07 00 E8 95 09 66 25 00 FE 00 00 66 0B C1  // .......f%....f..
    33E0: E8 92 09 66 59 0C 01 C3 32 C0 C3 E8 50 02 0B C9  // ...fY...2...P...
    33F0: 75 06 E8 55 FC E8 56 02 51 E8 4E FC 66 C1 E6 10  // u..U..V.Q.N.f...
    3400: 33 C0 E8 10 FE 74 09 E8 EE 02 75 F6 33 C8 EB F2  // 3....t....u.3...
    3410: 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 E3 06 66  // X#.f......uc...f
    3420: C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3 FD 50 51 8B  // ...3....t5...PQ.
    3430: C8 E8 DE 01 85 C1 59 58 74 0D 50 E8 CF FE 24 03  // ......YXt.P...$.
    3440: 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8 01 58 74 D5  // <.Xu...P.....Xt.
    3450: E8 CC FC 50 E8 8B 07 58 B5 00 E8 B7 FE EB C6 E8  // ...P...X........
    3460: B0 01 E8 9B FD E8 1A 01 B1 00 E8 45 07 66 C1 EE  // ...........E.f..
    3470: 10 E8 87 06 A8 20 75 3B A8 40 75 03 E8 17 08 E8  // ..... u;.@u.....
    3480: 6E 06 0A C0 75 00 E8 89 01 E8 74 FD E8 6F FE E8  // n...u.....t..o..
    3490: CF FE 75 14 E8 4E 02 0A DB 74 0D E8 81 FC E8 41  // ..u..N...t.....A
    34A0: 07 B5 00 E8 6E FE EB 08 E8 28 07 B5 01 E8 64 FE  // ....n....(....d.
    34B0: E8 D5 00 C3 E8 66 0A C3 E8 9B FD E8 A6 06 33 C9  // .....f........3.
    34C0: E8 8B 01 66 33 D2 66 33 C0 E8 6F FE E8 4E 0A 0B  // ...f3.f3..o..N..
    34D0: C0 74 1C E8 74 07 E8 52 00 B1 FF E8 77 00 33 C0  // .t..t..R....w.3.
    34E0: E8 3B FD 74 0A E8 18 FD 50 E8 14 07 58 EB F1 32  // .;.t....P...X..2
    34F0: C9 E8 A6 01 E8 26 0A 0B C0 C3 E8 59 FD E8 64 06  // .....&.....Y..d.
    3500: 66 33 C0 66 BA 00 F0 FF FF E8 15 01 51 B1 01 E8  // f3.f........Q...
    3510: 6E 01 59 E8 47 07 33 C0 E8 03 FD 74 0A E8 E0 FC  // n.Y.G.3....t....
    3520: 50 E8 CD 06 58 EB F1 E8 F3 06 C3 B8 02 00 E8 CF  // P...X...........
    3530: FC 74 21 B8 02 00 E8 F0 F4 F6 C3 04 75 0A E8 DC  // .t!.........u...
    3540: 09 83 E0 FD E8 DF 09 C3 66 B8 02 00 00 00 E8 EA  // ........f.......
    3550: FD E8 36 F6 C3 E8 26 08 74 13 BB 02 00 E8 0C 08  // ..6...&.t.......
    3560: 8A E1 E8 10 08 E8 CD 06 0C 01 C3 0C 01 C3 51 E8  // ..............Q.
    3570: 0C 08 74 0C 8A CC BB 02 00 E8 F0 07 8A C4 8A E1  // ..t.............
    3580: 59 C3 B0 01 E8 09 06 C3 B0 00 E8 03 06 C3 E8 94  // Y...............
    3590: 0B 75 18 E8 7C 00 E8 67 FC 80 F9 01 75 0E 51 E8  // .u..|..g....u.Q.
    35A0: 31 06 B5 01 E8 6D FD 59 E8 DD FF C3 E8 D3 FF 51  // 1....m.Y.......Q
    35B0: E8 3E 06 B5 00 E8 5C FD 59 C3 B8 02 00 E8 40 FC  // .>....\.Y.....@.
    35C0: 74 03 E8 62 06 C3 E8 C6 04 3B C1 7C 35 8B C1 E8  // t..b.....;.|5...
    35D0: 06 05 E8 1A 07 8B C8 51 E8 36 05 E8 FA 04 59 E8  // .......Q.6....Y.
    35E0: 0D 07 3B C8 72 02 8B C1 8D 5C 04 E8 75 0D 32 C9  // ..;.r....\..u.2.
    35F0: E8 61 0A FE C1 38 C1 72 F7 8D 5C 04 E8 EC 0D 0B  // .a...8.r..\.....
    3600: C0 C3 33 C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02 03  // ..3....H3.......
    3610: D8 C3 53 BB 03 00 E8 53 07 66 25 FF 0F 00 00 5B  // ..S....S.f%....[
    3620: C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 3D 07 66  // .SfPfQf......=.f
    3630: 23 C2 66 0B C1 E8 3D 07 66 59 66 58 5B C3 66 50  // #.f...=.fYfX[.fP
    3640: BB 05 00 E8 26 07 25 FF 0F 8B C8 66 58 C3 E8 CC  // ....&.%....fX...
    3650: 08 23 C8 66 50 BB 05 00 E8 11 07 25 00 F0 0B C1  // .#.fP......%....
    3660: E8 12 07 66 58 C3 66 50 53 BB 06 00 E8 FD 06 A8  // ...fX.fPS.......
    3670: 10 75 09 BB F0 46 E8 72 0D 3D 5A A5 5B 66 58 C3  // .u...F.r.=Z.[fX.
    3680: 66 50 53 BB 06 00 E8 E3 06 80 F1 01 C0 E1 04 24  // fPS............$
    3690: EF 0A C1 E8 DF 06 5B 66 58 C3 53 66 50 BB F8 46  // ......[fX.SfP..F
    36A0: E8 48 0D 8A C1 E8 A3 0C 66 58 5B C3 53 BB F8 46  // .H......fX[.S..F
    36B0: E8 38 0D 83 E0 01 5B C3 53 66 50 BB 07 00 E8 AB  // .8....[.SfP.....
    36C0: 06 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB  // ....fX..t...[.S.
    36D0: 07 00 E8 97 06 80 E4 FE 80 FD 06 74 03 80 CC 01  // ...........t....
    36E0: E8 92 06 5B C3 66 50 BB 06 00 E8 7F 06 24 40 C0  // ...[.fP......$@.
    36F0: E8 06 8A D8 66 58 C3 C3 50 66 51 E8 02 FB 83 EC  // ....fX..PfQ.....
    3700: 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC C0 01  // ...f3.f.F.3.....
    3710: 8D 1D E8 D6 0C 0B C0 74 3D 8B DF B0 00 E8 2D 01  // .......t=.....-.
    3720: 74 2F 8B DF E8 67 F8 66 8B 46 00 3B C8 7F 10 72  // t/...g.f.F.;...r
    3730: 20 66 C1 C8 10 66 C1 C9 10 3B C8 7F 0E EB 12 66  //  f...f...;.....f
    3740: C1 C8 10 66 C1 C9 10 3B C8 72 06 8B D7 66 89 4E  // ...f...;.r...f.N
    3750: 00 83 C7 1C EB BA 0B D2 74 0A 8D 9C A4 01 E8 03  // ........t.......
    3760: F8 E9 88 00 66 33 C0 66 89 46 00 8D BC 4C 02 33  // ....f3.f.F...L.3
    3770: D2 8D 1D E8 75 0C 0B C0 74 58 66 50 E8 6E F4 3C  // ....u...tXfP.n.<
    3780: 01 66 58 74 05 3D 40 06 73 43 66 52 66 8B D0 8D  // .fXt.=@.sCfRf...
    3790: 5D 04 E8 56 0C E8 5D 00 8B CA 66 5A 74 2F 56 8D  // ]..V..]...fZt/V.
    37A0: 9C A4 01 8B F1 E8 DB F7 5E B0 00 E8 9F 00 74 1D  // ........^.....t.
    37B0: 8D 1D E8 36 0C 8B D9 8B 47 06 66 C1 E0 10 8B 47  // ...6....G.f....G
    37C0: 02 66 3B 46 00 72 06 8B D1 66 89 46 00 83 C7 08  // .f;F.r...f.F....
    37D0: EB 9F 0B D2 74 16 56 8D 9C A4 01 8B F2 E8 A3 F7  // ....t.V.........
    37E0: 5E 53 8D 9C BA 01 33 C0 E8 78 0B 5B 83 C4 04 0B  // ^S....3..x.[....
    37F0: D2 66 59 58 C3 57 53 51 E8 7E 07 3B 55 02 75 18  // .fYX.WSQ.~.;U.u.
    3800: 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A  // f.....f...;].u..
    3810: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB  // .t.:E.t......3..
    3820: 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 4A 07 3A  // .....Y[_.QfR.J.:
    3830: 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C  // e.u...t.:E.t....
    3840: E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 C3 66 51 66  // ..3.....fZY..fQf
    3850: 52 53 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8 8B 0B  // RSSf.....f......
    3860: 5B 66 8B D0 E8 27 F7 3B CA 72 0A 66 3B CA 72 05  // [f...'.;.r.f;.r.
    3870: E8 1A F9 75 02 32 C0 5B 66 5A 66 59 C3 56 57 E8  // ...u.2.[fZfY.VW.
    3880: A7 FF 8B F7 E8 FC F6 5F 5E C3 66 50 53 66 51 52  // ......._^.fPSfQR
    3890: 57 56 51 8B DE B9 08 00 E8 C2 07 59 8D 5C 08 8B  // WVQ........Y.\..
    38A0: C1 66 C1 E0 10 8A C2 E8 A1 0A F6 C2 03 75 24 8B  // .f...........u$.
    38B0: C1 24 7F BF 6D 39 80 3D FF 0F 84 0F 01 3A 05 75  // .$..m9.=.....:.u
    38C0: 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00 83 C7  // .f.E.f..........
    38D0: 05 EB E3 F6 C2 01 74 25 8B C1 E8 70 01 0F 84 EB  // ......t%...p....
    38E0: 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08 66 25  // .3.......u..\.f%
    38F0: FF FF 00 00 66 C1 E0 08 E8 50 0A EB B2 8A E1 8A  // ....f....P......
    3900: CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80  // ................
    3910: FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4 32 E4  // .pr*..us%..p..2.
    3920: 50 E8 30 02 8B D8 58 38 D8 72 05 33 C0 E9 9C 00  // P.0...X8.r.3....
    3930: E8 28 02 E8 B5 0A 0B C0 0F 84 90 00 EB 1B 32 C0  // .(............2.
    3940: E8 E6 FE 0F 84 85 00 8D 5C 16 8B 05 E8 14 0A 8B  // ........\.......
    3950: 45 06 66 C1 E0 10 8B 45 02 50 E8 92 03 66 C1 E1  // E.f....E.P...f..
    3960: 10 8B C8 58 8D 1C E8 E2 09 66 50 8D 5C 04 66 8B  // ...X.....fP.\.f.
    3970: C1 E8 D7 09 66 58 66 C1 E8 10 66 81 E1 FF FF 00  // ....fXf...f.....
    3980: 00 66 F7 E1 66 50 8D 5C 06 E8 5F 0A 8B C8 66 58  // .f..fP.\.._...fX
    3990: 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 C5 09 BF CD  // f..f...@.\......
    39A0: 39 83 F9 01 74 11 BF D5 39 81 F9 01 01 74 08 BF  // 9...t...9....t..
    39B0: DD 39 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8 8B 09  // .9...u..\.f.....
    39C0: 8D 5C 10 66 8B 45 04 E8 81 09 0B DB 5E 5F 5A 66  // .\.f.E......^_Zf
    39D0: 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90 01 02  // Y[fX..@....@....
    39E0: 80 02 90 01 03 80 02 90 01 04 40 01 90 01 05 40  // ..........@....@
    39F0: 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D 40 01  // ...........^..@.
    3A00: 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80 02 5E  // ..........^....^
    3A10: 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02 90 01  // ................
    3A20: 23 20 04 90 01 32 20 04 B0 02 33 20 04 C0 02 62  // # ...2 ...3 ...b
    3A30: 80 02 E0 01 FF 05 0A 05 05 05 00 00 00 05 0B 06  // ................
    3A40: 05 05 00 00 00 08 10 08 08 08 00 00 00 56 E8 27  // .............V.'
    3A50: 07 80 E4 01 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB  // ....;.t......3..
    3A60: 05 8B 44 02 0B C0 5E C3 57 53 50 E8 0A 07 83 E9  // ..D...^.WSP.....
    3A70: 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1 E0 03 C8  // .......v........
    3A80: FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F C3 66  // ...........X[_.f
    3A90: 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8 10 66 0F  // SQfR.A..w.f...f.
    3AA0: B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33 D2 66 F7  // ..f.....f..f3.f.
    3AB0: F3 E8 3B 02 66 5A 59 66 5B C3 53 66 50 BB 07 00  // ..;.fZYf[.SfP...
    3AC0: E8 A9 02 0A C0 66 58 5B C3 53 66 50 BB 07 00 E8  // .....fX[.SfP....
    3AD0: 9A 02 A8 01 66 58 5B C3 53 66 50 8D 5C 06 E8 0A  // ....fX[.SfP.\...
    3AE0: 09 8A C8 66 58 5B C3 51 B9 08 00 E8 84 05 59 C3  // ...fX[.Q......Y.
    3AF0: 53 8D 5C 08 E8 F4 08 24 03 5B C3 8D 5C 09 E8 EA  // S.\....$.[..\...
    3B00: 08 C3 51 53 B1 01 8A E8 8D 5C 08 E8 81 08 5B 59  // ..QS.....\....[Y
    3B10: C3 53 8D 1C E8 D4 08 5B C3 53 8D 5C 04 E8 CB 08  // .S.....[.S.\....
    3B20: 5B C3 53 8D 5C 16 E8 C2 08 5B C3 53 66 52 33 C0  // [.S.\....[.SfR3.
    3B30: E8 C2 FC 66 5A 75 1B E8 34 00 74 16 E8 15 00 40  // ...fZu..4.t....@
    3B40: 83 F8 05 73 0D E8 03 08 48 E8 0F 00 66 8B C2 E8  // ...s....H...f...
    3B50: F9 07 5B C3 BB 00 4E E8 91 08 C3 BB 08 4E C1 E0  // ..[...N......N..
    3B60: 03 03 D8 C3 BB 00 4E B9 32 00 E8 F0 04 C3 51 E8  // ......N.2.....Q.
    3B70: E2 FF 0B C0 74 12 8B C8 BB 08 4E E8 6D 08 66 3B  // ....t.....N.m.f;
    3B80: C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3 00 C3 00  // .t........Y.....
    3B90: 8A E8 BB 20 DF 3C 01 74 02 32 DB E8 39 28 E8 E9  // ... .<.t.2..9(..
    3BA0: F6 66 B8 80 06 00 08 66 33 DB 8A D9 8A CD E8 B6  // .f.....f3.......
    3BB0: 00 C3 66 51 66 52 66 57 66 B8 80 05 00 08 66 BB  // ..fQfRfWf.....f.
    3BC0: 00 4C 00 00 66 33 C9 8B CE E8 9B 00 66 5F 66 5A  // .L..f3......f_fZ
    3BD0: 66 59 C3 66 B8 80 07 00 04 66 33 DB 8B DE E8 86  // fY.f.....f3.....
    3BE0: 00 C3 66 B8 80 08 00 04 66 33 DB 8B DE E8 77 00  // ..f.....f3....w.
    3BF0: C3 66 B8 80 09 00 04 66 33 DB 8B DE E8 68 00 C3  // .f.....f3....h..
    3C00: C3 66 B8 80 0A 00 04 66 33 DB 8B DE E8 58 00 E8  // .f.....f3....X..
    3C10: F7 EF F6 C3 02 74 03 B0 00 C3 B0 01 C3 66 B8 80  // .....t.......f..
    3C20: 0D 00 00 E8 41 00 C3 66 B8 80 0F 00 04 66 33 DB  // ....A..f.....f3.
    3C30: 8A D9 E8 32 00 66 B8 80 0F 00 04 66 33 DB 56 E8  // ...2.f.....f3.V.
    3C40: 10 03 8B 5C 20 5E E8 1E 00 C3 66 B8 00 00 00 00  // ...\ ^....f.....
    3C50: E8 14 00 66 B8 80 0C 00 04 E8 0B 00 C3 66 B8 00  // ...f.........f..
    3C60: 01 00 00 E8 01 00 C3 83 EC 1C 8B EC 66 89 46 00  // ............f.F.
    3C70: 66 89 5E 04 66 89 4E 08 66 89 56 0C 66 89 7E 10  // f.^.f.N.f.V.f.~.
    3C80: 66 89 76 14 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8  // f.v...f......B..
    3C90: FA 02 83 C4 1C C3 51 8D 5C 14 E8 4E 07 66 C1 E0  // ......Q.\..N.f..
    3CA0: 10 E8 02 00 59 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ....Y......f=...
    3CB0: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    3CC0: 89 46 04 66 89 46 00 66 89 46 08 B0 01 88 46 09  // .F.f.F.f.F....F.
    3CD0: 66 B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66  // f.....f..f.F...f
    3CE0: C1 E0 10 8B C4 BB 35 00 E8 A1 02 83 C4 10 C3 3D  // ......5........=
    3CF0: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51  // ..v.......?$..SQ
    3D00: 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00  // fP.ht...t.......
    3D10: 75 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66  // u..xif3...fXY[.f
    3D20: 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13 74  // R..f......u....t
    3D30: 0E 80 FD 14 74 09 B3 03 80 F9 03 74 02 B3 02 66  // ....t......t...f
    3D40: 5A C3 E8 A6 06 66 C1 E8 10 0B C0 74 1C 53 83 C3  // Z....f.....t.S..
    3D50: 06 E8 97 06 5B 3D E0 01 72 0F 53 83 C3 18 E8 8A  // ....[=..r.S.....
    3D60: 06 5B A8 80 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C  // .[..u....2..S..L
    3D70: E8 46 06 5B C3 53 83 C3 4C E8 98 05 5B C3 56 E8  // .F.[.S..L...[.V.
    3D80: D0 01 8B 44 38 83 7C 20 00 5E C3 BB 00 50 83 F8  // ...D8.| .^...P..
    3D90: 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D 80  // .t2..T...t*..X=.
    3DA0: 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D 00  // .t"..\=..t...`=.
    3DB0: 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83 F8  // .t...d=..t...h..
    3DC0: 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02 E8  // @t.3..W.V.t..]..
    3DD0: 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B  // ...._.3._.RQ..t.
    3DE0: 56 E8 55 01 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74  // V.U...^3..O..?.t
    3DF0: 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3  // .:.t.....3...YZ.
    3E00: 56 51 E8 34 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83  // VQ.4.2..|.;].t..
    3E10: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3E20: 56 51 E8 14 01 32 C9 8D 7C 08 3B 1D 74 0C 83 C7  // VQ...2..|.;.t...
    3E30: 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    3E40: 51 E8 F5 00 32 C9 8D 7C 08 3A 1D 74 0C 83 C7 10  // Q...2..|.:.t....
    3E50: FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51  // ..:L.r.3...Y^.VQ
    3E60: E8 D6 00 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10  // ...2..|.;E.t....
    3E70: FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50  // ..:L.r.3...Y^.WP
    3E80: E8 DB FF 8A C3 8B 5D 02 E8 4F FF 58 5F C3 53 32  // ......]..O.X_.S2
    3E90: C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53  // ......t..O...[.S
    3EA0: 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3  // 2......t..o...[.
    3EB0: 50 57 8B DA E8 49 FF 75 04 33 DB EB 0D B0 14 8B  // PW...I.u.3......
    3EC0: 5D 08 E8 15 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53  // ]....t.._._X.fPS
    3ED0: 51 57 8D 1C 66 25 FF FF 00 00 E8 6E 04 8B D8 E8  // QW..f%.....n....
    3EE0: 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66  // ;.#.t1.u...t*fPf
    3EF0: 8B 45 04 8D 5C 0C E8 52 04 66 33 C0 8B 05 8D 5C  // .E..\..R.f3....\
    3F00: 04 E8 47 04 66 58 E8 85 FF E8 93 FF 8D 5C 08 66  // ..G.fX.......\.f
    3F10: 33 C0 8B C1 E8 34 04 5F 59 5B 66 58 C3 56 E8 18  // 3....4._Y[fX.V..
    3F20: 00 8B 44 04 5E C3 56 E8 0F 00 89 44 04 5E C3 C3  // ..D.^.V....D.^..
    3F30: BF 50 03 8B 3D 8B 7D 0C C3 BE 50 03 8B 34 8B 74  // .P..=.}...P..4.t
    3F40: 30 C3 1E 0E 1F BF 50 03 8B 3D 8B 7D 0E 83 C7 04  // 0.....P..=.}....
    3F50: 1F C3 BE 50 03 8B 34 8B 74 10 C3 BF 50 03 8B 3D  // ...P..4.t...P..=
    3F60: 8B 7D 26 83 C7 04 C3 BE 50 03 8B 34 8B 74 1A C3  // .}&.....P..4.t..
    3F70: BE 50 03 8B 34 8B 74 3A C3 BF 50 03 8B 3D 8B 7D  // .P..4.t:..P..=.}
    3F80: 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC 06 8B  // ................
    3F90: EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02 06 52  // ..F.f3..F...F..R
    3FA0: 8A D3 8B C5 E8 B2 16 5A 07 83 C4 06 C3 E8 80 FF  // .......Z........
    3FB0: 66 F7 45 10 01 00 00 00 C3 50 E8 73 FF B8 01 00  // f.E......P.s....
    3FC0: 09 45 10 58 C3 E8 68 FF 88 45 10 C3 66 53 83 EC  // .E.X..h..E..fS..
    3FD0: 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0  // H..f.^.f.N...f..
    3FE0: 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B E8 49  // ...........Hf[.I
    3FF0: 01 E8 83 01 E8 0E 00 BB 04 00 E8 6F FD 66 C1 E8  // ...........o.f..
    4000: 10 E8 C1 FF C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10  // ............f...
    4010: 8B C4 BB 16 00 E8 74 FF 66 BB 00 00 00 00 83 C4  // ......t.f.......
    4020: 0C E8 0C FF 66 8B C3 66 C1 E8 08 66 89 45 28 66  // ....f..f...f.E(f
    4030: 8B C3 66 C1 E0 18 66 89 45 2C C3 E8 F2 FE 66 8B  // ..f...f.E,....f.
    4040: 5D 08 66 8B 4D 0C C3 56 E8 25 FF 66 8B 44 08 5E  // ].f.M..V.%.f.D.^
    4050: C3 B0 02 C3 B0 01 C3 B0 02 C3 B0 08 C3 53 66 50  // .............SfP
    4060: 66 33 C0 E8 E5 02 83 C3 04 E2 F8 66 58 5B C3 32  // f3.........fX[.2
    4070: C0 C3 FC E8 75 03 66 C1 CB 10 E8 CE 02 66 C1 CB  // ....u.f......f..
    4080: 10 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 BA  // .f..........f...
    4090: 02 83 C3 04 E2 F6 C3 FC E8 50 03 66 AB 83 C3 04  // .........P.f....
    40A0: E2 F6 C3 66 50 B8 64 00 E8 10 00 66 58 C3 66 50  // ...fP.d....fX.fP
    40B0: B8 50 C3 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA  // .P......fX.R....
    40C0: E8 41 01 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 0C  // .A.fS..f.....f..
    40D0: AC 05 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8  // .....f...f.3.f..
    40E0: 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B  // s.f.f.....u.f.f;
    40F0: C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66  // .s.f...;.r.....f
    4100: 5B 5A C3 66 52 E8 FC 00 66 B8 0C AC 05 00 B2 00  // [Z.fR...f.......
    4110: 66 EF B2 04 66 ED 66 33 D2 66 BB 64 00 00 00 66  // f...f.f3.f.d...f
    4120: F7 F3 66 5A C3 66 50 53 BB 07 00 E8 3E FC 25 00  // ..fZ.fPS....>.%.
    4130: 02 35 00 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 68  // .5....[fX.fQ...h
    4140: 00 E8 23 FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9  // ..#.f3..L.f.....
    4150: 75 03 B9 00 0C 66 2B C1 E8 0C FE 66 89 44 04 89  // u....f+....f.D..
    4160: 4C 08 66 59 C3 56 1E 0E 1F E8 FB FD 66 8B 44 04  // L.fY.V......f.D.
    4170: 66 C1 E0 0A 1F 5E C3 C3 BE 50 03 8B 34 8B 74 1E  // f....^...P..4.t.
    4180: 83 C6 04 B9 1C 00 C3 56 E8 C7 FD 8A 6C 33 5E C3  // .......V....l3^.
    4190: 56 E8 BE FD 8A 44 24 80 FD 00 74 05 88 6C 33 0C  // V....D$...t..l3.
    41A0: 02 88 44 24 5E C3 32 C0 C3 66 53 83 EC 04 8B EC  // ..D$^.2..fS.....
    41B0: 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00 E8  // ..f.....f.^.....
    41C0: CA FD 8B EC 66 8B 46 00 83 C4 04 66 5B C3 83 EC  // ....f.F....f[...
    41D0: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 AB  // .....f..........
    41E0: FD 8B EC 66 8B 5E 00 66 8B 4E 00 66 8B 56 08 83  // ...f.^.f.N.f.V..
    41F0: C4 0C C3 66 B8 C8 91 05 00 C3 BF 50 03 8B 3D 8B  // ...f.......P..=.
    4200: 7D 12 C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // }...fP..=..u....
    4210: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    4220: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    4230: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    4240: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    4250: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    4260: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    4270: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    4280: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    4290: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    42A0: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    42B0: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    42C0: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    42D0: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    42E0: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    42F0: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    4300: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    4310: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    4320: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 BF 01  // Z.f...f.........
    4330: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 27 FE 66 03  // .fPf...f....'.f.
    4340: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    4350: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 8F 01  // .f[Z.fP.........
    4360: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    4370: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 59 01 66 D3 C8  // ...........Y.f..
    4380: 58 50 66 D3 C0 E8 67 01 66 58 66 5B 59 5A C3 66  // XPf...g.fXf[YZ.f
    4390: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    43A0: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    43B0: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    43C0: 66 C1 E3 10 66 C1 EB 0E E8 0B 01 C3 E8 35 FE 66  // f...f........5.f
    43D0: C1 E3 02 E8 00 01 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    43E0: C3 E8 20 FE E8 4A FF E8 EC 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    43F0: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    4400: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    4410: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    4420: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    4430: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    4440: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    4450: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1  // RfP...V..V......
    4460: A1 03 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    4470: 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66 8B 46  // ].fPUR.......f.F
    4480: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    4490: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD B2 18  // .Z]fXfX.fPR.f...
    44A0: 66 ED 2E A3 A1 03 5A 66 58 C3 66 52 66 53 E8 53  // f.....ZfX.fRfS.S
    44B0: FD 66 81 CB 00 00 00 80 E8 1B 00 66 5B 66 5A C3  // .f.........f[fZ.
    44C0: 66 52 66 53 E8 3D FD 66 81 CB 00 00 00 80 E8 1E  // fRfS.=.f........
    44D0: 00 66 5B 66 5A C3 66 81 FB FF 00 00 00 77 04 8A  // .f[fZ.f......w..
    44E0: D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66  // ...f....f...f..f
    44F0: 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00  // ......w.....f...
    4500: 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51  // f.f...f....U..SQ
    4510: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    4520: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    4530: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    4540: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    4550: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    4560: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    4570: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    4580: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    4590: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    45A0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    45B0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    45C0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    45D0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    45E0: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    45F0: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    4600: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    4610: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    4620: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    4630: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    4640: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    4650: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    4660: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    4670: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    4680: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    4690: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    46A0: 46 8A 04 6B F0 03 8A 84 D8 A2 26 01 47 26 8C D0  // F..k......&.G&..
    46B0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    46C0: F0 03 8B C3 FF 94 D6 A2 26 8B 77 26 8A 04 32 E4  // ........&.w&..2.
    46D0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    46E0: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    46F0: F0 03 8A 84 D8 A2 26 01 47 26 E9 80 FF 33 C0 33  // ......&.G&...3.3
    4700: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    4710: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    4720: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    4730: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    4740: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    4750: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11  // .W.&.g.&.W....y.
    4760: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    4770: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    4780: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    4790: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    47A0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    47B0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    47C0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    47D0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    47E0: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    47F0: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    4800: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    4810: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    4820: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    4830: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    4840: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    4850: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    4860: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    4870: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    4880: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    4890: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    48A0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    48B0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    48C0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    48D0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    48E0: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    48F0: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    4900: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9  // ..&.G.&.T....+..
    4910: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    4920: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    4930: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    4940: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    4950: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    4960: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    4970: 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4  // u..../.^[.&.G42.
    4980: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    4990: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    49A0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    49B0: B6 49 AB 49 C1 49 10 4A C7 49 DF 49 F9 49 04 4A  // .I.I.I.J.I.I.I.J
    49C0: 0A 4A 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // .JSQV.........&.
    49D0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    49E0: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    49F0: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    4A00: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    4A10: A4 48 49 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .HI&.G.&.W..T.&.
    4A20: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    4A30: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    4A40: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    4A50: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    4A60: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    4A70: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    4A80: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    4A90: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    4AA0: 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    4AB0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    4AC0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    4AD0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    4AE0: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    4AF0: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    4B00: 80 E3 07 32 FF 03 DB FF 97 66 A2 5B C3 53 52 56  // ...2.....f.[.SRV
    4B10: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    4B20: 82 A2 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ..&.G.&.W.&.G-2.
    4B30: 8B F0 03 F0 8B C3 FF 94 9A A2 26 89 47 04 26 89  // ..........&.G.&.
    4B40: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    4B50: 8B F1 8A 8C CA A2 E3 0A 26 D1 6F 06 26 D1 5F 04  // ........&.o.&._.
    4B60: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C AA  // ..&.O+2.........
    4B70: A2 8B B4 AC A2 26 21 4F 04 26 21 77 06 26 8A 4F  // .....&!O.&!w.&.O
    4B80: 2A 32 ED 8B F1 8A 8C D2 A2 E3 0A 26 D1 67 04 26  // *2.........&.g.&
    4B90: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    4BA0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    4BB0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    4BC0: 47 2A 8B F8 8A 8D D2 A2 32 ED 8B 84 AA A2 8B 94  // G*......2.......
    4BD0: AC A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    4BE0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4BF0: D2 A2 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..2...&.o.&._...
    4C00: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 AA A2 8B 94 AC  // &.G+............
    4C10: A2 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    4C20: F0 8A 8C D2 A2 32 ED E3 0A 26 D1 67 08 26 D1 57  // .....2...&.g.&.W
    4C30: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    4C40: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    4C50: 4F 2B 32 ED 8B F1 8A 8C CA A2 E3 0A 26 D1 6F 06  // O+2.........&.o.
    4C60: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4C70: 02 8B 8C AA A2 8B B4 AC A2 26 21 4F 04 26 21 77  // .........&!O.&!w
    4C80: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C D2 A2 E3 0A 26  // .&.O*2.........&
    4C90: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    4CA0: F1 C1 E6 02 8B 8C AA A2 8B B4 AC A2 26 21 4F 08  // ............&!O.
    4CB0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    4CC0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    4CD0: F0 8B C3 FF 94 82 A2 26 89 47 08 26 89 57 0A EB  // .......&.G.&.W..
    4CE0: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 8E  // .&.G,2..........
    4CF0: A2 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 9A  // .&.G-2..........
    4D00: A2 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    4D10: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    4D20: 8A 47 2A 8B F8 8A 8D D2 A2 32 ED 8B 84 AA A2 8B  // .G*......2......
    4D30: 94 AC A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    4D40: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    4D50: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    4D60: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    4D70: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 76 A2 5F 5A  // G,2.........v._Z
    4D80: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    4D90: F0 8A 8C D2 A2 32 ED E3 0A 26 D1 67 04 26 D1 57  // .....2...&.g.&.W
    4DA0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    4DB0: E6 02 26 8A 47 2A 8B F8 8A 8D D2 A2 32 ED 8B 84  // ..&.G*......2...
    4DC0: AA A2 8B 94 AC A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    4DD0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    4DE0: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    4DF0: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    4E00: C3 FF 94 82 A2 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    4E10: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    4E20: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 9A  // .&.O-2..........
    4E30: A2 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    4E40: FA 32 E4 8B F0 8A 8C CA A2 E3 0A 26 D1 6F 16 26  // .2.........&.o.&
    4E50: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    4E60: 8B 84 AA A2 8B 94 AC A2 26 21 47 14 26 21 57 16  // ........&!G.&!W.
    4E70: 26 8A 47 2A 32 E4 8B F0 8A 8C D2 A2 32 ED E3 0A  // &.G*2.......2...
    4E80: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    4E90: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    4EA0: 8B F0 03 F0 8B C3 FF 94 76 A2 8D 66 FC 5A 59 5D  // ........v..f.ZY]
    4EB0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    4EC0: 8C CA A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .....&.o.&._....
    4ED0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    4EE0: FF 94 76 A2 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ..v.Y...."....U.
    4EF0: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    4F00: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 76 A2  // &.G,2.........v.
    4F10: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    4F20: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    4F30: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 76 A2 5E 5B C3  // ,2.........v.^[.
    4F40: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    4F50: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    4F60: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    4F70: 76 A2 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // v.^Y[.SQV.......
    4F80: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    4F90: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    4FA0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    4FB0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    4FC0: F0 8B C3 FF 94 76 A2 5A C3 52 8B D8 E8 3E FB 8B  // .....v.Z.R...>..
    4FD0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    4FE0: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    4FF0: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    5000: 26 8B 4C 06 E8 B1 F2 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    5010: 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8  // Y.R........,....
    5020: 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18  // \.Z.QRW.........
    5030: FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    5040: 06 E8 F0 F1 26 89 44 0C 26 89 54 0E 8C D7 8E C7  // ....&.D.&.T.....
    5050: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    5060: E8 D1 F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B  // ...&.\.&.L....R.
    5070: D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3  // ..............Z.
    5080: 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1  // QR..............
    5090: 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B  // &.G.&.W.&;W.u.&;
    50A0: 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B  // G.u.&.G0.ZY...&.
    50B0: 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04  // G.&;G.r.u.&;W.s.
    50C0: 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52  // 3......&.G0ZY.QR
    50D0: 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // W..&.G,2........
    50E0: 94 82 A2 26 89 47 08 26 89 57 0A 8C D0 8E C0 26  // ...&.G.&.W.....&
    50F0: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D CA A2  // .G+2............
    5100: 32 ED 8B 84 AA A2 8B 94 AC A2 E3 06 D1 E0 D1 D2  // 2...............
    5110: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D  // ......&!G.&!W..M
    5120: FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B  // .U..QRW.....&.G+
    5130: 32 E4 8B F0 C1 E6 02 8B F8 8A 8D CA A2 32 ED 8B  // 2............2..
    5140: 84 AA A2 89 46 F4 8B 84 AC A2 89 46 F6 E3 08 D1  // ....F......F....
    5150: 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8  // f..V....~..F..F.
    5160: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 82 A2  // &.G,2...........
    5170: 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47  // &.G.&.W....G.&.G
    5180: 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23  // .&.W......V...&#
    5190: 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21  // G.&#W.&.G.&.W.&!
    51A0: 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1  // ...F.&!G....w5..
    51B0: 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08  // &.<.s.&.O...&.g.
    51C0: 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1  // &.W.....&.O...&.
    51D0: 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26  // o.&._...&!...F.&
    51E0: 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26  // !G.&.W.&.G.&.W.&
    51F0: 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .G.&.G,2........
    5200: 94 76 A2 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8  // .v..f._...R.....
    5210: 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57  // ...4.&.G.&.W.&.W
    5220: 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01  // .u.&.G.t........
    5230: 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F  // .&.G0Z.SQRV..&.O
    5240: 2D 32 ED 8B F1 03 F1 FF 94 9A A2 26 89 47 04 26  // -2.........&.G.&
    5250: 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C CA A2 E3  // .W.&.G+2........
    5260: 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    5270: F0 C1 E6 02 8B 84 AA A2 8B 94 AC A2 26 21 47 04  // ............&!G.
    5280: 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47  // &!W....R.....&.G
    5290: 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51  // .&.W.&.G.&.W.Z.Q
    52A0: 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B  // R.........&.w.&.
    52B0: 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02  // t..<ZZt[&.w.&.t.
    52C0: 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8  // .<cu.&.w.&.D....
    52D0: 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26  // !.&.G.&.W......&
    52E0: 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26  // .G.&.W.....&.W.&
    52F0: 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26  // .G.&;G.u.&;W.u.&
    5300: 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02  // .w.&..&.G...&.G.
    5310: 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52  // ZY.&._.&.G..ZY.R
    5320: 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A  // W......&.w.&.t..
    5330: 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA  // T...u.&.G".../..
    5340: FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75  // .u.&.w.&.?&.4&+u
    5350: 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A  // .&.w"..&........
    5360: C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F  // .2.......&.G"&._
    5370: 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9  // .&.G.._Z...&.g/.
    5380: 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26  // &.w.&.t..D.&.G4&
    5390: 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    53A0: 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26  // .t..t.&.w ..S..&
    53B0: 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26  // .G,2.$.&.g/....&
    53C0: 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02  // .G..O...&.w.&.t.
    53D0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    53E0: C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8  // ..@.&._.&.G.....
    53F0: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    5400: 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56  // .&.G..........SV
    5410: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    5420: 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86  // .G.&.G..........
    5430: F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    5440: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0  // 2.&.G.&.G.......
    5450: 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B  // ..c.SV..&.w...&.
    5460: 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51  // _.._....&.\.^[.Q
    5470: 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8  // R..&.w.&.D..&...
    5480: A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B  // ....&.w(.D.2....
    5490: F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32  // ....<.tO&.w(.T.2
    54A0: F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B  // ......&.G1&.w.&.
    54B0: 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4  // 4.D....2.$....2.
    54C0: 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B  // $.&.g/....&.G.&.
    54D0: 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6  // 7&.G.......&..&.
    54E0: 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47  // G2.&.O(ZY.S..&.G
    54F0: 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05  // 2.[.W......&..,.
    5500: 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02  // t.&.G,&:G0u.&.w.
    5510: 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7  // &.t.&...&.=.t...
    5520: 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83  // &._.&.w._.&._.&.
    5530: 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80  // G.._.SVW......&.
    5540: 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26  // .0.t.&.G0&:G,u &
    5550: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    5560: 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26  // ...&._.&.w._^[.&
    5570: 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C  // ._.&.G....SVW...
    5580: D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53  // ...&..0.t...U..S
    5590: 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26  // QRW..&.w.&.t...&
    55A0: C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26  // .G=.....&..=.s &
    55B0: 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B  // .w.&.W=2.&.|....
    55C0: F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26  // .....&.T5&.G=..&
    55D0: 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 F7 A2  // .....2..........
    55E0: 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88  // &.U.&..(.U....&.
    55F0: 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26  // W-&..(.U.......&
    5600: 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57  // .W+&..(.U....&.W
    5610: 2A 8A 94 F6 A2 26 88 57 2C 8D 66 F8 5F 5A 59 5B  // *....&.W,.f._ZY[
    5620: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    5630: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    5640: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    5650: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    5660: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    5670: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    5680: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    5690: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    56A0: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    56B0: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    56C0: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    56D0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    56E0: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    56F0: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    5700: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    5710: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    5720: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    5730: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    5740: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    5750: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    5760: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    5770: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    5780: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    5790: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    57A0: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    57B0: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    57C0: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    57D0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D  // ^.&)....F.......
    57E0: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    57F0: 97 F4 A2 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    5800: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    5810: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 82  // ....SQ..&.O.2...
    5820: E8 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 7D  // .Y[.SQ..&.O.2..}
    5830: E8 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    5840: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 40 E3 59 5B  // .SQ..&.O.2..@.Y[
    5850: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    5860: 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47  // &.W.f&.O.f..f&.G
    5870: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B  // .f&.W.fYfZfX[.S.
    5880: D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F  // .fPfRfQf&.G.f&.O
    5890: 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    58A0: 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 0C  // fZfX[.SW..&._...
    58B0: EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26  // ...f...._[.SW..&
    58C0: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    58D0: DA C1 E3 02 E8 0A EB EB D8 53 52 57 8B D8 26 8B  // .........SRW..&.
    58E0: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    58F0: 14 E8 2E EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C  // ...._Z[.SR..&.G.
    5900: 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B  // &.W..f.....&._&.
    5910: 5F 01 E8 0D EA 5A 5B C3 53 52 56 8B F0 26 8B 5C  // _....Z[.SRV..&.\
    5920: 26 8B 5F 01 E8 96 EA 8B D0 66 C1 E8 10 92 26 89  // &._......f....&.
    5930: 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8  // D.&.T.^Z[.SQRW..
    5940: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B  // &.G.&.W..f......
    5950: C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    5960: 10 8B DA C1 E3 02 8B C1 E8 EA E9 5F 5A 59 5B C3  // ..........._ZY[.
    5970: 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52  // ..f.......fPfQfR
    5980: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07  // fSfUfVfW....u...
    5990: 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02  // ....<.u..7....<.
    59A0: 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B  // u.._....<.u.....
    59B0: EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75  // ..^....<.u..}<.u
    59C0: 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8  // .......V..q<.u..
    59D0: 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C  // .....^..N..V..]<
    59E0: 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E  // .u..U<.u.......~
    59F0: 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04  // ..I<.u..A<.u..e.
    5A00: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75  // ...N..~..F../<.u
    5A10: 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB  // ..'<.u..Z....^..
    5A20: 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC  // .<.u...<.u......
    5A30: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    5A40: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    5A50: 1F C3 50 1E 2E 8E 1E 3B 27 8C D8 A3 BA 69 A3 CA  // ..P....;'....i..
    5A60: 69 A3 DC 69 2E 8E 1E 33 27 A3 AA 04 1F 58 CB 00  // i..i...3'....X..
    5A70: 30 31 2E 30 30 00 56 45 53 41 00 03 74 03 00 00  // 01.00.VESA..t...
    5A80: 01 00 00 00 00 00 00 00 00 03 04 14 8C 02 00 00  // ................
    5A90: 1C 02 00 00 08 5A 00 00 B9 3F 00 8B DF 83 C7 04  // .....Z...?......
    5AA0: FC 66 33 C0 F3 66 AB 8B FB BE 0E 5A B9 22 00 F3  // .f3..f.....Z."..
    5AB0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    5AC0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 9B DF B0 4F 32  // O ..".........O2
    5AD0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    5AE0: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    5AF0: 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45  // ..E.@..E...E...E
    5B00: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    5B10: E8 6F D8 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28  // .o.f........f.E(
    5B20: 8C C8 66 C1 E0 10 B8 C7 5D 66 89 45 0C 81 F9 FF  // ..f.....]f.E....
    5B30: 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 4C  // ..........S....L
    5B40: E8 47 DD 5B 06 1F 0F 84 B1 00 53 E8 C3 DF 66 89  // .G.[......S...f.
    5B50: 45 12 C7 45 16 08 10 8D 5C 0C E8 8E E8 66 89 45  // E..E....\....f.E
    5B60: 1F 66 89 45 36 8D 5C 10 E8 80 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    5B70: 89 45 3A 8D 5C 08 E8 72 E8 0A C0 75 03 5B EB 7B  // .E:.\..r...u.[.{
    5B80: E8 8E DF 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74  // ...f...=X.t.=^.t
    5B90: 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 35  // .w..E.....E....5
    5BA0: 27 89 45 08 8D 5C 04 E8 41 E8 66 8B C8 66 C1 E9  // '.E..\..A.f..f..
    5BB0: 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19  // ....E..E2.....E.
    5BC0: 8D 5C 14 E8 25 E8 5B 3D 00 03 77 2F 53 8B D8 B8  // .\..%.[=..w/S...
    5BD0: 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88  // ..3...[...E..E5.
    5BE0: 45 34 8E DB 57 53 BE 80 4C E8 FF D7 5B 5F 0B C9  // E4..WS..L...[_..
    5BF0: 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E  // u....%.2......O.
    5C00: DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3  // .^......th..u...
    5C10: EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 4C E8 69  // .!...ua..... L.i
    5C20: DC 74 55 E8 CA DE 0A C0 75 0E 66 C1 E8 10 80 E7  // .tU.....u.f.....
    5C30: 80 0A C7 E8 D5 02 EB 3A E8 2B DA 74 06 E8 BA D8  // .......:.+.t....
    5C40: E8 A9 D3 BE 20 4C E8 76 D7 74 2D E8 A5 00 E8 2C  // .... L.v.t-....,
    5C50: 00 66 BB 20 4C 00 4C E8 8D DE BE 00 4C E8 90 DE  // .f. L.L.....L...
    5C60: 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8  // f.....2....t..@.
    5C70: A6 D7 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33  // ...O2....O...V.3
    5C80: C0 8E C0 BE 20 4C E8 88 DE 8B C8 66 C1 E8 10 8B  // .... L.....f....
    5C90: D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88  // ....&..J......&.
    5CA0: 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26  // ...&..Q..&..P..&
    5CB0: C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85  // ..I.b&..L...&...
    5CC0: 04 10 26 C7 06 0C 01 99 73 8C C8 26 A3 0E 01 07  // ..&.....s..&....
    5CD0: 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00  // ^..........@....
    5CE0: 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01  // ................
    5CF0: 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01  // ................
    5D00: BE 6A 5C AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03  // .j\.............
    5D10: EF B9 09 00 BA CE 03 32 E4 BE 6E 5C 8A C4 EE AC  // .......2..n\....
    5D20: 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0  // B.J.............
    5D30: 03 32 E4 BE 77 5C 8A C4 EE AC EE FE C4 E2 F7 C3  // .2..w\..........
    5D40: BE 00 4C E8 AA DD 66 C1 E8 10 8B D8 E8 7A DD 75  // ..L...f......z.u
    5D50: 05 E8 66 DD 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 68  // ..f.u..O...O...h
    5D60: DD 74 53 BE 00 4C 80 FB 00 74 18 80 FB 01 75 05  // .tS..L...t....u.
    5D70: E8 A6 DD EB 1D 80 FB 02 75 10 8B C1 E8 59 DD D3  // ........u....Y..
    5D80: E8 8B C8 E8 40 D8 74 2E EB 08 80 FB 03 75 24 E8  // ....@.t......u$.
    5D90: FD DC E8 43 DD 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // ...C.....P3....;
    5DA0: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    5DB0: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    5DC0: 8A EF E8 09 D9 EB 05 E8 EE D8 8A F8 B0 4F 32 E4  // .............O2.
    5DD0: C3 00 E8 F4 DC 74 2C BE 00 4C E8 13 DD 66 C1 E8  // .....t,..L...f..
    5DE0: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    5DF0: FF 01 75 14 BB 13 00 E8 BF E5 D1 E8 8B D0 B0 4F  // ..u............O
    5E00: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    5E10: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    5E20: 00 E8 F0 E4 BB 12 00 E8 EA E4 66 58 5B 5A C3 9C  // ..........fX[Z..
    5E30: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5E40: 0E 1F E8 08 E6 E8 8A FF E8 27 E6 8B EC 89 56 10  // .........'....V.
    5E50: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    5E60: 58 07 1F 9D CB 0E 07 BF 9C A1 2E 8B 0E 9A A1 B8  // X...............
    5E70: 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB  // O.....u......&..
    5E80: 01 75 14 E8 E0 D7 75 21 53 B1 01 0A FF 74 02 B1  // .u....u!S....t..
    5E90: 00 E8 FA D6 5B EB 0D 80 FB 02 75 0D E8 0D D8 8A  // ....[.....u.....
    5EA0: F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3  // .....O2...O.....
    5EB0: 01 0A DB 75 05 BB 02 01 EB 0E E8 A9 D7 75 0E 33  // ...u.........u.3
    5EC0: C0 53 E8 33 CB 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // .S.3.[t..O2...O.
    5ED0: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    5EE0: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    5EF0: D1 E0 8B F0 58 2E FF 94 B4 5E 66 5F 66 5E 66 5D  // ....X....^f_f^f]
    5F00: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    5F10: C4 D1 E0 8B F0 58 2E FF 94 B4 5E C3 EE 5E 04 98  // .....X....^..^..
    5F20: 1D 98 3A 98 E1 5F 3D 8F 6F 8F E2 8F 65 90 F3 91  // ..:.._=.o...e...
    5F30: F7 91 00 95 D1 95 54 96 BB 96 56 98 B8 98 61 9B  // ......T...V...a.
    5F40: FA 61 A8 9F A2 5E A2 5E A2 5E A2 5E A2 5E A2 5E  // .a...^.^.^.^.^.^
    5F50: 78 A0 7B 84 CF 85 2E 8E 1E 33 27 80 26 87 04 F3  // x.{......3'.&...
    5F60: 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    5F70: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    5F80: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    5F90: 53 E8 70 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.pA..[u..&.....
    5FA0: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    5FB0: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    5FC0: 04 18 C7 06 0C 01 86 6B 8C 0E 0E 01 CD 42 C3 80  // .......k.....B..
    5FD0: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    5FE0: C8 E8 82 D6 74 06 E8 11 D5 E8 00 D0 B2 08 BE 40  // ....t..........@
    5FF0: 4C E8 96 D8 BE 40 4C E8 C5 D3 58 5B 0F 84 6E FF  // L....@L...X[..n.
    6000: 2E 8E 1E 33 27 0E 07 E8 19 29 0E 1F 53 66 BB 40  // ...3'....)..Sf.@
    6010: 4C 00 4C E8 D1 DA BE 00 4C B0 20 E8 FA D3 5B 2E  // L.L.....L. ...[.
    6020: 8E 1E 33 27 0E 07 E8 22 2E E8 24 00 E8 2E 3D E8  // ..3'..."..$...=.
    6030: D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00 4C B0 10 E8  // .......>....L...
    6040: D6 D3 E8 FD 2D E8 F5 2D C3 8B EC C6 46 1B 00 C3  // ....-..-....F...
    6050: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 62 0A C3  // ./........R..b..
    6060: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    6070: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    6080: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    6090: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    60A0: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    60B0: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    60C0: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    60D0: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    60E0: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    60F0: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    6100: 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...O-..t........
    6110: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    6120: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB B8 63  // ..&.'.C....[...c
    6130: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    6140: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    6150: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    6160: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    6170: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    6180: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    6190: C3 81 C3 00 05 C3 BF 3A 61 BE 5B 61 33 C9 E8 4E  // .......:a.[a3..N
    61A0: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    61B0: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    61C0: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    61D0: E3 2E 8B 87 77 61 A2 65 04 88 26 66 04 5B C3 2C  // ....wa.e..&f.[.,
    61E0: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    61F0: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    6200: 75 ED C3 1E 06 2E 8E 1E 33 27 F6 06 87 04 80 75  // u.......3'.....u
    6210: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    6220: 3E 39 27 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >9'&.G3.u.&.G..u
    6230: 1B 2E 8B 3E 37 27 EB 14 3C 06 7E 0B 2E 8B 3E 35  // ...>7'..<.~...>5
    6240: 27 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // '&.g7.@f3...f. .
    6250: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    6260: 1F C3 2E 8E 1E 33 27 80 FB 10 75 03 E9 7A 01 80  // .....3'...u..z..
    6270: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    6280: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    6290: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    62A0: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    62B0: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    62C0: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    62D0: 50 E8 30 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.0>........X..u
    62E0: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    62F0: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    6300: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    6310: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    6320: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    6330: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    6340: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    6350: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    6360: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    6370: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    6380: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    6390: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    63A0: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    63B0: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    63C0: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    63D0: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    63E0: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    63F0: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    6400: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    6410: 12 C3 9C FA C7 06 14 00 68 89 8C 0E 16 00 9D C3  // ........h.......
    6420: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    6430: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    6440: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6450: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    6460: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    6470: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    6480: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6490: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    64A0: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    64B0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    64C0: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    64D0: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    64E0: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    64F0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6500: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    6510: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    6520: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    6530: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    6540: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    6550: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    6560: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    6570: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    6580: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6590: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    65A0: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    65B0: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    65C0: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    65D0: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    65E0: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    65F0: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    6600: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    6610: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    6620: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    6630: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    6640: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    6650: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    6660: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    6670: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    6680: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    6690: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    66A0: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    66B0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    66C0: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    66D0: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    66E0: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    66F0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6700: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6710: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    6720: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    6730: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    6740: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    6750: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    6760: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    6770: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    6780: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    6790: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    67A0: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    67B0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    67C0: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    67D0: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    67E0: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    67F0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    6800: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6810: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    6820: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    6830: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    6840: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6850: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6860: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    6870: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    6880: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6890: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    68A0: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    68B0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    68C0: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    68D0: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    68E0: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    68F0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    6900: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6910: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6920: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    6930: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    6940: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    6950: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    6960: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    6970: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    6980: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    6990: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    69A0: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    69B0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    69C0: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    69D0: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    69E0: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    69F0: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    6A00: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6A10: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    6A20: B8 63 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .c..............
    6A30: D8 69 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .i..............
    6A40: 1A 00 76 A1 00 C0 00 00 00 00 00 00 00 00 00 00  // ..v.............
    6A50: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    6A60: 1E 33 27 E8 FE 36 E8 D5 36 E8 76 1A 1F C3 2E 8E  // .3'..6..6.v.....
    6A70: 1E 33 27 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // .3'....`........
    6A80: 04 0C 11 24 17 A2 89 04 B4 01 E8 73 1E A0 89 04  // ...$.......s....
    6A90: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    6AA0: 0E 1F E8 A5 C5 F7 C1 02 00 75 03 E8 3E C5 B8 03  // .........u..>...
    6AB0: 00 E8 57 F4 C3 1E 2E 8E 1E 33 27 0E 07 EB 00 1F  // ..W......3'.....
    6AC0: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6AD0: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 3A 6B B9  // ......>c..u/.:k.
    6AE0: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6AF0: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6B00: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6B10: 06 89 04 06 74 31 B9 F8 00 BF 38 65 3C 08 74 11  // ....t1....8e<.t.
    6B20: B9 40 00 BF B8 66 3C 38 74 07 3C 3F 74 03 BF F8  // .@...f<8t.<?t...
    6B30: 66 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // f3.........B....
    6B40: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6B50: 3F 74 2A B9 08 00 33 DB 51 E8 E6 D3 B9 08 00 F7  // ?t*...3.Q.......
    6B60: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6B70: E8 CF D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ......3..W....@.
    6B80: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6B90: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6BA0: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6BB0: C1 EF 02 83 E7 0F 2E 8A B5 2A 6B 8B FB D1 EF 83  // .........*k.....
    6BC0: E7 0F 2E 8A AD 2A 6B 8B FB 83 E7 0F 2E 8A 8D 2A  // .....*k........*
    6BD0: 6B C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // k.........B.G...
    6BE0: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6BF0: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6C00: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6C10: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6C20: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6C30: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6C40: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6C50: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6C60: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6C70: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6C80: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6C90: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6CA0: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6CB0: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6CC0: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6CD0: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6CE0: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6CF0: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6D00: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6D10: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    6D20: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    6D30: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    6D40: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    6D50: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    6D60: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    6D70: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6D80: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6D90: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6DA0: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6DB0: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6DC0: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6DD0: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6DE0: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6DF0: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6E00: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6E10: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    6E20: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    6E30: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    6E40: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    6E50: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    6E60: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    6E70: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6E80: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    6E90: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    6EA0: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    6EB0: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    6EC0: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    6ED0: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6EE0: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6EF0: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6F00: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6F10: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    6F20: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    6F30: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    6F40: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    6F50: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    6F60: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    6F70: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    6F80: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    6F90: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    6FA0: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    6FB0: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    6FC0: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    6FD0: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6FE0: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6FF0: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    7000: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    7010: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    7020: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    7030: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    7040: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    7050: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    7060: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    7070: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    7080: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    7090: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    70A0: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    70B0: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    70C0: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    70D0: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    70E0: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    70F0: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7100: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    7110: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    7120: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    7130: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    7140: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    7150: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    7160: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    7170: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    7180: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    7190: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    71A0: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    71B0: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    71C0: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    71D0: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    71E0: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    71F0: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7200: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    7210: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    7220: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    7230: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    7240: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    7250: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    7260: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    7270: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    7280: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    7290: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    72A0: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    72B0: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    72C0: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    72D0: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    72E0: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    72F0: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7300: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    7310: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    7320: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    7330: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    7340: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    7350: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    7360: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    7370: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    7380: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    7390: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    73A0: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    73B0: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    73C0: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    73D0: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    73E0: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    73F0: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7410: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    7420: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    7430: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    7440: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    7450: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    7460: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    7470: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    7480: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    7490: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    74A0: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    74B0: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    74C0: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    74D0: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    74E0: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    74F0: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7500: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    7510: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    7520: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    7530: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    7540: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    7550: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    7560: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    7570: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    7580: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    7590: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    75A0: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    75B0: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    75C0: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    75D0: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    75E0: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    75F0: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7610: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    7620: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    7630: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    7640: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    7650: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    7660: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    7670: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    7680: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    7690: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    76A0: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    76B0: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    76C0: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    76D0: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    76E0: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    76F0: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7700: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    7710: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    7720: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    7730: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    7740: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    7750: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    7760: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7770: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    7780: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7790: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    77A0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    77B0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    77C0: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    77D0: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    77E0: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    77F0: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7800: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    7810: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    7820: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    7830: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    7840: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    7850: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    7860: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    7870: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    7880: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7890: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    78A0: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    78B0: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    78C0: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    78D0: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    78E0: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    78F0: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7900: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    7910: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    7920: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    7930: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    7940: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    7950: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7960: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7970: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7980: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7990: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    79A0: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    79B0: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    79C0: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    79D0: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    79E0: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    79F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7A00: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7A10: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7A20: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    7A30: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    7A40: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    7A50: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7A60: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    7A70: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7A80: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7A90: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7AA0: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7AB0: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7AC0: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7AD0: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7AE0: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7AF0: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7B00: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7B10: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7B20: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7B30: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7B40: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7B50: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7B60: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7B70: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7B80: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7B90: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7BA0: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7BB0: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7BC0: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7BD0: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7BE0: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7BF0: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7C00: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7C10: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7C20: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7C30: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7C40: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7C50: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7C60: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7C70: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7C80: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7C90: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7CA0: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7CB0: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7CC0: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7CD0: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7CE0: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7CF0: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7D00: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7D10: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    7D20: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    7D30: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    7D40: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7D50: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    7D60: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    7D70: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7D80: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7D90: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7DA0: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7DB0: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7DC0: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7DD0: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7DE0: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7DF0: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7E00: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7E10: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    7E20: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    7E30: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    7E40: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    7E50: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    7E60: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    7E70: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7E80: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    7E90: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    7EA0: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    7EB0: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    7EC0: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    7ED0: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7EE0: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7EF0: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7F00: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7F10: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    7F20: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    7F30: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    7F40: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    7F50: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    7F60: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    7F70: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    7F80: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    7F90: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    7FA0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7FB0: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    7FC0: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    7FD0: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7FE0: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7FF0: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    8000: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    8010: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    8020: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    8030: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    8040: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    8050: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    8060: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    8070: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    8080: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    8090: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    80A0: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    80B0: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    80C0: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    80D0: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    80E0: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    80F0: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8100: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    8110: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    8120: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    8130: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    8140: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    8150: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    8160: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    8170: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    8180: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    8190: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    81A0: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    81B0: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    81C0: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    81D0: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    81E0: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    81F0: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8200: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    8210: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    8220: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    8230: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    8240: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    8250: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    8260: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    8270: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    8280: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    8290: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    82A0: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    82B0: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    82C0: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    82D0: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    82E0: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    82F0: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8300: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    8310: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    8320: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    8330: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    8340: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    8350: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    8360: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    8370: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    8380: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    8390: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    83A0: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    83B0: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    83C0: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    83D0: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    83E0: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    83F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8400: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    8410: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    8420: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    8430: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    8440: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    8450: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    8460: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    8470: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    8480: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    8490: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    84A0: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    84B0: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    84C0: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    84D0: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    84E0: 99 73 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .s...t..F.W2..@.
    84F0: F3 AA 5F BB 66 A1 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._.f.&..&.M....
    8500: 33 27 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // 3'W.I..........&
    8510: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    8520: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    8530: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    8540: 7F 1D 32 FF D1 E3 2E 8A 87 3E A1 32 E4 0A C0 74  // ..2......>.2...t
    8550: 01 40 26 89 45 27 2E 8A 87 3F A1 26 88 45 29 A1  // .@&.E'...?.&.E).
    8560: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    8570: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    8580: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    8590: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    85A0: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    85B0: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    85C0: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    85D0: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    85E0: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    85F0: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8600: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    8610: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    8620: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    8630: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    8640: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    8650: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    8660: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    8670: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    8680: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    8690: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    86A0: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    86B0: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    86C0: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    86D0: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    86E0: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    86F0: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8700: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    8710: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    8720: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    8730: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    8740: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    8750: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    8760: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    8770: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    8780: 89 47 02 51 57 2E 8E 1E 33 27 A0 10 04 24 30 AA  // .G.QW...3'...$0.
    8790: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    87A0: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    87B0: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    87C0: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    87D0: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    87E0: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    87F0: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8800: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    8810: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    8820: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    8830: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 33 27  // ...&......Q...3'
    8840: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    8850: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    8860: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    8870: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    8880: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8890: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    88A0: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    88B0: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    88C0: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    88D0: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    88E0: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    88F0: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8900: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    8910: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    8920: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    8930: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    8940: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    8950: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    8960: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    8970: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8980: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8990: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    89A0: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    89B0: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    89C0: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    89D0: 06 1E 60 2E 8E 1E 33 27 2E 83 0E 3D 27 00 75 6E  // ..`...3'...='.un
    89E0: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    89F0: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8A00: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8A10: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    8A20: B0 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    8A30: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    8A40: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    8A50: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    8A60: 32 C0 2E 8E 06 35 27 5A C3 A0 85 04 F6 E3 8A F7  // 2....5'Z........
    8A70: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8A80: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8A90: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8AA0: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8AB0: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8AC0: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8AD0: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8AE0: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8AF0: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8B00: EB 00 EC 4A 9D C3 1E 2E 8E 1E 33 27 8B 16 63 04  // ...J......3'..c.
    8B10: 80 C2 06 1F C3 1E 2E 8E 1E 33 27 8B 16 63 04 1F  // .........3'..c..
    8B20: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8B30: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 33 27 80 3E 49  // ...........3'.>I
    8B40: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8B50: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 37 27 A0  // t..>I....P...7'.
    8B60: 10 04 24 30 3C 30 74 05 2E 8E 06 39 27 58 0B C0  // ..$0<0t....9'X..
    8B70: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8B80: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8B90: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8BA0: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8BB0: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8BC0: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8BD0: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8BE0: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8BF0: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8C00: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8C10: C3 8B D8 E8 2E 00 2E 8E 1E 39 27 8A C3 22 DF D3  // .........9'.."..
    8C20: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8C30: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 39 27 8A 04 D2  // ...........9'...
    8C40: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8C50: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8C60: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8C70: 01 C3 FC 8A D8 2E 8E 06 39 27 8B C1 E8 86 00 75  // ........9'.....u
    8C80: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 39  // ......$........9
    8C90: 27 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // '.....m.u.......
    8CA0: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8CB0: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8CC0: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8CD0: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8CE0: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8CF0: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8D00: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8D10: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    8D20: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    8D30: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    8D40: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    8D50: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    8D60: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 16 8D  // ....Z...........
    8D70: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 16 8D C3 00 03  // ................
    8D80: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8D90: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8DA0: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8DB0: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8DC0: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8DD0: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8DE0: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8DF0: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8E00: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8E10: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    8E20: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    8E30: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    8E40: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    8E50: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    8E60: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    8E70: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8E80: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    8E90: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    8EA0: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    8EB0: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    8EC0: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    8ED0: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8EE0: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8EF0: 4E 75 F7 C3 2E 8E 1E 33 27 89 0E 60 04 8A C5 24  // Nu.....3'..`...$
    8F00: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8F10: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    8F20: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    8F30: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    8F40: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    8F50: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    8F60: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    8F70: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    8F80: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    8F90: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    8FA0: 0A E8 05 FE C3 2E 8E 1E 33 27 A2 62 04 32 E4 8B  // ........3'.b.2..
    8FB0: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    8FC0: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    8FD0: 84 50 04 E8 27 FE C3 2E 8E 1E 33 27 8A 26 49 04  // .P..'.....3'.&I.
    8FE0: E8 D7 AA 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    8FF0: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    9000: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    9010: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    9020: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    9030: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    9040: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 33 27 8A  // .....Z.U.....3'.
    9050: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    9060: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    9070: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    9080: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    9090: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    90A0: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    90B0: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    90C0: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    90D0: 33 27 2E 8E 06 39 27 E8 5D FA 74 11 80 3E 49 04  // 3'...9'.].t..>I.
    90E0: 07 7C 18 2E 8E 06 37 27 74 03 E9 B1 00 E8 49 FC  // .|....7't.....I.
    90F0: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9100: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    9110: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    9120: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    9130: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    9140: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    9150: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    9160: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    9170: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    9180: CC 74 0F 2E 8E 1E 33 27 C4 3E 7C 00 B0 80 B2 80  // .t....3'.>|.....
    9190: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    91A0: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 35 27 E8  // I..|.u..Z....5'.
    91B0: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    91C0: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    91D0: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    91E0: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    91F0: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9200: E9 44 FF 2E 8E 06 35 27 A1 50 04 8B D0 32 F6 52  // .D....5'.P...2.R
    9210: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    9220: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    9230: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    9240: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    9250: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    9260: 01 00 2E 8E 1E 33 27 2E 8E 06 39 27 8A 26 49 04  // .....3'...9'.&I.
    9270: E8 C4 F8 74 0F 2E 8E 06 37 27 80 FC 07 74 05 7C  // ...t....7'...t.|
    9280: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    9290: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    92A0: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    92B0: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    92C0: 8E 06 39 27 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ..9'.P.......P..
    92D0: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    92E0: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    92F0: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9300: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    9310: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    9320: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    9330: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    9340: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    9350: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    9360: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    9370: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    9380: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    9390: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    93A0: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    93B0: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    93C0: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    93D0: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    93E0: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    93F0: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9400: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    9410: C5 06 0C 01 03 F0 2E 8E 06 35 27 58 57 51 50 9C  // .........5'XWQP.
    9420: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    9430: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    9440: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    9450: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    9460: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    9470: 10 E8 46 A6 74 16 38 E0 74 12 0F B6 D0 E8 8B C9  // ..F.t.8.t.......
    9480: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    9490: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    94A0: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    94B0: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 35 27  // ..2.....P.[...5'
    94C0: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    94D0: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    94E0: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    94F0: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9500: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    9510: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    9520: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    9530: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    9540: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    9550: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    9560: B2 CE B8 03 18 EF EB BC 2E 8E 1E 33 27 80 3E 63  // ...........3'.>c
    9570: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    9580: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    9590: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    95A0: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    95B0: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    95C0: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    95D0: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    95E0: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    95F0: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 33 27 80  // &.].X[.......3'.
    9600: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    9610: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    9620: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    9630: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 33 27 8A 26  // ..... ......3'.&
    9640: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    9650: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    9660: CE 03 B0 08 EF 2E 8E 1E 35 27 F6 C3 80 75 1C B2  // ........5'...u..
    9670: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    9680: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    9690: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    96A0: 03 00 EF EB E1 50 2E 8E 06 35 27 A1 4A 04 C1 E0  // .....P...5'.J...
    96B0: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 33  // .......X&......3
    96C0: 27 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // '.&I..o.t....w.t
    96D0: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    96E0: 29 C3 E8 35 F7 8A CC 2E 8E 1E 35 27 BA CE 03 32  // )..5......5'...2
    96F0: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9700: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    9710: F7 E2 03 C1 8B F8 2E 8E 1E 35 27 8A 05 8B EC 88  // .........5'.....
    9720: 46 1A C3 2E 8E 1E 33 27 8A 3E 62 04 8A CF D0 E1  // F.....3'.>b.....
    9730: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    9740: 4A 2E 8E 06 39 27 E8 EE F3 75 33 8A 1E 4A 04 8A  // J...9'...u3..J..
    9750: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    9760: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    9770: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    9780: 06 37 27 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .7'...t....u.2..
    9790: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    97A0: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    97B0: F6 C3 3C 07 75 04 E8 E9 91 C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    97C0: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    97D0: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    97E0: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    97F0: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9800: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    9810: 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    9820: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    9830: ED 89 14 2E 8E 06 39 27 E8 FC F2 74 0E 2E 8E 06  // ......9'...t....
    9840: 37 27 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // 7'...t.2........
    9850: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    9860: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 33  // ...J......p....3
    9870: 27 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // '.....t..B..v...
    9880: C6 46 1B 00 C3 2E 8E 1E 33 27 8A DF 32 FF D1 E3  // .F......3'..2...
    9890: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    98A0: F5 C3 2E 8E 1E 33 27 8A DF 32 FF D1 E3 8B 97 50  // .....3'..2.....P
    98B0: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    98C0: 1E 33 27 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .3'...$...I..&J.
    98D0: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    98E0: 07 7F 21 51 8A CC 8A 2E 84 04 BE AF 98 81 FE B8  // ..!Q............
    98F0: 98 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9900: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    9910: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    9920: 2E 8E 1E 33 27 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...3'<...PR.....
    9930: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    9940: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    9950: A6 EB 98 23 99 43 99 55 99 8A 99 D4 98 D4 98 D4  // ...#.C.U........
    9960: 98 AF 99 C7 99 CB 99 D4 98 D4 98 D4 98 D4 98 D4  // ................
    9970: 98 D4 98 F9 99 D4 98 FD 99 18 9A D4 98 57 9A D4  // .............W..
    9980: 98 65 9A 80 9A 87 9A 93 9A B7 9A 80 3E 49 04 13  // .e..........>I..
    9990: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    99A0: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    99B0: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    99C0: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    99D0: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    99E0: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    99F0: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9A00: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9A10: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    9A20: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    9A30: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    9A40: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    9A50: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    9A60: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    9A70: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9A80: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9A90: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9AA0: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9AB0: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9AC0: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9AD0: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9AE0: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9AF0: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9B00: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9B10: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9B20: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9B30: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9B40: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9B50: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9B60: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9B70: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9B80: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9B90: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9BA0: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9BB0: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9BC0: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 33 27 8B F8  // ..u...YX....3'..
    9BD0: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9BE0: A5 7B 9B 83 9B 98 9B 36 9C 92 9C 3C 03 74 08 3C  // .{.....6...<.t.<
    9BF0: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9C00: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9C10: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9C20: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9C30: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9C40: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9C50: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9C60: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9C70: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9C80: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9C90: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9CA0: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9CB0: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9CC0: FE CA 0A DB 74 07 32 FF 2E 8A 97 76 9C 89 0E 85  // ....t.2....v....
    9CD0: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9CE0: 18 2A E8 09 03 B9 0E 00 EB D6 BD 86 6B B9 08 00  // .*..........k...
    9CF0: EB CA BD 99 73 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....s.......u...
    9D00: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9D10: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    9D20: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E 78 84 EB 10  // ...u........x...
    9D30: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF E9 9C  // ....2...........
    9D40: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    9D50: C3 99 73 86 6B 86 6F 86 73 99 73 99 83 53 06 8A  // ..s.k.o.s.s..S..
    9D60: 26 49 04 E8 C7 C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    9D70: 01 74 22 BD 99 73 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..s<.}..q....
    9D80: 01 3C 0E 7D 07 BD 86 6B 8C 0E 0E 01 89 2E 0C 01  // .<.}...k........
    9D90: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9DA0: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9DB0: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9DC0: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9DD0: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9DE0: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9DF0: 00 01 3C 04 75 07 B7 10 BD 99 73 EB 10 FE C8 75  // ..<.u.....s....u
    9E00: 07 B7 0E E8 E8 01 EB 05 B7 08 BD 86 6B E8 2D 00  // ............k.-.
    9E10: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    9E20: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    9E30: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    9E40: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    9E50: CD 80 1E 06 1F 2E 8E 06 35 27 8B FA C1 E7 05 B0  // ........5'......
    9E60: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    9E70: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9E80: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    9E90: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    9EA0: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    9EB0: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    9EC0: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    9ED0: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    9EE0: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    9EF0: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    9F00: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    9F10: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    9F20: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    9F30: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    9F40: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    9F50: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    9F60: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    9F70: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    9F80: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    9F90: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    9FA0: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    9FB0: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    9FC0: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    9FD0: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    9FE0: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    9FF0: 51 52 2E A1 3D 27 0B C0 74 09 2E 8B 2E 78 84 0E  // QR..='..t....x..
    A000: 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A 59 5B 58 C3  // ....0......ZY[X.
    A010: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 33 27 86 FB 32  // <.|....S...3'..2
    A020: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    A030: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    A040: EB 40 3C 0A 74 32 3C 07 75 05 E8 55 89 EB 62 3C  // .@<.t2<.u..U..b<
    A050: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    A060: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 64 BE FE C2  // .&.^.E......d...
    A070: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A080: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A090: 40 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // @....>I..t.2..>b
    A0A0: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A0B0: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A0C0: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A0D0: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F3 BD C3  // 6....J..........
    A0E0: 2E 8E 1E 33 27 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...3'..u.......^
    A0F0: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A100: 46 1A 1A C3 A0 8A 04 BF 76 A1 2E 3A 05 72 04 BB  // F.......v..:.r..
    A110: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A120: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A130: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 76  // t....u.....t...v
    A140: A1 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A150: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A160: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A170: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A180: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A190: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A1A0: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A1B0: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A1C0: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A1D0: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A1E0: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A1F0: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A200: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A210: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A220: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A230: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A240: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A250: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A260: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A270: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A280: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A290: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A2A0: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A2B0: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A2C0: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 7E 4A  // .f......f...X.~J
    A2D0: 71 4A 71 4A 71 4A 5C 4A 5C 4A 5C 4A 5C 4A 9E 46  // qJqJqJ\J\J\J\J.F
    A2E0: 15 47 3F 47 80 48 7F 48 7F 48 C5 48 2A 49 5A 49  // .G?G.H.H.H.H*IZI
    A2F0: 17 4A 40 4A 40 4A B7 48 AA 48 AA 48 AA 48 AA 48  // .J@J@J.H.H.H.H.H
    A300: AA 48 C5 48 2A 49 5A 49 17 4A 45 4A 8B 4A 40 4A  // .H.H*IZI.JEJ.J@J
    A310: 40 4A FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // @J..............
    A320: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A330: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 A2 44  // ...............D
    A340: 01 A2 44 02 B0 58 03 90 58 03 C7 45 03 7B 45 03  // ..D..X..X..E.{E.
    A350: A3 44 04 BC 44 04 CC 44 04 A2 44 03 00 00 00 00  // .D..D..D..D.....
    A360: 4F 4C 00 02 4F 4C 01 02 4F 4C 02 02 4F 4C 03 02  // OL..OL..OL..OL..
    A370: 4F 4C 04 02 4F 4C 05 02 49 4E 00 02 49 4E 01 02  // OL..OL..IN..IN..
    A380: 49 4E 02 02 49 4E 03 02 49 4E 04 02 49 4E 05 02  // IN..IN..IN..IN..
    A390: 7E 4E 00 02 7E 4E 01 02 7E 4E 02 02 7E 4E 03 02  // ~N..~N..~N..~N..
    A3A0: 7E 4E 04 02 7E 4E 05 02 B9 50 00 02 B9 50 01 02  // ~N..~N...P...P..
    A3B0: B9 50 02 02 B9 50 03 02 B9 50 04 02 B9 50 05 02  // .P...P...P...P..
    A3C0: B9 50 00 02 B9 50 01 02 B9 50 02 02 B9 50 03 02  // .P...P...P...P..
    A3D0: B9 50 04 02 B9 50 05 02 80 4F 00 02 80 4F 01 02  // .P...P...O...O..
    A3E0: 80 4F 02 02 80 4F 03 02 80 4F 04 02 80 4F 05 02  // .O...O...O...O..
    A3F0: BC 4F 00 02 BC 4F 01 02 BC 4F 02 02 BC 4F 03 02  // .O...O...O...O..
    A400: BC 4F 04 02 BC 4F 05 02 2D 4F 00 02 2D 4F 01 02  // .O...O..-O..-O..
    A410: 2D 4F 02 02 2D 4F 03 02 2D 4F 04 02 2D 4F 05 02  // -O..-O..-O..-O..
    A420: 61 4F 00 02 61 4F 01 02 61 4F 02 02 61 4F 03 02  // aO..aO..aO..aO..
    A430: 61 4F 04 02 61 4F 05 02 11 53 00 00 44 53 01 00  // aO..aO...S..DS..
    A440: 44 53 02 00 31 53 00 00 1F 52 00 02 18 50 00 02  // DS..1S...R...P..
    A450: 18 50 01 02 18 50 02 02 18 50 03 02 18 50 04 02  // .P...P...P...P..
    A460: 18 50 05 02 37 52 00 02 8C 54 05 00 8C 54 01 00  // .P..7R...T...T..
    A470: 8C 54 00 00 8C 54 02 00 CD 54 00 00 CD 54 02 00  // .T...T...T...T..
    A480: 12 55 00 00 A2 51 00 02 A2 51 01 02 A2 51 02 02  // .U...Q...Q...Q..
    A490: A2 51 03 02 A2 51 04 02 A2 51 05 02 5E 53 00 00  // .Q...Q...Q..^S..
    A4A0: 86 53 00 00 07 54 00 00 82 54 00 00 66 50 00 02  // .S...T...T..fP..
    A4B0: 66 50 01 02 66 50 02 02 66 50 03 02 66 50 04 02  // fP..fP..fP..fP..
    A4C0: 66 50 05 02 81 54 00 01 81 54 00 01 85 4D 00 02  // fP...T...T...M..
    A4D0: 85 4D 01 02 85 4D 02 02 85 4D 03 02 85 4D 04 02  // .M...M...M...M..
    A4E0: 85 4D 05 02 A6 53 00 00 82 54 00 00 82 54 00 00  // .M...S...T...T..
    A4F0: 82 54 00 00 B7 52 00 00 A9 4E 00 02 A9 4E 01 02  // .T...R...N...N..
    A500: A9 4E 02 02 A9 4E 03 02 A9 4E 04 02 A9 4E 05 02  // .N...N...N...N..
    A510: D8 4E 00 02 D8 4E 01 02 D8 4E 02 02 D8 4E 03 02  // .N...N...N...N..
    A520: D8 4E 04 02 D8 4E 05 02 0E 4F 00 02 0E 4F 01 02  // .N...N...O...O..
    A530: 0E 4F 02 02 0E 4F 03 02 0E 4F 04 02 0E 4F 05 02  // .O...O...O...O..
    A540: C9 53 00 00 EC 53 00 00 AA 4F 01 02 AA 4F 02 02  // .S...S...O...O..
    A550: 06 50 01 02 06 50 02 02 A6 00 02 01 96 A5 00 00  // .P...P..........
    A560: 00 00 00 00 00 00 00 00 FA A5 00 00 00 00 00 00  // ................
    A570: 00 00 00 00 00 00 80 AB 00 00 00 00 00 00 00 00  // ................
    A580: 00 00 00 00 00 00 00 00 46 A6 00 00 00 00 00 00  // ........F.......
    A590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A5A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9E AB  // ................
    A5B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A5C0: 00 00 00 00 00 00 6E A6 00 00 00 00 00 00 00 00  // ......n.........
    A5D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A5E0: 5E A7 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ^...............
    A5F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 63 00  // ..............c.
    A600: 02 01 00 00 37 00 00 4B E5 00 04 49 37 00 56 00  // ....7..K...I7.V.
    A610: 40 01 05 00 00 61 60 01 00 3C E5 01 00 80 44 37  // @....a`..<....D7
    A620: 00 51 14 2D 05 40 01 00 00 00 3E 05 40 20 A1 07  // .Q.-.@....>.@ ..
    A630: 00 45 13 00 5B 52 0D 03 00 41 E3 0D 3E 05 41 00  // .E..[R...A..>.A.
    A640: 00 00 00 44 62 00 33 05 41 01 00 00 00 1B 05 41  // ...Db.3.A......A
    A650: 0B 01 02 06 00 41 0D 25 1F 0E 03 0D 65 53 00 02  // .....A.%....eS..
    A660: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A670: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A680: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A690: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A6A0: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A6B0: 02 01 00 00 37 00 00 01 05 00 00 6C A8 01 00 02  // ....7......l....
    A6C0: 00 00 01 00 02 01 01 00 01 05 00 00 6D A8 01 00  // ............m...
    A6D0: 02 00 02 01 00 5B F0 00 03 03 0C 00 37 00 00 66  // .....[......7..f
    A6E0: 04 03 04 46 28 00 3E 05 46 00 00 00 00 49 3C 00  // ...F(.>.F....I<.
    A6F0: 03 01 00 00 03 01 01 01 03 01 02 02 52 16 03 01  // ............R...
    A700: 46 00 1B 05 46 08 02 02 00 00 02 02 01 01 02 02  // F...F...........
    A710: 02 02 3D 65 02 00 49 47 00 2C 22 02 46 3D E5 02  // ..=e..IG.,".F=..
    A720: 00 49 52 00 2C A2 02 46 3D 65 02 02 49 6D 00 01  // .IR.,..F=e..Im..
    A730: 05 00 00 E5 68 01 00 01 01 01 00 00 02 05 00 98  // ....h...........
    A740: A3 05 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05  // .....@...@....>.
    A750: 40 00 00 00 D0 49 90 00 01 05 63 C0 00 00 00 40  // @....I....c....@
    A760: 55 20 02 43 94 00 54 00 63 C0 01 01 64 C0 00 56  // U .C..T.c...d..V
    A770: 00 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0 01  // .@.!@...e.@..f..
    A780: 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65  // .1@...g.@.....=e
    A790: 02 01 44 E7 00 3D E5 02 01 44 E7 00 51 02 56 00  // ..D..=...D..Q.V.
    A7A0: 40 4A E5 A0 21 80 44 EF 00 51 14 2D 05 40 01 00  // @J..!.D..Q.-.@..
    A7B0: 00 00 3E 05 40 A0 86 01 00 45 CB 00 5B 4A E5 A0  // ..>.@....E..[J..
    A7C0: 21 80 49 E7 00 5B 21 04 01 01 04 00 37 00 00 3D  // !.I..[!.....7..=
    A7D0: 25 00 00 44 F5 00 4A 05 A3 36 02 00 00 00 44 20  // %..D..J..6....D 
    A7E0: 04 03 05 00 32 00 00 00 03 00 40 97 36 03 05 46  // ....2.....@.6..F
    A7F0: 00 31 00 00 04 02 04 40 03 03 41 05 3E 02 41 40  // .1.....@..A.>.A@
    A800: 48 4C 00 33 02 40 41 03 03 41 06 33 02 41 40 43  // HL.3.@A..A.3.A@C
    A810: 50 00 33 02 41 40 3E 05 41 00 00 00 00 44 70 00  // P.3.A@>.A....Dp.
    A820: 33 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 20  // 3......>......D 
    A830: 04 51 14 43 22 00 03 03 40 05 03 02 41 40 2D 05  // .Q.C"...@...A@-.
    A840: 40 00 00 00 00 03 02 46 40 04 01 00 00 04 01 01  // @......F@.......
    A850: 01 04 01 02 02 04 01 03 03 04 01 04 04 04 01 05  // ................
    A860: 05 04 01 06 06 2D 05 41 40 00 00 00 3E 05 41 00  // .....-.A@...>.A.
    A870: 20 00 00 45 B7 00 27 05 41 00 20 00 00 03 05 46  //  ..E..'.A. ....F
    A880: 00 31 00 00 04 02 05 41 01 02 96 36 41 03 05 00  // .1.....A...6A...
    A890: 80 1A 06 00 03 00 41 97 36 03 00 40 96 36 3E 02  // ......A.6..@.6>.
    A8A0: 41 40 44 20 04 33 05 00 01 00 00 00 3E 05 00 00  // A@D .3......>...
    A8B0: 00 00 00 44 20 04 51 14 43 CE 00 3D 65 00 01 44  // ...D .Q.C..=e..D
    A8C0: 32 01 4A 05 B6 36 00 00 01 00 49 32 01 4A 05 B6  // 2.J..6....I2.J..
    A8D0: 36 00 00 02 00 44 32 01 01 05 00 00 61 60 01 00  // 6....D2.....a`..
    A8E0: 01 05 01 00 00 00 00 08 01 05 00 00 61 60 01 00  // ............a`..
    A8F0: 3C E5 01 00 80 49 2A 01 4A 05 B6 36 00 00 02 00  // <....I*.J..6....
    A900: 49 D1 01 01 05 B8 36 00 00 02 10 03 05 41 0A 00  // I.....6......A..
    A910: 00 00 33 05 41 01 00 00 00 3E 05 41 00 00 00 00  // ..3.A....>.A....
    A920: 44 8F 01 51 0A 3C 05 B8 36 00 00 02 00 49 4C 01  // D..Q.<..6....IL.
    A930: 03 05 41 04 00 00 00 51 0A 33 05 41 01 00 00 00  // ..A....Q.3.A....
    A940: 3E 05 41 00 00 00 00 44 8F 01 3C 05 AA 36 AD DE  // >.A....D..<..6..
    A950: AD DE 49 71 01 01 05 B8 36 00 00 00 00 0D 05 B6  // ..Iq....6.......
    A960: 36 00 00 02 00 07 05 B6 36 FF FF FE FF 0D 05 01  // 6.......6.......
    A970: 38 00 01 00 00 51 0A 01 05 97 36 00 00 00 00 01  // 8....Q....6.....
    A980: 05 96 36 00 00 00 00 01 05 A3 36 00 00 00 00 07  // ..6.......6.....
    A990: 05 01 38 FF FE FF FF 66 0B 03 04 00 04 00 02 02  // ..8....f........
    A9A0: 04 00 15 05 00 0A 1A 05 04 16 02 05 00 00 00 00  // ................
    A9B0: 00 02 02 01 00 2C 05 01 00 00 02 00 55 00 02 02  // .....,......U...
    A9C0: 89 02 04 02 05 03 00 00 05 D0 52 35 02 05 00 00  // ..........R5....
    A9D0: 00 00 00 02 02 01 00 2C 05 01 00 00 00 00 55 00  // .......,......U.
    A9E0: 02 02 89 02 04 02 05 03 00 20 00 D0 52 35 66 16  // ......... ..R5f.
    A9F0: 3E 0D 42 00 00 44 9B 02 56 00 41 03 0C 41 00 00  // >.B..D..V.A..A..
    AA00: 2D 05 41 0F 00 00 00 09 05 41 F0 FF 00 00 2D 0A  // -.A......A....-.
    AA10: 41 42 03 05 46 00 80 00 00 56 08 42 04 04 00 00  // AB..F....V.B....
    AA20: 00 2D 05 46 04 00 00 00 2D 05 42 04 00 00 00 3E  // .-.F....-.B....>
    AA30: 02 42 41 45 56 02 02 05 00 00 80 00 00 2C 02 00  // .BAEV........,..
    AA40: 00 02 02 01 00 2C 05 01 00 00 02 00 02 89 02 04  // .....,..........
    AA50: 02 09 02 04 02 05 03 00 00 00 40 02 0A 03 41 52  // ..........@...AR
    AA60: 35 52 16 02 01 02 00 14 05 00 18 1A 05 02 08 03  // 5R..............
    AA70: 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01 02  // .A.-.A....-.A...
    AA80: 7B 36 41 03 01 40 04 2D 01 40 02 01 02 7C 36 40  // {6A..@.-.@...|6@
    AA90: 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01 83  // ..h6......p6....
    AAA0: 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00 01  // ..A.-.A....-.A..
    AAB0: 02 7D 36 41 03 01 40 04 2D 01 40 02 01 02 7E 36  // .}6A..@.-.@...~6
    AAC0: 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF 00  // @..i6......q6...
    AAD0: 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41 00  // ...A.-.A....-.A.
    AAE0: 01 02 7F 36 41 03 01 40 04 2D 01 40 02 01 02 80  // ...6A..@.-.@....
    AAF0: 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF FF  // 6@..j6......r6..
    AB00: 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01 41  // ....A.-.A....-.A
    AB10: 00 01 02 81 36 41 03 01 40 04 2D 01 40 02 01 02  // ....6A..@.-.@...
    AB20: 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36 FF  // .6@..k6......s6.
    AB30: FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D 05  // .....F.1....A.-.
    AB40: 41 00 00 00 00 2D 01 41 00 03 01 40 04 2D 01 40  // A....-.A...@.-.@
    AB50: 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00 00  // ....A...@.......
    AB60: 04 05 05 00 00 00 00 04 05 06 00 20 00 00 01 05  // ........... ....
    AB70: 94 36 00 00 00 80 01 05 95 36 00 20 00 00 01 02  // .6.......6. ....
    AB80: 56 36 41 01 02 57 36 40 01 05 61 36 FF FF 00 80  // V6A..W6@..a6....
    AB90: 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00 00  // ...6.......6....
    ABA0: 03 00 41 96 36 01 05 B1 36 00 00 00 00 5C 05 B6  // ..A.6...6....\..
    ABB0: 36 00 FF FF FF C6 00 09 00 07 05 B6 36 FF FF FD  // 6...........6...
    ABC0: FF 03 05 41 50 C3 00 00 4A 05 A3 36 02 00 00 00  // ...AP...J..6....
    ABD0: 49 20 04 51 14 33 05 41 01 00 00 00 3E 05 41 00  // I .Q.3.A....>.A.
    ABE0: 00 00 00 49 02 04 5B 00 1E 00 02 01 00 04 37 00  // ...I..[.......7.
    ABF0: 00 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 1D 00  // .f...A..L.A..D..
    AC00: 0D A5 4C 00 02 5B 15 00 03 01 04 00 37 00 00 03  // ..L..[......7...
    AC10: 05 46 10 27 00 00 02 02 00 46 5B FF FF FF FF FF  // .F.'.....F[.....
    AC20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    AC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC80: 00 00 00 00                                      // ....


WPBT
----
[000h 0000   4]                    Signature : "WPBT"    [Windows Platform Binary Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 56
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "GBT "
[020h 0032   4]        Asl Compiler Revision : 20181220

[024h 0036   4]                 Handoff Size : 000DD558
[028h 0040   8]              Handoff Address : 00000000BCC3E038
[030h 0048   1]                       Layout : 01
[031h 0049   1]                         Type : 01
[032h 0050   2]             Arguments Length : 0004
[034h 0052   4]       Command-line Arguments : "1"

Raw Table Data: Length 56 (0x38)

    0000: 57 50 42 54 38 00 00 00 01 56 41 4C 41 53 4B 41  // WPBT8....VALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 47 42 54 20  // A M I.......GBT 
    0020: 20 12 18 20 58 D5 0D 00 38 E0 C3 BC 00 00 00 00  //  .. X...8.......
    0030: 01 01 04 00 31 00 00 00                          // ....1...


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 68
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 68 41 4C 41 53 4B 41  // WSMT(....hALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


