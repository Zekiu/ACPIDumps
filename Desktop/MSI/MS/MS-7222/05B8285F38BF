
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  APIC  0x00000084  0x01  "P4M80P"  "AWRDACPI"  0x42302E31  "AWRD"   0x00000000
 02)  DSDT  0x000052A9  0x01  "P4M80P"  "AWRDACPI"  0x00001000  "MSFT"   0x0100000E
 03)  FACP  0x00000074  0x01  "P4M80P"  "AWRDACPI"  0x42302E31  "AWRD"   0x00000000
 04)  FACS  0x00000040  0x00

Found 4 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2F
[00Ah 0010   6]                       Oem ID : "P4M80P"
[010h 0016   8]                 Oem Table ID : "AWRDACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 00
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 01
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 02
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 03
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

    0000: 41 50 49 43 84 00 00 00 01 2F 50 34 4D 38 30 50  // APIC...../P4M80P
    0010: 41 57 52 44 41 43 50 49 31 2E 30 42 41 57 52 44  // AWRDACPI1.0BAWRD
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 00 00 00 00 00 08 02 02  // ................
    0040: 00 00 00 00 00 08 03 03 00 00 00 00 01 0C 04 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  // ................
    0070: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    0080: 03 05 00 01                                      // ....


DSDT
----
DefinitionBlock ("", "DSDT", 1, "P4M80P", "AWRDACPI", 0x00001000)
{
    Scope (\_PR)
    {
        Processor (\_PR.CPU0, 0x00, 0x00000000, 0x00) {}
        Processor (\_PR.CPU1, 0x01, 0x00000000, 0x00) {}
        Processor (\_PR.CPU2, 0x02, 0x00000000, 0x00) {}
        Processor (\_PR.CPU3, 0x03, 0x00000000, 0x00) {}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S1, Package (0x04)  // _S1_: S1 System State
    {
        0x04, 
        0x04, 
        0x04, 
        0x04
    })
    Name (\SS3, Package (0x04)
    {
        0x01, 
        0x01, 
        0x01, 
        0x01
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x02, 
        0x02, 
        0x02, 
        0x02
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x02, 
        0x02, 
        0x02, 
        0x02
    })
    OperationRegion (\DEBG, SystemIO, 0x80, 0x01)
    Field (\DEBG, ByteAcc, NoLock, Preserve)
    {
        DBG1,   8
    }

    OperationRegion (\DEB2, SystemIO, 0x84, 0x01)
    Field (\DEB2, ByteAcc, NoLock, Preserve)
    {
        DBG2,   8
    }

    OperationRegion (\DEB3, SystemIO, 0x88, 0x01)
    Field (\DEB3, ByteAcc, NoLock, Preserve)
    {
        DBG3,   8
    }

    OperationRegion (EXTM, SystemMemory, 0x000FF830, 0x10)
    Field (EXTM, WordAcc, NoLock, Preserve)
    {
        ROM1,   16, 
        RMS1,   16, 
        ROM2,   16, 
        RMS2,   16, 
        ROM3,   16, 
        RMS3,   16, 
        AMEM,   32
    }

    OperationRegion (\GPST, SystemIO, 0x0420, 0x02)
    Field (\GPST, ByteAcc, NoLock, Preserve)
    {
        GS00,   1, 
        GS01,   1, 
        GS02,   1, 
        GS03,   1, 
        GS04,   1, 
        GS05,   1, 
        GS06,   1, 
        GS07,   1, 
        GS08,   1, 
        GS09,   1, 
        GS10,   1, 
        GS11,   1, 
        GS12,   1, 
        GS13,   1, 
        GS14,   1, 
        GS15,   1
    }

    OperationRegion (ELCR, SystemIO, 0x04D0, 0x02)
    Field (ELCR, ByteAcc, NoLock, Preserve)
    {
        ELC1,   8, 
        ELC2,   8
    }

    OperationRegion (\PMS, SystemIO, 0x0400, 0x02)
    Field (\PMS, ByteAcc, NoLock, Preserve)
    {
        AITS,   1, 
        Offset (0x01), 
        PBTS,   1, 
            ,   6, 
        WAKE,   1
    }

    OperationRegion (\GPSE, SystemIO, 0x0424, 0x02)
    Field (\GPSE, ByteAcc, NoLock, Preserve)
    {
        GPS0,   1, 
        GPS1,   1, 
        KBCE,   1, 
        LANE,   1, 
        EXTE,   1, 
        PME,    1, 
        Offset (0x01), 
        RING,   1, 
            ,   5, 
        USBE,   1, 
        Offset (0x02)
    }

    OperationRegion (\GLOS, SystemIO, 0x0428, 0x02)
    Field (\GLOS, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        SSMI,   1, 
        PRII,   1, 
            ,   2, 
        SLPE,   1, 
        SIRS,   1, 
        Offset (0x02)
    }

    OperationRegion (\WIRQ, SystemIO, 0x042A, 0x01)
    Field (\WIRQ, ByteAcc, NoLock, Preserve)
    {
        IRQR,   8
    }

    OperationRegion (\SMIC, SystemIO, 0x042F, 0x01)
    Field (\SMIC, ByteAcc, NoLock, Preserve)
    {
        SCP,    8
    }

    OperationRegion (\STUS, SystemIO, 0x0430, 0x01)
    Field (\STUS, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        PADS,   7
    }

    OperationRegion (GPOB, SystemIO, 0x044C, 0x04)
    Field (GPOB, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
        GP01,   1, 
        GP02,   1, 
        GP03,   1, 
        GP04,   1, 
        GP05,   1, 
        GP06,   1, 
        GP07,   1, 
        GP08,   1, 
        GP09,   1, 
        GP10,   1, 
        GP11,   1, 
        GP12,   1, 
        GP13,   1, 
        GP14,   1, 
        GP15,   1, 
        GP16,   1, 
        GP17,   1, 
        GP18,   1, 
        GP19,   1, 
        GP20,   1, 
        GP21,   1, 
        GP22,   1, 
        GP23,   1, 
        GP24,   1, 
        GP25,   1, 
        GP26,   1, 
        GP27,   1, 
        GP28,   1, 
        GP29,   1, 
        GP30,   1, 
        GPXX,   1
    }

    Name (OSFX, 0x01)
    Name (OSFL, 0x01)
    Method (STRC, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    OperationRegion (RTCM, SystemIO, 0x70, 0x02)
    Field (RTCM, ByteAcc, NoLock, Preserve)
    {
        CMIN,   8, 
        CMDA,   8
    }

    IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x0F), 
        SHUT,   8
    }

    OperationRegion (INFO, SystemMemory, 0x000FF840, 0x01)
    Field (INFO, ByteAcc, NoLock, Preserve)
    {
        KBDI,   1, 
        RTCW,   1, 
        PS2F,   1, 
        IRFL,   2, 
        DISE,   1, 
        SSHU,   1
    }

    OperationRegion (BEEP, SystemIO, 0x61, 0x01)
    Field (BEEP, ByteAcc, NoLock, Preserve)
    {
        S1B,    8
    }

    OperationRegion (CONT, SystemIO, 0x40, 0x04)
    Field (CONT, ByteAcc, NoLock, Preserve)
    {
        CNT0,   8, 
        CNT1,   8, 
        CNT2,   8, 
        CTRL,   8
    }

    Method (SPKR, 1, NotSerialized)
    {
        Local0 = S1B /* \S1B_ */
        CTRL = 0xB6
        CNT2 = 0x55
        CNT2 = 0x03
        Local2 = Arg0
        While ((Local2 > 0x00))
        {
            S1B |= 0x03
            Local3 = 0x5FFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            S1B &= 0xFC
            Local3 = 0x0EFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            Local2--
        }

        S1B = Local0
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Name (SBFL, 0x00)
    Name (ATFL, 0x00)
    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        OSTP ()
        If ((Arg0 == 0x01))
        {
            While (PRII)
            {
                PRII = One
            }

            While ((PADS != 0x00))
            {
                PADS = PADS /* \PADS */
            }

            IRQR |= 0x80
        }

        If ((Arg0 == 0x03))
        {
            Local1 = (Arg0 | 0x50)
            SCP = Local1
        }

        If ((Arg0 == 0x04))
        {
            LANE = One
        }

        If ((Arg0 == 0x05))
        {
            GS04 = Zero
            LANE = One
        }

        Sleep (0x64)
        If ((Arg0 == 0x01)) {}
        If ((Arg0 == 0x03)) {}
        If ((Arg0 == 0x04)) {}
        If ((Arg0 == 0x05)) {}
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG1 = 0xFF
        If ((Arg0 == 0x01)) {}
        If ((Arg0 == 0x03)) {}
        If ((Arg0 == 0x01))
        {
            IRQR &= 0x7F
            While (PRII)
            {
                PRII = One
            }

            While ((PADS != 0x00))
            {
                PADS = PADS /* \PADS */
            }
        }

        If (OSFL)
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }
        ElseIf ((RTCW == 0x00))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }
    }

    Scope (\_SI)
    {
        Method (_MSG, 1, NotSerialized)  // _MSG: Message
        {
            Local0 = Local0
        }

        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x03)) {}
            If ((Arg0 == 0x01)) {}
            If ((Arg0 == Zero)) {}
            Local0 = Local0
        }
    }

    OperationRegion (TEMM, SystemMemory, 0x000FF810, 0x0C)
    Field (TEMM, WordAcc, NoLock, Preserve)
    {
        TP1H,   16, 
        TP1L,   16, 
        TP2H,   16, 
        TP2L,   16, 
        TRPC,   16, 
        SENF,   16
    }

    Name (TVAR, Buffer (0x05)
    {
         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
    })
    CreateByteField (TVAR, 0x00, PLCY)
    CreateWordField (TVAR, 0x01, CTOS)
    CreateWordField (TVAR, 0x03, CTHY)
    Name (TBUF, Buffer (0x04)
    {
         0x00, 0x00, 0x00, 0x00                           // ....
    })
    CreateByteField (TBUF, 0x00, DB00)
    CreateByteField (TBUF, 0x01, DB01)
    CreateWordField (TBUF, 0x00, DW00)
    CreateWordField (TBUF, 0x02, DW01)
    CreateDWordField (TBUF, 0x00, DATD)
    OperationRegion (SEN1, SystemIO, 0x0295, 0x02)
    Field (SEN1, ByteAcc, NoLock, Preserve)
    {
        SEI0,   8, 
        SED0,   8
    }

    Method (STOS, 3, NotSerialized)
    {
        If ((Arg2 < 0x0AAC))
        {
            Local0 = (Arg2 - 0x0AAC)
            Local0 %= 0x0A
        }
        Else
        {
            Local0 = (0x0AAC - Arg2)
            Local0 %= 0x0A
            Local0 += 0x80
        }

        WSEN (0x4E, 0x01)
        WSEN (0x53, Local0)
    }

    Method (STHY, 3, NotSerialized)
    {
        If ((Arg2 < 0x0AAC))
        {
            Local0 = (Arg2 - 0x0AAC)
            Local0 %= 0x0A
        }
        Else
        {
            Local0 = (0x0AAC - Arg2)
            Local0 %= 0x0A
            Local0 += 0x80
        }

        WSEN (0x4E, 0x01)
        WSEN (0x54, Local0)
    }

    Method (RTMP, 0, NotSerialized)
    {
        WSEN (0x4E, 0x01)
        Local0 = RSEN (0x50)
        If ((Local0 < 0x80))
        {
            Local0 *= 0x0A
            Local0 += 0x0AAC
        }
        Else
        {
            Local0 -= 0x80
            Local0 *= 0x0A
            Local0 = (0x0AAC - Local0)
        }

        If ((SSHU == 0x01))
        {
            Return (0x0C3C)
        }
        Else
        {
            Return (Local0)
        }
    }

    Method (WSEN, 2, NotSerialized)
    {
        SEI0 = Arg0
        SED0 = Arg1
    }

    Method (RSEN, 1, NotSerialized)
    {
        SEI0 = Arg0
        Local0 = SED0 /* \SED0 */
        Return (Local0)
    }

    Method (SFAN, 1, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            FOFF ()
        }
        Else
        {
            FON ()
        }
    }

    Method (FON, 0, NotSerialized)
    {
        WSEN (0x4E, 0x00)
        WSEN (0x01, 0xFF)
        WSEN (0x03, 0xFF)
    }

    Method (FOFF, 0, NotSerialized)
    {
        WSEN (0x4E, 0x00)
        WSEN (0x01, 0x00)
        WSEN (0x03, 0x00)
    }

    Scope (\_TZ)
    {
        Device (FAN)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CTOS = TP1H /* \TP1H */
                CTHY = TP1L /* \TP1L */
            }
        }

        ThermalZone (THRM)
        {
            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN
            })
            Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                If (Local7 = (PLCY | PLCY) /* \PLCY */)
                {
                    Return (TP2H) /* \TP2H */
                }
                Else
                {
                    Return (TP1H) /* \TP1H */
                }
            }

            Name (_PSL, Package (0x01)  // _PSL: Passive List
            {
                \_PR.CPU0
            })
            Name (_TSP, 0x3C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x04)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x03)  // _TC2: Thermal Constant 2
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If (Local7 = (PLCY | PLCY) /* \PLCY */)
                {
                    Return (TP1H) /* \TP1H */
                }
                Else
                {
                    Return (TP2H) /* \TP2H */
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (TRPC) /* \TRPC */
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local6 = (SENF & 0x01)
                If ((Local6 == 0x01))
                {
                    Return (RTMP ())
                }
                Else
                {
                    Return (0x0B86)
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                If (Arg0)
                {
                    PLCY = One
                }
                Else
                {
                    PLCY = Zero
                }

                Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
            }

            Method (STMP, 2, NotSerialized)
            {
                DW00 = Arg1
                If (Arg0)
                {
                    STHY (DB00, DB01, DW00)
                }
                Else
                {
                    STOS (DB00, DB01, DW00)
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.LAN0, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((SBFL == 0x00))
            {
                Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            }

            If ((SBFL == 0x01))
            {
                Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            }
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((SBFL == 0x02))
            {
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
            }

            If ((SBFL == 0x03))
            {
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
            }
        }

        Method (_L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.SLPB, 0x80) // Status Change
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UAR1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.AC97, 0x02) // Device Wake
        }
    }

    Scope (\_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x04, 
                0x05
            })
        }

        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x000F0000,         // Address Base
                        0x00004000,         // Address Length
                        _Y01)
                    Memory32Fixed (ReadWrite,
                        0x000F4000,         // Address Base
                        0x00004000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x000F8000,         // Address Base
                        0x00004000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x000FC000,         // Address Base
                        0x00004000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y00)
                    Memory32Fixed (ReadWrite,
                        0xFFFF0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0xFEC00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF80000,         // Address Base
                        0x00070000,         // Address Length
                        )
                })
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y00._BAS, ACMM)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y01._BAS, RMA1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y01._LEN, RSS1)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y02._BAS, RMA2)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y02._LEN, RSS2)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y03._BAS, RMA3)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y03._LEN, RSS3)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y04._BAS, RMA4)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y04._LEN, RSS4)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y05._LEN, EXTM)  // _LEN: Length
                EXTM = (AMEM - 0x00100000)
                If ((ROM1 != Zero))
                {
                    RMA2 = RMA1 /* \_SB_.MEM_._CRS.RMA1 */
                    Local0 = (ROM1 << 0x08)
                    RMA1 = Local0
                    Local0 = (RMS1 << 0x08)
                    RSS1 = Local0
                    RSS2 = 0x8000
                }

                If ((ROM2 != Zero))
                {
                    RMA3 = RMA2 /* \_SB_.MEM_._CRS.RMA2 */
                    Local0 = (ROM2 << 0x08)
                    RMA2 = Local0
                    Local0 = (RMS2 << 0x08)
                    RSS2 = Local0
                    RSS3 = 0xC000
                }

                If ((ROM3 != Zero))
                {
                    RMA4 = RMA3 /* \_SB_.MEM_._CRS.RMA3 */
                    Local0 = (ROM3 << 0x08)
                    RMA3 = Local0
                    Local0 = (RMS3 << 0x08)
                    RSS3 = Local0
                    RSS4 = 0x00010000
                }

                ACMM = AMEM /* \AMEM */
                Return (BUF0) /* \_SB_.MEM_._CRS.BUF0 */
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Method (SS3D, 0, NotSerialized)
            {
                If ((OSFL == 0x02))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            OperationRegion (GART, PCI_Config, 0x80, 0x01)
            Scope (\)
            {
                Field (\_SB.PCI0.GART, ByteAcc, NoLock, Preserve)
                {
                    GAR1,   8
                }
            }

            OperationRegion (GARA, PCI_Config, 0x88, 0x01)
            Scope (\)
            {
                Field (\_SB.PCI0.GARA, ByteAcc, NoLock, Preserve)
                {
                    GAR2,   8
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x05, 
                0x05
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0CF8,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0xFFFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0xF300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00100000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFFF00000,         // Length
                        ,, _Y06, AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y06._MIN, TCMM)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y06._LEN, TOMM)  // _LEN: Length
                TCMM = (AMEM + 0x00010000)
                TOMM = (0xFEC00000 - TCMM) /* \_SB_.PCI0._CRS.TCMM */
                Return (BUF0) /* \_SB_.PCI0._CRS.BUF0 */
            }

            Name (PICM, Package (0x28)
            {
                Package (0x04)
                {
                    0x0008FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKE, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKF, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK0, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }
            })
            Name (APIC, Package (0x28)
            {
                Package (0x04)
                {
                    0x0008FFFF, 
                    0x00, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x01, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    0x00, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    0x00, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    0x00, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    ALKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    ALKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    ALKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    ALKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    ALKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    ALKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    ALKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    ALKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    ALKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    ALKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    ALKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    ALKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    ALKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x01, 
                    ALKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x02, 
                    ALKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x03, 
                    ALKA, 
                    0x00
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Device (PMIO)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                    })
                    Return (BUF0) /* \_SB_.PCI0.PMIO._CRS.BUF0 */
                }
            }

            Device (VT86)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                OperationRegion (USBC, PCI_Config, 0x50, 0x02)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.USBC, ByteAcc, NoLock, Preserve)
                    {
                        IDEB,   8
                    }
                }

                OperationRegion (VTSB, PCI_Config, 0x00, 0xE8)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.VTSB, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        DEID,   16, 
                        Offset (0x2C), 
                        ID2C,   8, 
                        ID2D,   8, 
                        ID2E,   8, 
                        ID2F,   8, 
                        Offset (0x44), 
                        PIRE,   4, 
                        PIRF,   4, 
                        PIRG,   4, 
                        PIRH,   4, 
                        POLE,   1, 
                        POLF,   1, 
                        POLG,   1, 
                        POLH,   1, 
                        ENR8,   1, 
                        Offset (0x50), 
                        ESB4,   1, 
                        ESB3,   1, 
                        ESB2,   1, 
                        EIDE,   1, 
                        EUSB,   1, 
                        ESB1,   1, 
                        EAMC,   2, 
                        EKBC,   1, 
                        KBCC,   1, 
                        EPS2,   1, 
                        ERTC,   1, 
                        ELAN,   1, 
                            ,   2, 
                        USBD,   1, 
                        SIRQ,   8, 
                        Offset (0x55), 
                        PIRA,   8, 
                        PIBC,   8, 
                        PIRD,   8, 
                        Offset (0x75), 
                        BSAT,   1, 
                        Offset (0x94), 
                        PWC1,   2, 
                        GPO1,   1, 
                        GPO2,   1, 
                        GPO3,   1, 
                        PLLD,   1
                    }
                }

                Scope (\)
                {
                    Method (DISD, 1, NotSerialized)
                    {
                        Local0 = Local0
                    }

                    Method (CKIO, 2, NotSerialized)
                    {
                        Local0 = Local0
                    }

                    Method (SLDM, 2, NotSerialized)
                    {
                        Local0 = Local0
                    }
                }
            }

            Device (IDE0)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
                Name (REGF, 0x01)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((CMD0 == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                OperationRegion (VIDE, PCI_Config, 0x00, 0xC2)
                Scope (\)
                {
                    Field (\_SB.PCI0.IDE0.VIDE, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0x04), 
                        CMD0,   3, 
                        Offset (0x09), 
                        ENAT,   4, 
                        Offset (0x3C), 
                        IDEI,   8
                    }
                }

                Method (A133, 0, NotSerialized)
                {
                    If ((DEID != 0x3177))
                    {
                        If ((DEID == 0x3147))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Name (TIM0, Package (0x0F)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0258
                    }, 

                    Package (0x04)
                    {
                        0x20, 
                        0x31, 
                        0x65, 
                        0xA8
                    }, 

                    Package (0x08)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x08)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x06)
                    {
                        0x78, 
                        0x50, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14
                    }, 

                    Package (0x05)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x05)
                    {
                        0x06, 
                        0x04, 
                        0x02, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x05)
                    {
                        0x00, 
                        0x00, 
                        0x00, 
                        0x01, 
                        0x01
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x0B)
                    {
                        0x05, 
                        0x04, 
                        0x03, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x06)
                    {
                        0x0A, 
                        0x06, 
                        0x04, 
                        0x02, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x78, 
                        0x50, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14, 
                        0x0F
                    }, 

                    Package (0x0F)
                    {
                        0x06, 
                        0x05, 
                        0x04, 
                        0x04, 
                        0x03, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x0E, 
                        0x08, 
                        0x06, 
                        0x04, 
                        0x02, 
                        0x01, 
                        0x00
                    }
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, 0x00, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SSPT,   8, 
                    SMPT,   8, 
                    PSPT,   8, 
                    PMPT,   8, 
                    Offset (0x10), 
                    SSUT,   4, 
                    SSCT,   1, 
                    SSUE,   3, 
                    SMUT,   4, 
                    SMCT,   1, 
                    SMUE,   3, 
                    PSUT,   4, 
                    PSCT,   1, 
                    PSUE,   3, 
                    PMUT,   4, 
                    PMCT,   1, 
                    PMUE,   3
                }

                Name (GMPT, 0x00)
                Name (GMUE, 0x00)
                Name (GMUT, 0x00)
                Name (GSPT, 0x00)
                Name (GSUE, 0x00)
                Name (GSUT, 0x00)
                Name (GBCS, 0x00)
                Device (CHN0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (PMPT, PMUE, PMUT, PSPT, PSUE, PSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = PMPT /* \_SB_.PCI0.IDE0.PMPT */
                        GMUE = PMUE /* \_SB_.PCI0.IDE0.PMUE */
                        GMUT = PMUT /* \_SB_.PCI0.IDE0.PMUT */
                        GSPT = PSPT /* \_SB_.PCI0.IDE0.PSPT */
                        GSUE = PSUE /* \_SB_.PCI0.IDE0.PSUE */
                        GSUT = PSUT /* \_SB_.PCI0.IDE0.PSUT */
                        STM ()
                        PMPT = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        PMUE = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        PSPT = GSPT /* \_SB_.PCI0.IDE0.GSPT */
                        PSUE = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x00, PMUE, PMUT, PMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x01, PSUE, PSUT, PSPT))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (SMPT, SMUE, SMUT, SSPT, SSUE, SSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = SMPT /* \_SB_.PCI0.IDE0.SMPT */
                        GMUE = SMUE /* \_SB_.PCI0.IDE0.SMUE */
                        GMUT = SMUT /* \_SB_.PCI0.IDE0.SMUT */
                        GSPT = SSPT /* \_SB_.PCI0.IDE0.SSPT */
                        GSUE = SSUE /* \_SB_.PCI0.IDE0.SSUE */
                        GSUT = SSUT /* \_SB_.PCI0.IDE0.SSUT */
                        STM ()
                        SMPT = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        SMUE = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        SSPT = GSPT /* \_SB_.PCI0.IDE0.GSPT */
                        SSUE = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x02, SMUE, SMUT, SMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x03, SSUE, SSUT, SSPT))
                        }
                    }
                }

                Method (GTF, 4, Serialized)
                {
                    Local1 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    Local2 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    CreateByteField (Local1, 0x01, MODE)
                    CreateByteField (Local2, 0x01, UMOD)
                    CreateByteField (Local1, 0x05, PCHA)
                    CreateByteField (Local2, 0x05, UCHA)
                    Local3 = (Arg0 & 0x03)
                    If (((Local3 & 0x01) == 0x01))
                    {
                        PCHA = 0xB0
                        UCHA = 0xB0
                    }

                    If (Arg1)
                    {
                        If (A133 ())
                        {
                            UMOD = DerefOf (DerefOf (TIM0 [0x0D]) [Arg2])
                        }
                        Else
                        {
                            UMOD = DerefOf (DerefOf (TIM0 [0x0A]) [Arg2])
                        }

                        UMOD |= 0x40
                    }
                    Else
                    {
                        Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                            0x00)
                        UMOD = (0x20 | DerefOf (DerefOf (TIM0 [0x09]) [Local0]))
                    }

                    Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    MODE = (0x08 | DerefOf (DerefOf (TIM0 [0x08]) [Local0]))
                    Concatenate (Local1, Local2, Local6)
                    Return (Local6)
                }

                Method (GTM, 6, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                    }

                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg0, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1)
                    {
                        If (A133 ())
                        {
                            Local5 = DerefOf (DerefOf (TIM0 [0x0D]) [Arg2])
                        }
                        Else
                        {
                            Local5 = DerefOf (DerefOf (TIM0 [0x0A]) [Arg2])
                        }

                        If (A133 ())
                        {
                            DMA0 = DerefOf (DerefOf (TIM0 [0x0C]) [Local5])
                        }
                        Else
                        {
                            DMA0 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        }

                        CHNF |= 0x01
                    }

                    If (Arg4)
                    {
                        If (A133 ())
                        {
                            Local5 = DerefOf (DerefOf (TIM0 [0x0D]) [Arg5])
                        }
                        Else
                        {
                            Local5 = DerefOf (DerefOf (TIM0 [0x0A]) [Arg5])
                        }

                        If (A133 ())
                        {
                            DMA1 = DerefOf (DerefOf (TIM0 [0x0C]) [Local5])
                        }
                        Else
                        {
                            DMA1 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        }

                        CHNF |= 0x04
                    }

                    Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                    }

                    GMUE = 0x00
                    GSUE = 0x00
                    GMUT = 0x07
                    GSUT = 0x07
                    If ((CHNF & 0x01))
                    {
                        If (A133 ())
                        {
                            Local0 = Match (DerefOf (TIM0 [0x0C]), MLE, DMA0, MTR, 0x00, 
                                0x00)
                        }
                        Else
                        {
                            Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA0, MTR, 0x00, 
                                0x00)
                        }

                        If (A133 ())
                        {
                            GMUT = DerefOf (DerefOf (TIM0 [0x0E]) [Local0])
                        }
                        Else
                        {
                            GMUT = DerefOf (DerefOf (TIM0 [0x0B]) [Local0])
                        }

                        GMUE |= 0x07
                    }
                    ElseIf (((PIO0 == Ones) | (PIO0 == 0x00)))
                    {
                        If (((DMA0 < Ones) & (DMA0 > 0x00)))
                        {
                            PIO0 = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                        }
                    }

                    If ((CHNF & 0x04))
                    {
                        If (A133 ())
                        {
                            Local0 = Match (DerefOf (TIM0 [0x0C]), MLE, DMA1, MTR, 0x00, 
                                0x00)
                        }
                        Else
                        {
                            Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA1, MTR, 0x00, 
                                0x00)
                        }

                        If (A133 ())
                        {
                            GSUT = DerefOf (DerefOf (TIM0 [0x0E]) [Local0])
                        }
                        Else
                        {
                            GSUT = DerefOf (DerefOf (TIM0 [0x0B]) [Local0])
                        }

                        GSUE |= 0x07
                    }
                    ElseIf (((PIO1 == Ones) | (PIO1 == 0x00)))
                    {
                        If (((DMA1 < Ones) & (DMA1 > 0x00)))
                        {
                            PIO1 = DMA1 /* \_SB_.PCI0.IDE0.DMA1 */
                        }
                    }

                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO0, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GMPT = Local1
                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO1, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GSPT = Local1
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x000F0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.SATA.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.SATA.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                OperationRegion (SAPR, PCI_Config, 0x00, 0xC2)
                Field (SAPR, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    IDEI,   8, 
                    Offset (0x49), 
                        ,   6, 
                    EPHY,   1
                }
            }

            Device (PATA)
            {
                Name (_ADR, 0x000F0001)  // _ADR: Address
                Name (REGF, 0x01)
                Name (UTPF, 0x00)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PATA.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        PMEX ()
                        If ((\_SB.PCI0.PATA.CMDR == 0x00))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            UTPF = 0x01
                            Return (0x0F)
                        }
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x07)
                {
                    Package (0x05)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x017F, 
                        0x0258
                    }, 

                    Package (0x05)
                    {
                        0x20, 
                        0x22, 
                        0x33, 
                        0x47, 
                        0x5D
                    }, 

                    Package (0x05)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x78, 
                        0x50, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14, 
                        0x0F
                    }, 

                    Package (0x0F)
                    {
                        0x06, 
                        0x05, 
                        0x04, 
                        0x04, 
                        0x03, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x0E, 
                        0x08, 
                        0x06, 
                        0x04, 
                        0x02, 
                        0x01, 
                        0x00
                    }
                })
                Name (OT05, Package (0x0F)
                {
                    0x06, 
                    0x05, 
                    0x04, 
                    0x04, 
                    0x03, 
                    0x03, 
                    0x02, 
                    0x02, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x00
                })
                Name (OT06, Package (0x07)
                {
                    0x0E, 
                    0x08, 
                    0x06, 
                    0x04, 
                    0x02, 
                    0x01, 
                    0x00
                })
                Name (UT05, Package (0x0F)
                {
                    0x06, 
                    0x06, 
                    0x04, 
                    0x04, 
                    0x03, 
                    0x03, 
                    0x02, 
                    0x02, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x01, 
                    0x00
                })
                Name (UT06, Package (0x07)
                {
                    0x0E, 
                    0x08, 
                    0x06, 
                    0x04, 
                    0x02, 
                    0x01, 
                    0x01
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, 0x00, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (PAPR, PCI_Config, 0x00, 0xC2)
                Field (PAPR, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x09), 
                    ENAT,   4, 
                    Offset (0x3C), 
                    IDEI,   8, 
                    Offset (0x40), 
                    ESCH,   1, 
                    EPCH,   1, 
                    Offset (0x48), 
                    SSPT,   8, 
                    SMPT,   8, 
                    PSPT,   8, 
                    PMPT,   8, 
                    Offset (0x50), 
                    SSUT,   4, 
                    SSCT,   1, 
                    SSUE,   3, 
                    SMUT,   4, 
                    SMCT,   1, 
                    SMUE,   3, 
                    PSUT,   4, 
                    PSCT,   1, 
                    PSUE,   3, 
                    PMUT,   4, 
                    PMCT,   1, 
                    PMUE,   3
                }

                Name (GMPT, 0x00)
                Name (GMUE, 0x00)
                Name (GMUT, 0x00)
                Name (GSPT, 0x00)
                Name (GSUE, 0x00)
                Name (GSUT, 0x00)
                Device (CHN0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.PATA.EPCH != 0x01))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (PMPT, PMUE, PMUT, PSPT, PSUE, PSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = PMPT /* \_SB_.PCI0.PATA.PMPT */
                        GMUE = PMUE /* \_SB_.PCI0.PATA.PMUE */
                        GMUT = PMUT /* \_SB_.PCI0.PATA.PMUT */
                        GSPT = PSPT /* \_SB_.PCI0.PATA.PSPT */
                        GSUE = PSUE /* \_SB_.PCI0.PATA.PSUE */
                        GSUT = PSUT /* \_SB_.PCI0.PATA.PSUT */
                        STM ()
                        PMPT = GMPT /* \_SB_.PCI0.PATA.GMPT */
                        PMUE = GMUE /* \_SB_.PCI0.PATA.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.PATA.GMUT */
                        PSPT = GSPT /* \_SB_.PCI0.PATA.GSPT */
                        PSUE = GSUE /* \_SB_.PCI0.PATA.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.PATA.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x00, PMUE, PMUT, PMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x01, PSUE, PSUT, PSPT))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ATFL != 0x02))
                        {
                            If ((\_SB.PCI0.SATA.EPHY == 0x01))
                            {
                                Return (0x00)
                            }
                            ElseIf ((\_SB.PCI0.PATA.ESCH != 0x01))
                            {
                                Return (0x00)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        If ((ATFL == 0x02))
                        {
                            If ((\_SB.PCI0.PATA.ESCH != 0x01))
                            {
                                Return (0x00)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (SMPT, SMUE, SMUT, SSPT, SSUE, SSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = SMPT /* \_SB_.PCI0.PATA.SMPT */
                        GMUE = SMUE /* \_SB_.PCI0.PATA.SMUE */
                        GMUT = SMUT /* \_SB_.PCI0.PATA.SMUT */
                        GSPT = SSPT /* \_SB_.PCI0.PATA.SSPT */
                        GSUE = SSUE /* \_SB_.PCI0.PATA.SSUE */
                        GSUT = SSUT /* \_SB_.PCI0.PATA.SSUT */
                        STM ()
                        SMPT = GMPT /* \_SB_.PCI0.PATA.GMPT */
                        SMUE = GMUE /* \_SB_.PCI0.PATA.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.PATA.GMUT */
                        SSPT = GSPT /* \_SB_.PCI0.PATA.GSPT */
                        SSUE = GSUE /* \_SB_.PCI0.PATA.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.PATA.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x02, SMUE, SMUT, SMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x03, SSUE, SSUT, SSPT))
                        }
                    }
                }

                Method (PMEX, 0, Serialized)
                {
                    If (REGF)
                    {
                        If ((PMPT == 0xA8))
                        {
                            PMPT = 0x5D
                        }

                        If ((PMPT == 0x65))
                        {
                            PMPT = 0x33
                        }

                        If ((PMPT == 0x31))
                        {
                            PMPT = 0x22
                        }

                        If ((PSPT == 0xA8))
                        {
                            PSPT = 0x5D
                        }

                        If ((PSPT == 0x65))
                        {
                            PSPT = 0x33
                        }

                        If ((PSPT == 0x31))
                        {
                            PSPT = 0x22
                        }

                        If ((SMPT == 0xA8))
                        {
                            SMPT = 0x5D
                        }

                        If ((SMPT == 0x65))
                        {
                            SMPT = 0x33
                        }

                        If ((SMPT == 0x31))
                        {
                            SMPT = 0x22
                        }

                        If ((SSPT == 0xA8))
                        {
                            SSPT = 0x5D
                        }

                        If ((SSPT == 0x65))
                        {
                            SSPT = 0x33
                        }

                        If ((SSPT == 0x31))
                        {
                            SSPT = 0x22
                        }
                    }
                }

                Method (GTF, 4, Serialized)
                {
                    Local1 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    Local2 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    CreateByteField (Local1, 0x01, MODE)
                    CreateByteField (Local2, 0x01, UMOD)
                    CreateByteField (Local1, 0x05, PCHA)
                    CreateByteField (Local2, 0x05, UCHA)
                    Local3 = (Arg0 & 0x03)
                    If (((Local3 & 0x01) == 0x01))
                    {
                        PCHA = 0xB0
                        UCHA = 0xB0
                    }

                    If (Arg1)
                    {
                        If (UTPF)
                        {
                            UMOD = DerefOf (UT05 [Arg2])
                        }
                        Else
                        {
                            UMOD = DerefOf (OT05 [Arg2])
                        }

                        UMOD |= 0x40
                    }
                    Else
                    {
                        Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                            0x00)
                        UMOD = (0x20 | DerefOf (DerefOf (TIM0 [0x03]) [Local0]))
                    }

                    Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    MODE = (0x08 | DerefOf (DerefOf (TIM0 [0x02]) [Local0]))
                    Concatenate (Local1, Local2, Local6)
                    Return (Local6)
                }

                Method (GTM, 6, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                    }

                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg0, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1)
                    {
                        If (UTPF)
                        {
                            Local5 = DerefOf (UT05 [Arg2])
                        }
                        Else
                        {
                            Local5 = DerefOf (OT05 [Arg2])
                        }

                        DMA0 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        CHNF |= 0x01
                    }

                    If (Arg4)
                    {
                        If (UTPF)
                        {
                            Local5 = DerefOf (UT05 [Arg5])
                        }
                        Else
                        {
                            Local5 = DerefOf (OT05 [Arg5])
                        }

                        DMA1 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        CHNF |= 0x04
                    }

                    Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                    }

                    GMUE = 0x00
                    GSUE = 0x00
                    GMUT = 0x07
                    GSUT = 0x07
                    If ((CHNF & 0x01))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA0, MTR, 0x00, 
                            0x00)
                        If (UTPF)
                        {
                            GMUT = DerefOf (UT06 [Local0])
                        }
                        Else
                        {
                            GMUT = DerefOf (OT06 [Local0])
                        }

                        GMUE |= 0x07
                    }
                    ElseIf (((PIO0 == Ones) | (PIO0 == 0x00)))
                    {
                        If (((DMA0 < Ones) & (DMA0 > 0x00)))
                        {
                            PIO0 = DMA0 /* \_SB_.PCI0.PATA.DMA0 */
                        }
                    }

                    If ((CHNF & 0x04))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA1, MTR, 0x00, 
                            0x00)
                        If (UTPF)
                        {
                            GSUT = DerefOf (UT06 [Local0])
                        }
                        Else
                        {
                            GSUT = DerefOf (OT06 [Local0])
                        }

                        GSUE |= 0x07
                    }
                    ElseIf (((PIO1 == Ones) | (PIO1 == 0x00)))
                    {
                        If (((DMA1 < Ones) & (DMA1 > 0x00)))
                        {
                            PIO1 = DMA1 /* \_SB_.PCI0.PATA.DMA1 */
                        }
                    }

                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO0, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GMPT = Local1
                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO1, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GSPT = Local1
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x00110002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (SB72, PCI_Config, 0x00, 0xC2)
                Field (SB72, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U0IR,   4
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB0.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB0.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x00110003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (SB73, PCI_Config, 0x00, 0xC2)
                Field (SB73, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U1IR,   4
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB1.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB1.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00110004)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (SB74, PCI_Config, 0x00, 0xC2)
                Field (SB74, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U2IR,   4
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB2.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB2.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F0, PCI_Config, 0x00, 0xC2)
                Field (U2F0, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U3IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB3.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB3.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F1, PCI_Config, 0x00, 0xC2)
                Field (U2F1, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U4IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB4.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB4.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00100002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F2, PCI_Config, 0x00, 0xC2)
                Field (U2F2, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U5IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB5.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB5.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x00100003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F3, PCI_Config, 0x00, 0xC2)
                Field (U2F3, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U6IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB6.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB6.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x00100004)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (SS3D, 0, NotSerialized)
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F4, PCI_Config, 0x00, 0xC2)
                Field (U2F4, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U7IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB7.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB7.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (LAN0)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x05
                })
            }

            Device (AC97)
            {
                Name (_ADR, 0x00110005)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x05
                })
            }

            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRA & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFB, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFB) /* \_SB_.PCI0.LNKA._PRS.BUFB */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRA &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFB, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y07)
                            {}
                    })
                    CreateByteField (BUFB, \_SB.PCI0.LNKA._CRS._Y07._INT, IRB1)  // _INT: Interrupts
                    CreateByteField (BUFB, 0x02, IRB2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIRA & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRB1 = Local3
                        IRB2 = Local4
                    }

                    Return (BUFB) /* \_SB_.PCI0.LNKA._CRS.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRB1)
                    CreateByteField (Arg0, 0x02, IRB2)
                    Local0 = (IRB2 << 0x08)
                    Local0 |= IRB1 /* \_SB_.PCI0.LNKA._SRS.IRB1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    PIRA &= 0x0F
                    Local1 <<= 0x04
                    PIRA |= Local1
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIBC & 0x0F)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFA) /* \_SB_.PCI0.LNKB._PRS.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIBC &= 0xF0
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y08)
                            {}
                    })
                    CreateByteField (BUFA, \_SB.PCI0.LNKB._CRS._Y08._INT, IRA1)  // _INT: Interrupts
                    CreateByteField (BUFA, 0x02, IRA2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIBC & 0x0F)
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRA1 = Local3
                        IRA2 = Local4
                    }

                    Return (BUFA) /* \_SB_.PCI0.LNKB._CRS.BUFA */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRA1)
                    CreateByteField (Arg0, 0x02, IRA2)
                    Local0 = (IRA2 << 0x08)
                    Local0 |= IRA1 /* \_SB_.PCI0.LNKB._SRS.IRA1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    PIBC &= 0xF0
                    PIBC |= Local1
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIBC & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFC) /* \_SB_.PCI0.LNKC._PRS.BUFC */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIBC &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y09)
                            {}
                    })
                    CreateByteField (BUFC, \_SB.PCI0.LNKC._CRS._Y09._INT, IRC1)  // _INT: Interrupts
                    CreateByteField (BUFC, 0x02, IRC2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIBC & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRC1 = Local3
                        IRC2 = Local4
                    }

                    Return (BUFC) /* \_SB_.PCI0.LNKC._CRS.BUFC */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRC1)
                    CreateByteField (Arg0, 0x02, IRC2)
                    Local0 = (IRC2 << 0x08)
                    Local0 |= IRC1 /* \_SB_.PCI0.LNKC._SRS.IRC1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    PIBC &= 0x0F
                    Local1 <<= 0x04
                    PIBC |= Local1
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRD & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFD, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFD) /* \_SB_.PCI0.LNKD._PRS.BUFD */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRD &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFD, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0A)
                            {}
                    })
                    CreateByteField (BUFD, \_SB.PCI0.LNKD._CRS._Y0A._INT, IRD1)  // _INT: Interrupts
                    CreateByteField (BUFD, 0x02, IRD2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIRD & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRD1 = Local3
                        IRD2 = Local4
                    }

                    Return (BUFD) /* \_SB_.PCI0.LNKD._CRS.BUFD */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRD1)
                    CreateByteField (Arg0, 0x02, IRD2)
                    Local0 = (IRD2 << 0x08)
                    Local0 |= IRD1 /* \_SB_.PCI0.LNKD._SRS.IRD1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    PIRD &= 0x0F
                    Local1 <<= 0x04
                    PIRD |= Local1
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRE == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFE, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFE) /* \_SB_.PCI0.LNKE._PRS.BUFE */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRE = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFE, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0B)
                            {}
                    })
                    CreateByteField (BUFE, \_SB.PCI0.LNKE._CRS._Y0B._INT, IRE1)  // _INT: Interrupts
                    CreateByteField (BUFE, 0x02, IRE2)
                    IRE1 = Zero
                    IRE2 = Zero
                    Local0 = PIRE /* \PIRE */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local1 = (Local0 - 0x08)
                            IRE2 = (One << Local1)
                        }
                        Else
                        {
                            Local1 = Local0
                            IRE1 = (One << Local1)
                        }
                    }

                    Return (BUFE) /* \_SB_.PCI0.LNKE._CRS.BUFE */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRE1)
                    CreateByteField (Arg0, 0x02, IRE2)
                    If ((IRE2 > Zero))
                    {
                        FindSetLeftBit (IRE2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRE1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLE = Zero
                    PIRE = Local0
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRF == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFF, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFF) /* \_SB_.PCI0.LNKF._PRS.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRF = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFF, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0C)
                            {}
                    })
                    CreateByteField (BUFF, \_SB.PCI0.LNKF._CRS._Y0C._INT, IRF1)  // _INT: Interrupts
                    CreateByteField (BUFF, 0x02, IRF2)
                    IRF1 = Zero
                    IRF2 = Zero
                    Local0 = PIRF /* \PIRF */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local1 = (Local0 - 0x08)
                            IRF2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = Local0
                            IRF1 = (One << Local1)
                        }
                    }

                    Return (BUFF) /* \_SB_.PCI0.LNKF._CRS.BUFF */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRF1)
                    CreateByteField (Arg0, 0x02, IRF2)
                    If ((IRF2 > Zero))
                    {
                        FindSetLeftBit (IRF2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRF1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLF = Zero
                    PIRF = Local0
                }
            }

            Device (LNK0)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRG == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFG, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFG) /* \_SB_.PCI0.LNK0._PRS.BUFG */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRG = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFG, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0D)
                            {}
                    })
                    CreateByteField (BUFG, \_SB.PCI0.LNK0._CRS._Y0D._INT, IRG1)  // _INT: Interrupts
                    CreateByteField (BUFG, 0x02, IRG2)
                    IRG1 = Zero
                    IRG2 = Zero
                    Local0 = PIRG /* \PIRG */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local0 -= 0x08
                            IRG2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = 0x01
                            IRG1 = (Local1 << Local0)
                        }
                    }

                    Return (BUFG) /* \_SB_.PCI0.LNK0._CRS.BUFG */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRG1)
                    CreateByteField (Arg0, 0x02, IRG2)
                    If ((IRG2 > Zero))
                    {
                        FindSetLeftBit (IRG2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRG1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLG = Zero
                    PIRG = Local0
                }
            }

            Device (LNK1)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRH == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFH, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFH) /* \_SB_.PCI0.LNK1._PRS.BUFH */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRH = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFH, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0E)
                            {}
                    })
                    CreateByteField (BUFH, \_SB.PCI0.LNK1._CRS._Y0E._INT, IRH1)  // _INT: Interrupts
                    CreateByteField (BUFH, 0x02, IRH2)
                    IRH1 = Zero
                    IRH2 = Zero
                    Local0 = PIRH /* \PIRH */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local0 -= 0x08
                            IRH2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = 0x01
                            IRH1 = (Local1 << Local0)
                        }
                    }

                    Return (BUFH) /* \_SB_.PCI0.LNK1._CRS.BUFH */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRH1)
                    CreateByteField (Arg0, 0x02, IRH2)
                    If ((IRH2 > Zero))
                    {
                        FindSetLeftBit (IRH2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRH1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLH = Zero
                    PIRH = Local0
                }
            }

            Device (ALKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((SBFL == 0x00))
                    {
                        Return (0x09)
                    }

                    If ((SBFL == 0x01))
                    {
                        If ((EIDE == 0x01))
                        {
                            Return (0x09)
                        }
                        ElseIf ((ENAT == 0x0A))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    If ((SBFL == 0x02))
                    {
                        If ((EIDE == 0x01))
                        {
                            Return (0x09)
                        }
                        ElseIf ((ENAT == 0x0A))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    If ((SBFL == 0x03))
                    {
                        If ((ATFL != 0x02))
                        {
                            If ((\_SB.PCI0.SATA.VID != 0x1106))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                        ElseIf ((\_SB.PCI0.PATA.ENAT == 0x0A))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (A37A, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (A47N, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000014,
                        }
                    })
                    If ((SBFL == 0x00))
                    {
                        Return (A37A) /* \_SB_.PCI0.ALKA._PRS.A37A */
                    }

                    If ((SBFL == 0x01))
                    {
                        Return (A47N) /* \_SB_.PCI0.ALKA._PRS.A47N */
                    }

                    If ((SBFL == 0x02))
                    {
                        Return (A47N) /* \_SB_.PCI0.ALKA._PRS.A47N */
                    }

                    If ((SBFL == 0x03))
                    {
                        Return (A47N) /* \_SB_.PCI0.ALKA._PRS.A47N */
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (B37A, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y0F)
                            {}
                    })
                    CreateByteField (B37A, \_SB.PCI0.ALKA._CRS._Y0F._INT, IRB1)  // _INT: Interrupts
                    CreateByteField (B37A, 0x02, IRB2)
                    Name (B47A, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y10)
                        {
                            0x00000000,
                        }
                    })
                    CreateByteField (B47A, \_SB.PCI0.ALKA._CRS._Y10._INT, IRAI)  // _INT: Interrupts
                    If ((SBFL == 0x00))
                    {
                        Return (B37A) /* \_SB_.PCI0.ALKA._CRS.B37A */
                    }
                    Else
                    {
                        IRAI = 0x14
                        Return (B47A) /* \_SB_.PCI0.ALKA._CRS.B47A */
                    }
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                }
            }

            Device (ALKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((SBFL == 0x00))
                    {
                        Local0 = (IDEB & 0x34)
                        If ((Local0 == 0x34))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    If ((SBFL == 0x01))
                    {
                        Local0 = (IDEB & 0x30)
                        If ((Local0 == 0x30))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    If ((SBFL == 0x02))
                    {
                        Local0 = (IDEB & 0x36)
                        If ((Local0 == 0x36))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    If ((SBFL == 0x03))
                    {
                        Local0 = (IDEB & 0x37)
                        If ((Local0 == 0x37))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (A37B, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (A47B, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000015,
                        }
                    })
                    If ((SBFL == 0x00))
                    {
                        Return (A37B) /* \_SB_.PCI0.ALKB._PRS.A37B */
                    }

                    If ((SBFL == 0x01))
                    {
                        Return (A47B) /* \_SB_.PCI0.ALKB._PRS.A47B */
                    }

                    If ((SBFL == 0x02))
                    {
                        Return (A47B) /* \_SB_.PCI0.ALKB._PRS.A47B */
                    }

                    If ((SBFL == 0x03))
                    {
                        Return (A47B) /* \_SB_.PCI0.ALKB._PRS.A47B */
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (B37B, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y11)
                            {}
                    })
                    CreateByteField (B37B, \_SB.PCI0.ALKB._CRS._Y11._INT, IRA1)  // _INT: Interrupts
                    CreateByteField (B37B, 0x02, IRA2)
                    Name (B47B, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y12)
                        {
                            0x00000000,
                        }
                    })
                    CreateByteField (B47B, \_SB.PCI0.ALKB._CRS._Y12._INT, IRBI)  // _INT: Interrupts
                    If ((SBFL == 0x00))
                    {
                        Local3 = 0x00
                        Local4 = 0x00
                        Local1 = (PIBC & 0x0F)
                        If ((Local1 != 0x00))
                        {
                            If ((Local1 > 0x07))
                            {
                                Local2 = (Local1 - 0x08)
                                Local4 = (One << Local2)
                            }
                            ElseIf ((Local1 > 0x00))
                            {
                                Local3 = (One << Local1)
                            }

                            IRA1 = Local3
                            IRA2 = Local4
                        }

                        Return (B37B) /* \_SB_.PCI0.ALKB._CRS.B37B */
                    }
                    Else
                    {
                        IRBI = 0x15
                        Return (B47B) /* \_SB_.PCI0.ALKB._CRS.B47B */
                    }
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    If ((SBFL == 0x00))
                    {
                        CreateByteField (Arg0, 0x01, IRA1)
                        CreateByteField (Arg0, 0x02, IRA2)
                        Local0 = (IRA2 << 0x08)
                        Local0 |= IRA1 /* \_SB_.PCI0.ALKB._SRS.IRA1 */
                        Local1 = 0x00
                        Local0 >>= 0x01
                        While ((Local0 > 0x00))
                        {
                            Local1++
                            Local0 >>= 0x01
                        }

                        PIBC &= 0xF0
                        PIBC |= Local1
                    }
                }
            }

            Device (ALKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((EAMC == 0x03))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (A37C, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (A47C, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000016,
                        }
                    })
                    If ((SBFL == 0x00))
                    {
                        Return (A37C) /* \_SB_.PCI0.ALKC._PRS.A37C */
                    }

                    If ((SBFL == 0x01))
                    {
                        Return (A47C) /* \_SB_.PCI0.ALKC._PRS.A47C */
                    }

                    If ((SBFL == 0x02))
                    {
                        Return (A47C) /* \_SB_.PCI0.ALKC._PRS.A47C */
                    }

                    If ((SBFL == 0x03))
                    {
                        Return (A47C) /* \_SB_.PCI0.ALKC._PRS.A47C */
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (B37C, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y13)
                            {}
                    })
                    CreateByteField (B37C, \_SB.PCI0.ALKC._CRS._Y13._INT, IRC1)  // _INT: Interrupts
                    CreateByteField (B37C, 0x02, IRC2)
                    Name (B47C, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y14)
                        {
                            0x00000000,
                        }
                    })
                    CreateByteField (B47C, \_SB.PCI0.ALKC._CRS._Y14._INT, IRCI)  // _INT: Interrupts
                    If ((SBFL == 0x00))
                    {
                        Local3 = 0x00
                        Local4 = 0x00
                        Local1 = (PIBC & 0xF0)
                        Local1 >>= 0x04
                        If ((Local1 != 0x00))
                        {
                            If ((Local1 > 0x07))
                            {
                                Local2 = (Local1 - 0x08)
                                Local4 = (One << Local2)
                            }
                            ElseIf ((Local1 > 0x00))
                            {
                                Local3 = (One << Local1)
                            }

                            IRC1 = Local3
                            IRC2 = Local4
                        }

                        Return (B37C) /* \_SB_.PCI0.ALKC._CRS.B37C */
                    }
                    Else
                    {
                        IRCI = 0x16
                        Return (B47C) /* \_SB_.PCI0.ALKC._CRS.B47C */
                    }
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    If ((SBFL == 0x00))
                    {
                        CreateByteField (Arg0, 0x01, IRC1)
                        CreateByteField (Arg0, 0x02, IRC2)
                        Local0 = (IRC2 << 0x08)
                        Local0 |= IRC1 /* \_SB_.PCI0.ALKC._SRS.IRC1 */
                        Local1 = 0x00
                        Local0 >>= 0x01
                        While ((Local0 > 0x00))
                        {
                            Local1++
                            Local0 >>= 0x01
                        }

                        PIBC &= 0x0F
                        Local1 <<= 0x04
                        PIBC |= Local1
                    }
                }
            }

            Device (ALKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((SBFL == 0x01))
                    {
                        Return (0x09)
                    }
                    ElseIf ((ELAN == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (A37D, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (A47D, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000015,
                        }
                    })
                    Name (A77D, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000017,
                        }
                    })
                    If ((SBFL == 0x00))
                    {
                        Return (A37D) /* \_SB_.PCI0.ALKD._PRS.A37D */
                    }

                    If ((SBFL == 0x01))
                    {
                        Return (A47D) /* \_SB_.PCI0.ALKD._PRS.A47D */
                    }

                    If ((SBFL == 0x02))
                    {
                        Return (A77D) /* \_SB_.PCI0.ALKD._PRS.A77D */
                    }

                    If ((SBFL == 0x03))
                    {
                        Return (A77D) /* \_SB_.PCI0.ALKD._PRS.A77D */
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (B37D, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y15)
                            {}
                    })
                    CreateByteField (B37D, \_SB.PCI0.ALKD._CRS._Y15._INT, IRD1)  // _INT: Interrupts
                    CreateByteField (B37D, 0x02, IRD2)
                    Name (B47D, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000015,
                        }
                    })
                    Name (B77D, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y16)
                        {
                            0x00000000,
                        }
                    })
                    CreateByteField (B77D, \_SB.PCI0.ALKD._CRS._Y16._INT, IRDI)  // _INT: Interrupts
                    If ((SBFL == 0x00))
                    {
                        Local3 = 0x00
                        Local4 = 0x00
                        Local1 = (PIRD & 0xF0)
                        Local1 >>= 0x04
                        If ((Local1 != 0x00))
                        {
                            If ((Local1 > 0x07))
                            {
                                Local2 = (Local1 - 0x08)
                                Local4 = (One << Local2)
                            }
                            ElseIf ((Local1 > 0x00))
                            {
                                Local3 = (One << Local1)
                            }

                            IRD1 = Local3
                            IRD2 = Local4
                        }

                        Return (B37D) /* \_SB_.PCI0.ALKD._CRS.B37D */
                    }

                    If ((SBFL == 0x01))
                    {
                        Return (B47D) /* \_SB_.PCI0.ALKD._CRS.B47D */
                    }

                    If ((SBFL == 0x02))
                    {
                        IRDI = 0x17
                        Return (B77D) /* \_SB_.PCI0.ALKD._CRS.B77D */
                    }

                    If ((SBFL == 0x03))
                    {
                        IRDI = 0x17
                        Return (B77D) /* \_SB_.PCI0.ALKD._CRS.B77D */
                    }
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    If ((SBFL == 0x00))
                    {
                        CreateByteField (Arg0, 0x01, IRD1)
                        CreateByteField (Arg0, 0x02, IRD2)
                        Local0 = (IRD2 << 0x08)
                        Local0 |= IRD1 /* \_SB_.PCI0.ALKD._SRS.IRD1 */
                        Local1 = 0x00
                        Local0 >>= 0x01
                        While ((Local0 > 0x00))
                        {
                            Local1++
                            Local0 >>= 0x01
                        }

                        PIRD &= 0x0F
                        Local1 <<= 0x04
                        PIRD |= Local1
                    }
                }
            }

            Scope (\)
            {
                OperationRegion (\SCPP, SystemIO, 0x042F, 0x01)
                Field (\SCPP, ByteAcc, NoLock, Preserve)
                {
                    SMIP,   8
                }
            }

            Method (\_SB.PCI0._INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (STRC (\_OS, "Microsoft Windows"))
                {
                    SMIP = 0x56
                }
                ElseIf (STRC (\_OS, "Microsoft Windows NT"))
                {
                    SMIP = 0x58
                    OSFX = 0x00
                    OSFL = 0x00
                }
                Else
                {
                    SMIP = 0x57
                    OSFX = 0x02
                    OSFL = 0x02
                }

                SBFL = 0x00
                If ((DEID == 0x3147))
                {
                    SBFL = 0x01
                }

                If ((DEID == 0x3177))
                {
                    SBFL = 0x02
                }

                If ((DEID == 0x3227))
                {
                    SBFL = 0x03
                }

                If ((DEID == 0x3287))
                {
                    SBFL = 0x04
                }

                ATFL = 0x00
                If ((BSAT == 0x01))
                {
                    ATFL = 0x02
                }
                ElseIf ((EIDE == 0x01))
                {
                    ATFL = 0x02
                }
                ElseIf ((\_SB.PCI0.PATA.VID != 0x1106))
                {
                    ATFL = 0x01
                }
            }

            Scope (\)
            {
                Method (OSTP, 0, NotSerialized)
                {
                    If ((OSFX == 0x01))
                    {
                        SMIP = 0x56
                    }

                    If ((OSFX == 0x02))
                    {
                        SMIP = 0x57
                    }

                    If ((OSFX == 0x00))
                    {
                        SMIP = 0x58
                    }
                }
            }

            Device (SYSR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0010,             // Range Minimum
                        0x0010,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0022,             // Range Minimum
                        0x0022,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x0044,             // Range Minimum
                        0x0044,             // Range Maximum
                        0x01,               // Alignment
                        0x1C,               // Length
                        )
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0065,             // Range Minimum
                        0x0065,             // Range Maximum
                        0x01,               // Alignment
                        0x0B,               // Length
                        )
                    IO (Decode16,
                        0x0074,             // Range Minimum
                        0x0074,             // Range Maximum
                        0x01,               // Alignment
                        0x0C,               // Length
                        )
                    IO (Decode16,
                        0x0091,             // Range Minimum
                        0x0091,             // Range Maximum
                        0x01,               // Alignment
                        0x03,               // Length
                        )
                    IO (Decode16,
                        0x00A2,             // Range Minimum
                        0x00A2,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x00E0,             // Range Minimum
                        0x00E0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x04D0,             // Range Minimum
                        0x04D0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0290,             // Range Minimum
                        0x0290,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IO (Decode16,
                        0x0880,             // Range Minimum
                        0x0880,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                })
            }

            Device (PIC)
            {
                Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0020,             // Range Minimum
                        0x0020,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00A0,             // Range Minimum
                        0x00A0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IRQNoFlags ()
                        {2}
                })
            }

            Device (DMA1)
            {
                Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    DMA (Compatibility, BusMaster, Transfer8, )
                        {4}
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0080,             // Range Minimum
                        0x0080,             // Range Maximum
                        0x01,               // Alignment
                        0x11,               // Length
                        )
                    IO (Decode16,
                        0x0094,             // Range Minimum
                        0x0094,             // Range Maximum
                        0x01,               // Alignment
                        0x0C,               // Length
                        )
                    IO (Decode16,
                        0x00C0,             // Range Minimum
                        0x00C0,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                })
            }

            Device (TMR)
            {
                Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0040,             // Range Minimum
                        0x0040,             // Range Maximum
                        0x01,               // Alignment
                        0x04,               // Length
                        )
                    IRQNoFlags ()
                        {0}
                })
            }

            Device (RTC)
            {
                Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0070,             // Range Minimum
                        0x0070,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        )
                    IRQNoFlags ()
                        {8}
                })
            }

            Device (SPKR)
            {
                Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0061,             // Range Minimum
                        0x0061,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
            }

            Device (COPR)
            {
                Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x00F0,             // Range Minimum
                        0x00F0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IRQNoFlags ()
                        {13}
                })
            }

            Scope (\)
            {
                OperationRegion (WIN1, SystemIO, 0x2E, 0x02)
                Field (WIN1, ByteAcc, NoLock, Preserve)
                {
                    INDP,   8, 
                    DATA,   8
                }

                IndexField (INDP, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    CFG,    8, 
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x20), 
                    IDHI,   8, 
                    IDLO,   8, 
                    POWC,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IO2H,   8, 
                    IO2L,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x72), 
                    INT1,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xE0), 
                    CRE0,   8, 
                    CRE1,   8, 
                    CRE2,   8, 
                    CRE3,   8, 
                    CRE4,   8, 
                    Offset (0xF0), 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    OPT5,   8, 
                    OPT6,   8, 
                    OPT7,   8, 
                    OPT8,   8, 
                    OPT9,   8, 
                    OPTA,   8
                }

                Method (ENFG, 0, NotSerialized)
                {
                    INDP = 0x87
                    INDP = 0x87
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDP = 0xAA
                }
            }

            OperationRegion (COM1, SystemIO, 0x03F8, 0x08)
            Field (COM1, ByteAcc, NoLock, Preserve)
            {
                P3F8,   8, 
                P3F9,   8, 
                P3FA,   8, 
                P3FB,   8, 
                P3FC,   8, 
                P3FD,   8, 
                P3FE,   8, 
                P3FF,   8
            }

            OperationRegion (COM2, SystemIO, 0x02F8, 0x08)
            Field (COM2, ByteAcc, NoLock, Preserve)
            {
                P2F8,   8, 
                P2F9,   8, 
                P2FA,   8, 
                P2FB,   8, 
                P2FC,   8, 
                P2FD,   8, 
                P2FE,   8, 
                P2FF,   8
            }

            OperationRegion (COM3, SystemIO, 0x03E8, 0x08)
            Field (COM3, ByteAcc, NoLock, Preserve)
            {
                P3E8,   8, 
                P3E9,   8, 
                P3EA,   8, 
                P3EB,   8, 
                P3EC,   8, 
                P3ED,   8, 
                P3EE,   8, 
                P3EF,   8
            }

            OperationRegion (COM4, SystemIO, 0x02E8, 0x08)
            Field (COM4, ByteAcc, NoLock, Preserve)
            {
                P2E8,   8, 
                P2E9,   8, 
                P2EA,   8, 
                P2EB,   8, 
                P2EC,   8, 
                P2ED,   8, 
                P2EE,   8, 
                P2EF,   8
            }

            Method (ICOM, 1, NotSerialized)
            {
                Local0 = Arg0
                If ((Local0 == 0x03F8))
                {
                    Local0 = P3FD /* \_SB_.PCI0.P3FD */
                    Local0 = P3FD /* \_SB_.PCI0.P3FD */
                    P3FA = 0xC3
                    While ((P3FA != 0xC1))
                    {
                        Local0 = P3FE /* \_SB_.PCI0.P3FE */
                    }
                }
                ElseIf ((Local0 == 0x02F8))
                {
                    Local0 = P2FD /* \_SB_.PCI0.P2FD */
                    Local0 = P2FD /* \_SB_.PCI0.P2FD */
                    P2FA = 0xC3
                    While ((P2FA != 0xC1))
                    {
                        Local0 = P2FE /* \_SB_.PCI0.P2FE */
                    }
                }
                ElseIf ((Local0 == 0x03E8))
                {
                    Local0 = P3ED /* \_SB_.PCI0.P3ED */
                    Local0 = P3ED /* \_SB_.PCI0.P3ED */
                    P3EA = 0xC3
                    While ((P3EA != 0xC1))
                    {
                        Local0 = P3EE /* \_SB_.PCI0.P3EE */
                    }
                }
                ElseIf ((Local0 == 0x02E8))
                {
                    Local0 = P2ED /* \_SB_.PCI0.P2ED */
                    Local0 = P2ED /* \_SB_.PCI0.P2ED */
                    P2EA = 0xC3
                    While ((P2EA != 0xC1))
                    {
                        Local0 = P2EE /* \_SB_.PCI0.P2EE */
                    }
                }
            }

            Device (FDC0)
            {
                Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = Zero
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x00
                    ACTR = Zero
                    SLDM (DMCH, 0x04)
                    EXFG ()
                    DISD (0x03)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            _Y17)
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    })
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y17._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF0, 0x03, IOHI)
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y17._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF0, 0x05, IORH)
                    ENFG ()
                    EXFG ()
                    Return (BUF0) /* \_SB_.PCI0.FDC0._CRS.BUF0 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x19, IRQL)
                    CreateByteField (Arg0, 0x1C, DMAV)
                    ENFG ()
                    LDN = Zero
                    ACTR = One
                    SLDM (DMCH, DMCH)
                    EXFG ()
                    CKIO (IOAD, 0x03)
                }
            }

            Device (UAR1)
            {
                Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x02
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }

                    EXFG ()
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x02
                    ACTR = Zero
                    EXFG ()
                    DISD (0x00)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y18)
                        IRQNoFlags (_Y19)
                            {}
                    })
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y18._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF1, 0x03, IOHI)
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y18._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF1, 0x05, IORH)
                    CreateWordField (BUF1, \_SB.PCI0.UAR1._CRS._Y19._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x02
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF1) /* \_SB_.PCI0.UAR1._CRS.BUF1 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x02
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.UAR1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.UAR1._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x00)
                }
            }

            Device (UAR2)
            {
                Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x30)
                    If ((Local0 != 0x10))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x38)
                    If ((Local0 == 0x00))
                    {
                        ACTR = Zero
                    }

                    EXFG ()
                    DISD (0x01)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y1A)
                        IRQNoFlags (_Y1B)
                            {4}
                    })
                    CreateByteField (BUF2, \_SB.PCI0.UAR2._CRS._Y1A._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF2, 0x03, IOHI)
                    CreateByteField (BUF2, \_SB.PCI0.UAR2._CRS._Y1A._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF2, 0x05, IORH)
                    CreateWordField (BUF2, \_SB.PCI0.UAR2._CRS._Y1B._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x03
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF2) /* \_SB_.PCI0.UAR2._CRS.BUF2 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x03
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.UAR2._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.UAR2._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x01)
                }
            }

            Device (IRDA)
            {
                Name (_HID, EisaId ("PNP0510") /* Generic IRDA-compatible Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x30)
                    If ((Local0 == 0x10))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    If ((DISE == 0x01))
                    {
                        ENFG ()
                        LDN = 0x03
                        Local0 = (OPT2 & 0x38)
                        If ((Local0 != 0x00))
                        {
                            ACTR = Zero
                        }

                        EXFG ()
                        DISD (0x01)
                    }

                    Local0 = Local0
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF4, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y1C)
                        IRQNoFlags (_Y1D)
                            {}
                    })
                    CreateByteField (BUF4, \_SB.PCI0.IRDA._CRS._Y1C._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF4, 0x03, IOHI)
                    CreateByteField (BUF4, \_SB.PCI0.IRDA._CRS._Y1C._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF4, 0x05, IORH)
                    CreateWordField (BUF4, \_SB.PCI0.IRDA._CRS._Y1D._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x03
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    IRQW = (0x01 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF4) /* \_SB_.PCI0.IRDA._CRS.BUF4 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x03
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.IRDA._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.IRDA._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x01)
                }
            }

            Device (LPT1)
            {
                Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x01
                    Local0 = (OPT1 & 0x02)
                    If ((Local0 != 0x02))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x01
                    ACTR = Zero
                    EXFG ()
                    DISD (0x02)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF5, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y1E)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            _Y1F)
                        IRQNoFlags (_Y20)
                            {}
                    })
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y1E._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF5, 0x03, IOHI)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y1E._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF5, 0x05, IORH)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y1E._LEN, IOLE)  // _LEN: Length
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y1F._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateByteField (BUF5, 0x0B, IO22)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y1F._MAX, IO23)  // _MAX: Maximum Base Address
                    CreateByteField (BUF5, 0x0D, IO24)
                    CreateWordField (BUF5, \_SB.PCI0.LPT1._CRS._Y20._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x01
                    IOLO = IOAL /* \IOAL */
                    IORL = IOLO /* \_SB_.PCI0.LPT1._CRS.IOLO */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOHI /* \_SB_.PCI0.LPT1._CRS.IOHI */
                    IO21 = IOAL /* \IOAL */
                    IO23 = IOAL /* \IOAL */
                    IO22 = (IOAH + 0x04)
                    IO24 = (IOAH + 0x04)
                    If ((IOLO == 0xBC))
                    {
                        IOLE = 0x04
                    }
                    Else
                    {
                        IOLE = 0x08
                    }

                    Local0 = One
                    Local5 = INTR /* \INTR */
                    IRQW = (Local0 << Local5)
                    ACTR = One
                    EXFG ()
                    Return (BUF5) /* \_SB_.PCI0.LPT1._CRS.BUF5 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateByteField (Arg0, 0x04, IORL)
                    CreateByteField (Arg0, 0x05, IORH)
                    CreateWordField (Arg0, 0x11, IRQW)
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.LPT1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.LPT1._SRS.IOHI */
                    FindSetLeftBit (IRQW, Local0)
                    Local0 -= 0x01
                    INTR = Local0
                    EXFG ()
                    CKIO (IOAD, 0x02)
                }
            }

            Device (ECP1)
            {
                Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x01
                    Local0 = (OPT1 & 0x02)
                    If ((Local0 == 0x02))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x01
                    ACTR = Zero
                    SLDM (DMCH, 0x04)
                    EXFG ()
                    DISD (0x02)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF6, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            _Y22)
                        IRQNoFlags (_Y23)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y24)
                            {}
                    })
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y21._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF6, 0x03, IOHI)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y21._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF6, 0x05, IORH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y22._MIN, IOEL)  // _MIN: Minimum Base Address
                    CreateByteField (BUF6, 0x0B, IOEH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y22._MAX, IOML)  // _MAX: Maximum Base Address
                    CreateByteField (BUF6, 0x0D, IOMH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y21._LEN, IOLE)  // _LEN: Length
                    CreateWordField (BUF6, \_SB.PCI0.ECP1._CRS._Y23._INT, IRQW)  // _INT: Interrupts
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y24._DMA, DMAC)  // _DMA: Direct Memory Access
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    Local2 = IOAL /* \IOAL */
                    IOLO = Local2
                    Local3 = IOAH /* \IOAH */
                    IOHI = Local3
                    Local3 |= 0x04
                    IOEH = Local3
                    IOMH = Local3
                    IORL = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IOEL = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IOML = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IORH = IOHI /* \_SB_.PCI0.ECP1._CRS.IOHI */
                    If ((IOLO == 0xBC))
                    {
                        IOLE = 0x04
                    }
                    Else
                    {
                        IOLE = 0x08
                    }

                    Local0 = One
                    Local5 = INTR /* \INTR */
                    IRQW = (Local0 << Local5)
                    Local0 = One
                    Local5 = DMCH /* \DMCH */
                    DMAC = (Local0 << Local5)
                    EXFG ()
                    Return (BUF6) /* \_SB_.PCI0.ECP1._CRS.BUF6 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x11, IRQW)
                    CreateByteField (Arg0, 0x14, DMAC)
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.ECP1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.ECP1._SRS.IOHI */
                    FindSetLeftBit (IRQW, Local0)
                    Local0 -= 0x01
                    INTR = Local0
                    FindSetLeftBit (DMAC, Local1)
                    Local0 = DMCH /* \DMCH */
                    DMCH = (Local1 - 0x01)
                    SLDM (Local0, DMCH)
                    EXFG ()
                    CKIO (IOAD, 0x02)
                }
            }

            OperationRegion (KBCT, SystemIO, 0x60, 0x05)
            Field (KBCT, ByteAcc, NoLock, Preserve)
            {
                P060,   8, 
                Offset (0x04), 
                P064,   8
            }

            Device (PS2M)
            {
                Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PS2F == 0x00))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    If ((KBDI == 0x01))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }
                        Else
                        {
                            Return (BUF2) /* \_SB_.PCI0.PS2M._CRS.BUF2 */
                        }
                    }
                    Else
                    {
                        Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                    }
                }
            }

            Device (PS2K)
            {
                Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x01))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                })
            }

            Device (PSMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x00))
                    {
                        Return (0x00)
                    }

                    If ((PS2F == 0x00))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (0x0F)
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (0x0F)
                        }

                        Return (0x00)
                    }

                    Return (0x00)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
            }

            Method (\_SB.PCI0.UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x05
                })
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 93
[00Ah 0010   6]                       Oem ID : "P4M80P"
[010h 0016   8]                 Oem Table ID : "AWRDACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]                 FACS Address : 1BEF0000
[028h 0040   4]                 DSDT Address : 1BEF3180
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 0000042F
[034h 0052   1]            ACPI Enable Value : A1
[035h 0053   1]           ACPI Disable Value : A0
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 34
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 04
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0050
[062h 0098   2]                   C3 Latency : 0320
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 01
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000004A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 93 50 34 4D 38 30 50  // FACPt.....P4M80P
    0010: 41 57 52 44 41 43 50 49 31 2E 30 42 41 57 52 44  // AWRDACPI1.0BAWRD
    0020: 00 00 00 00 00 00 EF 1B 80 31 EF 1B 01 00 09 00  // .........1......
    0030: 2F 04 00 00 A1 A0 00 34 00 04 00 00 00 00 00 00  // /......4........
    0040: 04 04 00 00 00 00 00 00 00 00 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 00 04 04 00 00 00  //  ...............
    0060: 50 00 20 03 00 00 00 00 00 01 7D 7E 32 00 00 00  // P. .......}~2...
    0070: A5 04 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


