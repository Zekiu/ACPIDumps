
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210930
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000008BC  0x01  "A M I "  "POWERNOW"  0x00000001  "AMD "   0x00000001
 02)  MCFG  0x0000003C  0x01  "7641MS"  "OEMMCFG "  0x20150422  "MSFT"   0x00000097
 03)  APIC  0x0000010C  0x01  "7641MS"  "A7641100"  0x20150422  "MSFT"   0x00000097
 04)  OEMB  0x00000072  0x01  "7641MS"  "A7641100"  0x20150422  "MSFT"   0x00000097
 05)  DSDT  0x00009DF0  0x01  "A7641 "  "A7641100"  0x00000100  "INTL"   0x20051117
 06)  FACP  0x00000084  0x01  "7641MS"  "A7641100"  0x20150422  "MSFT"   0x00000097
 07)  HPET  0x00000038  0x01  "7641MS"  "OEMHPET "  0x20150422  "MSFT"   0x00000097
 08)  FACS  0x00000040  0x01

Found 8 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A6
[00Ah 0010   6]                       Oem ID : "7641MS"
[010h 0016   8]                 Oem Table ID : "A7641100"
[018h 0024   4]                 Oem Revision : 20150422
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 84
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 85
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 86
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 87
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 88
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 89
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 8A
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 8B
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 8C
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 8D
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 8E
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 8F
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 11
[0AFh 0175   1]                Local Apic ID : 90
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 12
[0B7h 0183   1]                Local Apic ID : 91
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 13
[0BFh 0191   1]                Local Apic ID : 92
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 14
[0C7h 0199   1]                Local Apic ID : 93
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 15
[0CFh 0207   1]                Local Apic ID : 94
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 16
[0D7h 0215   1]                Local Apic ID : 95
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 17
[0DFh 0223   1]                Local Apic ID : 96
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 18
[0E7h 0231   1]                Local Apic ID : 97
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 01 [I/O APIC]
[0EDh 0237   1]                       Length : 0C
[0EEh 0238   1]                  I/O Apic ID : 04
[0EFh 0239   1]                     Reserved : 00
[0F0h 0240   4]                      Address : FEC00000
[0F4h 0244   4]                    Interrupt : 00000000

[0F8h 0248   1]                Subtable Type : 02 [Interrupt Source Override]
[0F9h 0249   1]                       Length : 0A
[0FAh 0250   1]                          Bus : 00
[0FBh 0251   1]                       Source : 00
[0FCh 0252   4]                    Interrupt : 00000002
[100h 0256   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[102h 0258   1]                Subtable Type : 02 [Interrupt Source Override]
[103h 0259   1]                       Length : 0A
[104h 0260   1]                          Bus : 00
[105h 0261   1]                       Source : 09
[106h 0262   4]                    Interrupt : 00000009
[10Ah 0266   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 268 (0x10C)

    0000: 41 50 49 43 0C 01 00 00 01 A6 37 36 34 31 4D 53  // APIC......7641MS
    0010: 41 37 36 34 31 31 30 30 22 04 15 20 4D 53 46 54  // A7641100".. MSFT
    0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 84  // ................
    0050: 00 00 00 00 00 08 06 85 00 00 00 00 00 08 07 86  // ................
    0060: 00 00 00 00 00 08 08 87 00 00 00 00 00 08 09 88  // ................
    0070: 00 00 00 00 00 08 0A 89 00 00 00 00 00 08 0B 8A  // ................
    0080: 00 00 00 00 00 08 0C 8B 00 00 00 00 00 08 0D 8C  // ................
    0090: 00 00 00 00 00 08 0E 8D 00 00 00 00 00 08 0F 8E  // ................
    00A0: 00 00 00 00 00 08 10 8F 00 00 00 00 00 08 11 90  // ................
    00B0: 00 00 00 00 00 08 12 91 00 00 00 00 00 08 13 92  // ................
    00C0: 00 00 00 00 00 08 14 93 00 00 00 00 00 08 15 94  // ................
    00D0: 00 00 00 00 00 08 16 95 00 00 00 00 00 08 17 96  // ................
    00E0: 00 00 00 00 00 08 18 97 00 00 00 00 01 0C 04 00  // ................
    00F0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0100: 00 00 02 0A 00 09 09 00 00 00 0F 00              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 1, "A7641", "A7641100", 0x00000100)
{
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x80)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        PCIE,   32, 
        Offset (0x31), 
        TPMR,   1, 
        STHP,   1, 
        SHPG,   1, 
        OSCF,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x38078), 
        Offset (0x3807A), 
        PMS7,   1, 
        Offset (0x50078), 
        Offset (0x5007A), 
        PMSA,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0050), 
            ,   10, 
        GP51,   1, 
        Offset (0xA0056), 
            ,   11, 
        GP64,   1, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        TM1E,   1, 
        TM2E,   1, 
        Offset (0x01), 
            ,   1, 
        TM1S,   1, 
        TM2S,   1, 
        Offset (0x04), 
            ,   7, 
        SLPS,   1, 
        Offset (0x07), 
            ,   7, 
        CLPS,   1, 
        Offset (0x0D), 
        EV0S,   1, 
        EV1S,   1, 
        Offset (0x10), 
            ,   6, 
        PWDE,   1, 
        Offset (0x1C), 
            ,   3, 
        MKME,   1, 
        PI3E,   1, 
        PI2E,   1, 
        PI1E,   1, 
        PI0E,   1, 
            ,   3, 
        MKMS,   1, 
        PI3S,   1, 
        PI2S,   1, 
        PI1S,   1, 
        PI0S,   1, 
        Offset (0x20), 
        P1EB,   16, 
        Offset (0x36), 
            ,   6, 
        GV6P,   1, 
        GV7P,   1, 
        EV0C,   1, 
        EV1C,   1, 
            ,   1, 
        GM0P,   1, 
        GM1P,   1, 
        GM2P,   1, 
        GM3P,   1, 
        GM8P,   1, 
            ,   1, 
        GM4P,   1, 
        GM5P,   1, 
            ,   1, 
        GM6P,   1, 
        GM7P,   1, 
        Offset (0x3B), 
        GPX0,   1, 
        GPX4,   1, 
        GPX5,   1, 
        GPX1,   1, 
        GPX6,   1, 
        GPX7,   1, 
        GPX2,   1, 
        GPX3,   1, 
        Offset (0x55), 
        SPRE,   1, 
            ,   1, 
            ,   1, 
        EPNM,   1, 
        DPPF,   1, 
        FNGS,   1, 
        Offset (0x61), 
            ,   7, 
        R617,   1, 
        Offset (0x65), 
            ,   4, 
        RSTU,   1, 
        Offset (0x68), 
            ,   3, 
        TPDE,   1, 
            ,   1, 
        Offset (0x7C), 
            ,   2, 
        BLNK,   2, 
        Offset (0x84), 
        WPNE,   1, 
        WPAG,   1, 
        Offset (0x92), 
            ,   7, 
        GV7S,   1, 
        Offset (0x96), 
        GP8I,   1, 
        GP9I,   1, 
        Offset (0x9A), 
            ,   7, 
        HECO,   1, 
        Offset (0xA8), 
        PI4E,   1, 
        PI5E,   1, 
        PI6E,   1, 
        PI7E,   1, 
        Offset (0xA9), 
        PI4S,   1, 
        PI5S,   1, 
        PI6S,   1, 
        PI7S,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        If ((Arg0 == One))
        {
            BLNK = 0x02
        }

        If ((Arg0 == 0x02))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        CLPS = One
        SLPS = One
        If ((RVID <= 0x13))
        {
            PWDE = Zero
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        HECO = One
        Notify (\_SB.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        BLNK = 0x03
        PMS7 = One
        PMSA = One
    }

    Method (TRMD, 1, NotSerialized)
    {
        SPRE = Arg0
        TPDE = Arg0
    }

    Method (NB2S, 1, NotSerialized)
    {
    }

    Method (NB2W, 1, NotSerialized)
    {
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SPIO, 0x4E)
    Name (IOHB, 0x0E80)
    Name (IOHL, 0xE0)
    Name (IOVB, 0x0AE0)
    Name (IOVL, 0x10)
    Name (ATSW, 0xE5)
    Name (APIC, One)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (SMB0, 0x0B00)
    Name (SMBB, 0x0B20)
    Name (SMBM, 0x10)
    Name (SMBL, 0x20)
    Name (AODS, 0xF5)
    Name (SMIP, 0xB0)
    Name (ACSS, One)
    Name (SBA1, 0x0B00)
    Name (SBA2, 0x0B20)
    Name (SIOP, 0x4E)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (SMIT, 0xB0)
    Name (CMRQ, 0xE0)
    Name (CMER, 0xE1)
    Name (CMOR, 0xE3)
    Name (SWTD, 0x86)
    Name (SWSP, 0xB0)
    OperationRegion (BIOS, SystemMemory, 0xCFF9E064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (TTT0, Zero)
        TTT0 = OSYS ()
        If ((TTT0 == One))
        {
            OSVR = 0x03
        }
        ElseIf ((TTT0 == 0x10))
        {
            OSVR = One
        }
        ElseIf ((TTT0 == 0x11))
        {
            OSVR = 0x02
        }
        ElseIf ((TTT0 == 0x12))
        {
            OSVR = 0x04
        }
        ElseIf ((TTT0 == 0x13))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x14))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x15))
        {
            OSVR = Zero
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        ElseIf (MCTH (_OS, "Microsoft Windows NT"))
        {
            Local0 = 0x12
        }
        ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
        {
            Local0 = 0x11
        }

        Return (Local0)
    }

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06){}
        Processor (P002, 0x02, 0x00000000, 0x00){}
        Processor (P003, 0x03, 0x00000000, 0x00){}
        Processor (P004, 0x04, 0x00000000, 0x00){}
        Processor (P005, 0x05, 0x00000000, 0x00){}
        Processor (P006, 0x06, 0x00000000, 0x00){}
        Processor (P007, 0x07, 0x00000000, 0x00){}
        Processor (P008, 0x08, 0x00000000, 0x00){}
        Processor (P009, 0x09, 0x00000000, 0x00){}
        Processor (P00A, 0x0A, 0x00000000, 0x00){}
        Processor (P00B, 0x0B, 0x00000000, 0x00){}
        Processor (P00C, 0x0C, 0x00000000, 0x00){}
        Processor (P00D, 0x0D, 0x00000000, 0x00){}
        Processor (P00E, 0x0E, 0x00000000, 0x00){}
        Processor (P00F, 0x0F, 0x00000000, 0x00){}
        Processor (P010, 0x10, 0x00000000, 0x00){}
        Processor (P011, 0x11, 0x00000000, 0x00){}
        Processor (P012, 0x12, 0x00000000, 0x00){}
        Processor (P013, 0x13, 0x00000000, 0x00){}
        Processor (P014, 0x14, 0x00000000, 0x00){}
        Processor (P015, 0x15, 0x00000000, 0x00){}
        Processor (P016, 0x16, 0x00000000, 0x00){}
        Processor (P017, 0x17, 0x00000000, 0x00){}
        Processor (P018, 0x18, 0x00000000, 0x00){}
        Alias (P001, CPU1)
        Alias (P002, CPU2)
        Alias (P003, CPU3)
        Alias (P004, CPU4)
        Alias (P005, CPU5)
        Alias (P006, CPU6)
        Alias (P007, CPU7)
        Alias (P008, CPU8)
        Alias (P009, CPU9)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x35)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKG, 
                Zero
            }
        })
        Name (AR00, Package (0x35)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x16
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x17
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,12,14,15}
        })
        Name (PRSB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,11,12,14,15}
        })
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (RS78)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x94), 
                    HI,     32, 
                    HD,     32, 
                    Offset (0xE8), 
                    MCI,    32, 
                    MCD,    32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y00)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y01)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y00._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y00._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y01._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y01._LEN, LEN2)  // _LEN: Length
                        MI = 0x3C
                        Local0 = MD /* \_SB_.PCI0.RS78.MD__ */
                        If ((Local0 & 0x40))
                        {
                            MI = 0x3A
                            BAS1 = (MD & 0xFFFFFF00)
                            LEN1 = ((MD & 0xFF) << 0x17)
                        }

                        MCI = 0x11
                        Local1 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        MCI = 0x12
                        Local2 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        MCI = 0xF0
                        Local3 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        If ((Local2 == Zero))
                        {
                            If ((Local3 != Zero))
                            {
                                BAS2 = Local1
                                LEN2 = (Local3 << 0x14)
                            }
                        }

                        Return (CRS) /* \_SB_.PCI0.RS78.BROD.CRS_ */
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }

                Device (IGFX)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (GPXX, SystemMemory, 0x000EF0B7, 0x0100)
                    Field (GPXX, AnyAcc, NoLock, Preserve)
                    {
                        GPCM,   8, 
                        GPDT,   2040
                    }

                    Name (ATIB, Buffer (0xFF){})
                    OperationRegion (SM00, SystemIO, 0xB0, One)
                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        SMCM,   8
                    }

                    Method (ATIF, 2, Serialized)
                    {
                        Name (SUPF, Zero)
                        SUPF |= 0x2000
                        If ((Arg0 == 0x0E))
                        {
                            Return (AF0E (Arg1))
                        }

                        If ((Arg0 == Zero))
                        {
                            Return (AF00 (SUPF))
                        }

                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF00, 1, Serialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        NMSK = Zero
                        SFUN = Arg0
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF0E, 1, NotSerialized)
                    {
                        OperationRegion (^GF00, PCI_Config, Zero, 0x40)
                        Field (GF00, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x18), 
                            MMAR,   32
                        }

                        OperationRegion (GF02, SystemMemory, MMAR, 0x7000)
                        Field (GF02, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x6080), 
                            D1ME,   1, 
                            Offset (0x609C), 
                            D1VB,   1
                        }

                        GPDT = Arg0
                        GPCM = 0x0E
                        If ((D1ME == One))
                        {
                            While ((D1VB != Zero)){}
                            While ((D1VB != One)){}
                        }

                        SMCM = 0xE5
                        Return (Zero)
                    }
                }
            }

            Device (PCE2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }
            }

            Device (PCE3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (PCE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (PCE9)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PR09) /* \_SB_.PR09 */
                }
            }

            Device (PCEA)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PR1A) /* \_SB_.PR1A */
                }
            }

            Device (PCEB)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B) /* \_SB_.AR1B */
                    }

                    Return (PR1B) /* \_SB_.PR1B */
                }
            }

            Device (PCEC)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PR1C) /* \_SB_.PR1C */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x50, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (UDMT [(UDMX & 0x0F)])
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (UDMT [(UDMX >> 0x04)])
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Local0 %= 0x05
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (PITR [Local0])
                    PIT1 = DerefOf (PITR [Local1])
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= Local0
                        UDCX |= One
                    }
                    ElseIf ((DMA0 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                        MDT0 = DerefOf (MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                        MDT1 = DerefOf (MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     // .....
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }
                        Else
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                        Else
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }
                        Else
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                        Else
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (LPCS, PCI_Config, Zero, 0x0100)
                Field (LPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   7, 
                    ECEN,   1, 
                    Offset (0xA4), 
                    ECAD,   16
                }

                Name (ECIN, Zero)
                Mutex (ECMU, 0x00)
                Mutex (MLMU, 0x00)
                If (ECEN)
                {
                    ECIN = (ECAD & 0xFFFE)
                    OperationRegion (ECBP, SystemIO, ECIN, 0x02)
                    Field (ECBP, ByteAcc, NoLock, Preserve)
                    {
                        BPIO,   8
                    }

                    OperationRegion (ECIO, SystemIO, ECIN, 0x02)
                    Field (ECIO, ByteAcc, NoLock, Preserve)
                    {
                        IND,    8, 
                        DAT,    8
                    }

                    IndexField (IND, DAT, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDNM,   8, 
                        Offset (0x22), 
                        POW,    8, 
                        Offset (0x30), 
                        ACT,    1, 
                        Offset (0x60), 
                        IOBH,   8, 
                        IOBL,   8, 
                        Offset (0x70), 
                        INT,    4
                    }

                    Method (CFG, 1, NotSerialized)
                    {
                        BPIO = 0x5A
                        BPIO = 0x5A
                        LDNM = Arg0
                    }

                    Method (XCFG, 0, NotSerialized)
                    {
                        BPIO = 0xA5
                    }

                    Method (STA, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x5000)
                        CFG (Arg0)
                        Local1 = Zero
                        If (ACT)
                        {
                            Local1 = 0x0F
                        }

                        If ((IND == 0xFF))
                        {
                            Local1 = Zero
                        }

                        XCFG ()
                        Release (ECMU)
                        Return (Local1)
                    }

                    Method (RDMB, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        Return (MLDA) /* \_SB_.PCI0.SBRG.RDMB.MLDA */
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Method (WRMB, 2, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        MLDA = Arg1
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Name (KBWF, One)
                    Name (MSWF, One)
                    Name (IRWF, One)
                    Device (PSKE)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                KBWF = One
                            }
                            Else
                            {
                                KBWF = Zero
                            }
                        }
                    }

                    Device (PSMS)
                    {
                        Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IRQNoFlags ()
                                {12}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                MSWF = One
                            }
                            Else
                            {
                                MSWF = Zero
                            }
                        }
                    }

                    Method (KWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (KWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Device (ECIR)
                    {
                        Name (_HID, EisaId ("AMDC001"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            If ((OSTY == 0x06))
                            {
                                Local1 = STA (0x05)
                            }

                            Return (Local1)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y02)
                                IRQNoFlags (_Y03)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y02._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y02._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y03._INT, IRQV)  // _INT: Interrupts
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            If (ACT)
                            {
                                IO1 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                Local0 = One
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.SBRG.INT_ */
                            }

                            XCFG ()
                            Release (ECMU)
                            Return (RSRC) /* \_SB_.PCI0.SBRG.ECIR._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            IOBL = IO1 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - One)
                            ACT = One
                            XCFG ()
                            Release (ECMU)
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x17, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                IRWF = One
                            }
                            Else
                            {
                                IRWF = Zero
                            }
                        }

                        Method (IRCF, 2, NotSerialized)
                        {
                            Name (CONN, Zero)
                            If ((Arg0 == One))
                            {
                                CONN |= RVID /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                CONN |= 0x00013200 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x02))
                            {
                                CONN = (GP64 << One)
                                CONN |= GP51 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x03))
                            {
                                If ((Arg1 == Zero))
                                {
                                    G31O = One
                                }
                                Else
                                {
                                    G31O = Zero
                                    Sleep (0x64)
                                    G31O = One
                                }
                            }

                            If ((Arg0 == 0x04))
                            {
                                If ((Arg1 == Zero))
                                {
                                    ACIR = Zero
                                }
                                Else
                                {
                                    ACIR = One
                                }
                            }

                            If (((Arg0 == Zero) || (Arg0 > 0x05)))
                            {
                                CONN = Ones
                            }

                            Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                        }
                    }

                    Method (PPTS, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            If (KBWF)
                            {
                                KWEN ()
                            }
                            Else
                            {
                                KWDS ()
                            }
                        }

                        If (^PSMS._STA ())
                        {
                            If (MSWF)
                            {
                                MWEN ()
                            }
                            Else
                            {
                                MWDS ()
                            }
                        }
                    }

                    Method (WWAK, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            KWDS ()
                        }

                        If (^PSMS._STA ())
                        {
                            MWDS ()
                        }
                    }
                }

                Method (EPTS, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        PPTS (Arg0)
                    }
                }

                Method (EWAK, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        WWAK (Arg0)
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (LPTE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (LPTM (0x02))
                        {
                            Return (0x0104D041)
                        }
                        Else
                        {
                            Return (0x0004D041)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (0x02))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (0x02, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        DCRS (0x02, One)
                        If (LPTM (0x02))
                        {
                            IRQE = IRQM /* \_SB_.PCI0.SBRG.IRQM */
                            DMAE = DMAM /* \_SB_.PCI0.SBRG.DMAM */
                            IO21 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                            IO22 = IO12 /* \_SB_.PCI0.SBRG.IO12 */
                            LEN2 = LEN1 /* \_SB_.PCI0.SBRG.LEN1 */
                            IO31 = (IO21 + 0x0400)
                            IO32 = IO31 /* \_SB_.PCI0.SBRG.IO31 */
                            LEN3 = LEN2 /* \_SB_.PCI0.SBRG.LEN2 */
                            Return (CRS2) /* \_SB_.PCI0.SBRG.CRS2 */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                        }
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, 0x02)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        If (LPTM (0x02))
                        {
                            Return (EPPR) /* \_SB_.PCI0.SBRG.LPTE.EPPR */
                        }
                        Else
                        {
                            Return (LPPR) /* \_SB_.PCI0.SBRG.LPTE.LPPR */
                        }
                    }

                    Name (LPPR, ResourceTemplate ()
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                    Name (EPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y04._BAS, HPT)  // _BAS: Base Address
                        HPT = 0xFED00000
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y06)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y0B)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0C)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0C._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()){}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00B1,             // Range Minimum
                            0x00B1,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y12)
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y13)
                        Memory32Fixed (ReadOnly,
                            0xFFB80000,         // Address Base
                            0x00080000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBB /* \SMBB */
                            GP11 = SMBB /* \SMBB */
                            GP1L = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MIN, GPB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MAX, GPB1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._LEN, GPBL)  // _LEN: Length
                            GPB0 = SMB0 /* \SMB0 */
                            GPB1 = SMB0 /* \SMB0 */
                            GPBL = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        Local0 = (One << 0x0A)
                        Local1 = (One << 0x0C)
                        Local0 = ((IOST & Local0) | (IOST & Local1))
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y12._LEN, KBL0)  // _LEN: Length
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y13._LEN, KBL1)  // _LEN: Length
                        If ((Local0 == Zero))
                        {
                            KBL0 = One
                            KBL1 = One
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x05))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x05))
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y14)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y15)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y16)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SPIO != 0x03F0) && (SPIO > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y14._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y14._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y14._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOHB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._LEN, GPL2)  // _LEN: Length
                            GP20 = IOHB /* \IOHB */
                            GP21 = IOHB /* \IOHB */
                            GPL2 = IOHL /* \IOHL */
                        }

                        If (IOVB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._LEN, GPL3)  // _LEN: Length
                            GP30 = IOVB /* \IOVB */
                            GP31 = IOVB /* \IOVB */
                            GPL3 = IOVL /* \IOVL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x16)
                {
                    One, 
                    0x02, 
                    0x03, 
                    Zero, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                })
                Method (ENFG, 1, NotSerialized)
                {
                    INDX = 0x87
                    INDX = 0x87
                    LDN = Arg0
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0xAA
                }

                Method (LPTM, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x02)
                    EXFG ()
                    Return (Local0)
                }

                Method (UHID, 1, NotSerialized)
                {
                    If ((Arg0 == One))
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x18)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                    }

                    Return (0x0105D041)
                }

                Name (KBFG, One)
                Name (MSFG, One)
                Name (U1FG, One)
                Name (U2FG, One)
                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            KBFG = One
                        }
                        Else
                        {
                            KBFG = Zero
                        }
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            MSFG = One
                        }
                        Else
                        {
                            MSFG = Zero
                        }
                    }
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    ENFG (0x0A)
                    OPT0 &= 0x9F
                    If (KBFG)
                    {
                        OPT0 |= 0x20
                    }

                    If (MSFG)
                    {
                        OPT0 |= 0x40
                    }

                    OPT1 = 0xFF
                    ACTR = One
                    EXFG ()
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    ENFG (0x0A)
                    OPT0 &= 0x9F
                    OPT1 = 0xFF
                    ACTR = Zero
                    EXFG ()
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Debug = "SIOH"
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xE0), 
                    CRE0,   8, 
                    CRE1,   8, 
                    CRE2,   8, 
                    CRE3,   8, 
                    CRE4,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    OPT5,   8
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (DCAT [Arg0]))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If ((Local0 == 0xFF))
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    IOST |= (Local0 << Arg0)
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    ElseIf (((One << Arg0) & IOST))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y19)
                    IRQNoFlags (_Y17)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y18)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y17._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y18._DMA, DMAM)  // _DMA: Direct Memory Access
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y19._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y19._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y19._LEN, LEN1)  // _LEN: Length
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1C)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1D)
                    IRQNoFlags (_Y1A)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1B)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1A._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1B._DMA, DMAE)  // _DMA: Direct Memory Access
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1C._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1C._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1C._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1D._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1D._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1D._LEN, LEN3)  // _LEN: Length
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If (((DMCH > 0x03) || (Arg1 == Zero)))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    CreateWordField (Arg0, 0x02, IO11)
                    ENFG (CGLD (Arg1))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg1, Zero, Local1, 0x08)
                    RRIO (Arg1, One, IO11, 0x08)
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC3)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC5)
            {
                Name (_ADR, 0x00130001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                If ((STCL == 0x0101))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SACS, PCI_Config, Zero, 0x40)
                    Field (SACS, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x24), 
                        STB5,   32
                    }

                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY <= 0x16) && (OSTY >= 0x12)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY <= 0x16) && (OSTY >= 0x12)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.PCE2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE3, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE4, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE5, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE6, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE7, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE9, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEA, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEB, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC3, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x03, 0x05))
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRS,   8, 
            Offset (0x09), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            PIRA = Zero
            PIRB = Zero
            PIRC = Zero
            PIRD = Zero
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = Zero
            PIRF = Zero
            PIRG = Zero
            PIRH = Zero
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Method (NPTS, 1, NotSerialized)
    {
    }

    Method (NWAK, 1, NotSerialized)
    {
    }

    OperationRegion (SWST, SystemIO, SWSP, One)
    Field (SWST, ByteAcc, NoLock, Preserve)
    {
        STSP,   8
    }

    Method (TCOW, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            STSP = SWTD /* \SWTD */
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y1E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y1F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y20, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y1E._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1E._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1E._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y1F._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1F._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1F._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y20._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y20._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y20._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSTY = 0x10
            If (CondRefOf (_OSI, Local1))
            {
                If (_OSI ("Windows 2000"))
                {
                    OSTY = 0x12
                }

                If (_OSI ("Windows 2001"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTY = 0x14
                }

                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSTY = 0x14
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTY = 0x15
                }

                If (_OSI ("Windows 2009"))
                {
                    OSTY = 0x16
                }
            }
            ElseIf (MCTH (_OS, "Microsoft Windows NT"))
            {
                Local0 = 0x12
            }
            Else
            {
                If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTY = 0x11
                }

                If (MCTH (_OS, "Linux"))
                {
                    OSTY = One
                }
            }

            If ((OSTY >= 0x0F))
            {
                PWDE = One
                DPPF = Zero
            }
        }
    }

    Scope (\)
    {
        OperationRegion (NCLK, SystemMemory, PCIE, 0x02000000)
        Field (NCLK, AnyAcc, NoLock, Preserve)
        {
            Offset (0x4C), 
            CLKE,   1, 
            Offset (0x1048), 
            P3HH,   12, 
            P3II,   1, 
                ,   18, 
            P3EE,   1, 
            P4EN,   1, 
            P4NM,   12, 
            P4HI,   12, 
            P4IO,   1, 
            Offset (0x1050), 
            P5EN,   1, 
            P5NM,   12, 
            P5HI,   12, 
            P5IO,   1, 
            Offset (0x1054), 
            P6EN,   1, 
            P6NM,   12, 
            P6HI,   12, 
            P6IO,   1, 
            Offset (0x1078), 
            B178,   1, 
            Offset (0x10B0), 
            P1NM,   12, 
            P1HI,   12, 
            P1EN,   1, 
            P1IO,   1, 
            Offset (0x10B4), 
            P2NM,   12, 
            P2HI,   12, 
            P2EN,   1, 
            P2IO,   1, 
            Offset (0x10CC), 
            P3EN,   1, 
            P3NM,   12, 
            P3HI,   12, 
            P3IO,   1
        }

        OperationRegion (SOR1, SystemIO, SBA1, 0x10)
        Field (SOR1, ByteAcc, NoLock, Preserve)
        {
            SMSA,   8, 
            SSSA,   8, 
            SBCA,   8, 
            SHCA,   8, 
            SBAA,   8, 
            SD0A,   8, 
            SD1A,   8, 
            SBDA,   8, 
            SSCA,   8, 
            SMCA,   8, 
            SSEA,   16, 
            SSDA,   16, 
            SMTA,   8
        }

        OperationRegion (SOR2, SystemIO, SBA2, 0x10)
        Field (SOR2, ByteAcc, NoLock, Preserve)
        {
            SMSB,   8, 
            SSSB,   8, 
            SBCB,   8, 
            SHCB,   8, 
            SBAB,   8, 
            SD0B,   8, 
            SD1B,   8, 
            SBDB,   8, 
            SSCB,   8, 
            SMCB,   8, 
            SSEB,   16, 
            SSDB,   16, 
            SMTB,   8
        }

        Mutex (MSMB, 0x00)
        Method (RWBK, 5, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            If ((Arg0 == Zero))
            {
                Local0 = SMSA /* \SMSA */
                Local0 &= Zero
                Local0 |= 0xFF
                SMSA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= Zero
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SHCA /* \SHCA */
                Local0 &= Zero
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x14
                SBCA = Local0
                Sleep (0x02)
                Local0 = SD0A /* \SD0A */
                Local0 &= Zero
                Local0 |= Arg3
                SD0A = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local2 = Arg3
                    Local3 = Arg2
                    While (Local2)
                    {
                        Local4 = DerefOf (Arg4 [Local3])
                        SBDA = Local4
                        Sleep (0x02)
                        Local2--
                        Local3++
                    }
                }

                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x54
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Release (MSMB)
                        Return (One)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Local1 = Arg2
                    Local2 = Arg3
                    While (Local2)
                    {
                        Arg4 [Local1] = SBDA /* \SBDA */
                        Sleep (0x02)
                        Local1++
                        Local2--
                    }
                }
            }

            If ((Arg0 == One)){}
            Release (MSMB)
            Return (Zero)
        }

        Method (RWBT, 5, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local2 = Arg2
                    Local3 = Arg3
                    While (Local3)
                    {
                        Local4 = DerefOf (Arg4 [Local2])
                        BTPR (Arg1, Local2, Local4)
                        Sleep (0x02)
                        Local2++
                        Local3--
                    }
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Local2 = Arg2
                    Local3 = Arg3
                    While (Local3)
                    {
                        Local4 = BTPR (Arg1, Local2, Zero)
                        Arg4 [Local2] = Local4
                        Sleep (0x02)
                        Local2++
                        Local3--
                    }
                }
            }

            If ((Arg0 == One)){}
            Return (Zero)
        }

        Method (BTPR, 3, NotSerialized)
        {
            Local2 = (Arg0 & One)
            Local0 = SMSA /* \SMSA */
            Local0 &= Zero
            Local0 |= 0xFF
            SMSA = Local0
            Sleep (0x02)
            Local0 = SBAA /* \SBAA */
            Local0 &= Zero
            Local0 |= Arg0
            SBAA = Local0
            Sleep (0x02)
            Local0 = SHCA /* \SHCA */
            Local0 &= Zero
            Local0 |= Arg1
            SHCA = Local0
            Sleep (0x02)
            Local0 = SBCA /* \SBCA */
            Local0 &= Zero
            Local0 |= 0x08
            SBCA = Local0
            Sleep (0x02)
            If ((Local2 == Zero))
            {
                Local0 = SD0A /* \SD0A */
                Local0 &= Zero
                Local0 |= Arg2
                SD0A = Local0
                Sleep (0x02)
            }

            Local0 = SBCA /* \SBCA */
            Local0 &= Zero
            Local0 |= 0x48
            SBCA = Local0
            Sleep (0x02)
            Local1 = SMSA /* \SMSA */
            While (!(Local1 & One))
            {
                Local1 = SMSA /* \SMSA */
                If ((Local1 & 0x1C))
                {
                    Return (One)
                }

                If ((Local1 & 0x02))
                {
                    Break
                }

                Sleep (0x02)
            }

            Local1 = SMSA /* \SMSA */
            While ((Local1 & One))
            {
                Local1 = SMSA /* \SMSA */
                Sleep (0x02)
            }

            If (Local2)
            {
                Local0 = SD0A /* \SD0A */
                Sleep (0x02)
            }

            Return (Local0)
        }

        OperationRegion (IOOR, SystemIO, SIOP, 0x02)
        Field (IOOR, ByteAcc, NoLock, Preserve)
        {
            IOID,   8, 
            IODT,   8
        }

        Method (RSIO, 1, NotSerialized)
        {
            IOID = Arg0
            Return (IODT) /* \IODT */
        }

        Method (WSIO, 2, NotSerialized)
        {
            IOID = Arg0
            IODT = Arg1
        }

        Method (RWIO, 3, NotSerialized)
        {
            WSIO (Arg0, ((RSIO (Arg0) & Arg1) | Arg2))
        }

        Name (IPSW, Package (0x02)
        {
            Package (0x04)
            {
                0x87, 
                0x87, 
                0x87, 
                0x87
            }, 

            Package (0x04)
            {
                0x87, 
                0x87, 
                0x87, 
                0x87
            }
        })
        Method (SLDN, 1, NotSerialized)
        {
            Local1 = Zero
            If ((SIOP == 0x2E))
            {
                Local1 = Zero
            }

            If ((SIOP == 0x4E))
            {
                Local1 = One
            }

            Local0 = Zero
            While ((Local0 != 0x04))
            {
                IOID = DerefOf (DerefOf (IPSW [Local1]) [Local0])
                Local0++
            }

            WSIO (0x07, Arg0)
        }

        OperationRegion (HMOR, SystemIO, 0x0605, 0x02)
        Field (HMOR, ByteAcc, NoLock, Preserve)
        {
            HMID,   8, 
            HMDT,   8
        }

        Method (RSHM, 1, NotSerialized)
        {
            HMID = Arg0
            Return (HMDT) /* \HMDT */
        }

        Method (WSHM, 2, NotSerialized)
        {
            HMID = Arg0
            HMDT = Arg1
        }

        Method (APTS, 1, NotSerialized)
        {
            \AOD.APTS (Arg0)
        }

        Method (AWAK, 1, NotSerialized)
        {
            \AOD.AWAK (Arg0)
        }

        Device (AOD)
        {
            Name (DBG, One)
            Name (GDBG, One)
            Name (CDBG, Zero)
            Name (VDBG, One)
            Name (RDBG, Zero)
            Name (M577, Zero)
            Name (M596, One)
            Name (OBID, Package (0x1C)
            {
                0x07, 
                0x01010000, 
                0x01020000, 
                0x01030000, 
                0x02010000, 
                0x02030000, 
                0x02040000, 
                0x02060000, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                0xFF, 
                0xFF, 
                "CPU Clock", 
                "PCIE Clock", 
                "South Bridge Clock", 
                "Memory VDDQ", 
                "CPU VDDC", 
                "NB Core Voltage", 
                "CPU HT Voltage", 
                "", 
                ""
            })
            Name (OBIT, Package (0x2C)
            {
                0x01010000, 
                0x0002E630, 
                0x000927C0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x01020000, 
                0x00015F90, 
                0x0003D090, 
                Zero, 
                0x03E8, 
                Zero, 
                0x01030000, 
                0x00015F90, 
                0x000249F0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02010000, 
                0x000249F0, 
                0x0003B150, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02030000, 
                0x0001ADB0, 
                0x00030D40, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02040000, 
                0x0001ADB0, 
                0x0002A3C8, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02060000, 
                0x0001D4C0, 
                0x0002CAD8, 
                Zero, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OBDT, Package (0x01)
            {
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Name (QLST, Package (0x07)
            {
                0x06, 
                Package (0x08)
                {
                    0x2694, 
                    "Advanced Clock Calibration", 
                    Zero, 
                    0x04, 
                    Buffer (0x09)
                    {
                        "Disabled"
                    }, 

                    Buffer (0x05)
                    {
                        "Auto"
                    }, 

                    Buffer (0x0A)
                    {
                        "All Cores"
                    }, 

                    Buffer (0x09)
                    {
                        "Per Core"
                    }
                }, 

                Package (0x16)
                {
                    0x455C, 
                    "Value (All Cores)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x02, 0x01, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     // .....
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4560, 
                    "Value (Core 0)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     // .....
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4564, 
                    "Value (Core 1)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     // .....
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4568, 
                    "Value (Core 2)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     // .....
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x456C, 
                    "Value (Core 3)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     // .....
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }
            })
            Name (ID01, Zero)
            Name (ID02, Zero)
            Method (SOID, 1, NotSerialized)
            {
                ID01 = (Arg0 >> 0x18)
                ID02 = ((Arg0 & 0x00FF0000) >> 0x10)
                Return (Zero)
            }

            Method (WROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                IFPK [Zero] = BUF0 /* \AOD_.WROW.BUF0 */
                IFPK [One] = BUF1 /* \AOD_.WROW.BUF1 */
                IFPK [0x02] = BUF2 /* \AOD_.WROW.BUF2 */
                IFPK [0x03] = BUF3 /* \AOD_.WROW.BUF3 */
                IFPK [0x04] = BUF4 /* \AOD_.WROW.BUF4 */
                IFPK [0x05] = BUF5 /* \AOD_.WROW.BUF5 */
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    Arg1 [((Arg2 * Arg3) + Local1)] = DerefOf (
                        IFPK [Local1])
                    Local1++
                    Local0--
                }
            }

            Method (GROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    IFPK [Local1] = DerefOf (Arg0 [((Arg2 * Arg3
                        ) + Local1)])
                    Local1++
                    Local0--
                }

                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                CreateDWordField (Arg1, 0x14, BUF5)
                BUF0 = DerefOf (IFPK [Zero])
                BUF1 = DerefOf (IFPK [One])
                BUF2 = DerefOf (IFPK [0x02])
                BUF3 = DerefOf (IFPK [0x03])
                BUF4 = DerefOf (IFPK [0x04])
                BUF5 = DerefOf (IFPK [0x05])
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((Arg0 == 0x02030000))
                    {
                        BUF0 = 0x02030000
                        BUF1 = FVMI /* \AOD_.FVMI */
                        BUF2 = FVMA /* \AOD_.FVMA */
                        BUF3 = Zero
                        BUF4 = FVST /* \AOD_.FVST */
                        Break
                    }
                    ElseIf ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        BUF4 = DerefOf (OBIT [(Local0 + 0x04)])
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (CBTP, 1, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == BUF0))
                    {
                        OBIT [(Local0 + Zero)] = BUF0 /* \AOD_.CBTP.BUF0 */
                        OBIT [(Local0 + One)] = BUF1 /* \AOD_.CBTP.BUF1 */
                        OBIT [(Local0 + 0x02)] = BUF2 /* \AOD_.CBTP.BUF2 */
                        OBIT [(Local0 + 0x03)] = BUF3 /* \AOD_.CBTP.BUF3 */
                        OBIT [(Local0 + 0x04)] = BUF4 /* \AOD_.CBTP.BUF4 */
                        OBIT [(Local0 + 0x05)] = BUF5 /* \AOD_.CBTP.BUF5 */
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (ABS, 2, NotSerialized)
            {
                If ((Arg0 < Arg1))
                {
                    Return ((Arg1 - Arg0))
                }
                Else
                {
                    Return ((Arg0 - Arg1))
                }
            }

            Name (DG01, One)
            Name (DG02, 0x02)
            Name (DG03, 0x03)
            Name (DG04, 0x04)
            Method (ADBG, 2, NotSerialized)
            {
                If (DBG)
                {
                    If ((Arg1 == DG01))
                    {
                        If (GDBG)
                        {
                            Debug = "[GEN]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG02))
                    {
                        If (CDBG)
                        {
                            Debug = "[CLK]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG03))
                    {
                        If (VDBG)
                        {
                            Debug = "[VOL]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG04))
                    {
                        If (RDBG)
                        {
                            Debug = "[RCMD]"
                            Debug = Arg0
                        }
                    }
                    Else
                    {
                        Debug = "[NULL]"
                        Debug = Arg0
                    }
                }
            }

            OperationRegion (AODT, SystemMemory, 0x000EF4F2, 0x0100)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                Offset (0x08), 
                ASBF,   960, 
                GFXO,   1, 
                GMOD,   2
            }

            OperationRegion (SMIX, SystemIO, SMIP, One)
            Field (SMIX, ByteAcc, NoLock, Preserve)
            {
                SMIC,   8
            }

            Name (EXBF, Buffer (0x78){})
            Method (GCMS, 1, NotSerialized)
            {
                Name (TEMP, Buffer (0x06){})
                CreateDWordField (TEMP, Zero, TMP1)
                CreateWordField (TEMP, 0x04, TMP2)
                ASCD = One
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                TMP1 = ASTS /* \AOD_.ASTS */
                TMP2 = CMSD /* \AOD_.GCMS.CMSD */
                Return (TEMP) /* \AOD_.GCMS.TEMP */
            }

            Method (SCMS, 2, NotSerialized)
            {
                ASCD = 0x02
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                CMSD = Arg1
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Name (CPUD, Zero)
            Name (GFXD, Zero)
            Name (SBCD, Zero)
            Method (CINI, 0, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    Return (One)
                }

                If ((((DerefOf (TSBF [0x07]) & 0x0F) != 
                    0x0E) || (DerefOf (TSBF [0x06]) != 0x41)))
                {
                    Return (0x03)
                }

                Local0 = (DerefOf (TSBF [0x0B]) & 0xC0)
                TSBF [0x0B] = (Local0 | 0x20)
                If (RWBK (Zero, 0xD2, 0x0B, One, TSBF))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (GETC, 1, NotSerialized)
            {
                TSBF [0x0B] = 0x26
                If (RWBK (Zero, 0xD2, 0x0B, 0x02, TSBF))
                {
                    Return (One)
                }

                Name (TEBF, Buffer (0x26)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                })
                If (RWBK (Zero, 0xD3, 0x24, One, TEBF))
                {
                    Return (One)
                }

                TEBF [0x24] = (DerefOf (TEBF [0x24]) & 0x7F)
                If (RWBK (Zero, 0xD2, 0x24, One, TEBF))
                {
                    Return (One)
                }

                TSBF [0x0B] = 0x20
                If (RWBK (Zero, 0xD2, 0x0B, 0x02, TSBF))
                {
                    Return (One)
                }

                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    GVB2 = One
                    GVB1 = Zero
                    Return (GVBF) /* \AOD_.GVBF */
                }

                GVB2 = Zero
                GVB1 = CCLK (Arg0)
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (CCLK, 1, NotSerialized)
            {
                Name (VCOV, Zero)
                Name (VCOD, Zero)
                If ((Arg0 == One))
                {
                    VCOD = 0x02
                    VCOV = GCCX (0x0F, 0x11)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = (DerefOf (TSBF [0x1E]) & 0x80)
                    If (Local0)
                    {
                        VCOD = 0x06
                    }
                    Else
                    {
                        VCOD = 0x0A
                    }

                    VCOV = GCCX (0x10, 0x11)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = (DerefOf (TSBF [0x1E]) & 0x20)
                    If (Local0)
                    {
                        VCOD = 0x06
                    }
                    Else
                    {
                        VCOD = 0x0A
                    }

                    VCOV = GCCX (0x12, 0x14)
                }

                Return ((VCOV / VCOD))
            }

            Method (GCCX, 2, NotSerialized)
            {
                Local0 = DerefOf (TSBF [Arg0])
                If (((Arg0 == 0x0F) || (Arg0 == 0x12)))
                {
                    Local1 = (DerefOf (TSBF [Arg1]) & 0x70)
                    Local1 >>= 0x04
                }
                ElseIf ((Arg0 == 0x10))
                {
                    Local1 = (DerefOf (TSBF [Arg1]) & 0x07)
                }

                Local1 *= 0x0100
                Local2 = (Local1 + Local0)
                Local2 *= 0x03E8
                Return (Local2)
            }

            Method (SETC, 2, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    Return (One)
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x02
                    Local1 = GCCX (0x0F, 0x11)
                    Local2 = (Arg1 * Local0)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = (DerefOf (TSBF [0x1E]) & 0x80)
                    If (Local0)
                    {
                        Local0 = 0x06
                    }
                    Else
                    {
                        Local0 = 0x0A
                    }

                    Local1 = GCCX (0x10, 0x11)
                    Local2 = (Arg1 * Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = (DerefOf (TSBF [0x1E]) & 0x20)
                    If (Local0)
                    {
                        Local0 = 0x06
                    }
                    Else
                    {
                        Local0 = 0x0A
                    }

                    Local1 = GCCX (0x12, 0x14)
                    Local2 = (Arg1 * Local0)
                }

                Debug = "current target ramp step clkid"
                Debug = Local1
                Debug = Local2
                Debug = 0x07D0
                Debug = Arg0
                Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                If (Local3)
                {
                    Return (Local3)
                }

                Return (Zero)
            }

            Method (RMPC, 4, NotSerialized)
            {
                Name (STAT, Zero)
                Local0 = Arg0
                Local1 = Arg1
                While ((ABS (Local1, Local0) < Arg2))
                {
                    If ((Local0 < Local1))
                    {
                        Local0 += Arg2
                    }
                    Else
                    {
                        Local0 -= Arg2
                    }

                    Debug = Local0
                    STAT = WTCX (Arg3, Local0)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                If ((Local0 != Local1))
                {
                    STAT = WTCX (Arg3, Local1)
                    Sleep (0x03E8)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                Return (Zero)
            }

            Method (WTCX, 2, NotSerialized)
            {
                Local0 = Arg1
                If ((Arg0 == One))
                {
                    Return (SCCX (Local0, 0x0F, 0x11))
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Return (SCCX (Local0, 0x10, 0x11))
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Return (SCCX (Local0, 0x12, 0x14))
                }

                Return (0x04)
            }

            Method (SCCX, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == 0x0F))
                {
                    Local1 = (Local0 / 0x03E8)
                    Divide (Local1, 0x0100, Local2, Local3)
                    TSBF [Arg1] = Local2
                    TSBF [Arg2] = ((DerefOf (TSBF [Arg2]) & 0x8F
                        ) | (Local3 << 0x04))
                    If (RWBK (Zero, 0xD2, Arg1, ((Arg2 - Arg1) + One), 
                        TSBF))
                    {
                        Return (One)
                    }

                    TSBF [0x1F] = (DerefOf (TSBF [0x1F]) | 0x80)
                    If (RWBK (Zero, 0xD2, 0x1F, One, TSBF))
                    {
                        Return (One)
                    }

                    Sleep (0x03E8)
                }
                ElseIf ((Arg1 == 0x10))
                {
                    Local1 = (Local0 / 0x03E8)
                    Divide (Local1, 0x0100, Local2, Local3)
                    TSBF [Arg1] = Local2
                    TSBF [Arg2] = ((DerefOf (TSBF [Arg2]) & 0xF8
                        ) | Local3)
                    If (RWBK (Zero, 0xD2, Arg1, ((Arg2 - Arg1) + One), 
                        TSBF))
                    {
                        Return (One)
                    }

                    TSBF [0x1F] = (DerefOf (TSBF [0x1F]) | 0x10)
                    If (RWBK (Zero, 0xD2, 0x1F, One, TSBF))
                    {
                        Return (One)
                    }

                    Sleep (0x03E8)
                }
                ElseIf ((Arg1 == 0x12))
                {
                    Local1 = (Local0 / 0x03E8)
                    Divide (Local1, 0x0100, Local2, Local3)
                    TSBF [Arg1] = Local2
                    TSBF [Arg2] = ((DerefOf (TSBF [Arg2]) & 0x8F
                        ) | (Local3 << 0x04))
                    If (RWBK (Zero, 0xD2, Arg1, ((Arg2 - Arg1) + One), 
                        TSBF))
                    {
                        Return (One)
                    }

                    TSBF [0x1F] = (DerefOf (TSBF [0x1F]) | 0x40)
                    If (RWBK (Zero, 0xD2, 0x1F, One, TSBF))
                    {
                        Return (One)
                    }

                    Sleep (0x03E8)
                }

                Return (Zero)
            }

            Name (DRBF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (NBBF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (HTBF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (CPBF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (GMBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GMBF, Zero, GMB1)
            CreateByteField (GMBF, 0x04, GMB2)
            Name (FVMI, Zero)
            Name (FVMA, Zero)
            Name (FVST, Zero)
            Method (VINI, 0, NotSerialized)
            {
                If (M577)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x65, Zero, 0x04, NBBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x63, Zero, 0x04, HTBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x61, Zero, 0x04, CPBF))
                    {
                        Return (One)
                    }
                }
                ElseIf (M596)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, NBBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, HTBF))
                    {
                        Return (One)
                    }

                    If (RWBT (Zero, 0x61, Zero, 0x04, CPBF))
                    {
                        Return (One)
                    }
                }

                FVST = 0x03E8
                If (M577)
                {
                    Local0 = DerefOf (CPBF [One])
                }
                ElseIf (M596)
                {
                    Local0 = DerefOf (CPBF [0x02])
                }

                Local1 = (RSHM (0x21) * 0x0320)
                If (((Local0 > 0x80) && (Local0 <= 0xBF)))
                {
                    Local2 = ((Local0 - 0x80) * 0x03E8)
                    Local1 -= Local2
                    FVMI = Local1
                }
                Else
                {
                    FVMI = Local1
                }

                Local2 = 0x00030D40
                While ((Local1 < Local2))
                {
                    Local1 += 0x03E8
                }

                FVMA = Local1
                Return (Zero)
            }

            Method (GETV, 1, NotSerialized)
            {
                If (M577)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x65, Zero, 0x04, NBBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x63, Zero, 0x04, HTBF))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (M596)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, NBBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, HTBF))
                    {
                        Return (Zero)
                    }
                }

                GMB2 = Zero
                GMB1 = CUPV (Arg0)
                Return (GMBF) /* \AOD_.GMBF */
            }

            Method (CUPV, 1, NotSerialized)
            {
                Name (UPOV, Zero)
                If (((Arg0 == One) || (Arg0 == 0x02)))
                {
                    If (M577)
                    {
                        Local0 = DerefOf (DRBF [One])
                        If ((Local0 > 0x7F))
                        {
                            Local0 = Zero
                        }

                        UPOV = ((Local0 * 0x03E8) + 0x000249F0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = (DerefOf (DRBF [One]) & 0xF0)
                        Local0 >>= 0x04
                        UPOV = UPDR (Local0)
                    }
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = RSHM (0x21)
                    UPOV = (Local0 * 0x0320)
                }
                ElseIf (((Arg0 == 0x04) || (Arg0 == 0x05)))
                {
                    If (M577)
                    {
                        Local0 = DerefOf (NBBF [0x02])
                        If ((Local0 > 0x3F))
                        {
                            Local0 = Zero
                        }

                        UPOV = ((Local0 * 0x03E8) + 0x0001ADB0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = DerefOf (NBBF [0x03])
                        UPOV = ((Local0 * 0x03E8) + 0x0001FBD0)
                    }
                }
                ElseIf (((Arg0 == 0x06) || (Arg0 == 0x07)))
                {
                    If (M577)
                    {
                        Local0 = DerefOf (HTBF [0x02])
                        If ((Local0 > 0x3F))
                        {
                            Local0 = Zero
                        }

                        UPOV = ((Local0 * 0x03E8) + 0x0001D4C0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = DerefOf (HTBF [0x03])
                        UPOV = ((Local0 * 0x03E8) + 0x0001FBD0)
                    }
                }

                Return (UPOV) /* \AOD_.CUPV.UPOV */
            }

            Method (UPDR, 1, NotSerialized)
            {
                If ((Arg0 <= 0x06))
                {
                    Local0 = ((Arg0 * 0x1068) + 0x000249F0)
                }
                ElseIf (((Arg0 <= 0x0C) && (Arg0 > 0x06)))
                {
                    Local0 = (((Arg0 - 0x06) * 0x206C) + 0x0002AF80)
                }
                ElseIf ((Arg0 > 0x0C))
                {
                    Local0 = (((Arg0 - 0x0C) * 0x40D8) + 0x000372D0)
                }

                Return (Local0)
            }

            Method (SETV, 2, NotSerialized)
            {
                If (M577)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x65, Zero, 0x04, NBBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x63, Zero, 0x04, HTBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x61, Zero, 0x04, CPBF))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (M596)
                {
                    If (RWBT (Zero, 0x51, Zero, 0x04, DRBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, NBBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x51, Zero, 0x04, HTBF))
                    {
                        Return (Zero)
                    }

                    If (RWBT (Zero, 0x61, Zero, 0x04, CPBF))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == One))
                {
                    If (M577)
                    {
                        Local0 = ((Arg1 - 0x000249F0) / 0x03E8)
                        BTPR (0x50, One, Local0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = SUDR (Arg1)
                        Local1 = (DerefOf (DRBF [One]) & 0x0F)
                        Local2 = (Local0 | Local1)
                        BTPR (0x50, One, Local2)
                    }
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local3 = 0x00030D40
                    Local5 = Arg1
                    If ((Local5 > Local3))
                    {
                        Local5 = Local3
                    }

                    If (M577)
                    {
                        Local0 = DerefOf (CPBF [One])
                    }
                    ElseIf (M596)
                    {
                        Local0 = DerefOf (CPBF [0x02])
                    }

                    If ((Local0 == Zero))
                    {
                        Local0 = 0x80
                    }

                    Local1 = (RSHM (0x21) * 0x0320)
                    If ((Local5 > Local1))
                    {
                        Local4 = (Local5 - Local1)
                    }
                    ElseIf ((Local5 < Local1))
                    {
                        Local4 = (Local1 - Local5)
                    }
                    ElseIf ((Local5 == Local1))
                    {
                        Return (Zero)
                    }

                    Local3 = (Local4 / FVST)
                    If ((Local5 > Local1))
                    {
                        Local2 = (Local0 + Local3)
                        If ((Local2 > 0xBF))
                        {
                            Local2 = 0xBF
                        }
                    }
                    Else
                    {
                        Local2 = (Local0 - Local3)
                        If ((Local2 < 0x80))
                        {
                            Local2 = 0x80
                        }
                    }

                    If (M577)
                    {
                        BTPR (0x60, One, Local2)
                    }
                    ElseIf (M596)
                    {
                        BTPR (0x60, 0x02, Local2)
                    }
                }
                ElseIf ((Arg0 == 0x04))
                {
                    If (M577)
                    {
                        Local0 = ((Arg1 - 0x0001ADB0) / 0x03E8)
                        BTPR (0x64, 0x02, Local0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = ((Arg1 - 0x0001ADB0) / 0x03E8)
                        BTPR (0x51, 0x03, Local0)
                    }
                }
                ElseIf ((Arg0 == 0x06))
                {
                    If (M577)
                    {
                        Local0 = ((Arg1 - 0x0001D4C0) / 0x03E8)
                        BTPR (0x62, 0x02, Local0)
                    }
                    ElseIf (M596)
                    {
                        Local0 = ((Arg1 - 0x0001D4C0) / 0x03E8)
                        BTPR (0x51, 0x03, Local0)
                    }
                }

                Return (Zero)
            }

            Method (SUDR, 1, NotSerialized)
            {
                If ((Arg0 <= 0x0002AF80))
                {
                    Local0 = ((Arg0 - 0x000249F0) / 0x1068)
                }
                ElseIf (((Arg0 <= 0x000372D0) && (Arg0 > 0x0002AF80)))
                {
                    Local0 = (((Arg0 - 0x0002AF80) / 0x206C) + 0x06)
                }
                ElseIf ((Arg0 > 0x000372D0))
                {
                    Local0 = (((Arg0 - 0x000372D0) / 0x40D8) + 0x0C)
                }

                Local0 <<= 0x04
                Return (Local0)
            }

            Name (GF01, Zero)
            Name (OVFL, One)
            Name (OCFL, One)
            Name (TSBF, Buffer (0x20)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                ADBG ("AM01", DG01)
                If (!GF01)
                {
                    BM01 ()
                    If (OCFL)
                    {
                        CINI ()
                    }

                    If (OVFL)
                    {
                        VINI ()
                    }

                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM02, 0, NotSerialized)
            {
                ADBG ("AM02", DG01)
                ADBG (OBID, DG01)
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM03, 1, NotSerialized)
            {
                ADBG ("AM03", DG01)
                SOID (Arg0)
                If (((ID01 == One) && OCFL))
                {
                    Local0 = GETC (ID02)
                }
                ElseIf (((ID01 == 0x02) && OVFL))
                {
                    Local0 = GETV (ID02)
                }
                Else
                {
                    GVB1 = Zero
                    GVB2 = 0x04
                    Local0 = GVBF /* \AOD_.GVBF */
                }

                ADBG ("GVBF", DG01)
                ADBG (Local0, DG01)
                Return (Local0)
            }

            Method (AM04, 2, NotSerialized)
            {
                ADBG ("AM04", DG01)
                SOID (Arg0)
                If (((ID01 == One) && OCFL))
                {
                    SETC (ID02, Arg1)
                }
                ElseIf (((ID01 == 0x02) && OVFL))
                {
                    SETV (ID02, Arg1)
                }
                Else
                {
                    Return (0x04)
                }

                Return (Zero)
            }

            Method (AM05, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (INFO, Zero, IFID)
                CreateDWordField (INFO, 0x04, IFMI)
                CreateDWordField (INFO, 0x08, IFMX)
                CreateDWordField (INFO, 0x0C, IFSP)
                CreateField (INFO, 0x80, 0x03, IFST)
                ADBG ("AM05", DG01)
                ADBG (OBIT, DG01)
                SOID (Arg0)
                ADBG ("ID", DG01)
                ADBG (ID01, DG01)
                ADBG (ID02, DG01)
                BM05 (Arg0)
                ADBG ("OBIT", DG01)
                ADBG (OBIT, DG01)
                CPTB (Arg0, INFO)
                EM05 (Arg0)
                ADBG ("info", DG01)
                ADBG (INFO, DG01)
                Return (INFO) /* \AOD_.AM05.INFO */
            }

            Method (AM06, 0, NotSerialized)
            {
                HM06 ()
                Return (Zero)
            }

            Method (AM07, 1, NotSerialized)
            {
                HM07 (Arg0)
                Return (Zero)
            }

            Method (AM08, 1, NotSerialized)
            {
                Name (LODT, Package (0x34)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBDT [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBDT [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBDT [(Local0 + One)])
                    Local0 += 0x02
                }

                If (Local4){}
                Else
                {
                    Local1 = DerefOf (OBDT [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBDT [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }
                }

                Return (LODT) /* \AOD_.AM08.LODT */
            }

            Name (OBSV, Package (0x09)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (APTS, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [Zero])
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        SOID (DerefOf (OBID [Local1]))
                        If (((ID01 == One) && OCFL))
                        {
                            GETC (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        ElseIf (((ID01 == 0x02) && OVFL))
                        {
                            GETV (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        Else
                        {
                            Local3 = Zero
                        }

                        OBSV [Local2] = Local3
                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AWAK, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [Zero])
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        Local3 = DerefOf (OBSV [Local2])
                        SOID (DerefOf (OBID [Local1]))
                        If (((ID01 == One) && OCFL))
                        {
                            SETC (ID02, Local3)
                        }
                        ElseIf (((ID01 == 0x02) && OVFL))
                        {
                            SETV (ID02, Local3)
                        }
                        Else
                        {
                        }

                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Name (CMDV, Zero)
            Method (AM09, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Name (OBUF, Buffer (0x0200){})
            Method (AM10, 1, NotSerialized)
            {
                ADBG ("AM10", DG04)
                CreateDWordField (Arg0, Zero, ACMD)
                ADBG (ACMD, DG04)
                CreateField (OBUF, Zero, 0x1000, TEMP)
                TEMP = Zero
                If ((ACMD == 0x00030001))
                {
                    R301 ()
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00030004))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                    CreateDWordField (OBUF, Zero, CMDS)
                    CMDS = 0x00010000
                }

                ADBG (OBUF, DG04)
                Return (OBUF) /* \AOD_.OBUF */
            }

            Name (CMDL, Buffer (0x54){})
            Method (AM11, 0, NotSerialized)
            {
                Name (TEMP, Zero)
                CreateDWordField (CMDL, Zero, CMDC)
                TEMP += 0x04
                If (ACSS)
                {
                    CreateDWordField (CMDL, TEMP, CMD1)
                    TEMP += 0x04
                    CMD1 = 0x00030001
                    CreateDWordField (CMDL, TEMP, CMD2)
                    TEMP += 0x04
                    CMD2 = 0x00030002
                    CreateDWordField (CMDL, TEMP, CMD3)
                    TEMP += 0x04
                    CMD3 = 0x00030003
                    CreateDWordField (CMDL, TEMP, CMD4)
                    TEMP += 0x04
                    CMD4 = 0x00030004
                }

                CreateDWordField (CMDL, TEMP, CMD5)
                TEMP += 0x04
                CMD5 = 0x00040001
                CreateDWordField (CMDL, TEMP, CMD6)
                TEMP += 0x04
                CMD6 = 0x00040002
                TEMP -= 0x04
                TEMP /= 0x04
                CMDC = TEMP /* \AOD_.AM11.TEMP */
                Return (CMDL) /* \AOD_.CMDL */
            }

            If (ACSS)
            {
                Method (R301, 0, NotSerialized)
                {
                    Local0 = DerefOf (QLST [Zero])
                    CreateDWordField (OBUF, Zero, TMP1)
                    CreateWordField (OBUF, 0x04, TMP2)
                    TMP2 = Local0
                    TMP1 = Zero
                    Return (Zero)
                }

                Method (R302, 1, NotSerialized)
                {
                    Name (CIDX, Zero)
                    CreateWordField (Arg0, 0x04, IIDX)
                    CIDX = One
                    Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                    CIDX++
                    Local1 = 0x20
                    CreateField (OBUF, Local1, 0x0100, TMP1)
                    TMP1 = Local0
                    Local1 += 0x0100
                    ADBG ("OBUF", DG04)
                    ADBG (OBUF, DG04)
                    Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                    CIDX++
                    CreateField (OBUF, Local1, 0x08, TMP2)
                    TMP2 = Local0
                    ADBG ("OBUF", DG04)
                    ADBG (OBUF, DG04)
                    Local1 += 0x08
                    Local2 = Local0
                    Local5 = (Local1 / 0x08)
                    ADBG ("local5", DG04)
                    ADBG (Local5, DG04)
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                        ADBG ("IIDX", DG04)
                        ADBG (IIDX, DG04)
                        ADBG ("CIDX", DG04)
                        ADBG (CIDX, DG04)
                        ADBG ("Local0", DG04)
                        DG04 = Local0
                        Local4 = 0x05
                        Local6 = Zero
                        While ((Local4 > Zero))
                        {
                            If ((Local6 < SizeOf (Local0)))
                            {
                                OBUF [Local5] = DerefOf (Local0 [Local6])
                            }
                            Else
                            {
                                OBUF [Local5] = Zero
                            }

                            Local6++
                            Local5++
                            Local4--
                        }

                        Local1 += 0x28
                        Local2--
                        CIDX++
                    }

                    ADBG ("OBUF", DG04)
                    ADBG (OBUF, DG04)
                    Local1 = 0x0378
                    Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                    CIDX++
                    CreateField (OBUF, Local1, 0x08, TMP3)
                    TMP3 = Local0
                    ADBG ("OBUF", DG04)
                    ADBG (OBUF, DG04)
                    Local1 += 0x08
                    Local2 = Local0
                    Local5 = (Local1 / 0x08)
                    ADBG ("local5", DG04)
                    ADBG (Local5, DG04)
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                        Local4 = 0x14
                        Local6 = Zero
                        While ((Local4 > Zero))
                        {
                            If ((Local6 < SizeOf (Local0)))
                            {
                                OBUF [Local5] = DerefOf (Local0 [Local6])
                            }
                            Else
                            {
                                OBUF [Local5] = Zero
                            }

                            Local6++
                            Local5++
                            Local4--
                        }

                        (Local1 + 0x80)
                        Local2--
                        CIDX++
                    }

                    ADBG ("OBUF", DG04)
                    ADBG (OBUF, DG04)
                    CreateDWordField (OBUF, Zero, TMP4)
                    TMP4 = Zero
                    Return (Zero)
                }

                Method (R303, 1, NotSerialized)
                {
                    CreateWordField (Arg0, 0x04, IITM)
                    CreateDWordField (OBUF, Zero, TMP1)
                    CreateWordField (OBUF, 0x04, TMP2)
                    Local0 = DerefOf (DerefOf (QLST [IITM]) [Zero])
                    Local1 = GCMS (Local0)
                    CreateDWordField (Local1, Zero, TMP3)
                    CreateWordField (Local1, 0x04, TMP4)
                    TMP1 = TMP3 /* \AOD_.R303.TMP3 */
                    TMP2 = TMP4 /* \AOD_.R303.TMP4 */
                    Return (Zero)
                }

                Method (R304, 1, NotSerialized)
                {
                    CreateWordField (Arg0, 0x04, IITM)
                    CreateWordField (Arg0, 0x06, CMSD)
                    CreateDWordField (OBUF, Zero, TMP1)
                    Local0 = DerefOf (DerefOf (QLST [IITM]) [Zero])
                    TMP1 = SCMS (Local0, CMSD)
                    Return (Zero)
                }
            }

            Name (VEND, Buffer (0x05)
            {
                "ASUS"
            })
            Method (R401, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x0200, TMP2)
                TMP2 = VEND /* \AOD_.VEND */
                Return (Zero)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x08, TMP1)
                CreateField (OBUF, 0x28, 0x08, TMP2)
                TMP1 = GMOD /* \AOD_.GMOD */
                TMP2 = GFXO /* \AOD_.GFXO */
                Return (Zero)
            }

            Name (WQBA, Buffer (0x0BBB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xAB, 0x0B, 0x00, 0x00, 0x20, 0x4A, 0x00, 0x00,  // .... J..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5B, 0xA4, 0x00, 0x01, 0x06, 0x18, 0x42,  // ([.....B
                /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x92, 0xAD, 0x08, 0x1C, 0x21,  // .......!
                /* 0060 */  0x06, 0x1C, 0xA5, 0x13, 0x5B, 0xB8, 0x61, 0x83,  // ....[.a.
                /* 0068 */  0x17, 0x8A, 0xA2, 0x19, 0x44, 0x49, 0x50, 0xB9,  // ....DIP.
                /* 0070 */  0x00, 0xDF, 0x08, 0x02, 0x2F, 0x57, 0x80, 0xE4,  // ..../W..
                /* 0078 */  0x09, 0x48, 0xB3, 0x00, 0xC3, 0x02, 0xAC, 0x0B,  // .H......
                /* 0080 */  0x90, 0x3D, 0x04, 0x2A, 0x75, 0x08, 0x28, 0x39,  // .=.*u.(9
                /* 0088 */  0x43, 0x40, 0x0D, 0xA0, 0xD5, 0x09, 0x08, 0xBF,  // C@......
                /* 0090 */  0xD2, 0x29, 0x21, 0x09, 0xC2, 0x19, 0xAB, 0x78,  // .)!....x
                /* 0098 */  0x7C, 0xCD, 0xA2, 0xE9, 0x39, 0xC9, 0x39, 0x86,  // |...9.9.
                /* 00A0 */  0x1C, 0x8F, 0x0B, 0x3D, 0x08, 0x1E, 0x47, 0x03,  // ...=..G.
                /* 00A8 */  0x08, 0x93, 0x3F, 0x64, 0x05, 0x80, 0x41, 0x49,  // ..?d..AI
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
                /* 00B8 */  0x80, 0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A,  // ..Q....:
                /* 00C0 */  0xBF, 0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04,  // .#9..;..
                /* 00C8 */  0x46, 0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42,  // F=.c,lFB
                /* 00D0 */  0x8D, 0xD1, 0x1C, 0x14, 0x09, 0x37, 0x68, 0xB4,  // .....7h.
                /* 00D8 */  0x44, 0x58, 0x8D, 0x2B, 0xF6, 0x99, 0x59, 0xF8,  // DX.+..Y.
                /* 00E0 */  0xB0, 0x84, 0x71, 0x04, 0x07, 0x76, 0xB0, 0x16,  // ..q..v..
                /* 00E8 */  0x0D, 0x23, 0xB4, 0x82, 0xE0, 0x34, 0x88, 0xA3,  // .#...4..
                /* 00F0 */  0x88, 0x12, 0x86, 0xE1, 0x19, 0x33, 0xD0, 0x51,  // .....3.Q
                /* 00F8 */  0x32, 0xA4, 0x30, 0x41, 0x4F, 0x20, 0xC8, 0xC9,  // 2.0AO ..
                /* 0100 */  0x33, 0x2C, 0x43, 0x9C, 0x01, 0xC7, 0x8A, 0x11,  // 3,C.....
                /* 0108 */  0x2A, 0x24, 0x66, 0x20, 0xC1, 0xFF, 0xFF, 0x27,  // *$f ...'
                /* 0110 */  0xD0, 0x35, 0x86, 0x3C, 0x03, 0x91, 0x7B, 0xC0,  // .5.<..{.
                /* 0118 */  0x09, 0x04, 0x89, 0x1E, 0x25, 0xB8, 0x71, 0x8D,  // ....%.q.
                /* 0120 */  0xCA, 0xC6, 0x74, 0x36, 0xB8, 0x81, 0x99, 0x20,  // ..t6... 
                /* 0128 */  0xCE, 0xE1, 0x61, 0x64, 0x40, 0x68, 0x02, 0xF1,  // ..ad@h..
                /* 0130 */  0x63, 0x87, 0x4F, 0x60, 0xF7, 0xC7, 0x01, 0x29,  // c.O`...)
                /* 0138 */  0x44, 0xD0, 0x85, 0xE0, 0x4C, 0x6B, 0x14, 0x60,  // D...Lk.`
                /* 0140 */  0xED, 0xEC, 0x20, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // .. [.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0x07, 0x41, 0x24, 0x58, 0x80,  // F`..A$X.
                /* 0168 */  0xF8, 0x23, 0xB0, 0x84, 0x13, 0x81, 0x8C, 0x8C,  // .#......
                /* 0170 */  0x86, 0x1E, 0x16, 0x7C, 0x12, 0x60, 0x07, 0x04,  // ...|.`..
                /* 0178 */  0xCF, 0xE7, 0xD4, 0x4C, 0xE0, 0xC0, 0x10, 0xE2,  // ...L....
                /* 0180 */  0x95, 0x00, 0x51, 0x47, 0x0B, 0x4A, 0x60, 0x29,  // ..QG.J`)
                /* 0188 */  0x47, 0x03, 0x62, 0x7B, 0x60, 0xBA, 0x07, 0x1C,  // G.b{`...
                /* 0190 */  0xE1, 0xB9, 0xFB, 0x72, 0x70, 0x6A, 0xFE, 0x69,  // ...rpj.i
                /* 0198 */  0x78, 0x9A, 0x0F, 0x09, 0x98, 0x21, 0x7A, 0xAC,  // x....!z.
                /* 01A0 */  0x07, 0x11, 0xF0, 0x10, 0xD9, 0x29, 0xC1, 0x80,  // .....)..
                /* 01A8 */  0x78, 0xEF, 0xD7, 0x02, 0x32, 0x82, 0x97, 0x04,  // x...2...
                /* 01B0 */  0x03, 0x7A, 0x12, 0x0F, 0x08, 0x60, 0x39, 0x68,  // .z...`9h
                /* 01B8 */  0x1C, 0xF8, 0x09, 0x55, 0x7C, 0x07, 0xA0, 0x47,  // ...U|..G
                /* 01C0 */  0x02, 0x36, 0xA3, 0xF8, 0x26, 0x28, 0xEB, 0xF8,  // .6..&(..
                /* 01C8 */  0x80, 0x9E, 0x73, 0xB4, 0x67, 0x87, 0x97, 0x85,  // ..s.g...
                /* 01D0 */  0x66, 0xAF, 0x18, 0x84, 0xE0, 0x35, 0xC0, 0x37,  // f....5.7
                /* 01D8 */  0x05, 0x9F, 0x46, 0x2C, 0x69, 0x75, 0x72, 0xB2,  // ..F,iur.
                /* 01E0 */  0x2A, 0x8F, 0x98, 0x82, 0x7B, 0x08, 0x5C, 0x04,  // *...{.\.
                /* 01E8 */  0x9C, 0x86, 0xEE, 0xF1, 0x82, 0x43, 0xC1, 0x78,  // .....C.x
                /* 01F0 */  0xE9, 0xFF, 0x7F, 0xBC, 0xE0, 0x3E, 0x0F, 0x1C,  // .....>..
                /* 01F8 */  0x2F, 0x58, 0x4E, 0x09, 0x55, 0x5D, 0x36, 0x34,  // /XN.U]64
                /* 0200 */  0x87, 0xF3, 0x6D, 0x1E, 0x9F, 0x1C, 0x2D, 0x3C,  // ..m...-<
                /* 0208 */  0x61, 0x36, 0x96, 0xA3, 0x62, 0xC7, 0x10, 0x36,  // a6..b..6
                /* 0210 */  0x3A, 0x3E, 0x0A, 0x0F, 0xF8, 0xB5, 0xA1, 0x58,  // :>.....X
                /* 0218 */  0x10, 0x99, 0x80, 0xD0, 0x91, 0xE1, 0xC0, 0xC1,  // ........
                /* 0220 */  0xE2, 0xEC, 0x00, 0x21, 0x02, 0x0B, 0x1B, 0x39,  // ...!...9
                /* 0228 */  0x7A, 0xC4, 0x1E, 0xD4, 0x3B, 0x8C, 0x31, 0x1E,  // z...;.1.
                /* 0230 */  0x08, 0x8C, 0x7A, 0x48, 0x07, 0x0F, 0x3E, 0x40,  // ..zH..>@
                /* 0238 */  0x0F, 0x1E, 0x70, 0xFA, 0xFF, 0x27, 0xB0, 0xA0,  // ..p..'..
                /* 0240 */  0x21, 0x4B, 0xC4, 0xE0, 0xD1, 0xA7, 0x08, 0x0F,  // !K......
                /* 0248 */  0xE7, 0xDD, 0x87, 0x1F, 0x44, 0x12, 0x38, 0x3C,  // ....D.8<
                /* 0250 */  0x84, 0x06, 0x0F, 0x9E, 0xB3, 0x8F, 0x07, 0x0F,  // ........
                /* 0258 */  0x7E, 0x79, 0x83, 0x07, 0xD1, 0x14, 0x8E, 0x0D,  // ~y......
                /* 0260 */  0x77, 0xB0, 0xF1, 0xC0, 0xC1, 0x3D, 0x5C, 0xFC,  // w....=\.
                /* 0268 */  0x90, 0x70, 0x67, 0x2D, 0x78, 0x3E, 0x27, 0x4F,  // .pg-x>'O
                /* 0270 */  0x06, 0xF0, 0x12, 0x84, 0x3B, 0x6C, 0x01, 0x97,  // ....;l..
                /* 0278 */  0x11, 0x70, 0x99, 0xAB, 0xA4, 0x87, 0x2A, 0x0B,  // .p....*.
                /* 0280 */  0x83, 0x41, 0x9D, 0xAB, 0xC0, 0xFB, 0xFF, 0x3F,  // .A.....?
                /* 0288 */  0x57, 0x01, 0xF6, 0x2F, 0x53, 0xEF, 0x53, 0x3E,  // W../S.S>
                /* 0290 */  0x57, 0x81, 0x3B, 0xDA, 0x79, 0x40, 0xE7, 0x16,  // W.;.y@..
                /* 0298 */  0x72, 0x9A, 0x41, 0x1F, 0x0A, 0x7C, 0x06, 0x78,  // r.A..|.x
                /* 02A0 */  0x92, 0x01, 0xDB, 0xA1, 0x0A, 0x38, 0x9C, 0x64,  // .....8.d
                /* 02A8 */  0xC0, 0x73, 0x2B, 0x7B, 0x92, 0x61, 0xFF, 0xFF,  // .s+{.a..
                /* 02B0 */  0x93, 0x0C, 0x38, 0x0F, 0x62, 0x3E, 0xC9, 0x80,  // ..8.b>..
                /* 02B8 */  0xEF, 0xE8, 0x85, 0x3B, 0x81, 0xC0, 0xF3, 0x38,  // ...;...8
                /* 02C0 */  0x24, 0x21, 0x1F, 0x42, 0xF0, 0x43, 0x3A, 0xA6,  // $!.B.C:.
                /* 02C8 */  0x67, 0x10, 0x60, 0x28, 0xE4, 0x65, 0xE0, 0x03,  // g.`(.e..
                /* 02D0 */  0x08, 0x8D, 0x7E, 0x06, 0x01, 0xB4, 0xFF, 0xFF,  // ..~.....
                /* 02D8 */  0xCF, 0x20, 0xC0, 0xE5, 0xAC, 0xF0, 0x0C, 0x02,  // . ......
                /* 02E0 */  0x76, 0xF1, 0xAF, 0x3A, 0x9D, 0x07, 0x1C, 0x1C,  // v..:....
                /* 02E8 */  0x42, 0x4E, 0x8E, 0x8A, 0xA8, 0xE1, 0x58, 0xEB,  // BN....X.
                /* 02F0 */  0x41, 0x80, 0x8C, 0xE7, 0x45, 0xC0, 0x41, 0x4F,  // A...E.AO
                /* 02F8 */  0x8A, 0x40, 0xF7, 0xAC, 0x81, 0x3B, 0x1F, 0xC0,  // .@...;..
                /* 0300 */  0x3D, 0x12, 0xF2, 0x73, 0x07, 0xF8, 0xA2, 0x43,  // =..s...C
                /* 0308 */  0xE8, 0x98, 0x89, 0x3F, 0x51, 0x79, 0x88, 0x3E,  // ...?Qy.>
                /* 0310 */  0x1B, 0x98, 0xC0, 0xA3, 0x05, 0xD7, 0x39, 0x11,  // ......9.
                /* 0318 */  0x5C, 0xFF, 0xFF, 0xD1, 0xC2, 0x3B, 0x69, 0xE0,  // \....;i.
                /* 0320 */  0x46, 0x0B, 0xF7, 0x00, 0xFC, 0x58, 0x80, 0x39,  // F....X.9
                /* 0328 */  0x62, 0x82, 0xEB, 0xD0, 0x02, 0xA6, 0xEB, 0x02,  // b.......
                /* 0330 */  0xE6, 0xD2, 0x82, 0x3F, 0xB4, 0x00, 0x1F, 0xA1,  // ...?....
                /* 0338 */  0x27, 0x16, 0x94, 0xB4, 0x43, 0x0B, 0xA0, 0xF9,  // '...C...
                /* 0340 */  0xFF, 0x7F, 0x68, 0x01, 0x6E, 0x73, 0x7D, 0x68,  // ..h.ns}h
                /* 0348 */  0x01, 0x7B, 0xB8, 0x73, 0x18, 0x95, 0x73, 0x0E,  // .{.s..s.
                /* 0350 */  0x83, 0x76, 0x68, 0xF6, 0x39, 0x0C, 0xB8, 0x1E,  // .vh.9...
                /* 0358 */  0x26, 0xF0, 0x87, 0x4A, 0xB8, 0xB3, 0x88, 0x1F,  // &..J....
                /* 0360 */  0x27, 0xDA, 0x5B, 0x80, 0xCF, 0xA7, 0xC0, 0xED,  // '.[.....
                /* 0368 */  0xB0, 0x86, 0x3B, 0x82, 0xC0, 0xBB, 0x14, 0x9C,  // ..;.....
                /* 0370 */  0x96, 0xA7, 0xF6, 0xD4, 0x7F, 0x70, 0x8D, 0x5F,  // .....p._
                /* 0378 */  0x41, 0xC8, 0x3D, 0xC6, 0x77, 0x10, 0xF6, 0xFF,  // A.=.w...
                /* 0380 */  0x3F, 0x88, 0x01, 0x37, 0x19, 0x07, 0x31, 0x54,  // ?..7..1T
                /* 0388 */  0xF0, 0x43, 0x08, 0x40, 0xA1, 0xCB, 0xC2, 0x43,  // .C.@...C
                /* 0390 */  0x08, 0xD8, 0xA5, 0x1F, 0xC4, 0x68, 0xEC, 0x83,  // .....h..
                /* 0398 */  0x18, 0xEA, 0xFF, 0x7F, 0x82, 0xC7, 0x9F, 0xC3,  // ........
                /* 03A0 */  0x00, 0xA7, 0x67, 0x38, 0xB8, 0x51, 0x8F, 0x61,  // ..g8.Q.a
                /* 03A8 */  0x80, 0xA2, 0xB3, 0x28, 0x70, 0x82, 0x78, 0x0E,  // ...(p.x.
                /* 03B0 */  0x63, 0xFF, 0xFF, 0x73, 0x18, 0xF0, 0x14, 0xFC,  // c..s....
                /* 03B8 */  0x12, 0xF0, 0x81, 0x85, 0x4A, 0x84, 0x41, 0x9D,  // ....J.A.
                /* 03C0 */  0x59, 0x00, 0xDE, 0x1C, 0x90, 0x9F, 0x59, 0xC0,  // Y.....Y.
                /* 03C8 */  0x1E, 0xF2, 0xAD, 0xA1, 0x1F, 0x81, 0xFF, 0xFF,  // ........
                /* 03D0 */  0x67, 0x16, 0xC0, 0xF5, 0x99, 0xDC, 0x63, 0xC5,  // g.....c.
                /* 03D8 */  0x1D, 0x22, 0xD8, 0x48, 0x42, 0xBE, 0x0A, 0xBC,  // .".HB...
                /* 03E0 */  0x15, 0x98, 0xC0, 0x91, 0x0F, 0x2D, 0x40, 0xF7,  // .....-@.
                /* 03E8 */  0x6C, 0x82, 0x1B, 0x2D, 0xDC, 0xE3, 0xC8, 0x39,  // l..-...9
                /* 03F0 */  0x9E, 0xD0, 0xBB, 0xF9, 0xEB, 0x03, 0x3B, 0x4D,  // ......;M
                /* 03F8 */  0xB0, 0x21, 0x83, 0x57, 0xDE, 0x21, 0x10, 0xF5,  // .!.W.!..
                /* 0400 */  0xFF, 0x1F, 0xB2, 0x0F, 0x24, 0x9E, 0xC2, 0xCB,  // ....$...
                /* 0408 */  0x0C, 0x66, 0x26, 0x31, 0x0E, 0x24, 0xC2, 0xB1,  // .f&1.$..
                /* 0410 */  0x78, 0x78, 0xE4, 0x28, 0x08, 0xAA, 0x33, 0x3F,  // xx.(..3?
                /* 0418 */  0x19, 0x35, 0xE8, 0x67, 0xF7, 0x84, 0x0F, 0x9E,  // .5.g....
                /* 0420 */  0xE9, 0xBE, 0xE1, 0x83, 0xE1, 0x30, 0x08, 0x73,  // .....0.s
                /* 0428 */  0xCE, 0x1E, 0x3F, 0xF8, 0x8E, 0x3D, 0xB8, 0x73,  // ..?..=.s
                /* 0430 */  0x10, 0xBC, 0xEB, 0x8A, 0x91, 0x4F, 0xE8, 0x25,  // .....O.%
                /* 0438 */  0x00, 0x73, 0x6B, 0xC1, 0x9E, 0x05, 0x81, 0x93,  // .sk.....
                /* 0440 */  0xAC, 0x83, 0x20, 0x4A, 0xC8, 0x59, 0x10, 0x54,  // .. J.Y.T
                /* 0448 */  0xFF, 0xFF, 0x83, 0x10, 0xC0, 0x04, 0x6F, 0xF7,  // ......o.
                /* 0450 */  0x20, 0x5D, 0x83, 0x7C, 0x1B, 0x78, 0x1A, 0x78,  //  ].|.x.x
                /* 0458 */  0xF8, 0x89, 0xF2, 0x20, 0xE4, 0x8B, 0xC4, 0x0B,  // ... ....
                /* 0460 */  0x41, 0x84, 0x28, 0xC7, 0x7B, 0x02, 0x11, 0x9E,  // A.(.{...
                /* 0468 */  0x86, 0x3C, 0xE1, 0x30, 0xE1, 0x4E, 0x36, 0xCA,  // .<.0.N6.
                /* 0470 */  0x4B, 0x43, 0x18, 0x43, 0xC7, 0x0A, 0x14, 0x39,  // KC.C...9
                /* 0478 */  0x7E, 0x08, 0x1F, 0x85, 0x7C, 0x10, 0x62, 0x51,  // ~...|.bQ
                /* 0480 */  0xCE, 0xB7, 0xF4, 0xFC, 0x61, 0x23, 0x67, 0x11,  // ....a#g.
                /* 0488 */  0xD4, 0x49, 0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09,  // .I......
                /* 0490 */  0x01, 0x13, 0x1A, 0x42, 0x47, 0x5C, 0xE0, 0x7A,  // ...BG\.z
                /* 0498 */  0xDA, 0xC0, 0xFD, 0xFF, 0x8F, 0x42, 0xE0, 0x38,  // .....B.8
                /* 04A0 */  0x80, 0xC0, 0x7B, 0xF0, 0xF8, 0xB4, 0x0E, 0x2E,  // ..{.....
                /* 04A8 */  0x08, 0x9F, 0x3F, 0xE0, 0xFB, 0x44, 0x16, 0xEE,  // ..?..D..
                /* 04B0 */  0x5B, 0xC0, 0x0B, 0x0D, 0xEE, 0xEC, 0x01, 0x7C,  // [......|
                /* 04B8 */  0xE4, 0x1E, 0x6B, 0x51, 0x02, 0x61, 0x50, 0x67,  // ..kQ.aPg
                /* 04C0 */  0x0F, 0xC0, 0xF9, 0xFF, 0xFF, 0xEC, 0x01, 0xD6,  // ........
                /* 04C8 */  0x81, 0x3E, 0x7A, 0x1C, 0xE8, 0x31, 0x06, 0x89,  // .>z..1..
                /* 04D0 */  0x11, 0xC4, 0x77, 0x0E, 0x1F, 0x7C, 0xE2, 0xBC,  // ..w..|..
                /* 04D8 */  0x11, 0x3C, 0x7B, 0xF8, 0xC8, 0x71, 0x5C, 0x3E,  // .<{..q\>
                /* 04E0 */  0x80, 0xF8, 0xEC, 0xE1, 0x2B, 0x88, 0xF1, 0xC2,  // ....+...
                /* 04E8 */  0xC4, 0x7C, 0x38, 0xF2, 0x35, 0x21, 0x5E, 0xE4,  // .|8.5!^.
                /* 04F0 */  0xB0, 0x61, 0x22, 0xFB, 0xEC, 0xC1, 0x22, 0x1E,  // .a"...".
                /* 04F8 */  0x6B, 0xA9, 0x94, 0x83, 0x19, 0xFA, 0x4C, 0xE0,  // k.....L.
                /* 0500 */  0x5B, 0xC2, 0x99, 0xBD, 0x71, 0x44, 0x38, 0xAE,  // [...qD8.
                /* 0508 */  0x93, 0x3B, 0x9F, 0x38, 0x1E, 0xD2, 0x49, 0xFB,  // .;.8..I.
                /* 0510 */  0x6C, 0x06, 0xBE, 0xE3, 0x07, 0x70, 0x38, 0x9B,  // l....p8.
                /* 0518 */  0x81, 0x67, 0x74, 0x70, 0x0F, 0x53, 0xE0, 0x93,  // .gtp.S..
                /* 0520 */  0x75, 0x36, 0x43, 0x0F, 0xCB, 0xE7, 0x82, 0x57,  // u6C....W
                /* 0528 */  0x07, 0x0F, 0x82, 0x9D, 0xCB, 0xC0, 0x75, 0xB8,  // ......u.
                /* 0530 */  0x83, 0xF3, 0xFF, 0x3F, 0x97, 0x01, 0xAF, 0x73,  // ...?...s
                /* 0538 */  0xC7, 0x91, 0xB1, 0x53, 0x05, 0x47, 0x3C, 0xA8,  // ...S.G<.
                /* 0540 */  0x33, 0x79, 0x77, 0x39, 0x6B, 0x1F, 0x3C, 0x02,  // 3yw9k.<.
                /* 0548 */  0x9D, 0xE7, 0x29, 0xFB, 0x1C, 0x03, 0x73, 0x84,  // ..)...s.
                /* 0550 */  0x1E, 0x3B, 0xF8, 0x0E, 0x26, 0xF8, 0x83, 0x0C,  // .;..&...
                /* 0558 */  0x1C, 0x98, 0x13, 0x38, 0xBA, 0x40, 0xA7, 0x10,  // ...8.@..
                /* 0560 */  0xE7, 0x14, 0x9E, 0x63, 0x80, 0x91, 0x1C, 0x4B,  // ...c...K
                /* 0568 */  0x20, 0x2C, 0xC0, 0xB1, 0x40, 0xA2, 0x96, 0x49,  //  ,..@..I
                /* 0570 */  0x61, 0x7C, 0x32, 0xF0, 0x39, 0x06, 0xAE, 0x24,  // a|2.9..$
                /* 0578 */  0x38, 0xD4, 0xF8, 0x3C, 0xB2, 0x97, 0xBC, 0xE3,  // 8..<....
                /* 0580 */  0x3C, 0x91, 0x37, 0x04, 0x8F, 0xFF, 0x81, 0x06,  // <.7.....
                /* 0588 */  0xC6, 0xC0, 0x3D, 0xAD, 0x93, 0xF2, 0x4D, 0xEE,  // ..=...M.
                /* 0590 */  0xB1, 0xC4, 0x67, 0x43, 0x7E, 0x5C, 0x60, 0x68,  // ..gC~\`h
                /* 0598 */  0xFC, 0x74, 0x03, 0x86, 0xFF, 0xFF, 0xE9, 0x06,  // .t......
                /* 05A0 */  0xCE, 0x9D, 0xC1, 0x47, 0x0D, 0xB0, 0x5C, 0x6D,  // ...G..\m
                /* 05A8 */  0x30, 0x58, 0xA1, 0x62, 0x34, 0x7A, 0xD7, 0x23,  // 0X.b4z.#
                /* 05B0 */  0xA0, 0xC7, 0xD7, 0xD7, 0x45, 0x9A, 0x42, 0x45,  // ....E.BE
                /* 05B8 */  0x0C, 0xF1, 0x42, 0x60, 0x97, 0xC7, 0x71, 0xE4,  // ..B`..q.
                /* 05C0 */  0x59, 0x17, 0x5C, 0xD8, 0xCF, 0xBA, 0x60, 0x0F,  // Y.\...`.
                /* 05C8 */  0x75, 0x4E, 0xA2, 0x91, 0x46, 0x83, 0x3A, 0xC8,  // uN..F.:.
                /* 05D0 */  0xF0, 0x03, 0xC1, 0x63, 0x90, 0x4F, 0x1E, 0x06,  // ...c.O..
                /* 05D8 */  0x39, 0xD1, 0xD3, 0x7A, 0x5C, 0x78, 0x1A, 0xF0,  // 9..z\x..
                /* 05E0 */  0xB8, 0xD9, 0x35, 0xC1, 0x1F, 0x04, 0x1F, 0x0F,  // ..5.....
                /* 05E8 */  0xF0, 0x97, 0xA0, 0x80, 0x27, 0xFA, 0xF0, 0x01,  // ....'...
                /* 05F0 */  0xEB, 0x10, 0x82, 0x3F, 0x61, 0xC0, 0x1F, 0x8F,  // ...?a...
                /* 05F8 */  0x8F, 0x01, 0x3E, 0xD1, 0xFA, 0x48, 0x45, 0x06,  // ..>..HE.
                /* 0600 */  0x81, 0x3A, 0xBC, 0xF1, 0x91, 0x9E, 0xD6, 0xDB,  // .:......
                /* 0608 */  0x80, 0x0F, 0x09, 0x87, 0xC5, 0x0E, 0x1E, 0x3E,  // .......>
                /* 0610 */  0xA3, 0x80, 0x63, 0x3C, 0xF0, 0x6F, 0x9F, 0x4F,  // ..c<.o.O
                /* 0618 */  0x07, 0xFF, 0xFF, 0x08, 0xAF, 0x0C, 0x9E, 0xAF,  // ........
                /* 0620 */  0x0F, 0x66, 0x60, 0xB9, 0x75, 0xF8, 0xD0, 0x10,  // .f`.u...
                /* 0628 */  0xEA, 0xA9, 0xC3, 0x33, 0x78, 0xBF, 0xF0, 0x09,  // ...3x...
                /* 0630 */  0x04, 0x98, 0x04, 0x36, 0x34, 0x48, 0x26, 0x73,  // ...64H&s
                /* 0638 */  0x9D, 0xB2, 0x71, 0xDA, 0xA1, 0xC3, 0xB4, 0xC8,  // ..q.....
                /* 0640 */  0x03, 0x82, 0x8E, 0x06, 0x3E, 0xD2, 0xF8, 0x80,  // ....>...
                /* 0648 */  0xCB, 0x0F, 0x49, 0x86, 0xB0, 0x30, 0x0A, 0x9D,  // ..I..0..
                /* 0650 */  0x7C, 0x3C, 0x1A, 0x0F, 0x8F, 0xC0, 0x51, 0x10,  // |<....Q.
                /* 0658 */  0x8F, 0xDC, 0x21, 0x21, 0x64, 0xE4, 0x10, 0x80,  // ..!!d...
                /* 0660 */  0x3E, 0x2C, 0x30, 0x88, 0x87, 0x2E, 0x13, 0xF8,  // >,0.....
                /* 0668 */  0xD8, 0xE0, 0xF3, 0x1A, 0x9C, 0xE3, 0x91, 0x27,  // .......'
                /* 0670 */  0xE3, 0x69, 0x78, 0xDC, 0xB8, 0x53, 0x07, 0xDC,  // .ix..S..
                /* 0678 */  0x71, 0xE0, 0x0F, 0x3A, 0xF8, 0x53, 0x20, 0x3F,  // q..:.S ?
                /* 0680 */  0x27, 0x91, 0xF3, 0x1F, 0xA8, 0x04, 0x9E, 0x0B,  // '.......
                /* 0688 */  0x40, 0x01, 0xE4, 0xAB, 0x80, 0x95, 0x1E, 0x07,  // @.......
                /* 0690 */  0xE8, 0x14, 0x42, 0x84, 0x89, 0x66, 0x78, 0x4C,  // ..B..fxL
                /* 0698 */  0xF0, 0xD3, 0x17, 0x1D, 0x8F, 0x87, 0xE5, 0xFF,  // ........
                /* 06A0 */  0xFF, 0x20, 0xF9, 0xF1, 0x85, 0x61, 0x3F, 0x9D,  // . ...a?.
                /* 06A8 */  0xF8, 0xD4, 0x76, 0x8C, 0xEF, 0x05, 0x8F, 0x5F,  // ..v...._
                /* 06B0 */  0x18, 0x58, 0x0F, 0x9B, 0xC3, 0x1A, 0x2D, 0xEC,  // .X....-.
                /* 06B8 */  0xD1, 0x3E, 0x3E, 0xF8, 0xEA, 0xE1, 0x89, 0xF9,  // .>>.....
                /* 06C0 */  0x16, 0xE7, 0x43, 0x07, 0x58, 0x0E, 0x52, 0xC0,  // ..C.X.R.
                /* 06C8 */  0xE3, 0xFC, 0xC3, 0xE6, 0xF0, 0x02, 0xF1, 0x1C,  // ........
                /* 06D0 */  0xE6, 0x83, 0x07, 0x3B, 0xF1, 0xB1, 0x53, 0x1F,  // ...;..S.
                /* 06D8 */  0xD7, 0x75, 0x8E, 0x43, 0x9C, 0x21, 0xF8, 0x20,  // .u.C.!. 
                /* 06E0 */  0x1C, 0x67, 0x91, 0xF2, 0x38, 0x53, 0x72, 0x95,  // .g..8Sr.
                /* 06E8 */  0x7C, 0xE0, 0xA8, 0x1A, 0x45, 0xF0, 0xBE, 0x15,  // |...E...
                /* 06F0 */  0xB0, 0x08, 0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49,  // .....x.I
                /* 06F8 */  0x3F, 0x46, 0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x1F,  // ?F...Q..
                /* 0700 */  0x23, 0x7C, 0x90, 0xB0, 0x8D, 0x63, 0x04, 0x6A,  // #|...c.j
                /* 0708 */  0x8C, 0x3E, 0x0C, 0xF2, 0xA3, 0x00, 0x3F, 0x45,  // .>....?E
                /* 0710 */  0xC0, 0x3F, 0xF1, 0xE0, 0xC6, 0x0A, 0x77, 0x70,  // .?....wp
                /* 0718 */  0x6C, 0x85, 0x2F, 0x3D, 0x87, 0x76, 0x76, 0x0F,  // l./=.vv.
                /* 0720 */  0x09, 0x51, 0xDE, 0x5F, 0x8D, 0x18, 0x21, 0x60,  // .Q._..!`
                /* 0728 */  0xD8, 0x68, 0x1E, 0x23, 0xEE, 0xD8, 0xCE, 0x2E,  // .h.#....
                /* 0730 */  0x45, 0x9E, 0x53, 0xAC, 0x47, 0x25, 0x7E, 0xA4,  // E.S.G%~.
                /* 0738 */  0x80, 0xF7, 0xFF, 0x27, 0xF0, 0x31, 0x0F, 0x77,  // ...'.1.w
                /* 0740 */  0xA4, 0x80, 0x33, 0x93, 0xF3, 0xC0, 0xA8, 0x1B,  // ..3.....
                /* 0748 */  0x8B, 0xE0, 0x8D, 0xF6, 0x92, 0x8D, 0x3D, 0x58,  // ......=X
                /* 0750 */  0x00, 0x8F, 0x13, 0xA3, 0x0F, 0x16, 0xE0, 0x3A,  // .......:
                /* 0758 */  0x13, 0xF8, 0x60, 0x01, 0x5C, 0xCF, 0x07, 0x3E,  // ..`.\..>
                /* 0760 */  0x1D, 0x80, 0xF5, 0xF2, 0xC3, 0xEF, 0x07, 0x30,  // .......0
                /* 0768 */  0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98, 0x1B, 0x86,  // N.0.....
                /* 0770 */  0xC3, 0x2C, 0x59, 0x27, 0x0C, 0x7E, 0x5C, 0x73,  // .,Y'.~\s
                /* 0778 */  0xA4, 0xD5, 0x6A, 0x20, 0xEC, 0x12, 0x86, 0x23,  // ..j ...#
                /* 0780 */  0x18, 0x04, 0x4C, 0x27, 0x0B, 0x8F, 0xDA, 0x11,  // ..L'....
                /* 0788 */  0x28, 0x24, 0xED, 0x80, 0x81, 0x12, 0x73, 0xC0,  // ($....s.
                /* 0790 */  0xA0, 0x20, 0x06, 0x74, 0x52, 0x08, 0x9D, 0x45,  // . .tR..E
                /* 0798 */  0xFD, 0xFF, 0x3F, 0x60, 0xF0, 0x83, 0x9D, 0x4F,  // ..?`...O
                /* 07A0 */  0x0D, 0xEC, 0x72, 0xEB, 0xEB, 0x85, 0xE7, 0xE9,  // ..r.....
                /* 07A8 */  0x29, 0x73, 0x3C, 0x1F, 0x43, 0x0C, 0xEB, 0x8B,  // )s<.C...
                /* 07B0 */  0x09, 0x78, 0x6E, 0x14, 0xEC, 0x34, 0x8B, 0xB9,  // .xn..4..
                /* 07B8 */  0xB8, 0xB1, 0xB3, 0x1D, 0x3B, 0x15, 0x18, 0xE5,  // ....;...
                /* 07C0 */  0x70, 0xDF, 0xC0, 0xAC, 0xE6, 0xAA, 0x80, 0x9A,  // p.......
                /* 07C8 */  0x11, 0x86, 0xC0, 0xE3, 0xF5, 0x81, 0x11, 0x4C,  // .......L
                /* 07D0 */  0xFA, 0x2E, 0x14, 0x20, 0x47, 0xE7, 0x32, 0x47,  // ... G.2G
                /* 07D8 */  0x8F, 0x3A, 0x47, 0xF9, 0x24, 0xC5, 0x47, 0xEF,  // .:G.$.G.
                /* 07E0 */  0xA3, 0xB9, 0x4F, 0x2B, 0x70, 0xCF, 0x52, 0x3E,  // ..O+p.R>
                /* 07E8 */  0x42, 0x01, 0xDF, 0x81, 0xF9, 0x52, 0x80, 0x3B,  // B....R.;
                /* 07F0 */  0xA0, 0x80, 0xE1, 0xFA, 0x80, 0xFD, 0xFF, 0xC3,  // ........
                /* 07F8 */  0xBC, 0xA2, 0xE0, 0xCF, 0x28, 0xC0, 0x24, 0xF0,  // ....(.$.
                /* 0800 */  0x59, 0x0A, 0x74, 0x90, 0x3E, 0xA3, 0x00, 0xD7,  // Y.t.>...
                /* 0808 */  0xA1, 0xE2, 0xCE, 0x28, 0xE0, 0x38, 0x10, 0x1E,  // ...(.8..
                /* 0810 */  0x3D, 0x3F, 0x47, 0xB1, 0x38, 0xC7, 0x12, 0x74,  // =?G.8..t
                /* 0818 */  0xA8, 0x97, 0x83, 0x6E, 0x9B, 0xEC, 0x58, 0x82,  // ...n..X.
                /* 0820 */  0x8D, 0x72, 0x2C, 0x41, 0x85, 0xA0, 0xD0, 0x09,  // .r,A....
                /* 0828 */  0xCA, 0x27, 0x09, 0x7E, 0xC6, 0xE3, 0x20, 0x06,  // .'.~.. .
                /* 0830 */  0x74, 0xF6, 0x93, 0x04, 0x5A, 0xC5, 0x49, 0x02,  // t...Z.I.
                /* 0838 */  0x19, 0xF6, 0x5C, 0x02, 0x84, 0xFE, 0xFF, 0xE7,  // ..\.....
                /* 0840 */  0x12, 0xF0, 0x9E, 0x13, 0x9F, 0x26, 0xC0, 0x35,  // .....&.5
                /* 0848 */  0x6B, 0xFC, 0x69, 0x02, 0x7F, 0x3E, 0x01, 0x16,  // k.i..>..
                /* 0850 */  0x47, 0x46, 0xC0, 0xD9, 0x41, 0x90, 0x1F, 0x19,  // GF..A...
                /* 0858 */  0x81, 0xEF, 0xB9, 0x84, 0xFF, 0xFF, 0xCF, 0x25,  // .......%
                /* 0860 */  0xE0, 0x19, 0xB6, 0xCF, 0x25, 0x80, 0x93, 0x9B,  // ....%...
                /* 0868 */  0x34, 0x3F, 0x97, 0xC0, 0x1D, 0xBA, 0xE3, 0x9C,  // 4?......
                /* 0870 */  0xBE, 0x10, 0x57, 0x58, 0xDF, 0x33, 0xE2, 0x27,  // ..WX.3.'
                /* 0878 */  0x18, 0xE3, 0x58, 0x82, 0x0A, 0x70, 0xF8, 0x02,  // ..X..p..
                /* 0880 */  0xB4, 0xFF, 0xFF, 0x4F, 0x23, 0xE0, 0x3F, 0x17,  // ...O#.?.
                /* 0888 */  0x7B, 0xF4, 0xFC, 0x40, 0xE2, 0x43, 0x06, 0x19,  // {..@.C..
                /* 0890 */  0x3D, 0x8D, 0x7C, 0xF8, 0x82, 0x1E, 0xF1, 0x30,  // =.|....0
                /* 0898 */  0x02, 0xB4, 0x07, 0xFA, 0xF0, 0x05, 0xC6, 0xDB,  // ........
                /* 08A0 */  0x03, 0x3F, 0x6E, 0x02, 0xAF, 0xD8, 0x87, 0x12,  // .?n.....
                /* 08A8 */  0xD0, 0xC1, 0xF2, 0x43, 0x09, 0xF8, 0xFF, 0xFF,  // ...C....
                /* 08B0 */  0x87, 0x12, 0xF0, 0x8C, 0x1E, 0x77, 0xF6, 0x02,  // .....w..
                /* 08B8 */  0xC7, 0x55, 0xC2, 0x83, 0x37, 0xE0, 0x31, 0x3D,  // .U..7.1=
                /* 08C0 */  0x16, 0x18, 0x90, 0x9D, 0x4B, 0x98, 0xEC, 0x73,  // ....K..s
                /* 08C8 */  0x09, 0xFA, 0x3C, 0x62, 0xAB, 0xB7, 0x63, 0x72,  // ..<b..cr
                /* 08D0 */  0x52, 0xC7, 0x08, 0x3F, 0x97, 0xA0, 0x24, 0x9F,  // R..?..$.
                /* 08D8 */  0x4B, 0x00, 0xDA, 0x1C, 0xBA, 0xC0, 0xF1, 0xFF,  // K.......
                /* 08E0 */  0x3F, 0x74, 0x01, 0x3C, 0xB8, 0x06, 0xFA, 0x40,  // ?t.<...@
                /* 08E8 */  0x02, 0xAE, 0x7B, 0x82, 0x0F, 0x24, 0xC0, 0xF5,  // ..{..$..
                /* 08F0 */  0x28, 0x00, 0x9E, 0x23, 0x08, 0xFE, 0xC8, 0xEC,  // (..#....
                /* 08F8 */  0x03, 0x3F, 0xEE, 0xA4, 0xEF, 0x53, 0x75, 0x5C,  // .?...Su\
                /* 0900 */  0xE3, 0x1F, 0xF1, 0x11, 0xFC, 0xFF, 0x1B, 0x3F,  // .......?
                /* 0908 */  0x7D, 0x91, 0x7B, 0x81, 0x8F, 0x25, 0x3A, 0xF0,  // }.{..%:.
                /* 0910 */  0xA3, 0x04, 0x53, 0x48, 0xEE, 0x01, 0x02, 0x25,  // ..SH...%
                /* 0918 */  0x10, 0x8E, 0x82, 0xF8, 0x00, 0xE1, 0xF0, 0xE7,  // ........
                /* 0920 */  0x24, 0xE8, 0x57, 0x4B, 0x7E, 0x7E, 0xC0, 0x5F,  // $.WK~~._
                /* 0928 */  0x47, 0xD8, 0x28, 0xD9, 0x71, 0x1E, 0x37, 0x4A,  // G.(.q.7J
                /* 0930 */  0xB8, 0x60, 0xAF, 0x0F, 0x86, 0xB8, 0xC3, 0x13,  // .`......
                /* 0938 */  0xE1, 0x67, 0x5B, 0xCC, 0x31, 0x1F, 0xEE, 0x51,  // .g[.1..Q
                /* 0940 */  0xE1, 0x51, 0x09, 0x5C, 0xB3, 0x86, 0x75, 0x58,  // .Q.\..uX
                /* 0948 */  0x02, 0x3C, 0x78, 0x38, 0x4C, 0x00, 0xAD, 0xFF,  // .<x8L...
                /* 0950 */  0xFF, 0x61, 0x09, 0xFC, 0xB3, 0xE7, 0x83, 0x38,  // .a.....8
                /* 0958 */  0x11, 0x0F, 0x1F, 0x03, 0x74, 0x2C, 0x6F, 0x07,  // ....t,o.
                /* 0960 */  0xEC, 0xD8, 0xAB, 0xC3, 0x12, 0x6A, 0x0C, 0x3E,  // .....j.>
                /* 0968 */  0xFA, 0xFA, 0xE8, 0xC4, 0x20, 0x1F, 0x0F, 0x31,  // .... ..1
                /* 0970 */  0xC7, 0x16, 0x76, 0xC2, 0x07, 0xF8, 0xF6, 0xFF,  // ..v.....
                /* 0978 */  0x3F, 0xE1, 0x03, 0xD6, 0xCE, 0x24, 0xBE, 0x3F,  // ?....$.?
                /* 0980 */  0x60, 0xAF, 0x2D, 0xF8, 0xA3, 0x09, 0xF0, 0x06,  // `.-.....
                /* 0988 */  0xF7, 0xD1, 0x04, 0x70, 0xF5, 0xFF, 0x3F, 0x9A,  // ...p..?.
                /* 0990 */  0xE0, 0x84, 0x9E, 0x9D, 0x50, 0x67, 0x03, 0x1F,  // ....Pg..
                /* 0998 */  0x98, 0x6C, 0x14, 0x95, 0x40, 0xBF, 0x69, 0xBC,  // .l..@.i.
                /* 09A0 */  0x9F, 0x07, 0x31, 0xF4, 0x49, 0xF0, 0x53, 0x13,  // ..1.I.S.
                /* 09A8 */  0x06, 0xC2, 0x47, 0x13, 0x9F, 0x24, 0x7C, 0x9C,  // ..G..$|.
                /* 09B0 */  0xE0, 0x52, 0xE0, 0x28, 0x88, 0x8F, 0x13, 0x8E,  // .R.(....
                /* 09B8 */  0x79, 0x36, 0x41, 0x9F, 0x0A, 0x7C, 0x3F, 0x38,  // y6A..|?8
                /* 09C0 */  0x09, 0x6C, 0xA8, 0xF3, 0x04, 0x50, 0x19, 0x07,  // .l...P..
                /* 09C8 */  0xFE, 0xE8, 0x04, 0x57, 0xD8, 0xC9, 0x04, 0x64,  // ...W...d
                /* 09D0 */  0x27, 0x72, 0x60, 0x6E, 0xE2, 0x1C, 0x01, 0x94,  // 'r`n....
                /* 09D8 */  0xFE, 0xFF, 0x27, 0x72, 0xE0, 0x70, 0x5A, 0xE5,  // ..'r.pZ.
                /* 09E0 */  0xA7, 0x01, 0x7C, 0xA0, 0xA3, 0x2A, 0x3A, 0xD6,  // ..|..*:.
                /* 09E8 */  0x93, 0x41, 0x23, 0x7E, 0x07, 0x08, 0x77, 0xEA,  // .A#~..w.
                /* 09F0 */  0xE7, 0xF9, 0x40, 0xC0, 0x8E, 0xE5, 0x3E, 0x2C,  // ..@...>,
                /* 09F8 */  0xF1, 0xF3, 0x92, 0x4F, 0x11, 0x3E, 0x41, 0x70,  // ...O.>Ap
                /* 0A00 */  0x49, 0x27, 0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3D,  // I'..b@.=
                /* 0A08 */  0x5D, 0x7A, 0x10, 0xF4, 0x7C, 0xC3, 0x8F, 0xC5,  // ]z..|...
                /* 0A10 */  0xBE, 0xB6, 0x1C, 0xC5, 0x23, 0x51, 0x82, 0xF9,  // ....#Q..
                /* 0A18 */  0x0E, 0x01, 0xF4, 0xB6, 0x04, 0x4F, 0xDE, 0x6D,  // .....O.m
                /* 0A20 */  0x09, 0x44, 0x18, 0x77, 0x72, 0x16, 0x0C, 0xE1,  // .D.wr...
                /* 0A28 */  0x28, 0x7D, 0x80, 0x80, 0x31, 0xC0, 0xC7, 0x84,  // (}..1...
                /* 0A30 */  0x62, 0xDF, 0x37, 0xF4, 0xBE, 0x04, 0xF3, 0x8A,  // b.7.....
                /* 0A38 */  0x09, 0xAE, 0xF3, 0x12, 0x30, 0x9E, 0x89, 0xFF,  // ....0...
                /* 0A40 */  0xFF, 0x3E, 0xCF, 0x21, 0xE4, 0x02, 0xC0, 0x4F,  // .>.!...O
                /* 0A48 */  0xE5, 0x60, 0x39, 0x36, 0x80, 0x67, 0x1C, 0xEC,  // .`96.g..
                /* 0A50 */  0x0A, 0x80, 0x3F, 0x32, 0xC1, 0x3E, 0x35, 0xE2,  // ..?2.>5.
                /* 0A58 */  0x8E, 0x4C, 0x60, 0x98, 0x08, 0x3B, 0xE7, 0x1C,  // .L`..;..
                /* 0A60 */  0x08, 0xF6, 0x60, 0x02, 0xBC, 0x55, 0x1C, 0x4C,  // ..`..U.L
                /* 0A68 */  0x00, 0x2D, 0xC3, 0x0D, 0x72, 0x3E, 0x8F, 0xE4,  // .-..r>..
                /* 0A70 */  0xC6, 0x79, 0xC3, 0xF3, 0x89, 0x84, 0x9D, 0xC4,  // .y......
                /* 0A78 */  0xD9, 0xFF, 0xFF, 0x60, 0xC2, 0x25, 0x41, 0x48,  // ...`.%AH
                /* 0A80 */  0xFE, 0x61, 0x09, 0x89, 0x8D, 0x9D, 0xFE, 0x39,  // .a.....9
                /* 0A88 */  0xBC, 0xB9, 0x32, 0x82, 0x62, 0x8F, 0x4B, 0xA8,  // ..2.b.K.
                /* 0A90 */  0xC3, 0x84, 0x45, 0x9E, 0x26, 0x50, 0xA7, 0x69,  // ..E.&P.i
                /* 0A98 */  0x9F, 0x90, 0xC9, 0x69, 0x82, 0x46, 0x3E, 0x4D,  // ...i.F>M
                /* 0AA0 */  0xA0, 0x87, 0xE6, 0x89, 0x9D, 0x06, 0x6E, 0xDC,  // ......n.
                /* 0AA8 */  0xA7, 0xC1, 0x6F, 0x87, 0xFC, 0xC0, 0x04, 0x7C,  // ..o....|
                /* 0AB0 */  0x0F, 0x0F, 0xF8, 0xD3, 0x04, 0xEC, 0xF3, 0x0D,  // ........
                /* 0AB8 */  0x1B, 0x74, 0xC8, 0x77, 0x87, 0x17, 0x59, 0x1F,  // .t.w..Y.
                /* 0AC0 */  0x26, 0x80, 0xF9, 0xC8, 0x7D, 0x98, 0x00, 0xFF,  // &...}...
                /* 0AC8 */  0xFF, 0xFF, 0xD0, 0x04, 0x5C, 0x15, 0xDA, 0xF4,  // ....\...
                /* 0AD0 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
                /* 0AD8 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0xA4,  // 4...Rc..
                /* 0AE0 */  0x9D, 0x54, 0xBD, 0x54, 0x8D, 0xD5, 0x91, 0x9E,  // .T.T....
                /* 0AE8 */  0x0B, 0x02, 0x71, 0xD4, 0x05, 0x0B, 0xC4, 0xD1,  // ..q.....
                /* 0AF0 */  0x9F, 0x40, 0x02, 0xB1, 0xB8, 0x57, 0x88, 0x40,  // .@...W.@
                /* 0AF8 */  0x2C, 0xF5, 0x05, 0x21, 0x10, 0xCB, 0xD4, 0x01,  // ,..!....
                /* 0B00 */  0xC2, 0x82, 0xBC, 0xEF, 0x05, 0xE2, 0x60, 0x52,  // ......`R
                /* 0B08 */  0x06, 0x40, 0xAD, 0x80, 0xB0, 0x78, 0xCB, 0x12,  // .@...x..
                /* 0B10 */  0x88, 0x23, 0x9A, 0x39, 0x01, 0x50, 0x37, 0x20,  // .#.9.P7 
                /* 0B18 */  0x4C, 0xA0, 0x1E, 0x10, 0x26, 0xDC, 0x10, 0x08,  // L...&...
                /* 0B20 */  0x8B, 0xA3, 0x08, 0x84, 0x09, 0xB6, 0x04, 0xC2,  // ........
                /* 0B28 */  0xE2, 0x82, 0x50, 0xC1, 0x9E, 0x8E, 0xFD, 0x4C,  // ..P....L
                /* 0B30 */  0x3E, 0x88, 0x80, 0x1C, 0xDA, 0x14, 0x10, 0x93,  // >.......
                /* 0B38 */  0xA0, 0x0A, 0x88, 0x25, 0x78, 0x0C, 0x08, 0xC8,  // ...%x...
                /* 0B40 */  0x71, 0x40, 0x04, 0xE4, 0x50, 0xB6, 0x80, 0x58,  // q@..P..X
                /* 0B48 */  0x44, 0x10, 0x01, 0x59, 0xCF, 0x1B, 0x4E, 0x40,  // D..Y..N@
                /* 0B50 */  0x16, 0x07, 0x22, 0x20, 0x8B, 0x36, 0x06, 0xC4,  // .." .6..
                /* 0B58 */  0x22, 0x80, 0x08, 0xC8, 0xC9, 0x5E, 0x70, 0x81,  // "....^p.
                /* 0B60 */  0x48, 0x4C, 0x10, 0x01, 0x39, 0xEC, 0x8A, 0x05,  // HL..9...
                /* 0B68 */  0xE4, 0xE8, 0x20, 0x02, 0xB2, 0x4E, 0x6F, 0x40,  // .. ..No@
                /* 0B70 */  0x4C, 0x34, 0x88, 0x80, 0x2C, 0xFE, 0xB1, 0x21,  // L4..,..!
                /* 0B78 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0x3E, 0x28,  //  G....>(
                /* 0B80 */  0x02, 0x91, 0xB8, 0x20, 0x02, 0xB2, 0x46, 0x7B,  // ... ..F{
                /* 0B88 */  0x40, 0x4C, 0x30, 0x88, 0x80, 0x2C, 0xFB, 0x07,  // @L0..,..
                /* 0B90 */  0x25, 0x20, 0x87, 0x00, 0xD1, 0x00, 0xC9, 0xEB,  // % ......
                /* 0B98 */  0x40, 0x03, 0x24, 0xBF, 0x89, 0x40, 0x44, 0xE2,  // @.$..@D.
                /* 0BA0 */  0xAB, 0x22, 0x10, 0xD1, 0x0B, 0x22, 0x20, 0xFF,  // ."..." .
                /* 0BA8 */  0xFF, 0xA5, 0xFF, 0x38, 0x04, 0xE4, 0x20, 0x20,  // ...8..  
                /* 0BB0 */  0x02, 0x26, 0x1A, 0x81, 0xE9, 0x0B, 0x21, 0x10,  // .&....!.
                /* 0BB8 */  0xF9, 0xFF, 0x03                                 // ...
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 (WIID))
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        CreateDWordField (Arg2, 0x04, IVAL)
                        Return (AM04 (WIID, IVAL))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (WIID))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 ())
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        AM07 (Arg2)
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        AM08 (WIID)
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    ElseIf ((Arg1 == 0x0A))
                    {
                        Return (AM10 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x0B))
                    {
                        Return (AM11 ())
                    }
                }
            }
        }
    }

    Name (WQBA, Buffer (0x0BBB)
    {
        /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
        /* 0008 */  0xAB, 0x0B, 0x00, 0x00, 0x20, 0x4A, 0x00, 0x00,  // .... J..
        /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
        /* 0018 */  0x28, 0x5B, 0xA4, 0x00, 0x01, 0x06, 0x18, 0x42,  // ([.....B
        /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
        /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
        /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
        /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
        /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
        /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
        /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
        /* 0058 */  0x02, 0xA4, 0xC3, 0x92, 0xAD, 0x08, 0x1C, 0x21,  // .......!
        /* 0060 */  0x06, 0x1C, 0xA5, 0x13, 0x5B, 0xB8, 0x61, 0x83,  // ....[.a.
        /* 0068 */  0x17, 0x8A, 0xA2, 0x19, 0x44, 0x49, 0x50, 0xB9,  // ....DIP.
        /* 0070 */  0x00, 0xDF, 0x08, 0x02, 0x2F, 0x57, 0x80, 0xE4,  // ..../W..
        /* 0078 */  0x09, 0x48, 0xB3, 0x00, 0xC3, 0x02, 0xAC, 0x0B,  // .H......
        /* 0080 */  0x90, 0x3D, 0x04, 0x2A, 0x75, 0x08, 0x28, 0x39,  // .=.*u.(9
        /* 0088 */  0x43, 0x40, 0x0D, 0xA0, 0xD5, 0x09, 0x08, 0xBF,  // C@......
        /* 0090 */  0xD2, 0x29, 0x21, 0x09, 0xC2, 0x19, 0xAB, 0x78,  // .)!....x
        /* 0098 */  0x7C, 0xCD, 0xA2, 0xE9, 0x39, 0xC9, 0x39, 0x86,  // |...9.9.
        /* 00A0 */  0x1C, 0x8F, 0x0B, 0x3D, 0x08, 0x1E, 0x47, 0x03,  // ...=..G.
        /* 00A8 */  0x08, 0x93, 0x3F, 0x64, 0x05, 0x80, 0x41, 0x49,  // ..?d..AI
        /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
        /* 00B8 */  0x80, 0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A,  // ..Q....:
        /* 00C0 */  0xBF, 0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04,  // .#9..;..
        /* 00C8 */  0x46, 0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42,  // F=.c,lFB
        /* 00D0 */  0x8D, 0xD1, 0x1C, 0x14, 0x09, 0x37, 0x68, 0xB4,  // .....7h.
        /* 00D8 */  0x44, 0x58, 0x8D, 0x2B, 0xF6, 0x99, 0x59, 0xF8,  // DX.+..Y.
        /* 00E0 */  0xB0, 0x84, 0x71, 0x04, 0x07, 0x76, 0xB0, 0x16,  // ..q..v..
        /* 00E8 */  0x0D, 0x23, 0xB4, 0x82, 0xE0, 0x34, 0x88, 0xA3,  // .#...4..
        /* 00F0 */  0x88, 0x12, 0x86, 0xE1, 0x19, 0x33, 0xD0, 0x51,  // .....3.Q
        /* 00F8 */  0x32, 0xA4, 0x30, 0x41, 0x4F, 0x20, 0xC8, 0xC9,  // 2.0AO ..
        /* 0100 */  0x33, 0x2C, 0x43, 0x9C, 0x01, 0xC7, 0x8A, 0x11,  // 3,C.....
        /* 0108 */  0x2A, 0x24, 0x66, 0x20, 0xC1, 0xFF, 0xFF, 0x27,  // *$f ...'
        /* 0110 */  0xD0, 0x35, 0x86, 0x3C, 0x03, 0x91, 0x7B, 0xC0,  // .5.<..{.
        /* 0118 */  0x09, 0x04, 0x89, 0x1E, 0x25, 0xB8, 0x71, 0x8D,  // ....%.q.
        /* 0120 */  0xCA, 0xC6, 0x74, 0x36, 0xB8, 0x81, 0x99, 0x20,  // ..t6... 
        /* 0128 */  0xCE, 0xE1, 0x61, 0x64, 0x40, 0x68, 0x02, 0xF1,  // ..ad@h..
        /* 0130 */  0x63, 0x87, 0x4F, 0x60, 0xF7, 0xC7, 0x01, 0x29,  // c.O`...)
        /* 0138 */  0x44, 0xD0, 0x85, 0xE0, 0x4C, 0x6B, 0x14, 0x60,  // D...Lk.`
        /* 0140 */  0xED, 0xEC, 0x20, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // .. [.:..
        /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
        /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
        /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
        /* 0160 */  0x46, 0x60, 0xF6, 0x07, 0x41, 0x24, 0x58, 0x80,  // F`..A$X.
        /* 0168 */  0xF8, 0x23, 0xB0, 0x84, 0x13, 0x81, 0x8C, 0x8C,  // .#......
        /* 0170 */  0x86, 0x1E, 0x16, 0x7C, 0x12, 0x60, 0x07, 0x04,  // ...|.`..
        /* 0178 */  0xCF, 0xE7, 0xD4, 0x4C, 0xE0, 0xC0, 0x10, 0xE2,  // ...L....
        /* 0180 */  0x95, 0x00, 0x51, 0x47, 0x0B, 0x4A, 0x60, 0x29,  // ..QG.J`)
        /* 0188 */  0x47, 0x03, 0x62, 0x7B, 0x60, 0xBA, 0x07, 0x1C,  // G.b{`...
        /* 0190 */  0xE1, 0xB9, 0xFB, 0x72, 0x70, 0x6A, 0xFE, 0x69,  // ...rpj.i
        /* 0198 */  0x78, 0x9A, 0x0F, 0x09, 0x98, 0x21, 0x7A, 0xAC,  // x....!z.
        /* 01A0 */  0x07, 0x11, 0xF0, 0x10, 0xD9, 0x29, 0xC1, 0x80,  // .....)..
        /* 01A8 */  0x78, 0xEF, 0xD7, 0x02, 0x32, 0x82, 0x97, 0x04,  // x...2...
        /* 01B0 */  0x03, 0x7A, 0x12, 0x0F, 0x08, 0x60, 0x39, 0x68,  // .z...`9h
        /* 01B8 */  0x1C, 0xF8, 0x09, 0x55, 0x7C, 0x07, 0xA0, 0x47,  // ...U|..G
        /* 01C0 */  0x02, 0x36, 0xA3, 0xF8, 0x26, 0x28, 0xEB, 0xF8,  // .6..&(..
        /* 01C8 */  0x80, 0x9E, 0x73, 0xB4, 0x67, 0x87, 0x97, 0x85,  // ..s.g...
        /* 01D0 */  0x66, 0xAF, 0x18, 0x84, 0xE0, 0x35, 0xC0, 0x37,  // f....5.7
        /* 01D8 */  0x05, 0x9F, 0x46, 0x2C, 0x69, 0x75, 0x72, 0xB2,  // ..F,iur.
        /* 01E0 */  0x2A, 0x8F, 0x98, 0x82, 0x7B, 0x08, 0x5C, 0x04,  // *...{.\.
        /* 01E8 */  0x9C, 0x86, 0xEE, 0xF1, 0x82, 0x43, 0xC1, 0x78,  // .....C.x
        /* 01F0 */  0xE9, 0xFF, 0x7F, 0xBC, 0xE0, 0x3E, 0x0F, 0x1C,  // .....>..
        /* 01F8 */  0x2F, 0x58, 0x4E, 0x09, 0x55, 0x5D, 0x36, 0x34,  // /XN.U]64
        /* 0200 */  0x87, 0xF3, 0x6D, 0x1E, 0x9F, 0x1C, 0x2D, 0x3C,  // ..m...-<
        /* 0208 */  0x61, 0x36, 0x96, 0xA3, 0x62, 0xC7, 0x10, 0x36,  // a6..b..6
        /* 0210 */  0x3A, 0x3E, 0x0A, 0x0F, 0xF8, 0xB5, 0xA1, 0x58,  // :>.....X
        /* 0218 */  0x10, 0x99, 0x80, 0xD0, 0x91, 0xE1, 0xC0, 0xC1,  // ........
        /* 0220 */  0xE2, 0xEC, 0x00, 0x21, 0x02, 0x0B, 0x1B, 0x39,  // ...!...9
        /* 0228 */  0x7A, 0xC4, 0x1E, 0xD4, 0x3B, 0x8C, 0x31, 0x1E,  // z...;.1.
        /* 0230 */  0x08, 0x8C, 0x7A, 0x48, 0x07, 0x0F, 0x3E, 0x40,  // ..zH..>@
        /* 0238 */  0x0F, 0x1E, 0x70, 0xFA, 0xFF, 0x27, 0xB0, 0xA0,  // ..p..'..
        /* 0240 */  0x21, 0x4B, 0xC4, 0xE0, 0xD1, 0xA7, 0x08, 0x0F,  // !K......
        /* 0248 */  0xE7, 0xDD, 0x87, 0x1F, 0x44, 0x12, 0x38, 0x3C,  // ....D.8<
        /* 0250 */  0x84, 0x06, 0x0F, 0x9E, 0xB3, 0x8F, 0x07, 0x0F,  // ........
        /* 0258 */  0x7E, 0x79, 0x83, 0x07, 0xD1, 0x14, 0x8E, 0x0D,  // ~y......
        /* 0260 */  0x77, 0xB0, 0xF1, 0xC0, 0xC1, 0x3D, 0x5C, 0xFC,  // w....=\.
        /* 0268 */  0x90, 0x70, 0x67, 0x2D, 0x78, 0x3E, 0x27, 0x4F,  // .pg-x>'O
        /* 0270 */  0x06, 0xF0, 0x12, 0x84, 0x3B, 0x6C, 0x01, 0x97,  // ....;l..
        /* 0278 */  0x11, 0x70, 0x99, 0xAB, 0xA4, 0x87, 0x2A, 0x0B,  // .p....*.
        /* 0280 */  0x83, 0x41, 0x9D, 0xAB, 0xC0, 0xFB, 0xFF, 0x3F,  // .A.....?
        /* 0288 */  0x57, 0x01, 0xF6, 0x2F, 0x53, 0xEF, 0x53, 0x3E,  // W../S.S>
        /* 0290 */  0x57, 0x81, 0x3B, 0xDA, 0x79, 0x40, 0xE7, 0x16,  // W.;.y@..
        /* 0298 */  0x72, 0x9A, 0x41, 0x1F, 0x0A, 0x7C, 0x06, 0x78,  // r.A..|.x
        /* 02A0 */  0x92, 0x01, 0xDB, 0xA1, 0x0A, 0x38, 0x9C, 0x64,  // .....8.d
        /* 02A8 */  0xC0, 0x73, 0x2B, 0x7B, 0x92, 0x61, 0xFF, 0xFF,  // .s+{.a..
        /* 02B0 */  0x93, 0x0C, 0x38, 0x0F, 0x62, 0x3E, 0xC9, 0x80,  // ..8.b>..
        /* 02B8 */  0xEF, 0xE8, 0x85, 0x3B, 0x81, 0xC0, 0xF3, 0x38,  // ...;...8
        /* 02C0 */  0x24, 0x21, 0x1F, 0x42, 0xF0, 0x43, 0x3A, 0xA6,  // $!.B.C:.
        /* 02C8 */  0x67, 0x10, 0x60, 0x28, 0xE4, 0x65, 0xE0, 0x03,  // g.`(.e..
        /* 02D0 */  0x08, 0x8D, 0x7E, 0x06, 0x01, 0xB4, 0xFF, 0xFF,  // ..~.....
        /* 02D8 */  0xCF, 0x20, 0xC0, 0xE5, 0xAC, 0xF0, 0x0C, 0x02,  // . ......
        /* 02E0 */  0x76, 0xF1, 0xAF, 0x3A, 0x9D, 0x07, 0x1C, 0x1C,  // v..:....
        /* 02E8 */  0x42, 0x4E, 0x8E, 0x8A, 0xA8, 0xE1, 0x58, 0xEB,  // BN....X.
        /* 02F0 */  0x41, 0x80, 0x8C, 0xE7, 0x45, 0xC0, 0x41, 0x4F,  // A...E.AO
        /* 02F8 */  0x8A, 0x40, 0xF7, 0xAC, 0x81, 0x3B, 0x1F, 0xC0,  // .@...;..
        /* 0300 */  0x3D, 0x12, 0xF2, 0x73, 0x07, 0xF8, 0xA2, 0x43,  // =..s...C
        /* 0308 */  0xE8, 0x98, 0x89, 0x3F, 0x51, 0x79, 0x88, 0x3E,  // ...?Qy.>
        /* 0310 */  0x1B, 0x98, 0xC0, 0xA3, 0x05, 0xD7, 0x39, 0x11,  // ......9.
        /* 0318 */  0x5C, 0xFF, 0xFF, 0xD1, 0xC2, 0x3B, 0x69, 0xE0,  // \....;i.
        /* 0320 */  0x46, 0x0B, 0xF7, 0x00, 0xFC, 0x58, 0x80, 0x39,  // F....X.9
        /* 0328 */  0x62, 0x82, 0xEB, 0xD0, 0x02, 0xA6, 0xEB, 0x02,  // b.......
        /* 0330 */  0xE6, 0xD2, 0x82, 0x3F, 0xB4, 0x00, 0x1F, 0xA1,  // ...?....
        /* 0338 */  0x27, 0x16, 0x94, 0xB4, 0x43, 0x0B, 0xA0, 0xF9,  // '...C...
        /* 0340 */  0xFF, 0x7F, 0x68, 0x01, 0x6E, 0x73, 0x7D, 0x68,  // ..h.ns}h
        /* 0348 */  0x01, 0x7B, 0xB8, 0x73, 0x18, 0x95, 0x73, 0x0E,  // .{.s..s.
        /* 0350 */  0x83, 0x76, 0x68, 0xF6, 0x39, 0x0C, 0xB8, 0x1E,  // .vh.9...
        /* 0358 */  0x26, 0xF0, 0x87, 0x4A, 0xB8, 0xB3, 0x88, 0x1F,  // &..J....
        /* 0360 */  0x27, 0xDA, 0x5B, 0x80, 0xCF, 0xA7, 0xC0, 0xED,  // '.[.....
        /* 0368 */  0xB0, 0x86, 0x3B, 0x82, 0xC0, 0xBB, 0x14, 0x9C,  // ..;.....
        /* 0370 */  0x96, 0xA7, 0xF6, 0xD4, 0x7F, 0x70, 0x8D, 0x5F,  // .....p._
        /* 0378 */  0x41, 0xC8, 0x3D, 0xC6, 0x77, 0x10, 0xF6, 0xFF,  // A.=.w...
        /* 0380 */  0x3F, 0x88, 0x01, 0x37, 0x19, 0x07, 0x31, 0x54,  // ?..7..1T
        /* 0388 */  0xF0, 0x43, 0x08, 0x40, 0xA1, 0xCB, 0xC2, 0x43,  // .C.@...C
        /* 0390 */  0x08, 0xD8, 0xA5, 0x1F, 0xC4, 0x68, 0xEC, 0x83,  // .....h..
        /* 0398 */  0x18, 0xEA, 0xFF, 0x7F, 0x82, 0xC7, 0x9F, 0xC3,  // ........
        /* 03A0 */  0x00, 0xA7, 0x67, 0x38, 0xB8, 0x51, 0x8F, 0x61,  // ..g8.Q.a
        /* 03A8 */  0x80, 0xA2, 0xB3, 0x28, 0x70, 0x82, 0x78, 0x0E,  // ...(p.x.
        /* 03B0 */  0x63, 0xFF, 0xFF, 0x73, 0x18, 0xF0, 0x14, 0xFC,  // c..s....
        /* 03B8 */  0x12, 0xF0, 0x81, 0x85, 0x4A, 0x84, 0x41, 0x9D,  // ....J.A.
        /* 03C0 */  0x59, 0x00, 0xDE, 0x1C, 0x90, 0x9F, 0x59, 0xC0,  // Y.....Y.
        /* 03C8 */  0x1E, 0xF2, 0xAD, 0xA1, 0x1F, 0x81, 0xFF, 0xFF,  // ........
        /* 03D0 */  0x67, 0x16, 0xC0, 0xF5, 0x99, 0xDC, 0x63, 0xC5,  // g.....c.
        /* 03D8 */  0x1D, 0x22, 0xD8, 0x48, 0x42, 0xBE, 0x0A, 0xBC,  // .".HB...
        /* 03E0 */  0x15, 0x98, 0xC0, 0x91, 0x0F, 0x2D, 0x40, 0xF7,  // .....-@.
        /* 03E8 */  0x6C, 0x82, 0x1B, 0x2D, 0xDC, 0xE3, 0xC8, 0x39,  // l..-...9
        /* 03F0 */  0x9E, 0xD0, 0xBB, 0xF9, 0xEB, 0x03, 0x3B, 0x4D,  // ......;M
        /* 03F8 */  0xB0, 0x21, 0x83, 0x57, 0xDE, 0x21, 0x10, 0xF5,  // .!.W.!..
        /* 0400 */  0xFF, 0x1F, 0xB2, 0x0F, 0x24, 0x9E, 0xC2, 0xCB,  // ....$...
        /* 0408 */  0x0C, 0x66, 0x26, 0x31, 0x0E, 0x24, 0xC2, 0xB1,  // .f&1.$..
        /* 0410 */  0x78, 0x78, 0xE4, 0x28, 0x08, 0xAA, 0x33, 0x3F,  // xx.(..3?
        /* 0418 */  0x19, 0x35, 0xE8, 0x67, 0xF7, 0x84, 0x0F, 0x9E,  // .5.g....
        /* 0420 */  0xE9, 0xBE, 0xE1, 0x83, 0xE1, 0x30, 0x08, 0x73,  // .....0.s
        /* 0428 */  0xCE, 0x1E, 0x3F, 0xF8, 0x8E, 0x3D, 0xB8, 0x73,  // ..?..=.s
        /* 0430 */  0x10, 0xBC, 0xEB, 0x8A, 0x91, 0x4F, 0xE8, 0x25,  // .....O.%
        /* 0438 */  0x00, 0x73, 0x6B, 0xC1, 0x9E, 0x05, 0x81, 0x93,  // .sk.....
        /* 0440 */  0xAC, 0x83, 0x20, 0x4A, 0xC8, 0x59, 0x10, 0x54,  // .. J.Y.T
        /* 0448 */  0xFF, 0xFF, 0x83, 0x10, 0xC0, 0x04, 0x6F, 0xF7,  // ......o.
        /* 0450 */  0x20, 0x5D, 0x83, 0x7C, 0x1B, 0x78, 0x1A, 0x78,  //  ].|.x.x
        /* 0458 */  0xF8, 0x89, 0xF2, 0x20, 0xE4, 0x8B, 0xC4, 0x0B,  // ... ....
        /* 0460 */  0x41, 0x84, 0x28, 0xC7, 0x7B, 0x02, 0x11, 0x9E,  // A.(.{...
        /* 0468 */  0x86, 0x3C, 0xE1, 0x30, 0xE1, 0x4E, 0x36, 0xCA,  // .<.0.N6.
        /* 0470 */  0x4B, 0x43, 0x18, 0x43, 0xC7, 0x0A, 0x14, 0x39,  // KC.C...9
        /* 0478 */  0x7E, 0x08, 0x1F, 0x85, 0x7C, 0x10, 0x62, 0x51,  // ~...|.bQ
        /* 0480 */  0xCE, 0xB7, 0xF4, 0xFC, 0x61, 0x23, 0x67, 0x11,  // ....a#g.
        /* 0488 */  0xD4, 0x49, 0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09,  // .I......
        /* 0490 */  0x01, 0x13, 0x1A, 0x42, 0x47, 0x5C, 0xE0, 0x7A,  // ...BG\.z
        /* 0498 */  0xDA, 0xC0, 0xFD, 0xFF, 0x8F, 0x42, 0xE0, 0x38,  // .....B.8
        /* 04A0 */  0x80, 0xC0, 0x7B, 0xF0, 0xF8, 0xB4, 0x0E, 0x2E,  // ..{.....
        /* 04A8 */  0x08, 0x9F, 0x3F, 0xE0, 0xFB, 0x44, 0x16, 0xEE,  // ..?..D..
        /* 04B0 */  0x5B, 0xC0, 0x0B, 0x0D, 0xEE, 0xEC, 0x01, 0x7C,  // [......|
        /* 04B8 */  0xE4, 0x1E, 0x6B, 0x51, 0x02, 0x61, 0x50, 0x67,  // ..kQ.aPg
        /* 04C0 */  0x0F, 0xC0, 0xF9, 0xFF, 0xFF, 0xEC, 0x01, 0xD6,  // ........
        /* 04C8 */  0x81, 0x3E, 0x7A, 0x1C, 0xE8, 0x31, 0x06, 0x89,  // .>z..1..
        /* 04D0 */  0x11, 0xC4, 0x77, 0x0E, 0x1F, 0x7C, 0xE2, 0xBC,  // ..w..|..
        /* 04D8 */  0x11, 0x3C, 0x7B, 0xF8, 0xC8, 0x71, 0x5C, 0x3E,  // .<{..q\>
        /* 04E0 */  0x80, 0xF8, 0xEC, 0xE1, 0x2B, 0x88, 0xF1, 0xC2,  // ....+...
        /* 04E8 */  0xC4, 0x7C, 0x38, 0xF2, 0x35, 0x21, 0x5E, 0xE4,  // .|8.5!^.
        /* 04F0 */  0xB0, 0x61, 0x22, 0xFB, 0xEC, 0xC1, 0x22, 0x1E,  // .a"...".
        /* 04F8 */  0x6B, 0xA9, 0x94, 0x83, 0x19, 0xFA, 0x4C, 0xE0,  // k.....L.
        /* 0500 */  0x5B, 0xC2, 0x99, 0xBD, 0x71, 0x44, 0x38, 0xAE,  // [...qD8.
        /* 0508 */  0x93, 0x3B, 0x9F, 0x38, 0x1E, 0xD2, 0x49, 0xFB,  // .;.8..I.
        /* 0510 */  0x6C, 0x06, 0xBE, 0xE3, 0x07, 0x70, 0x38, 0x9B,  // l....p8.
        /* 0518 */  0x81, 0x67, 0x74, 0x70, 0x0F, 0x53, 0xE0, 0x93,  // .gtp.S..
        /* 0520 */  0x75, 0x36, 0x43, 0x0F, 0xCB, 0xE7, 0x82, 0x57,  // u6C....W
        /* 0528 */  0x07, 0x0F, 0x82, 0x9D, 0xCB, 0xC0, 0x75, 0xB8,  // ......u.
        /* 0530 */  0x83, 0xF3, 0xFF, 0x3F, 0x97, 0x01, 0xAF, 0x73,  // ...?...s
        /* 0538 */  0xC7, 0x91, 0xB1, 0x53, 0x05, 0x47, 0x3C, 0xA8,  // ...S.G<.
        /* 0540 */  0x33, 0x79, 0x77, 0x39, 0x6B, 0x1F, 0x3C, 0x02,  // 3yw9k.<.
        /* 0548 */  0x9D, 0xE7, 0x29, 0xFB, 0x1C, 0x03, 0x73, 0x84,  // ..)...s.
        /* 0550 */  0x1E, 0x3B, 0xF8, 0x0E, 0x26, 0xF8, 0x83, 0x0C,  // .;..&...
        /* 0558 */  0x1C, 0x98, 0x13, 0x38, 0xBA, 0x40, 0xA7, 0x10,  // ...8.@..
        /* 0560 */  0xE7, 0x14, 0x9E, 0x63, 0x80, 0x91, 0x1C, 0x4B,  // ...c...K
        /* 0568 */  0x20, 0x2C, 0xC0, 0xB1, 0x40, 0xA2, 0x96, 0x49,  //  ,..@..I
        /* 0570 */  0x61, 0x7C, 0x32, 0xF0, 0x39, 0x06, 0xAE, 0x24,  // a|2.9..$
        /* 0578 */  0x38, 0xD4, 0xF8, 0x3C, 0xB2, 0x97, 0xBC, 0xE3,  // 8..<....
        /* 0580 */  0x3C, 0x91, 0x37, 0x04, 0x8F, 0xFF, 0x81, 0x06,  // <.7.....
        /* 0588 */  0xC6, 0xC0, 0x3D, 0xAD, 0x93, 0xF2, 0x4D, 0xEE,  // ..=...M.
        /* 0590 */  0xB1, 0xC4, 0x67, 0x43, 0x7E, 0x5C, 0x60, 0x68,  // ..gC~\`h
        /* 0598 */  0xFC, 0x74, 0x03, 0x86, 0xFF, 0xFF, 0xE9, 0x06,  // .t......
        /* 05A0 */  0xCE, 0x9D, 0xC1, 0x47, 0x0D, 0xB0, 0x5C, 0x6D,  // ...G..\m
        /* 05A8 */  0x30, 0x58, 0xA1, 0x62, 0x34, 0x7A, 0xD7, 0x23,  // 0X.b4z.#
        /* 05B0 */  0xA0, 0xC7, 0xD7, 0xD7, 0x45, 0x9A, 0x42, 0x45,  // ....E.BE
        /* 05B8 */  0x0C, 0xF1, 0x42, 0x60, 0x97, 0xC7, 0x71, 0xE4,  // ..B`..q.
        /* 05C0 */  0x59, 0x17, 0x5C, 0xD8, 0xCF, 0xBA, 0x60, 0x0F,  // Y.\...`.
        /* 05C8 */  0x75, 0x4E, 0xA2, 0x91, 0x46, 0x83, 0x3A, 0xC8,  // uN..F.:.
        /* 05D0 */  0xF0, 0x03, 0xC1, 0x63, 0x90, 0x4F, 0x1E, 0x06,  // ...c.O..
        /* 05D8 */  0x39, 0xD1, 0xD3, 0x7A, 0x5C, 0x78, 0x1A, 0xF0,  // 9..z\x..
        /* 05E0 */  0xB8, 0xD9, 0x35, 0xC1, 0x1F, 0x04, 0x1F, 0x0F,  // ..5.....
        /* 05E8 */  0xF0, 0x97, 0xA0, 0x80, 0x27, 0xFA, 0xF0, 0x01,  // ....'...
        /* 05F0 */  0xEB, 0x10, 0x82, 0x3F, 0x61, 0xC0, 0x1F, 0x8F,  // ...?a...
        /* 05F8 */  0x8F, 0x01, 0x3E, 0xD1, 0xFA, 0x48, 0x45, 0x06,  // ..>..HE.
        /* 0600 */  0x81, 0x3A, 0xBC, 0xF1, 0x91, 0x9E, 0xD6, 0xDB,  // .:......
        /* 0608 */  0x80, 0x0F, 0x09, 0x87, 0xC5, 0x0E, 0x1E, 0x3E,  // .......>
        /* 0610 */  0xA3, 0x80, 0x63, 0x3C, 0xF0, 0x6F, 0x9F, 0x4F,  // ..c<.o.O
        /* 0618 */  0x07, 0xFF, 0xFF, 0x08, 0xAF, 0x0C, 0x9E, 0xAF,  // ........
        /* 0620 */  0x0F, 0x66, 0x60, 0xB9, 0x75, 0xF8, 0xD0, 0x10,  // .f`.u...
        /* 0628 */  0xEA, 0xA9, 0xC3, 0x33, 0x78, 0xBF, 0xF0, 0x09,  // ...3x...
        /* 0630 */  0x04, 0x98, 0x04, 0x36, 0x34, 0x48, 0x26, 0x73,  // ...64H&s
        /* 0638 */  0x9D, 0xB2, 0x71, 0xDA, 0xA1, 0xC3, 0xB4, 0xC8,  // ..q.....
        /* 0640 */  0x03, 0x82, 0x8E, 0x06, 0x3E, 0xD2, 0xF8, 0x80,  // ....>...
        /* 0648 */  0xCB, 0x0F, 0x49, 0x86, 0xB0, 0x30, 0x0A, 0x9D,  // ..I..0..
        /* 0650 */  0x7C, 0x3C, 0x1A, 0x0F, 0x8F, 0xC0, 0x51, 0x10,  // |<....Q.
        /* 0658 */  0x8F, 0xDC, 0x21, 0x21, 0x64, 0xE4, 0x10, 0x80,  // ..!!d...
        /* 0660 */  0x3E, 0x2C, 0x30, 0x88, 0x87, 0x2E, 0x13, 0xF8,  // >,0.....
        /* 0668 */  0xD8, 0xE0, 0xF3, 0x1A, 0x9C, 0xE3, 0x91, 0x27,  // .......'
        /* 0670 */  0xE3, 0x69, 0x78, 0xDC, 0xB8, 0x53, 0x07, 0xDC,  // .ix..S..
        /* 0678 */  0x71, 0xE0, 0x0F, 0x3A, 0xF8, 0x53, 0x20, 0x3F,  // q..:.S ?
        /* 0680 */  0x27, 0x91, 0xF3, 0x1F, 0xA8, 0x04, 0x9E, 0x0B,  // '.......
        /* 0688 */  0x40, 0x01, 0xE4, 0xAB, 0x80, 0x95, 0x1E, 0x07,  // @.......
        /* 0690 */  0xE8, 0x14, 0x42, 0x84, 0x89, 0x66, 0x78, 0x4C,  // ..B..fxL
        /* 0698 */  0xF0, 0xD3, 0x17, 0x1D, 0x8F, 0x87, 0xE5, 0xFF,  // ........
        /* 06A0 */  0xFF, 0x20, 0xF9, 0xF1, 0x85, 0x61, 0x3F, 0x9D,  // . ...a?.
        /* 06A8 */  0xF8, 0xD4, 0x76, 0x8C, 0xEF, 0x05, 0x8F, 0x5F,  // ..v...._
        /* 06B0 */  0x18, 0x58, 0x0F, 0x9B, 0xC3, 0x1A, 0x2D, 0xEC,  // .X....-.
        /* 06B8 */  0xD1, 0x3E, 0x3E, 0xF8, 0xEA, 0xE1, 0x89, 0xF9,  // .>>.....
        /* 06C0 */  0x16, 0xE7, 0x43, 0x07, 0x58, 0x0E, 0x52, 0xC0,  // ..C.X.R.
        /* 06C8 */  0xE3, 0xFC, 0xC3, 0xE6, 0xF0, 0x02, 0xF1, 0x1C,  // ........
        /* 06D0 */  0xE6, 0x83, 0x07, 0x3B, 0xF1, 0xB1, 0x53, 0x1F,  // ...;..S.
        /* 06D8 */  0xD7, 0x75, 0x8E, 0x43, 0x9C, 0x21, 0xF8, 0x20,  // .u.C.!. 
        /* 06E0 */  0x1C, 0x67, 0x91, 0xF2, 0x38, 0x53, 0x72, 0x95,  // .g..8Sr.
        /* 06E8 */  0x7C, 0xE0, 0xA8, 0x1A, 0x45, 0xF0, 0xBE, 0x15,  // |...E...
        /* 06F0 */  0xB0, 0x08, 0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49,  // .....x.I
        /* 06F8 */  0x3F, 0x46, 0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x1F,  // ?F...Q..
        /* 0700 */  0x23, 0x7C, 0x90, 0xB0, 0x8D, 0x63, 0x04, 0x6A,  // #|...c.j
        /* 0708 */  0x8C, 0x3E, 0x0C, 0xF2, 0xA3, 0x00, 0x3F, 0x45,  // .>....?E
        /* 0710 */  0xC0, 0x3F, 0xF1, 0xE0, 0xC6, 0x0A, 0x77, 0x70,  // .?....wp
        /* 0718 */  0x6C, 0x85, 0x2F, 0x3D, 0x87, 0x76, 0x76, 0x0F,  // l./=.vv.
        /* 0720 */  0x09, 0x51, 0xDE, 0x5F, 0x8D, 0x18, 0x21, 0x60,  // .Q._..!`
        /* 0728 */  0xD8, 0x68, 0x1E, 0x23, 0xEE, 0xD8, 0xCE, 0x2E,  // .h.#....
        /* 0730 */  0x45, 0x9E, 0x53, 0xAC, 0x47, 0x25, 0x7E, 0xA4,  // E.S.G%~.
        /* 0738 */  0x80, 0xF7, 0xFF, 0x27, 0xF0, 0x31, 0x0F, 0x77,  // ...'.1.w
        /* 0740 */  0xA4, 0x80, 0x33, 0x93, 0xF3, 0xC0, 0xA8, 0x1B,  // ..3.....
        /* 0748 */  0x8B, 0xE0, 0x8D, 0xF6, 0x92, 0x8D, 0x3D, 0x58,  // ......=X
        /* 0750 */  0x00, 0x8F, 0x13, 0xA3, 0x0F, 0x16, 0xE0, 0x3A,  // .......:
        /* 0758 */  0x13, 0xF8, 0x60, 0x01, 0x5C, 0xCF, 0x07, 0x3E,  // ..`.\..>
        /* 0760 */  0x1D, 0x80, 0xF5, 0xF2, 0xC3, 0xEF, 0x07, 0x30,  // .......0
        /* 0768 */  0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98, 0x1B, 0x86,  // N.0.....
        /* 0770 */  0xC3, 0x2C, 0x59, 0x27, 0x0C, 0x7E, 0x5C, 0x73,  // .,Y'.~\s
        /* 0778 */  0xA4, 0xD5, 0x6A, 0x20, 0xEC, 0x12, 0x86, 0x23,  // ..j ...#
        /* 0780 */  0x18, 0x04, 0x4C, 0x27, 0x0B, 0x8F, 0xDA, 0x11,  // ..L'....
        /* 0788 */  0x28, 0x24, 0xED, 0x80, 0x81, 0x12, 0x73, 0xC0,  // ($....s.
        /* 0790 */  0xA0, 0x20, 0x06, 0x74, 0x52, 0x08, 0x9D, 0x45,  // . .tR..E
        /* 0798 */  0xFD, 0xFF, 0x3F, 0x60, 0xF0, 0x83, 0x9D, 0x4F,  // ..?`...O
        /* 07A0 */  0x0D, 0xEC, 0x72, 0xEB, 0xEB, 0x85, 0xE7, 0xE9,  // ..r.....
        /* 07A8 */  0x29, 0x73, 0x3C, 0x1F, 0x43, 0x0C, 0xEB, 0x8B,  // )s<.C...
        /* 07B0 */  0x09, 0x78, 0x6E, 0x14, 0xEC, 0x34, 0x8B, 0xB9,  // .xn..4..
        /* 07B8 */  0xB8, 0xB1, 0xB3, 0x1D, 0x3B, 0x15, 0x18, 0xE5,  // ....;...
        /* 07C0 */  0x70, 0xDF, 0xC0, 0xAC, 0xE6, 0xAA, 0x80, 0x9A,  // p.......
        /* 07C8 */  0x11, 0x86, 0xC0, 0xE3, 0xF5, 0x81, 0x11, 0x4C,  // .......L
        /* 07D0 */  0xFA, 0x2E, 0x14, 0x20, 0x47, 0xE7, 0x32, 0x47,  // ... G.2G
        /* 07D8 */  0x8F, 0x3A, 0x47, 0xF9, 0x24, 0xC5, 0x47, 0xEF,  // .:G.$.G.
        /* 07E0 */  0xA3, 0xB9, 0x4F, 0x2B, 0x70, 0xCF, 0x52, 0x3E,  // ..O+p.R>
        /* 07E8 */  0x42, 0x01, 0xDF, 0x81, 0xF9, 0x52, 0x80, 0x3B,  // B....R.;
        /* 07F0 */  0xA0, 0x80, 0xE1, 0xFA, 0x80, 0xFD, 0xFF, 0xC3,  // ........
        /* 07F8 */  0xBC, 0xA2, 0xE0, 0xCF, 0x28, 0xC0, 0x24, 0xF0,  // ....(.$.
        /* 0800 */  0x59, 0x0A, 0x74, 0x90, 0x3E, 0xA3, 0x00, 0xD7,  // Y.t.>...
        /* 0808 */  0xA1, 0xE2, 0xCE, 0x28, 0xE0, 0x38, 0x10, 0x1E,  // ...(.8..
        /* 0810 */  0x3D, 0x3F, 0x47, 0xB1, 0x38, 0xC7, 0x12, 0x74,  // =?G.8..t
        /* 0818 */  0xA8, 0x97, 0x83, 0x6E, 0x9B, 0xEC, 0x58, 0x82,  // ...n..X.
        /* 0820 */  0x8D, 0x72, 0x2C, 0x41, 0x85, 0xA0, 0xD0, 0x09,  // .r,A....
        /* 0828 */  0xCA, 0x27, 0x09, 0x7E, 0xC6, 0xE3, 0x20, 0x06,  // .'.~.. .
        /* 0830 */  0x74, 0xF6, 0x93, 0x04, 0x5A, 0xC5, 0x49, 0x02,  // t...Z.I.
        /* 0838 */  0x19, 0xF6, 0x5C, 0x02, 0x84, 0xFE, 0xFF, 0xE7,  // ..\.....
        /* 0840 */  0x12, 0xF0, 0x9E, 0x13, 0x9F, 0x26, 0xC0, 0x35,  // .....&.5
        /* 0848 */  0x6B, 0xFC, 0x69, 0x02, 0x7F, 0x3E, 0x01, 0x16,  // k.i..>..
        /* 0850 */  0x47, 0x46, 0xC0, 0xD9, 0x41, 0x90, 0x1F, 0x19,  // GF..A...
        /* 0858 */  0x81, 0xEF, 0xB9, 0x84, 0xFF, 0xFF, 0xCF, 0x25,  // .......%
        /* 0860 */  0xE0, 0x19, 0xB6, 0xCF, 0x25, 0x80, 0x93, 0x9B,  // ....%...
        /* 0868 */  0x34, 0x3F, 0x97, 0xC0, 0x1D, 0xBA, 0xE3, 0x9C,  // 4?......
        /* 0870 */  0xBE, 0x10, 0x57, 0x58, 0xDF, 0x33, 0xE2, 0x27,  // ..WX.3.'
        /* 0878 */  0x18, 0xE3, 0x58, 0x82, 0x0A, 0x70, 0xF8, 0x02,  // ..X..p..
        /* 0880 */  0xB4, 0xFF, 0xFF, 0x4F, 0x23, 0xE0, 0x3F, 0x17,  // ...O#.?.
        /* 0888 */  0x7B, 0xF4, 0xFC, 0x40, 0xE2, 0x43, 0x06, 0x19,  // {..@.C..
        /* 0890 */  0x3D, 0x8D, 0x7C, 0xF8, 0x82, 0x1E, 0xF1, 0x30,  // =.|....0
        /* 0898 */  0x02, 0xB4, 0x07, 0xFA, 0xF0, 0x05, 0xC6, 0xDB,  // ........
        /* 08A0 */  0x03, 0x3F, 0x6E, 0x02, 0xAF, 0xD8, 0x87, 0x12,  // .?n.....
        /* 08A8 */  0xD0, 0xC1, 0xF2, 0x43, 0x09, 0xF8, 0xFF, 0xFF,  // ...C....
        /* 08B0 */  0x87, 0x12, 0xF0, 0x8C, 0x1E, 0x77, 0xF6, 0x02,  // .....w..
        /* 08B8 */  0xC7, 0x55, 0xC2, 0x83, 0x37, 0xE0, 0x31, 0x3D,  // .U..7.1=
        /* 08C0 */  0x16, 0x18, 0x90, 0x9D, 0x4B, 0x98, 0xEC, 0x73,  // ....K..s
        /* 08C8 */  0x09, 0xFA, 0x3C, 0x62, 0xAB, 0xB7, 0x63, 0x72,  // ..<b..cr
        /* 08D0 */  0x52, 0xC7, 0x08, 0x3F, 0x97, 0xA0, 0x24, 0x9F,  // R..?..$.
        /* 08D8 */  0x4B, 0x00, 0xDA, 0x1C, 0xBA, 0xC0, 0xF1, 0xFF,  // K.......
        /* 08E0 */  0x3F, 0x74, 0x01, 0x3C, 0xB8, 0x06, 0xFA, 0x40,  // ?t.<...@
        /* 08E8 */  0x02, 0xAE, 0x7B, 0x82, 0x0F, 0x24, 0xC0, 0xF5,  // ..{..$..
        /* 08F0 */  0x28, 0x00, 0x9E, 0x23, 0x08, 0xFE, 0xC8, 0xEC,  // (..#....
        /* 08F8 */  0x03, 0x3F, 0xEE, 0xA4, 0xEF, 0x53, 0x75, 0x5C,  // .?...Su\
        /* 0900 */  0xE3, 0x1F, 0xF1, 0x11, 0xFC, 0xFF, 0x1B, 0x3F,  // .......?
        /* 0908 */  0x7D, 0x91, 0x7B, 0x81, 0x8F, 0x25, 0x3A, 0xF0,  // }.{..%:.
        /* 0910 */  0xA3, 0x04, 0x53, 0x48, 0xEE, 0x01, 0x02, 0x25,  // ..SH...%
        /* 0918 */  0x10, 0x8E, 0x82, 0xF8, 0x00, 0xE1, 0xF0, 0xE7,  // ........
        /* 0920 */  0x24, 0xE8, 0x57, 0x4B, 0x7E, 0x7E, 0xC0, 0x5F,  // $.WK~~._
        /* 0928 */  0x47, 0xD8, 0x28, 0xD9, 0x71, 0x1E, 0x37, 0x4A,  // G.(.q.7J
        /* 0930 */  0xB8, 0x60, 0xAF, 0x0F, 0x86, 0xB8, 0xC3, 0x13,  // .`......
        /* 0938 */  0xE1, 0x67, 0x5B, 0xCC, 0x31, 0x1F, 0xEE, 0x51,  // .g[.1..Q
        /* 0940 */  0xE1, 0x51, 0x09, 0x5C, 0xB3, 0x86, 0x75, 0x58,  // .Q.\..uX
        /* 0948 */  0x02, 0x3C, 0x78, 0x38, 0x4C, 0x00, 0xAD, 0xFF,  // .<x8L...
        /* 0950 */  0xFF, 0x61, 0x09, 0xFC, 0xB3, 0xE7, 0x83, 0x38,  // .a.....8
        /* 0958 */  0x11, 0x0F, 0x1F, 0x03, 0x74, 0x2C, 0x6F, 0x07,  // ....t,o.
        /* 0960 */  0xEC, 0xD8, 0xAB, 0xC3, 0x12, 0x6A, 0x0C, 0x3E,  // .....j.>
        /* 0968 */  0xFA, 0xFA, 0xE8, 0xC4, 0x20, 0x1F, 0x0F, 0x31,  // .... ..1
        /* 0970 */  0xC7, 0x16, 0x76, 0xC2, 0x07, 0xF8, 0xF6, 0xFF,  // ..v.....
        /* 0978 */  0x3F, 0xE1, 0x03, 0xD6, 0xCE, 0x24, 0xBE, 0x3F,  // ?....$.?
        /* 0980 */  0x60, 0xAF, 0x2D, 0xF8, 0xA3, 0x09, 0xF0, 0x06,  // `.-.....
        /* 0988 */  0xF7, 0xD1, 0x04, 0x70, 0xF5, 0xFF, 0x3F, 0x9A,  // ...p..?.
        /* 0990 */  0xE0, 0x84, 0x9E, 0x9D, 0x50, 0x67, 0x03, 0x1F,  // ....Pg..
        /* 0998 */  0x98, 0x6C, 0x14, 0x95, 0x40, 0xBF, 0x69, 0xBC,  // .l..@.i.
        /* 09A0 */  0x9F, 0x07, 0x31, 0xF4, 0x49, 0xF0, 0x53, 0x13,  // ..1.I.S.
        /* 09A8 */  0x06, 0xC2, 0x47, 0x13, 0x9F, 0x24, 0x7C, 0x9C,  // ..G..$|.
        /* 09B0 */  0xE0, 0x52, 0xE0, 0x28, 0x88, 0x8F, 0x13, 0x8E,  // .R.(....
        /* 09B8 */  0x79, 0x36, 0x41, 0x9F, 0x0A, 0x7C, 0x3F, 0x38,  // y6A..|?8
        /* 09C0 */  0x09, 0x6C, 0xA8, 0xF3, 0x04, 0x50, 0x19, 0x07,  // .l...P..
        /* 09C8 */  0xFE, 0xE8, 0x04, 0x57, 0xD8, 0xC9, 0x04, 0x64,  // ...W...d
        /* 09D0 */  0x27, 0x72, 0x60, 0x6E, 0xE2, 0x1C, 0x01, 0x94,  // 'r`n....
        /* 09D8 */  0xFE, 0xFF, 0x27, 0x72, 0xE0, 0x70, 0x5A, 0xE5,  // ..'r.pZ.
        /* 09E0 */  0xA7, 0x01, 0x7C, 0xA0, 0xA3, 0x2A, 0x3A, 0xD6,  // ..|..*:.
        /* 09E8 */  0x93, 0x41, 0x23, 0x7E, 0x07, 0x08, 0x77, 0xEA,  // .A#~..w.
        /* 09F0 */  0xE7, 0xF9, 0x40, 0xC0, 0x8E, 0xE5, 0x3E, 0x2C,  // ..@...>,
        /* 09F8 */  0xF1, 0xF3, 0x92, 0x4F, 0x11, 0x3E, 0x41, 0x70,  // ...O.>Ap
        /* 0A00 */  0x49, 0x27, 0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3D,  // I'..b@.=
        /* 0A08 */  0x5D, 0x7A, 0x10, 0xF4, 0x7C, 0xC3, 0x8F, 0xC5,  // ]z..|...
        /* 0A10 */  0xBE, 0xB6, 0x1C, 0xC5, 0x23, 0x51, 0x82, 0xF9,  // ....#Q..
        /* 0A18 */  0x0E, 0x01, 0xF4, 0xB6, 0x04, 0x4F, 0xDE, 0x6D,  // .....O.m
        /* 0A20 */  0x09, 0x44, 0x18, 0x77, 0x72, 0x16, 0x0C, 0xE1,  // .D.wr...
        /* 0A28 */  0x28, 0x7D, 0x80, 0x80, 0x31, 0xC0, 0xC7, 0x84,  // (}..1...
        /* 0A30 */  0x62, 0xDF, 0x37, 0xF4, 0xBE, 0x04, 0xF3, 0x8A,  // b.7.....
        /* 0A38 */  0x09, 0xAE, 0xF3, 0x12, 0x30, 0x9E, 0x89, 0xFF,  // ....0...
        /* 0A40 */  0xFF, 0x3E, 0xCF, 0x21, 0xE4, 0x02, 0xC0, 0x4F,  // .>.!...O
        /* 0A48 */  0xE5, 0x60, 0x39, 0x36, 0x80, 0x67, 0x1C, 0xEC,  // .`96.g..
        /* 0A50 */  0x0A, 0x80, 0x3F, 0x32, 0xC1, 0x3E, 0x35, 0xE2,  // ..?2.>5.
        /* 0A58 */  0x8E, 0x4C, 0x60, 0x98, 0x08, 0x3B, 0xE7, 0x1C,  // .L`..;..
        /* 0A60 */  0x08, 0xF6, 0x60, 0x02, 0xBC, 0x55, 0x1C, 0x4C,  // ..`..U.L
        /* 0A68 */  0x00, 0x2D, 0xC3, 0x0D, 0x72, 0x3E, 0x8F, 0xE4,  // .-..r>..
        /* 0A70 */  0xC6, 0x79, 0xC3, 0xF3, 0x89, 0x84, 0x9D, 0xC4,  // .y......
        /* 0A78 */  0xD9, 0xFF, 0xFF, 0x60, 0xC2, 0x25, 0x41, 0x48,  // ...`.%AH
        /* 0A80 */  0xFE, 0x61, 0x09, 0x89, 0x8D, 0x9D, 0xFE, 0x39,  // .a.....9
        /* 0A88 */  0xBC, 0xB9, 0x32, 0x82, 0x62, 0x8F, 0x4B, 0xA8,  // ..2.b.K.
        /* 0A90 */  0xC3, 0x84, 0x45, 0x9E, 0x26, 0x50, 0xA7, 0x69,  // ..E.&P.i
        /* 0A98 */  0x9F, 0x90, 0xC9, 0x69, 0x82, 0x46, 0x3E, 0x4D,  // ...i.F>M
        /* 0AA0 */  0xA0, 0x87, 0xE6, 0x89, 0x9D, 0x06, 0x6E, 0xDC,  // ......n.
        /* 0AA8 */  0xA7, 0xC1, 0x6F, 0x87, 0xFC, 0xC0, 0x04, 0x7C,  // ..o....|
        /* 0AB0 */  0x0F, 0x0F, 0xF8, 0xD3, 0x04, 0xEC, 0xF3, 0x0D,  // ........
        /* 0AB8 */  0x1B, 0x74, 0xC8, 0x77, 0x87, 0x17, 0x59, 0x1F,  // .t.w..Y.
        /* 0AC0 */  0x26, 0x80, 0xF9, 0xC8, 0x7D, 0x98, 0x00, 0xFF,  // &...}...
        /* 0AC8 */  0xFF, 0xFF, 0xD0, 0x04, 0x5C, 0x15, 0xDA, 0xF4,  // ....\...
        /* 0AD0 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
        /* 0AD8 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0xA4,  // 4...Rc..
        /* 0AE0 */  0x9D, 0x54, 0xBD, 0x54, 0x8D, 0xD5, 0x91, 0x9E,  // .T.T....
        /* 0AE8 */  0x0B, 0x02, 0x71, 0xD4, 0x05, 0x0B, 0xC4, 0xD1,  // ..q.....
        /* 0AF0 */  0x9F, 0x40, 0x02, 0xB1, 0xB8, 0x57, 0x88, 0x40,  // .@...W.@
        /* 0AF8 */  0x2C, 0xF5, 0x05, 0x21, 0x10, 0xCB, 0xD4, 0x01,  // ,..!....
        /* 0B00 */  0xC2, 0x82, 0xBC, 0xEF, 0x05, 0xE2, 0x60, 0x52,  // ......`R
        /* 0B08 */  0x06, 0x40, 0xAD, 0x80, 0xB0, 0x78, 0xCB, 0x12,  // .@...x..
        /* 0B10 */  0x88, 0x23, 0x9A, 0x39, 0x01, 0x50, 0x37, 0x20,  // .#.9.P7 
        /* 0B18 */  0x4C, 0xA0, 0x1E, 0x10, 0x26, 0xDC, 0x10, 0x08,  // L...&...
        /* 0B20 */  0x8B, 0xA3, 0x08, 0x84, 0x09, 0xB6, 0x04, 0xC2,  // ........
        /* 0B28 */  0xE2, 0x82, 0x50, 0xC1, 0x9E, 0x8E, 0xFD, 0x4C,  // ..P....L
        /* 0B30 */  0x3E, 0x88, 0x80, 0x1C, 0xDA, 0x14, 0x10, 0x93,  // >.......
        /* 0B38 */  0xA0, 0x0A, 0x88, 0x25, 0x78, 0x0C, 0x08, 0xC8,  // ...%x...
        /* 0B40 */  0x71, 0x40, 0x04, 0xE4, 0x50, 0xB6, 0x80, 0x58,  // q@..P..X
        /* 0B48 */  0x44, 0x10, 0x01, 0x59, 0xCF, 0x1B, 0x4E, 0x40,  // D..Y..N@
        /* 0B50 */  0x16, 0x07, 0x22, 0x20, 0x8B, 0x36, 0x06, 0xC4,  // .." .6..
        /* 0B58 */  0x22, 0x80, 0x08, 0xC8, 0xC9, 0x5E, 0x70, 0x81,  // "....^p.
        /* 0B60 */  0x48, 0x4C, 0x10, 0x01, 0x39, 0xEC, 0x8A, 0x05,  // HL..9...
        /* 0B68 */  0xE4, 0xE8, 0x20, 0x02, 0xB2, 0x4E, 0x6F, 0x40,  // .. ..No@
        /* 0B70 */  0x4C, 0x34, 0x88, 0x80, 0x2C, 0xFE, 0xB1, 0x21,  // L4..,..!
        /* 0B78 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0x3E, 0x28,  //  G....>(
        /* 0B80 */  0x02, 0x91, 0xB8, 0x20, 0x02, 0xB2, 0x46, 0x7B,  // ... ..F{
        /* 0B88 */  0x40, 0x4C, 0x30, 0x88, 0x80, 0x2C, 0xFB, 0x07,  // @L0..,..
        /* 0B90 */  0x25, 0x20, 0x87, 0x00, 0xD1, 0x00, 0xC9, 0xEB,  // % ......
        /* 0B98 */  0x40, 0x03, 0x24, 0xBF, 0x89, 0x40, 0x44, 0xE2,  // @.$..@D.
        /* 0BA0 */  0xAB, 0x22, 0x10, 0xD1, 0x0B, 0x22, 0x20, 0xFF,  // ."..." .
        /* 0BA8 */  0xFF, 0xA5, 0xFF, 0x38, 0x04, 0xE4, 0x20, 0x20,  // ...8..  
        /* 0BB0 */  0x02, 0x26, 0x1A, 0x81, 0xE9, 0x0B, 0x21, 0x10,  // .&....!.
        /* 0BB8 */  0xF9, 0xFF, 0x03                                 // ...
    })
    Name (QLST, Package (0x07)
    {
        0x06, 
        Package (0x08)
        {
            0x2694, 
            "Advanced Clock Calibration", 
            Zero, 
            0x04, 
            Buffer (0x09)
            {
                "Disabled"
            }, 

            Buffer (0x05)
            {
                "Auto"
            }, 

            Buffer (0x0A)
            {
                "All Cores"
            }, 

            Buffer (0x09)
            {
                "Per Core"
            }
        }, 

        Package (0x16)
        {
            0x455C, 
            "Value (All Cores)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x02, 0x01, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     // .....
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4560, 
            "Value (Core 0)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     // .....
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4564, 
            "Value (Core 1)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     // .....
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4568, 
            "Value (Core 2)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     // .....
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x456C, 
            "Value (Core 3)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     // .....
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }
    })
    Scope (_SB.PCI0)
    {
        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IO (Decode16,
                0x002E,             // Range Minimum
                0x002E,             // Range Maximum
                0x01,               // Alignment
                0x02,               // Length
                )
            IO (Decode16,
                0x4700,             // Range Minimum
                0x4700,             // Range Maximum
                0x01,               // Alignment
                0x0C,               // Length
                )
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT != 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT == 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.ITPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.ITPM.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.ITPM.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SIOS (Arg0)
            NB2S (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.EPTS (Arg0)
            APTS (Arg0)
            NPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SIOW (Arg0)
        NB2W (Arg0)
        SWAK (Arg0)
        \_SB.PCI0.SBRG.EWAK (Arg0)
        AWAK (Arg0)
        NWAK (Arg0)
        TCOW (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 29
[00Ah 0010   6]                       Oem ID : "7641MS"
[010h 0016   8]                 Oem Table ID : "A7641100"
[018h 0024   4]                 Oem Revision : 20150422
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : CFF9E000
[028h 0040   4]                 DSDT Address : CFF90660
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0001C1A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]                     Reserved : 0000
[083h 0131   1]                     Reserved : 00

// ACPI Warning: FADT revision 1 does not match length: found 84 expected 74

Raw Table Data: Length 132 (0x84)

    0000: 46 41 43 50 84 00 00 00 01 29 37 36 34 31 4D 53  // FACP.....)7641MS
    0010: 41 37 36 34 31 31 30 30 22 04 15 20 4D 53 46 54  // A7641100".. MSFT
    0020: 97 00 00 00 00 E0 F9 CF 60 06 F9 CF 01 00 09 00  // ........`.......
    0030: B0 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
    0070: A5 C1 01 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : "7641MS"
[010h 0016   8]                 Oem Table ID : "OEMHPET "
[018h 0024   4]                 Oem Revision : 20150422
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 00008300

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 57 37 36 34 31 4D 53  // HPET8....W7641MS
    0010: 4F 45 4D 48 50 45 54 20 22 04 15 20 4D 53 46 54  // OEMHPET ".. MSFT
    0020: 97 00 00 00 00 83 00 00 00 08 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 02 14 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0B
[00Ah 0010   6]                       Oem ID : "7641MS"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20150422
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 0B 37 36 34 31 4D 53  // MCFG<.....7641MS
    0010: 4F 45 4D 4D 43 46 47 20 22 04 15 20 4D 53 46 54  // OEMMCFG ".. MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----


SSDT
----
DefinitionBlock ("", "SSDT", 1, "A M I ", "POWERNOW", 0x00000001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P001.PPCV */
        }
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P002.PPCV */
        }
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P003.PPCV */
        }
    }

    Scope (\_PR.P004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x000072D8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000A8C, 
                0x00004CAE, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00003318, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00001130, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P004.PPCV */
        }
    }
}



