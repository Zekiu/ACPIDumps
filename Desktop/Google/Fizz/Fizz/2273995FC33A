
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000071F  0x02  "CORE  "  "COREBOOT"  0x0000002A  "CORE"   0x0000002A
 02)  MCFG  0x0000003C  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 03)  APIC  0x0000006C  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 04)  NHLT  0x00000179  0x05  "GOOGLE"  "FIZZ    "  0x00000000  "CORE"   0x00000000
 05)  DSDT  0x00004468  0x05  "COREv4"  "COREBOOT"  0x20110725  "INTL"   0x20150717
 06)  FACP  0x000000F4  0x04  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 07)  TCPA  0x00000032  0x02  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 08)  HPET  0x00000038  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 09)  FACS  0x00000040  0x01

Found 9 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 72
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 03
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 02
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 02
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 108 (0x6C)

    0000: 41 50 49 43 6C 00 00 00 01 72 43 4F 52 45 20 20  // APICl....rCORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 03  // ................
    0040: 01 00 00 00 00 08 03 02 01 00 00 00 01 0C 02 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 5, "COREv4", "COREBOOT", 0x20110725)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CP00, UnknownObj)
    External (_PR_.CP00._PSS, IntObj)
    External (_PR_.CP00._PTC, IntObj)
    External (_PR_.CP00._TPC, IntObj)
    External (_PR_.CP00._TSD, IntObj)
    External (_PR_.CP00._TSS, IntObj)
    External (_PR_.CP01, UnknownObj)
    External (_PR_.CP02, UnknownObj)
    External (_PR_.CP03, UnknownObj)
    External (_PR_.CP04, UnknownObj)
    External (_PR_.CP05, UnknownObj)
    External (_PR_.CP06, UnknownObj)
    External (_PR_.CP07, UnknownObj)
    External (_TZ_.THRT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPDL, IntObj)

    Scope (\)
    {
        Name (OIPG, Package (0x02)
        {
            Package (0x04)
            {
                One, 
                Zero, 
                0xFFFFFFFFFFFFFFFF, 
                "INT344B:00"
            }, 

            Package (0x04)
            {
                0x03, 
                One, 
                0x47, 
                "INT344B:00"
            }
        })
    }

    Scope (\)
    {
        Name (NVSA, 0x7AA9C000)
    }

    Scope (_SB)
    {
        Method (_SWS, 0, NotSerialized)  // _SWS: System Wake Source
        {
            Return (PM1I) /* \PM1I */
        }
    }

    Scope (_GPE)
    {
        Method (_SWS, 0, NotSerialized)  // _SWS: System Wake Source
        {
            Return (GPEI) /* \GPEI */
        }
    }

    OperationRegion (APMP, SystemIO, 0xB2, 0x02)
    Field (APMP, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMS,   8
    }

    OperationRegion (POST, SystemIO, 0x80, One)
    Field (POST, ByteAcc, Lock, Preserve)
    {
        DBG0,   8
    }

    OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
    Field (IO_T, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        TRP0,   8
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = Zero
        Return (SMIF) /* \SMIF */
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Name (PICM, Zero)
    OperationRegion (GNVS, SystemMemory, NVSA, 0x2000)
    Field (GNVS, ByteAcc, NoLock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PCNT,   8, 
        PPCM,   8, 
        TMPS,   8, 
        TLVL,   8, 
        FLVL,   8, 
        TCRT,   8, 
        TPSV,   8, 
        TMAX,   8, 
        S5U0,   8, 
        S3U0,   8, 
        S33G,   8, 
        LIDS,   8, 
        PWRS,   8, 
        CMEM,   32, 
        CBMC,   32, 
        PM1I,   64, 
        GPEI,   64, 
        DPTE,   8, 
        NHLA,   64, 
        NHLL,   32, 
        CID1,   16, 
        U2WE,   16, 
        U3WE,   8, 
        UIOR,   8, 
        EPCS,   8, 
        EMNA,   64, 
        ELNG,   64, 
        Offset (0x100), 
        VBT0,   32, 
        VBT1,   32, 
        VBT2,   32, 
        VBT3,   16, 
        VBT4,   2048, 
        VBT5,   512, 
        VBT6,   512, 
        VBT7,   32, 
        VBT8,   32, 
        VBT9,   32, 
        CHVD,   24576, 
        VBTA,   32, 
        MEHH,   256, 
        RMOB,   32, 
        RMOL,   32
    }

    Method (S3UE, 0, NotSerialized)
    {
        S3U0 = One
    }

    Method (S3UD, 0, NotSerialized)
    {
        S3U0 = Zero
    }

    Method (S5UE, 0, NotSerialized)
    {
        S5U0 = One
    }

    Method (S5UD, 0, NotSerialized)
    {
        S5U0 = Zero
    }

    Method (PNOT, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CP00, 0x81) // Information Change
            Notify (\_PR.CP01, 0x81) // Information Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CP02, 0x81) // Information Change
            Notify (\_PR.CP03, 0x81) // Information Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CP04, 0x81) // Information Change
            Notify (\_PR.CP05, 0x81) // Information Change
            Notify (\_PR.CP06, 0x81) // Information Change
            Notify (\_PR.CP07, 0x81) // Information Change
        }
    }

    Method (PPCN, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CP00, 0x80) // Status Change
            Notify (\_PR.CP01, 0x80) // Status Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CP02, 0x80) // Status Change
            Notify (\_PR.CP03, 0x80) // Status Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CP04, 0x80) // Status Change
            Notify (\_PR.CP05, 0x80) // Status Change
            Notify (\_PR.CP06, 0x80) // Status Change
            Notify (\_PR.CP07, 0x80) // Status Change
        }
    }

    Method (TNOT, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CP00, 0x82) // Device-Specific Change
            Notify (\_PR.CP01, 0x82) // Device-Specific Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CP02, 0x82) // Device-Specific Change
            Notify (\_PR.CP03, 0x82) // Device-Specific Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CP04, 0x82) // Device-Specific Change
            Notify (\_PR.CP05, 0x82) // Device-Specific Change
            Notify (\_PR.CP06, 0x82) // Device-Specific Change
            Notify (\_PR.CP07, 0x82) // Device-Specific Change
        }
    }

    Method (PPKG, 0, NotSerialized)
    {
        If ((PCNT >= 0x08))
        {
            Return (Package (0x08)
            {
                \_PR.CP00, 
                \_PR.CP01, 
                \_PR.CP02, 
                \_PR.CP03, 
                \_PR.CP04, 
                \_PR.CP05, 
                \_PR.CP06, 
                \_PR.CP07
            })
        }
        ElseIf ((PCNT >= 0x04))
        {
            Return (Package (0x04)
            {
                \_PR.CP00, 
                \_PR.CP01, 
                \_PR.CP02, 
                \_PR.CP03
            })
        }
        ElseIf ((PCNT >= 0x02))
        {
            Return (Package (0x02)
            {
                \_PR.CP00, 
                \_PR.CP01
            })
        }
        Else
        {
            Return (Package (0x01)
            {
                \_PR.CP00
            })
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Device (MCHC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (MCHP, PCI_Config, Zero, 0x0100)
                Field (MCHP, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    EPEN,   1, 
                        ,   11, 
                    EPBR,   20, 
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   14, 
                    MHBR,   17, 
                    Offset (0x60), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   23, 
                    PXBR,   6, 
                    Offset (0x68), 
                    DIEN,   1, 
                        ,   11, 
                    DIBR,   20, 
                    Offset (0x70), 
                    MEBA,   64, 
                    Offset (0xA0), 
                    TOM,    64, 
                    TUUD,   64, 
                    Offset (0xBC), 
                    TLUD,   32
                }
            }

            Name (MCRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFD000000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x01800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00005000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (MCRS, \_SB.PCI0._Y00._MIN, PMIN)  // _MIN: Minimum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y00._MAX, PMAX)  // _MAX: Maximum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y00._LEN, PLEN)  // _LEN: Length
                Local0 = ^MCHC.TLUD /* \_SB_.PCI0.MCHC.TLUD */
                Local1 = ^MCHC.MEBA /* \_SB_.PCI0.MCHC.MEBA */
                If ((Local0 == Local1))
                {
                    Local0 = ^MCHC.TOM /* \_SB_.PCI0.MCHC.TOM_ */
                }

                PMIN = Local0
                PLEN = ((PMAX - PMIN) + One)
                CreateQWordField (MCRS, \_SB.PCI0._Y01._MIN, MMIN)  // _MIN: Minimum Base Address
                CreateQWordField (MCRS, \_SB.PCI0._Y01._MAX, MMAX)  // _MAX: Maximum Base Address
                CreateQWordField (MCRS, \_SB.PCI0._Y01._LEN, MLEN)  // _LEN: Length
                Local0 = ^MCHC.TUUD /* \_SB_.PCI0.MCHC.TUUD */
                If ((Local0 <= 0x0000000800000000))
                {
                    MMIN = 0x0000000800000000
                    MLEN = 0x0000000400000000
                }
                Else
                {
                    MMIN = Zero
                    MLEN = Zero
                }

                MMAX = ((MMIN + MLEN) - One)
                Return (MCRS) /* \_SB_.PCI0.MCRS */
            }

            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (^MCHC.MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PCI0.MH_B */
            }

            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (^MCHC.EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PCI0.EP_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (^MCHC.PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PCI0.PC_B */
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    PC_L = (0x10000000 >> ^MCHC.PXSZ) /* \_SB_.PCI0.MCHC.PXSZ */
                }

                Return (PC_L) /* \_SB_.PCI0.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (^MCHC.DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PCI0.DM_B */
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00008000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED90000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFEE00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y02._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = GMHB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y03._BAS, DBR0)  // _BAS: Base Address
                    DBR0 = GDMB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y04._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = GEPB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y05._BAS, XBR0)  // _BAS: Base Address
                    XBR0 = GPCB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y05._LEN, XSZ0)  // _LEN: Length
                    XSZ0 = GPCL ()
                    Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                }
            }

            Name (PICP, Package (0x29)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }
            })
            Name (PICN, Package (0x21)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (PICP) /* \_SB_.PCI0.PICP */
                }
                Else
                {
                    Return (PICN) /* \_SB_.PCI0.PICN */
                }
            }

            Device (GPIO)
            {
                Name (_HID, "INT344B")  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_DDN, "GPIO Controller")  // _DDN: DOS Device Name
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y07)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y08)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y09)
                    {
                        0x00000000,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y06._BAS, BAS0)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y06._LEN, LEN0)  // _LEN: Length
                    BAS0 = PCRB (0xAF)
                    LEN0 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y07._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y07._LEN, LEN1)  // _LEN: Length
                    BAS1 = PCRB (0xAE)
                    LEN1 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y08._BAS, BAS3)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y08._LEN, LEN3)  // _LEN: Length
                    BAS3 = PCRB (0xAC)
                    LEN3 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y09._INT, IRQN)  // _INT: Interrupts
                    Local0 = (PCRR (0xAF, 0x10) & 0x08)
                    If ((Local0 == Zero))
                    {
                        IRQN = 0x0E
                    }
                    Else
                    {
                        IRQN = 0x0F
                    }

                    Return (RBUF) /* \_SB_.PCI0.GPIO.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Method (GADD, 1, NotSerialized)
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x2F)))
                {
                    Local0 = 0xAF
                    Local1 = (Arg0 - Zero)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x77)))
                {
                    Local0 = 0xAE
                    Local1 = (Arg0 - 0x30)
                }

                If (((Arg0 >= 0x78) && (Arg0 <= 0x97)))
                {
                    Local0 = 0xAC
                    Local1 = (Arg0 - 0x78)
                }

                Local2 = PCRB (Local0)
                Local2 += 0x0400
                Return ((Local2 + (Local1 * 0x08)))
            }

            Method (GRXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    VAL0,   32
                }

                Local0 = (One & (VAL0 >> One))
                Return (Local0)
            }

            Method (GTXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    VAL0,   32
                }

                Local0 = (One & (VAL0 >> Zero))
                Return (Local0)
            }

            Method (STXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    VAL0,   32
                }

                VAL0 |= One /* \_SB_.PCI0.STXS.VAL0 */
            }

            Method (CTXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    VAL0,   32
                }

                VAL0 &= 0xFFFFFFFFFFFFFFFE /* \_SB_.PCI0.CTXS.VAL0 */
            }

            OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x08)
            Field (ITSS, ByteAcc, NoLock, Preserve)
            {
                PIRA,   8, 
                PIRB,   8, 
                PIRC,   8, 
                PIRD,   8, 
                PIRE,   8, 
                PIRF,   8, 
                PIRG,   8, 
                PIRH,   8
            }

            Name (IREN, 0x80)
            Name (IREM, 0x0F)
            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRA & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKA._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRA = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRA & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRA |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRB & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKB._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRB = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRB & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRB |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRC & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKC._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRC = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRC & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRC |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRD & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKD._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRD = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRD & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRD |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRE & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKE._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRE = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRE & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRE |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRF & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKF._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRF = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRF & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRF |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKG)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRG & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKG._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRG = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRG & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRG |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKH)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRH & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKH._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRH = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRH & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRH |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Name (_DDN, "LPC Bus Device")  // _DDN: DOS Device Name
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_DDN, "DMA Controller")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_DDN, "Firmware Hub")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_DDN, "High Precision Event Timer")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_DDN, "8259 Interrupt Controller")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_DDN, "Floating Point Unit")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "Legacy Device Resources")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1800,             // Range Minimum
                            0x1800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_DDN, "Real Time Clock")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_DDN, "8254 Timer")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }
            }

            Device (HDAS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                Name (_DDN, "Audio Controller")  // _DDN: DOS Device Name
                Name (UUID, ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */)
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (NBUF, ResourceTemplate ()
                {
                    QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000001, // Length
                        ,, _Y0A, AddressRangeACPI, TypeStatic)
                })
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == UUID))
                    {
                        If ((Arg2 == Zero))
                        {
                            If (((Arg1 == One) && ((NHLA != Zero) && (
                                NHLL != Zero))))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x01                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._MIN, NBAS)  // _MIN: Minimum Base Address
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._MAX, NMAS)  // _MAX: Maximum Base Address
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._LEN, NLEN)  // _LEN: Length
                            NBAS = NHLA /* \NHLA */
                            NMAS = NHLA /* \NHLA */
                            NLEN = NHLL /* \NHLL */
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (IRQM, 1, Serialized)
            {
                Name (IQAA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (IQAP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (IQBA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Name (IQBP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (IQCA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (IQCP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (IQDA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Name (IQDP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Switch (ToInteger (Arg0))
                {
                    Case (Package (0x03)
                        {
                            One, 
                            0x05, 
                            0x09
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQAA) /* \_SB_.PCI0.IRQM.IQAA */
                        }
                        Else
                        {
                            Return (IQAP) /* \_SB_.PCI0.IRQM.IQAP */
                        }
                    }
                    Case (Package (0x03)
                        {
                            0x02, 
                            0x06, 
                            0x0A
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQBA) /* \_SB_.PCI0.IRQM.IQBA */
                        }
                        Else
                        {
                            Return (IQBP) /* \_SB_.PCI0.IRQM.IQBP */
                        }
                    }
                    Case (Package (0x03)
                        {
                            0x03, 
                            0x07, 
                            0x0B
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQCA) /* \_SB_.PCI0.IRQM.IQCA */
                        }
                        Else
                        {
                            Return (IQCP) /* \_SB_.PCI0.IRQM.IQCP */
                        }
                    }
                    Case (Package (0x03)
                        {
                            0x04, 
                            0x08, 
                            0x0C
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                        }
                        Else
                        {
                            Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                        }
                    }
                    Default
                    {
                        If (PICM)
                        {
                            Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                        }
                        Else
                        {
                            Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                        }
                    }

                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Method (PCRB, 1, NotSerialized)
            {
                Return ((0xFD000000 + (Arg0 << 0x10)))
            }

            Method (PCRR, 2, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (PCRB (Arg0) + Arg1), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                Return (DATA) /* \_SB_.PCI0.PCRR.DATA */
            }

            Method (PCRA, 3, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (PCRB (Arg0) + Arg1), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                DATA &= Arg2
                PCRR (Arg0, Arg1)
            }

            Method (PCRO, 3, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (PCRB (Arg0) + Arg1), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                DATA |= Arg2
                PCRR (Arg0, Arg1)
            }

            Device (PMC)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Name (_DDN, "Power Management Controller")  // _DDN: DOS Device Name
                OperationRegion (PMCP, PCI_Config, Zero, 0x0100)
                Field (PMCP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                        ,   12, 
                    PWRM,   20
                }

                OperationRegion (PMCM, SystemMemory, (PWRM << 0x0C), 0x3F)
                Field (PMCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x1C), 
                    Offset (0x1F), 
                    PMFS,   1, 
                    Offset (0x20), 
                    MPMC,   32, 
                        ,   20, 
                    UWAB,   1
                }
            }

            Device (I2C0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 0")  // _DDN: DOS Device Name
            }

            Device (I2C1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 1")  // _DDN: DOS Device Name
            }

            Device (I2C2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 2")  // _DDN: DOS Device Name
            }

            Device (I2C3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 3")  // _DDN: DOS Device Name
            }

            Device (I2C4)
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 4")  // _DDN: DOS Device Name
            }

            Device (I2C5)
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 5")  // _DDN: DOS Device Name
            }

            Device (SPI0)
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Name (_DDN, "Serial IO SPI Controller 0")  // _DDN: DOS Device Name
            }

            Device (SPI1)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Name (_DDN, "Serial IO SPI Controller 1")  // _DDN: DOS Device Name
            }

            Device (UAR0)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 0")  // _DDN: DOS Device Name
            }

            Device (UAR1)
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 1")  // _DDN: DOS Device Name
            }

            Device (UAR2)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 2")  // _DDN: DOS Device Name
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
            }

            Device (EMMC)
            {
                Name (_ADR, 0x001E0004)  // _ADR: Address
                Name (_DDN, "eMMC Controller")  // _DDN: DOS Device Name
                Name (UUID, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
                Name (TEMP, Zero)
                OperationRegion (EMCR, PCI_Config, Zero, 0x0100)
                Field (EMCR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMCR,   16, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == UUID))
                    {
                        If ((Arg2 == 0x09))
                        {
                            If ((Arg1 == 0x03))
                            {
                                Return (Package (0x05)
                                {
                                    Zero, 
                                    Ones, 
                                    Ones, 
                                    Ones, 
                                    Ones
                                })
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0x7FFFFFBA)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x80000045)
                    PMCR &= 0xFFFC
                    TEMP = PMCR /* \_SB_.PCI0.EMMC.PMCR */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PMCR |= 0x03
                    TEMP = PMCR /* \_SB_.PCI0.EMMC.PMCR */
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDXC)
            {
                Name (_ADR, 0x001E0006)  // _ADR: Address
                Name (_DDN, "SD Controller")  // _DDN: DOS Device Name
                Name (TEMP, Zero)
                OperationRegion (SDCR, PCI_Config, Zero, 0x0100)
                Field (SDCR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMCR,   16, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PCRA (0xAC, 0x04C4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04CC, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04D4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04DC, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04E4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04F4, 0xFFFFEFFF)
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0xFFFFFE7A)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x0185)
                    PMCR &= 0xFFFC
                    TEMP = PMCR /* \_SB_.PCI0.SDXC.PMCR */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PMCR |= 0x03
                    TEMP = PMCR /* \_SB_.PCI0.SDXC.PMCR */
                    PCRO (0xAC, 0x04C4, 0x1000)
                    PCRO (0xAC, 0x04CC, 0x1000)
                    PCRO (0xAC, 0x04D4, 0x1000)
                    PCRO (0xAC, 0x04DC, 0x1000)
                    PCRO (0xAC, 0x04E4, 0x1000)
                    PCRO (0xAC, 0x04F4, 0x1000)
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }
            }

            Method (UPWE, 3, Serialized)
            {
                Local0 = (Arg1 + ((Arg0 - One) * 0x10))
                OperationRegion (PSCR, SystemMemory, ((Arg2 << 0x10) + Local0), 0x10)
                Field (PSCR, DWordAcc, NoLock, Preserve)
                {
                    PSCT,   32
                }

                Local0 = PSCT /* \_SB_.PCI0.UPWE.PSCT */
                Local0 &= 0xFFFFFFFF7F01FFED
                Local0 |= 0x06000000
                PSCT = Local0
            }

            Method (UWES, 3, Serialized)
            {
                Local0 = Arg0
                While (One)
                {
                    FindSetRightBit (Local0, Local1)
                    If ((Local1 == Zero))
                    {
                        Break
                    }

                    UPWE (Local1, Arg1, Arg2)
                    Local0 &= (Local0 - One)
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x6D, 
                    0x03
                })
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    PMEE = Arg0
                    UWES ((U2WE & 0x03FF), 0x0480, XMEM)
                    UWES ((U3WE & 0x3F), 0x0540, XMEM)
                }

                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (_S3W, 0x03)  // _S3W: S3 Device Wake State
                Name (_S4W, 0x03)  // _S4W: S4 Device Wake State
                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    Offset (0x12), 
                    XMEM,   16, 
                    Offset (0x50), 
                        ,   2, 
                    STGE,   1, 
                    Offset (0x74), 
                    D0D3,   2, 
                    Offset (0x75), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0xA2), 
                        ,   2, 
                    D3HE,   1
                }

                OperationRegion (XREG, SystemMemory, ((XMEM << 0x10) + 0x8000), 0x0200)
                Field (XREG, DWordAcc, Lock, Preserve)
                {
                    Offset (0x1C4), 
                        ,   2, 
                    UPSW,   2
                }

                Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                {
                    Return (D0D3) /* \_SB_.PCI0.XHCI.D0D3 */
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (((XMEM == 0xFFFF) || (XMEM == Zero)))
                    {
                        Return (Zero)
                    }

                    D3HE = Zero
                    STGE = Zero
                    If ((D0D3 == 0x03))
                    {
                        Local0 = Zero
                        D0D3 = Local0
                        Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                    }

                    UPSW = Zero
                    If (^^PMC.UWAB)
                    {
                        ^^PMC.MPMC = One
                        Local0 = 0x0A
                        While (^^PMC.PMFS)
                        {
                            If (!Local0)
                            {
                                Break
                            }

                            Local0--
                            Sleep (0x0A)
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (((XMEM == 0xFFFF) || (XMEM == Zero)))
                    {
                        Return (Zero)
                    }

                    PMES = One
                    PMEE = One
                    If ((D0D3 == 0x03))
                    {
                        Local0 = Zero
                        D0D3 = Local0
                        Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                    }

                    UPSW = 0x03
                    D3HE = One
                    STGE = One
                    Local0 = 0x03
                    D0D3 = Local0
                    Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                    If (^^PMC.UWAB)
                    {
                        ^^PMC.MPMC = 0x03
                        Local0 = 0x0A
                        While (^^PMC.PMFS)
                        {
                            If (!Local0)
                            {
                                Break
                            }

                            Local0--
                            Sleep (0x0A)
                        }
                    }
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (GPLD, 1, Serialized)
                    {
                        Name (PCKG, Package (0x01)
                        {
                            Buffer (0x10) {}
                        })
                        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                        REV = 0x02
                        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                        VISI = Arg0
                        Return (PCKG) /* \_SB_.PCI0.XHCI.RHUB.GPLD.PCKG */
                    }

                    Device (HS01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                    }

                    Device (USR1)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                    }

                    Device (USR2)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                    }

                    Device (SS01)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                    }

                    Device (SS02)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                    }

                    Device (SS03)
                    {
                        Name (_ADR, 0x0F)  // _ADR: Address
                    }

                    Device (SS04)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                    }

                    Device (SS05)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                    }

                    Device (SS06)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                    }
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Return (Arg3)
                }
                Else
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Scope (\_SB)
            {
                Device (EPC)
                {
                    Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
                    Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
                    Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
                    {
                        Package (0x02)
                        {
                            "en", 
                            Unicode ("Enclave Page Cache 1.0")
                        }
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000001, // Length
                            ,, _Y0B, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (RBUF, \_SB.EPC._Y0B._MIN, EMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (RBUF, \_SB.EPC._Y0B._MAX, EMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (RBUF, \_SB.EPC._Y0B._LEN, ELEN)  // _LEN: Length
                        EMIN = EMNA /* \EMNA */
                        ELEN = ELNG /* \ELNG */
                        EMAX = ((EMNA + ELNG) - One)
                        Return (RBUF) /* \_SB_.EPC_.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((EPCS != Zero))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }
                }
            }
        }
    }

    Device (CRHW)
    {
        Name (_HID, EisaId ("GGL0001"))  // _HID: Hardware ID
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Return (0x0B)
        }

        Method (CHSW, 0, Serialized)
        {
            Name (WSHC, Package (0x01)
            {
                VBT3
            })
            Return (WSHC) /* \CRHW.CHSW.WSHC */
        }

        Method (FWID, 0, Serialized)
        {
            Name (DIW1, "")
            ToString (VBT5, 0x3F, DIW1) /* \CRHW.FWID.DIW1 */
            Name (DIWF, Package (0x01)
            {
                DIW1
            })
            Return (DIWF) /* \CRHW.FWID.DIWF */
        }

        Method (FRID, 0, Serialized)
        {
            Name (DIR1, "")
            ToString (VBT6, 0x3F, DIR1) /* \CRHW.FRID.DIR1 */
            Name (DIRF, Package (0x01)
            {
                DIR1
            })
            Return (DIRF) /* \CRHW.FRID.DIRF */
        }

        Method (HWID, 0, Serialized)
        {
            Name (DIW0, "")
            ToString (VBT4, 0xFF, DIW0) /* \CRHW.HWID.DIW0 */
            Name (DIWH, Package (0x01)
            {
                DIW0
            })
            Return (DIWH) /* \CRHW.HWID.DIWH */
        }

        Method (BINF, 0, Serialized)
        {
            Name (FNIB, Package (0x05)
            {
                VBT0, 
                VBT1, 
                VBT2, 
                VBT7, 
                VBT8
            })
            Return (FNIB) /* \CRHW.BINF.FNIB */
        }

        Method (GPIO, 0, Serialized)
        {
            Return (OIPG) /* \OIPG */
        }

        Method (VBNV, 0, Serialized)
        {
            Name (VNBV, Package (0x02)
            {
                0x26, 
                0x10
            })
            Return (VNBV) /* \CRHW.VBNV.VNBV */
        }

        Method (VDAT, 0, Serialized)
        {
            Name (TAD0, "")
            ToBuffer (CHVD, TAD0) /* \CRHW.VDAT.TAD0 */
            Name (TADV, Package (0x01)
            {
                TAD0
            })
            Return (TADV) /* \CRHW.VDAT.TADV */
        }

        Method (FMAP, 0, Serialized)
        {
            Name (PAMF, Package (0x01)
            {
                VBT9
            })
            Return (PAMF) /* \CRHW.FMAP.PAMF */
        }

        Method (MECK, 0, Serialized)
        {
            Name (HASH, Package (0x01)
            {
                MEHH
            })
            Return (HASH) /* \CRHW.MECK.HASH */
        }

        Method (MLST, 0, Serialized)
        {
            Name (TSLM, Package (0x0A)
            {
                "CHSW", 
                "FWID", 
                "HWID", 
                "FRID", 
                "BINF", 
                "GPIO", 
                "VBNV", 
                "VDAT", 
                "FMAP", 
                "MECK"
            })
            Return (TSLM) /* \CRHW.MLST.TSLM */
        }
    }

    Scope (_SB)
    {
        Device (RMOP)
        {
            Name (_HID, "GOOG9999")  // _HID: Hardware ID
            Name (_CID, "GOOG9999")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y0C)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.RMOP._Y0C._BAS, RBAS)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.RMOP._Y0C._LEN, RLEN)  // _LEN: Length
                RBAS = RMOB /* \RMOB */
                RLEN = RMOL /* \RMOL */
                Return (RBUF) /* \_SB_.RMOP.RBUF */
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S1, Package (0x04)  // _S1_: S1 System State
    {
        One, 
        One, 
        Zero, 
        Zero
    })
    Name (_S2, Package (0x04)  // _S2_: S2 System State
    {
        One, 
        One, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        Zero, 
        Zero
    })
    Scope (_SB.PCI0.LPCB)
    {
        Device (SIO)
        {
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_ADR, Zero)  // _ADR: Address
            Device (ECMM)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, Zero)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0900,             // Range Minimum
                        0x0900,             // Range Maximum
                        0x08,               // Alignment
                        0xFF,               // Length
                        )
                })
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IO (Decode16,
                        0x0900,             // Range Minimum
                        0x0900,             // Range Maximum
                        0x08,               // Alignment
                        0xFF,               // Length
                        )
                })
            }

            Device (ECUI)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (_ADR, Zero)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0200,             // Range Minimum
                        0x0200,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0204,             // Range Minimum
                        0x0204,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0800,             // Range Minimum
                        0x0800,             // Range Maximum
                        0x08,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0880,             // Range Minimum
                        0x0880,             // Range Maximum
                        0x08,               // Alignment
                        0x80,               // Length
                        )
                })
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFn (0x00, 0x00)
                    {
                        IO (Decode16,
                            0x0200,             // Range Minimum
                            0x0200,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0204,             // Range Minimum
                            0x0204,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x08,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x08,               // Alignment
                            0x80,               // Length
                            )
                    }
                    EndDependentFn ()
                })
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_GPE, 0x6E)  // _GPE: General Purpose Events
            Name (TOFS, 0xC8)
            Name (TNCA, 0xFC)
            Name (TNOP, 0xFD)
            Name (TBAD, 0xFE)
            Name (TNPR, 0xFF)
            Name (DWRN, 0x0F)
            Name (DLOW, 0x0A)
            OperationRegion (ERAM, EmbeddedControl, Zero, 0x20)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                RAMV,   8, 
                TSTB,   8, 
                TSTC,   8, 
                KBLV,   8, 
                FAND,   8, 
                PATI,   8, 
                PATT,   8, 
                PATC,   8, 
                CHGL,   8, 
                TBMD,   1, 
                Offset (0x0A), 
                DFUD,   1, 
                FLSH,   1, 
                PFAN,   1, 
                KBLE,   1, 
                LTBR,   1, 
                LEDC,   1, 
                MTNS,   1, 
                KEYB,   1, 
                PSTR,   1, 
                P80P,   1, 
                THRM,   1, 
                SBKL,   1, 
                WIFI,   1, 
                HOST,   1, 
                GPIO,   1, 
                I2CB,   1, 
                CHRG,   1, 
                BATT,   1, 
                SBAT,   1, 
                HANG,   1, 
                PMUI,   1, 
                DSEC,   1, 
                UPDC,   1, 
                UMUX,   1, 
                MSFF,   1, 
                TVST,   1, 
                TCMV,   1, 
                RTCD,   1, 
                FPRD,   1, 
                TPAD,   1, 
                RWSG,   1, 
                DEVE,   1, 
                Offset (0x13), 
                USPP,   8
            }

            OperationRegion (EMEM, SystemIO, 0x0900, 0xFF)
            Field (EMEM, ByteAcc, NoLock, Preserve)
            {
                TIN0,   8, 
                TIN1,   8, 
                TIN2,   8, 
                TIN3,   8, 
                TIN4,   8, 
                TIN5,   8, 
                TIN6,   8, 
                TIN7,   8, 
                TIN8,   8, 
                TIN9,   8, 
                Offset (0x10), 
                FAN0,   16, 
                Offset (0x30), 
                LIDS,   1, 
                PBTN,   1, 
                WPDI,   1, 
                RECK,   1, 
                RECD,   1, 
                Offset (0x40), 
                BTVO,   32, 
                BTPR,   32, 
                BTRA,   32, 
                ACEX,   1, 
                BTEX,   1, 
                BFDC,   1, 
                BFCG,   1, 
                BFCR,   1, 
                Offset (0x50), 
                BTDA,   32, 
                BTDV,   32, 
                BTDF,   32, 
                BTCC,   32, 
                BMFG,   64, 
                BMOD,   64, 
                BSER,   64, 
                BTYP,   64, 
                ALS0,   16
            }

            Method (TINS, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                    }
                    Case (One)
                    {
                        Return (TIN1) /* \_SB_.PCI0.LPCB.EC0_.TIN1 */
                    }
                    Case (0x02)
                    {
                        Return (TIN2) /* \_SB_.PCI0.LPCB.EC0_.TIN2 */
                    }
                    Case (0x03)
                    {
                        Return (TIN3) /* \_SB_.PCI0.LPCB.EC0_.TIN3 */
                    }
                    Case (0x04)
                    {
                        Return (TIN4) /* \_SB_.PCI0.LPCB.EC0_.TIN4 */
                    }
                    Case (0x05)
                    {
                        Return (TIN5) /* \_SB_.PCI0.LPCB.EC0_.TIN5 */
                    }
                    Case (0x06)
                    {
                        Return (TIN6) /* \_SB_.PCI0.LPCB.EC0_.TIN6 */
                    }
                    Case (0x07)
                    {
                        Return (TIN7) /* \_SB_.PCI0.LPCB.EC0_.TIN7 */
                    }
                    Case (0x08)
                    {
                        Return (TIN8) /* \_SB_.PCI0.LPCB.EC0_.TIN8 */
                    }
                    Case (0x09)
                    {
                        Return (TIN9) /* \_SB_.PCI0.LPCB.EC0_.TIN9 */
                    }
                    Default
                    {
                        Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                    }

                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (ECMD, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0066,             // Range Minimum
                        0x0066,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                })
                Return (ECMD) /* \_SB_.PCI0.LPCB.EC0_._CRS.ECMD */
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
            }

            Method (TSRD, 1, Serialized)
            {
                Local0 = TINS (Arg0)
                If ((Local0 == TNCA))
                {
                    Return (Zero)
                }

                If ((Local0 == TNPR))
                {
                    Return (Zero)
                }

                If ((Local0 == TNOP))
                {
                    Return (Zero)
                }

                If ((Local0 == TBAD))
                {
                    Return (Zero)
                }

                Local0 += TOFS
                Local0 *= 0x0A
                Return (Local0)
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: LID CLOSE"
                \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: LID OPEN"
                \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                Notify (CREC, 0x02) // Device Wake
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: POWER BUTTON"
                Notify (PWRB, 0x80) // Status Change
            }

            Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: AC CONNECTED"
                PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                Notify (AC, 0x80) // Status Change
                PNOT ()
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: AC DISCONNECTED"
                PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                Notify (AC, 0x80) // Status Change
                PNOT ()
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: BATTERY LOW"
                Notify (BAT0, 0x80) // Status Change
            }

            Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: BATTERY CRITICAL"
                Notify (BAT0, 0x80) // Status Change
            }

            Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: BATTERY INFO"
                Notify (BAT0, 0x81) // Information Change
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: THERMAL OVERLOAD"
                Notify (_TZ, 0x80) // Status Change
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: THERMAL"
                Notify (_TZ, 0x80) // Status Change
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: USB CHARGER"
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: KEY PRESSED"
                Notify (CREC, 0x02) // Device Wake
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: THERMAL SHUTDOWN"
                Notify (_TZ, 0x80) // Status Change
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: BATTERY SHUTDOWN"
                Notify (BAT0, 0x80) // Status Change
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: THROTTLE START"
                If (CondRefOf (\_TZ.THRT))
                {
                    \_TZ.THRT (One)
                }
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: THROTTLE STOP"
                If (CondRefOf (\_TZ.THRT))
                {
                    \_TZ.THRT (Zero)
                }
            }

            Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: BATTERY STATUS"
                Notify (BAT0, 0x80) // Status Change
            }

            Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: MKBP"
                Notify (CREC, 0x80) // Status Change
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "EC: TABLET mode switch Event"
                Notify (CREC, 0x02) // Device Wake
            }

            Mutex (PATM, 0x01)
            Method (PAT0, 2, Serialized)
            {
                If (Acquire (PATM, 0x03E8))
                {
                    Return (Zero)
                }

                PATI = ToInteger (Arg0)
                Local1 = (ToInteger (Arg1) / 0x0A)
                PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                PATC = 0x02
                Release (PATM)
                Return (One)
            }

            Method (PAT1, 2, Serialized)
            {
                If (Acquire (PATM, 0x03E8))
                {
                    Return (Zero)
                }

                PATI = ToInteger (Arg0)
                Local1 = (ToInteger (Arg1) / 0x0A)
                PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                PATC = 0x03
                Release (PATM)
                Return (One)
            }

            Method (PATD, 1, Serialized)
            {
                If (Acquire (PATM, 0x03E8))
                {
                    Return (Zero)
                }

                PATI = ToInteger (Arg0)
                PATT = Zero
                PATC = Zero
                PATC = One
                Release (PATM)
                Return (One)
            }

            Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (Acquire (PATM, 0x03E8))
                {
                    Return (Zero)
                }

                Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                While ((Local0 != 0xFF))
                {
                    If (CondRefOf (\_SB.DPTF.TEVT))
                    {
                        ^^^^DPTF.TEVT (Local0)
                    }

                    Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                }

                Release (PATM)
            }

            Method (CHGS, 1, Serialized)
            {
                CHGL = ToInteger (Arg0)
            }

            Method (CHGD, 0, Serialized)
            {
                CHGL = 0xFF
            }

            Method (RCTM, 0, NotSerialized)
            {
                Return (TBMD) /* \_SB_.PCI0.LPCB.EC0_.TBMD */
            }

            Method (UPPS, 1, Serialized)
            {
                USPP |= (One << Arg0)
            }

            Method (UPPC, 1, Serialized)
            {
                USPP &= ~(One << Arg0)
            }

            Device (AC)
            {
                Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                {
                    Return (ACEX) /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Name (PBIF, Package (0x0D)
                {
                    One, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    0x03, 
                    0xFFFFFFFF, 
                    One, 
                    One, 
                    "", 
                    "", 
                    "LION", 
                    ""
                })
                Name (PBIX, Package (0x14)
                {
                    Zero, 
                    One, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    0x03, 
                    0xFFFFFFFF, 
                    Zero, 
                    0x00018000, 
                    0x01F4, 
                    0x0A, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    One, 
                    "", 
                    "", 
                    "LION", 
                    ""
                })
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                Name (BSTP, Zero)
                Name (BFWK, One)
                Method (BFWE, 0, NotSerialized)
                {
                    BFWK = One
                }

                Method (BFWD, 0, NotSerialized)
                {
                    BFWK = Zero
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (BTEX)
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                {
                    PBIF [0x02] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                    PBIF [0x04] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                    Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                    PBIF [One] = Local0
                    Local2 = ((Local0 * DWRN) / 0x64)
                    PBIF [0x05] = Local2
                    Local2 = ((Local0 * DLOW) / 0x64)
                    PBIF [0x06] = Local2
                    PBIF [0x09] = ToString (Concatenate (BMOD, Zero), Ones)
                    PBIF [0x0A] = ToString (Concatenate (BSER, Zero), Ones)
                    PBIF [0x0C] = ToString (Concatenate (BMFG, Zero), Ones)
                    Return (PBIF) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBIF */
                }

                Method (_BIX, 0, Serialized)  // _BIX: Battery Information Extended
                {
                    PBIX [0x03] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                    PBIX [0x05] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                    Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                    PBIX [0x02] = Local0
                    Local2 = ((Local0 * DWRN) / 0x64)
                    PBIX [0x06] = Local2
                    Local2 = ((Local0 * DLOW) / 0x64)
                    PBIX [0x07] = Local2
                    PBIX [0x08] = BTCC /* \_SB_.PCI0.LPCB.EC0_.BTCC */
                    PBIX [0x10] = ToString (Concatenate (BMOD, Zero), Ones)
                    PBIX [0x11] = ToString (Concatenate (BSER, Zero), Ones)
                    PBIX [0x13] = ToString (Concatenate (BMFG, Zero), Ones)
                    Return (PBIX) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBIX */
                }

                Method (_BST, 0, Serialized)  // _BST: Battery Status
                {
                    Local1 = Zero
                    If (ACEX)
                    {
                        If (BFCG)
                        {
                            Local1 = 0x02
                        }
                        ElseIf (BFDC)
                        {
                            Local1 = One
                        }
                    }
                    Else
                    {
                        Local1 = One
                    }

                    If (BFCR)
                    {
                        Local1 |= 0x04
                    }

                    PBST [Zero] = Local1
                    If ((Local1 != BSTP))
                    {
                        BSTP = Local1
                        Notify (BAT0, 0x80) // Status Change
                    }

                    PBST [One] = BTPR /* \_SB_.PCI0.LPCB.EC0_.BTPR */
                    Local1 = BTRA /* \_SB_.PCI0.LPCB.EC0_.BTRA */
                    If ((BFWK && (ACEX && !(BFDC && BFCG))))
                    {
                        Local2 = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                        Local3 = (Local2 >> 0x04)
                        If (((Local1 > (Local2 - Local3)) && (Local1 < (Local2 + 
                            Local3))))
                        {
                            Local1 = Local2
                        }
                    }

                    PBST [0x02] = Local1
                    PBST [0x03] = BTVO /* \_SB_.PCI0.LPCB.EC0_.BTVO */
                    Return (PBST) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBST */
                }
            }

            Device (CREC)
            {
                Name (_HID, "GOOG0004")  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_DDN, "EC Command Device")  // _DDN: DOS Device Name
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x70, 
                    0x05
                })
                Device (CKSC)
                {
                    Name (_HID, "GOOG0007")  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "EC MKBP Device")  // _DDN: DOS Device Name
                }
            }

            Device (ALS)
            {
                Name (_HID, "ACPI0008" /* Ambient Light Sensor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ALI, 0, NotSerialized)  // _ALI: Ambient Light Illuminance
                {
                    Return (ALS0) /* \_SB_.PCI0.LPCB.EC0_.ALS0 */
                }

                Name (_ALP, 0x0A)  // _ALP: Ambient Light Polling
                Name (_ALR, Package (0x02)  // _ALR: Ambient Light Response
                {
                    Package (0x02)
                    {
                        0x46, 
                        0x1E
                    }, 

                    Package (0x02)
                    {
                        0x96, 
                        0x03E8
                    }
                })
            }
        }
    }

    Scope (_SB)
    {
        Name (DTRT, Package (0x03)
        {
            Package (0x08)
            {
                PCI0.B0D4, 
                PCI0.B0D4, 
                0x64, 
                0x32, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR0, 
                0x64, 
                0x64, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR1, 
                0x64, 
                0x012C, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Name (MPPC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x0BB8, 
                0x3A98, 
                0x03E8, 
                0x03E8, 
                0xC8
            }, 

            Package (0x06)
            {
                One, 
                0xABE0, 
                0xABE0, 
                0x03E8, 
                0x03E8, 
                0x03E8
            }
        })
        Device (DPTF)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (IDSP, Package (0x03)
            {
                ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */, 
                ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */, 
                ToUUID ("16caf1b7-dd38-40ed-b1c1-1b8a1913d531") /* Unknown UUID */
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DPTE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                If ((DerefOf (IDSP [Zero]) == Arg0))
                {
                    TINI ()
                }

                Return (Arg3)
            }

            Name (TRTR, One)
            Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
            {
                Return (DTRT) /* \_SB_.DTRT */
            }

            Method (CTOK, 1, NotSerialized)
            {
                Local0 = (Arg0 * 0x0A)
                Local0 += 0x0AAC
                Return (Local0)
            }

            Method (TEVT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == Zero))
                {
                    Notify (TSR0, 0x90) // Device-Specific
                }

                If ((ToInteger (Arg0) == One))
                {
                    Notify (TSR1, 0x90) // Device-Specific
                }
            }

            Method (TINI, 0, NotSerialized)
            {
                ^TSR0.PATD ()
                ^TSR1.PATD ()
            }

            Method (TPET, 0, NotSerialized)
            {
                Notify (TSR0, 0x81) // Information Change
                Notify (TSR1, 0x81) // Information Change
            }

            Method (DTRP, 2, Serialized)
            {
                Return (CTOK (Arg1))
            }

            Device (TSR0)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, Zero)
                Name (_STR, Unicode ("TMP432_Internal"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x46, 0x46))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x53, 0x53))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }

            Device (TSR1)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, One)
                Name (_STR, Unicode ("TMP432_CPU_bottom"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x43, 0x43))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x49, 0x49))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }
        }

        Scope (PCI0)
        {
            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
                {
                    If (CondRefOf (\_PR.CP00._TSS))
                    {
                        Return (\_PR.CP00._TSS) /* External reference */
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Package (0x05)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        })
                    }
                }

                Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
                {
                    If (CondRefOf (\_PR.CP00._TPC))
                    {
                        Return (\_PR.CP00._TPC) /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
                {
                    If (CondRefOf (\_PR.CP00._PTC))
                    {
                        Return (\_PR.CP00._PTC) /* External reference */
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            Buffer (One)
                            {
                                 0x00                                             // .
                            }, 

                            Buffer (One)
                            {
                                 0x00                                             // .
                            }
                        })
                    }
                }

                Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
                {
                    If (CondRefOf (\_PR.CP00._TSD))
                    {
                        Return (\_PR.CP00._TSD) /* External reference */
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Package (0x05)
                            {
                                0x05, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        })
                    }
                }

                Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
                {
                    If (CondRefOf (\_PR.CP00._TSS))
                    {
                        Local0 = SizeOf (\_PR.CP00._TSS)
                        Local0--
                        Return (Local0)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
                {
                    Return (Zero)
                }

                Method (SPPC, 1, NotSerialized)
                {
                    PPCM = Arg0
                    PPCN ()
                }

                Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
                {
                    If (CondRefOf (\_PR.CP00._PSS))
                    {
                        Return (\_PR.CP00._PSS) /* External reference */
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        })
                    }
                }

                Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
                {
                    If (CondRefOf (\_SB.MPDL))
                    {
                        Return (MPDL) /* External reference */
                    }
                    ElseIf (CondRefOf (\_PR.CP00._PSS))
                    {
                        Local0 = SizeOf (\_PR.CP00._PSS)
                        Local0--
                        Return (Local0)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (PPCC, 0, NotSerialized)
                {
                    Return (MPPC) /* \_SB_.MPPC */
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (^^^DPTF.CTOK (0x64))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (^^^DPTF.CTOK (0x5D))
                }

                Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
                {
                    Return (^^^DPTF.CTOK (0x5A))
                }

                Method (_AC1, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
                {
                    Return (^^^DPTF.CTOK (0x4D))
                }
            }
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.HS02)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x02)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x02)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.HS03)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x03)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x03)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.HS04)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x04)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x04)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.HS05)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (Zero)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (Zero)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.HS06)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (One)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (One)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS01)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS02)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x02)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x02)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS03)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x03)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x03)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS04)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (0x04)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (0x04)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS05)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (Zero)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (Zero)
        }
    }

    Scope (_SB.PCI0.XHCI.RHUB.SS06)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            ^^^^LPCB.EC0.UPPS (One)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            ^^^^LPCB.EC0.UPPC (One)
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 8E
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]                 FACS Address : 7AA9D240
[028h 0040   4]                 DSDT Address : 7AA9D280
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001880
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0001
[062h 0098   2]                   C3 Latency : 0057
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 00008CAD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 1
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000007AA9D240
[08Ch 0140   8]                 DSDT Address : 000000007AA9D280
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 00 [SystemMemory]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000000

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 8E 43 4F 52 45 20 20  // FACP......CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 40 D2 A9 7A 80 D2 A9 7A 00 01 09 00  // ....@..z...z....
    0030: B2 00 00 00 E1 1E 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 80 18 00 00 00 00 00 00 04 02 01 04 20 00 00 00  // ............ ...
    0060: 01 00 57 00 00 04 10 00 01 00 0D 00 00 01 00 00  // ..W.............
    0070: AD 8C 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 40 D2 A9 7A 00 00 00 00 80 D2 A9 7A  // ....@..z.......z
    0090: 00 00 00 00 01 20 00 00 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 18 00 00 00 00 00 00 00 00 00 00  // . ..............
    00E0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EB
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0000
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 EB 43 4F 52 45 20 20  // HPET8.....CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 01 A7 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 00 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D8
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 D8 43 4F 52 45 20 20  // MCFG<.....CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


NHLT
----
[000h 0000   4]                    Signature : "NHLT"    
[004h 0004   4]                 Table Length : 00000179
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : A1
[00Ah 0010   6]                       Oem ID : "GOOGLE"
[010h 0016   8]                 Oem Table ID : "FIZZ"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000


**** Unknown ACPI table signature [NHLT]


Raw Table Data: Length 377 (0x179)

    0000: 4E 48 4C 54 79 01 00 00 05 A1 47 4F 4F 47 4C 45  // NHLTy.....GOOGLE
    0010: 46 49 5A 5A 00 00 00 00 00 00 00 00 43 4F 52 45  // FIZZ........CORE
    0020: 00 00 00 00 02 AA 00 00 00 03 00 86 80 34 AE 01  // .............4..
    0030: 00 01 00 00 00 04 00 01 02 00 00 00 00 00 01 FE  // ................
    0040: FF 02 00 80 BB 00 00 00 DC 05 00 08 00 20 00 16  // ............. ..
    0050: 00 18 00 03 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    0060: 00 00 AA 00 38 9B 71 64 00 00 00 00 00 00 00 10  // ....8.qd........
    0070: FF FF FF 32 FF FF FF 10 32 FF FF 10 32 FF FF 10  // ...2....2...2...
    0080: 32 FF FF 10 32 FF FF 10 32 FF FF 10 32 FF FF 37  // 2...2...2...2..7
    0090: 09 D0 81 00 00 70 C0 00 00 00 00 00 00 99 02 03  // .....p..........
    00A0: 00 00 00 03 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    00B0: 0F 07 07 20 00 00 00 01 00 00 00 FF 0F 00 00 00  // ... ............
    00C0: 00 00 00 08 00 00 00 18 00 00 00 7D 00 00 00 AA  // ...........}....
    00D0: 00 00 00 03 00 86 80 34 AE 01 00 01 00 00 00 04  // .......4........
    00E0: 01 01 02 00 00 00 00 00 01 FE FF 02 00 80 BB 00  // ................
    00F0: 00 00 DC 05 00 08 00 20 00 16 00 18 00 03 00 00  // ....... ........
    0100: 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38 9B  // ..............8.
    0110: 71 64 00 00 00 00 00 00 00 10 FF FF FF 32 FF FF  // qd...........2..
    0120: FF 10 32 FF FF 10 32 FF FF 10 32 FF FF 10 32 FF  // ..2...2...2...2.
    0130: FF 10 32 FF FF 10 32 FF FF 37 09 D0 81 00 00 70  // ..2...2..7.....p
    0140: C0 00 00 00 00 00 00 99 02 03 00 00 00 03 00 00  // ................
    0150: 00 02 40 00 00 00 00 00 00 00 0F 07 07 20 00 00  // ..@.......... ..
    0160: 00 01 00 00 00 FF 0F 00 00 00 00 00 00 08 00 00  // ................
    0170: 00 18 00 00 00 7D 00 00 00                       // .....}...


SSDT
----
DefinitionBlock ("", "SSDT", 2, "CORE  ", "COREBOOT", 0x0000002A)
{
    External (_SB_.PCI0.I2C0, DeviceObj)
    External (_SB_.PCI0.I2C2, DeviceObj)
    External (_SB_.PCI0.I2C5, DeviceObj)
    External (_SB_.PCI0.RP01, DeviceObj)
    External (_SB_.PCI0.RP04, DeviceObj)
    External (_SB_.PCI0.SDXC, DeviceObj)
    External (_SB_.PCI0.SPI0, DeviceObj)

    Device (CTBL)
    {
        Name (_HID, "BOOT0000")  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0x7AAC1000,         // Address Base
                0x00008000,         // Address Length
                )
        })
    }

    Processor (\_PR.CP00, 0x00, 0x00001800, 0x06)
    {
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x00000003, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000001, 
                0x00000000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000002, 
                0x00000097, 
                0x000000C8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000060, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000003, 
                0x0000040A, 
                0x000000C8
            }
        })
    }

    Processor (\_PR.CP01, 0x01, 0x00000000, 0x00)
    {
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x00000003, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000001, 
                0x00000000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000002, 
                0x00000097, 
                0x000000C8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000060, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000003, 
                0x0000040A, 
                0x000000C8
            }
        })
    }

    Processor (\_PR.CP02, 0x02, 0x00000000, 0x00)
    {
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x00000003, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000001, 
                0x00000000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000002, 
                0x00000097, 
                0x000000C8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000060, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000003, 
                0x0000040A, 
                0x000000C8
            }
        })
    }

    Processor (\_PR.CP03, 0x03, 0x00000000, 0x00)
    {
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x00000003, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000001, 
                0x00000000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000002, 
                0x00000097, 
                0x000000C8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000060, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x00000003, 
                0x0000040A, 
                0x000000C8
            }
        })
    }

    Scope (\_SB.PCI0.I2C0)
    {
        Name (SSCN, Package (0x03)
        {
            0x01E0, 
            0x0234, 
            0x00000024
        })
        Name (FMCN, Package (0x03)
        {
            0x0048, 
            0x009C, 
            0x00000024
        })
        Name (FPCN, Package (0x03)
        {
            0x001F, 
            0x003C, 
            0x00000024
        })
        Name (HSCN, Package (0x03)
        {
            0x0007, 
            0x0013, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C2)
    {
        Name (SSCN, Package (0x03)
        {
            0x01E0, 
            0x0234, 
            0x00000024
        })
        Name (FMCN, Package (0x03)
        {
            0x0048, 
            0x009C, 
            0x00000024
        })
        Name (FPCN, Package (0x03)
        {
            0x001F, 
            0x003C, 
            0x00000024
        })
        Name (HSCN, Package (0x03)
        {
            0x0007, 
            0x0013, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C5)
    {
        Name (SSCN, Package (0x03)
        {
            0x01E0, 
            0x0234, 
            0x00000024
        })
        Name (FMCN, Package (0x03)
        {
            0x0064, 
            0x00C2, 
            0x00000024
        })
        Name (FPCN, Package (0x03)
        {
            0x001F, 
            0x003C, 
            0x00000024
        })
        Name (HSCN, Package (0x03)
        {
            0x0007, 
            0x0013, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C5)
    {
        Device (RT53)
        {
            Name (_HID, "10EC5663")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Realtek RT5663")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                GpioInt (Edge, ActiveBoth, Exclusive, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0051
                    }
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "irq-gpios", 
                        Package (0x04)
                        {
                            \_SB.PCI0.I2C5.RT53, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.RP01)
    {
        Device (RLTK)
        {
            Name (_HID, "R8168")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Realtek r8168")  // _DDN: DOS Device Name
            Name (_ADR, 0x00000000)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x69, 
                0x03
            })
        }
    }

    Scope (\_SB.PCI0.RP04)
    {
        Device (WIFI)
        {
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Intel WiFi")  // _DDN: DOS Device Name
            Name (_ADR, 0x00000000)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x69, 
                0x03
            })
        }
    }

    Scope (\_SB.PCI0.SPI0)
    {
        Device (S001)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                    ControllerInitiated, 0x000F4240, ClockPolarityLow,
                    ClockPhaseFirst, "\\_SB.PCI0.SPI0",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                {
                    0x00000018,
                }
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "google,cr50"
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.SDXC)
    {
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                "\\_SB.PCI0.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0007
                }
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "cd-gpio", 
                    Package (0x04)
                    {
                        \_SB.PCI0.SDXC, 
                        Zero, 
                        Zero, 
                        One
                    }
                }
            }
        })
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 000000007A98C000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 E2 43 4F 52 45 20 20  // TCPA2.....CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 00 00 00 00 01 00 00 C0 98 7A 00 00  // .............z..
    0030: 00 00                                            // ..


