
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20201113
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 02)  ASF!  0x00000063  0x20  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 03)  APIC  0x00000084  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 04)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "    "   0x00000000
 05)  DSDT  0x0000A003  0x01  "COMPAQ"  "DSDT_PRJ"  0x00000001  "MSFT"   0x0100000E
 06)  DMAR  0x00000198  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 07)  FACP  0x00000074  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 08)  TCPA  0x00000032  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 09)  HPET  0x00000038  0x01  "COMPAQ"  "BEARLAKE"  0x00000001  "    "   0x00000000
 10)  FACS  0x00000040  0x00
 11)  SSDT  0x000003AC  0x01  "COMPAQ"  "CPU_TM2 "  0x00000001  "MSFT"   0x0100000E
 12)  SSDT  0x0000017C  0x01  "COMPAQ"  "CST     "  0x00000001  "MSFT"   0x0100000E

Found 12 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 03
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 03
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 01
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 01
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 01
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 02
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 03
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 04
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

    0000: 41 50 49 43 84 00 00 00 01 03 43 4F 4D 50 41 51  // APIC......COMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 03  // ................
    0040: 01 00 00 00 00 08 04 01 01 00 00 00 01 0C 01 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    0070: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    0080: 04 05 00 01                                      // ....


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 00000063
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 59
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0AAC
[02Ch 0044   4]              Manufacturer ID : 0000000B
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 02 [ASF Remote Control]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 0018
[038h 0056   1]                Control Count : 04
[039h 0057   1]          Control Data Length : 04
[03Ah 0058   2]                     Reserved : 0000

[03Ch 0060   1]                     Function : 00
[03Dh 0061   1]                      Address : 88
[03Eh 0062   1]                      Command : 00
[03Fh 0063   1]                        Value : 03

[040h 0064   1]                     Function : 01
[041h 0065   1]                      Address : 88
[042h 0066   1]                      Command : 00
[043h 0067   1]                        Value : 02

[044h 0068   1]                     Function : 02
[045h 0069   1]                      Address : 88
[046h 0070   1]                      Command : 00
[047h 0071   1]                        Value : 01

[048h 0072   1]                     Function : 03
[049h 0073   1]                      Address : 88
[04Ah 0074   1]                      Command : 00
[04Bh 0075   1]                        Value : 04

[04Ch 0076   1]                Subtable Type : 83 [ASF RMCP Boot Options]
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]                       Length : 0017
[050h 0080   7]                 Capabilities : 22 30 00 00 00 13 0F
[057h 0087   1]              Completion Code : 01
[058h 0088   4]                Enterprise ID : 00000000
[05Ch 0092   1]                      Command : 00
[05Dh 0093   2]                    Parameter : 0000
[05Fh 0095   2]                 Boot Options : 0000
[061h 0097   2]               Oem Parameters : 0000


Raw Table Data: Length 99 (0x63)

    0000: 41 53 46 21 63 00 00 00 20 59 43 4F 4D 50 41 51  // ASF!c... YCOMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 00 00 10 00 FF FF AC 0A 0B 00 00 00  // ................
    0030: 00 00 00 00 02 00 18 00 04 04 00 00 00 88 00 03  // ................
    0040: 01 88 00 02 02 88 00 01 03 88 00 04 83 00 17 00  // ................
    0050: 22 30 00 00 00 13 0F 01 00 00 00 00 00 00 00 00  // "0..............
    0060: 00 00 00                                         // ...


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000198
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0F
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   1]           Host Address Width : 23
[025h 0037   1]                        Flags : 00
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 1B,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0018

[04Ch 0076   1]                        Flags : 00
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 01 [PCI Endpoint Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 00
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 02,00


[060h 0096   2]                Subtable Type : 0000 [Hardware Unit Definition]
[062h 0098   2]                       Length : 0028

[064h 0100   1]                        Flags : 00
[065h 0101   1]                     Reserved : 00
[066h 0102   2]           PCI Segment Number : 0000
[068h 0104   8]        Register Base Address : 00000000FED92000

[070h 0112   1]            Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : 00

[076h 0118   2]                     PCI Path : 03,00


[078h 0120   1]            Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121   1]                 Entry Length : 08
[07Ah 0122   2]                     Reserved : 0000
[07Ch 0124   1]               Enumeration ID : 00
[07Dh 0125   1]               PCI Bus Number : 00

[07Eh 0126   2]                     PCI Path : 03,02


[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 03,03


[088h 0136   2]                Subtable Type : 0000 [Hardware Unit Definition]
[08Ah 0138   2]                       Length : 0010

[08Ch 0140   1]                        Flags : 01
[08Dh 0141   1]                     Reserved : 00
[08Eh 0142   2]           PCI Segment Number : 0000
[090h 0144   8]        Register Base Address : 00000000FED93000

[098h 0152   2]                Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   2]                     Reserved : 0000
[09Eh 0158   2]           PCI Segment Number : 0000
[0A0h 0160   8]                 Base Address : 00000000DF600000
[0A8h 0168   8]          End Address (limit) : 00000000DFFFFFFF

[0B0h 0176   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : 00

[0B6h 0182   2]                     PCI Path : 02,00


[0B8h 0184   2]                Subtable Type : 0001 [Reserved Memory Region]
[0BAh 0186   2]                       Length : 0020

[0BCh 0188   2]                     Reserved : 0000
[0BEh 0190   2]           PCI Segment Number : 0000
[0C0h 0192   8]                 Base Address : 00000000DEFD0000
[0C8h 0200   8]          End Address (limit) : 00000000DEFD0FFF

[0D0h 0208   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0D1h 0209   1]                 Entry Length : 08
[0D2h 0210   2]                     Reserved : 0000
[0D4h 0212   1]               Enumeration ID : 00
[0D5h 0213   1]               PCI Bus Number : 00

[0D6h 0214   2]                     PCI Path : 1D,07


[0D8h 0216   2]                Subtable Type : 0001 [Reserved Memory Region]
[0DAh 0218   2]                       Length : 0020

[0DCh 0220   2]                     Reserved : 0000
[0DEh 0222   2]           PCI Segment Number : 0000
[0E0h 0224   8]                 Base Address : 00000000DEFD1000
[0E8h 0232   8]          End Address (limit) : 00000000DEFD1FFF

[0F0h 0240   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0F1h 0241   1]                 Entry Length : 08
[0F2h 0242   2]                     Reserved : 0000
[0F4h 0244   1]               Enumeration ID : 00
[0F5h 0245   1]               PCI Bus Number : 00

[0F6h 0246   2]                     PCI Path : 1A,07


[0F8h 0248   2]                Subtable Type : 0001 [Reserved Memory Region]
[0FAh 0250   2]                       Length : 0020

[0FCh 0252   2]                     Reserved : 0000
[0FEh 0254   2]           PCI Segment Number : 0000
[100h 0256   8]                 Base Address : 00000000DEFD2000
[108h 0264   8]          End Address (limit) : 00000000DEFD2FFF

[110h 0272   1]            Device Scope Type : 01 [PCI Endpoint Device]
[111h 0273   1]                 Entry Length : 08
[112h 0274   2]                     Reserved : 0000
[114h 0276   1]               Enumeration ID : 00
[115h 0277   1]               PCI Bus Number : 00

[116h 0278   2]                     PCI Path : 1D,00


[118h 0280   2]                Subtable Type : 0001 [Reserved Memory Region]
[11Ah 0282   2]                       Length : 0020

[11Ch 0284   2]                     Reserved : 0000
[11Eh 0286   2]           PCI Segment Number : 0000
[120h 0288   8]                 Base Address : 00000000DEFD3000
[128h 0296   8]          End Address (limit) : 00000000DEFD3FFF

[130h 0304   1]            Device Scope Type : 01 [PCI Endpoint Device]
[131h 0305   1]                 Entry Length : 08
[132h 0306   2]                     Reserved : 0000
[134h 0308   1]               Enumeration ID : 00
[135h 0309   1]               PCI Bus Number : 00

[136h 0310   2]                     PCI Path : 1D,01


[138h 0312   2]                Subtable Type : 0001 [Reserved Memory Region]
[13Ah 0314   2]                       Length : 0020

[13Ch 0316   2]                     Reserved : 0000
[13Eh 0318   2]           PCI Segment Number : 0000
[140h 0320   8]                 Base Address : 00000000DEFD5000
[148h 0328   8]          End Address (limit) : 00000000DEFD5FFF

[150h 0336   1]            Device Scope Type : 01 [PCI Endpoint Device]
[151h 0337   1]                 Entry Length : 08
[152h 0338   2]                     Reserved : 0000
[154h 0340   1]               Enumeration ID : 00
[155h 0341   1]               PCI Bus Number : 00

[156h 0342   2]                     PCI Path : 1A,00


[158h 0344   2]                Subtable Type : 0001 [Reserved Memory Region]
[15Ah 0346   2]                       Length : 0020

[15Ch 0348   2]                     Reserved : 0000
[15Eh 0350   2]           PCI Segment Number : 0000
[160h 0352   8]                 Base Address : 00000000DEFD6000
[168h 0360   8]          End Address (limit) : 00000000DEFD6FFF

[170h 0368   1]            Device Scope Type : 01 [PCI Endpoint Device]
[171h 0369   1]                 Entry Length : 08
[172h 0370   2]                     Reserved : 0000
[174h 0372   1]               Enumeration ID : 00
[175h 0373   1]               PCI Bus Number : 00

[176h 0374   2]                     PCI Path : 1A,01


[178h 0376   2]                Subtable Type : 0001 [Reserved Memory Region]
[17Ah 0378   2]                       Length : 0020

[17Ch 0380   2]                     Reserved : 0000
[17Eh 0382   2]           PCI Segment Number : 0000
[180h 0384   8]                 Base Address : 00000000DEFD7000
[188h 0392   8]          End Address (limit) : 00000000DEFD7FFF

[190h 0400   1]            Device Scope Type : 01 [PCI Endpoint Device]
[191h 0401   1]                 Entry Length : 08
[192h 0402   2]                     Reserved : 0000
[194h 0404   1]               Enumeration ID : 00
[195h 0405   1]               PCI Bus Number : 00

[196h 0406   2]                     PCI Path : 1A,02


Raw Table Data: Length 408 (0x198)

    0000: 44 4D 41 52 98 01 00 00 01 0F 43 4F 4D 50 41 51  // DMAR......COMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 1B 00 00 00 18 00 00 00 00 00  // ................
    0050: 00 10 D9 FE 00 00 00 00 01 08 00 00 00 00 02 00  // ................
    0060: 00 00 28 00 00 00 00 00 00 20 D9 FE 00 00 00 00  // ..(...... ......
    0070: 01 08 00 00 00 00 03 00 01 08 00 00 00 00 03 02  // ................
    0080: 01 08 00 00 00 00 03 03 00 00 10 00 01 00 00 00  // ................
    0090: 00 30 D9 FE 00 00 00 00 01 00 20 00 00 00 00 00  // .0........ .....
    00A0: 00 00 60 DF 00 00 00 00 FF FF FF DF 00 00 00 00  // ..`.............
    00B0: 01 08 00 00 00 00 02 00 01 00 20 00 00 00 00 00  // .......... .....
    00C0: 00 00 FD DE 00 00 00 00 FF 0F FD DE 00 00 00 00  // ................
    00D0: 01 08 00 00 00 00 1D 07 01 00 20 00 00 00 00 00  // .......... .....
    00E0: 00 10 FD DE 00 00 00 00 FF 1F FD DE 00 00 00 00  // ................
    00F0: 01 08 00 00 00 00 1A 07 01 00 20 00 00 00 00 00  // .......... .....
    0100: 00 20 FD DE 00 00 00 00 FF 2F FD DE 00 00 00 00  // . ......./......
    0110: 01 08 00 00 00 00 1D 00 01 00 20 00 00 00 00 00  // .......... .....
    0120: 00 30 FD DE 00 00 00 00 FF 3F FD DE 00 00 00 00  // .0.......?......
    0130: 01 08 00 00 00 00 1D 01 01 00 20 00 00 00 00 00  // .......... .....
    0140: 00 50 FD DE 00 00 00 00 FF 5F FD DE 00 00 00 00  // .P......._......
    0150: 01 08 00 00 00 00 1A 00 01 00 20 00 00 00 00 00  // .......... .....
    0160: 00 60 FD DE 00 00 00 00 FF 6F FD DE 00 00 00 00  // .`.......o......
    0170: 01 08 00 00 00 00 1A 01 01 00 20 00 00 00 00 00  // .......... .....
    0180: 00 70 FD DE 00 00 00 00 FF 7F FD DE 00 00 00 00  // .p..............
    0190: 01 08 00 00 00 00 1A 02                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "COMPAQ", "DSDT_PRJ", 0x00000001)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.SATA.SAT0.DRV1.PS0_, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.SATA.SAT1.DRV1.PS0_, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    OperationRegion (VECT, SystemMemory, 0x000F8000, 0x0100)
    Field (VECT, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        NPCI,   32, 
        SR4G,   32, 
        Offset (0x20), 
        HPTB,   32, 
        Offset (0x36), 
        ABIO,   32, 
        APAD,   32, 
        APLN,   32, 
        MBBA,   32, 
        RCBA,   32, 
        PEXB,   32, 
        PEXS,   32, 
        S3SV,   8, 
        STMS,   8, 
        WMPI,   8, 
        PTRP,   8, 
        WMBH,   8, 
        WM10,   8, 
        UPEC,   8, 
        TPMP,   8, 
        MORB,   8, 
        Offset (0x5C), 
        RSTT,   8, 
        ESLB,   8, 
        EV3F,   8
    }

    OperationRegion (BIOS, SystemMemory, ABIO, 0x1FCB)
    Field (BIOS, AnyAcc, NoLock, Preserve)
    {
        SSMC,   1, 
        EUWK,   1, 
        TRPE,   1, 
        S3RS,   1, 
        PKWN,   1, 
        PMWN,   1, 
        PKWU,   1, 
        PMWU,   1, 
        OPKW,   1, 
        OPMW,   1, 
        S3OC,   1, 
        WN98,   1, 
        WNME,   1, 
        WN2K,   1, 
        WNXP,   1, 
        OSFS,   1, 
        XPS2,   1, 
        Offset (0x04), 
        MLEN,   32, 
            ,   1, 
        ESTE,   1, 
        MBFS,   1, 
        LPTN,   1, 
        CM2N,   1, 
        CM1N,   1, 
        FPMW,   1, 
        RPMA,   1, 
        SATL,   1, 
        MBAY,   1, 
        S3AV,   1, 
        GVCS,   1, 
        HTTE,   1, 
            ,   1, 
        ESTA,   1, 
        FPYP,   1, 
        TPMA,   1, 
        HPTA,   1, 
        MRBS,   1, 
        RRTE,   1, 
        C2AV,   1, 
        GP0T,   1, 
        Offset (0x0C), 
        IHPM,   1, 
        IHPS,   1, 
        IHSM,   1, 
        IHSS,   1, 
        ATPM,   1, 
        ATPS,   1, 
        ATSM,   1, 
        ATSS,   1, 
        IHPC,   2, 
        IHSC,   2, 
        ATPC,   2, 
        ATSC,   2, 
        PS0F,   32, 
        PS0D,   32, 
        PITB,   160, 
        SITB,   160, 
        S0TB,   160, 
        S1TB,   160, 
        S2TB,   160, 
        S3TB,   160, 
        PMCC,   8, 
        PMCB,   448, 
        PSCC,   8, 
        PSCB,   448, 
        SMCC,   8, 
        SMCB,   448, 
        SSCC,   8, 
        SSCB,   448, 
        S0CC,   8, 
        S0CB,   448, 
        S2CC,   8, 
        S2CB,   448, 
        S1CC,   8, 
        S1CB,   448, 
        S3CC,   8, 
        S3CB,   448, 
        S4CC,   8, 
        S4CB,   448, 
        S6CC,   8, 
        S6CB,   448, 
        S5CC,   8, 
        S5CB,   448, 
        S7CC,   8, 
        S7CB,   448, 
        STMC,   8, 
        ODDM,   32, 
        DCHM,   288, 
        E00S,   32, 
        TOPM,   32, 
        WMIB,   33280, 
        WMIF,   1, 
        WMIT,   1, 
        MBET,   1, 
        WMIH,   1, 
        WMIP,   1, 
        WMIS,   1, 
        TEVT,   1, 
        Offset (0x13AC), 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        EDI,    32, 
        NPRC,   8, 
        NPST,   8, 
        SPSI,   256, 
        SPRI,   128, 
        PSSA,   32, 
        PSSZ,   16, 
        GOPB,   32, 
        GIGD,   32, 
        GROM,   32, 
        EOPB,   32, 
        ECAP,   32, 
        ELB0,   32, 
        ELB1,   32, 
        CSSA,   32, 
        CSSZ,   16
    }

    Field (BIOS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        IHMS,   4
    }

    Field (BIOS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0E), 
        PSF0,   1, 
        PSF1,   1, 
        PSF2,   1, 
        PSF3,   1, 
        PSF4,   1, 
        PSF5,   1, 
        PFS0,   1, 
        PFS1,   1, 
        PFS2,   1, 
        PFS3,   1, 
        PF0M,   1, 
        PF0S,   1, 
        PF1M,   1, 
        PF1S,   1, 
        PF2M,   1, 
        PF2S,   1, 
        PF3M,   1, 
        PF3S,   1, 
        Offset (0x12), 
        PSD0,   1, 
        PSD1,   1, 
        PSD2,   1, 
        PSD3,   1, 
        PSD4,   1, 
        PSD5,   1, 
        PDS0,   1, 
        PDS1,   1, 
        PDS2,   1, 
        PDS3,   1, 
        PD0M,   1, 
        PD0S,   1, 
        PD1M,   1, 
        PD1S,   1, 
        PD2M,   1, 
        PD2S,   1, 
        PD3M,   1, 
        PD3S,   1, 
        Offset (0x16)
    }

    OperationRegion (SSCR, SystemIO, 0xB2, 0x01)
    Field (SSCR, ByteAcc, NoLock, Preserve)
    {
        SSMI,   8
    }

    OperationRegion (SSSR, SystemIO, 0xB3, 0x01)
    Field (SSSR, ByteAcc, NoLock, Preserve)
    {
        DSMI,   8
    }

    OperationRegion (SIPM, SystemIO, 0x0400, 0x80)
    Field (SIPM, ByteAcc, NoLock, Preserve)
    {
        SIPU,   1, 
        Offset (0x08), 
        RI1U,   1, 
        RI2U,   1, 
        Offset (0x0E), 
        RI1N,   1, 
        RI2N,   1, 
        Offset (0x14), 
            ,   3, 
        PSMI,   1, 
            ,   3, 
        SMI6,   1, 
        Offset (0x53), 
        WDTV,   8, 
        Offset (0x55), 
        WDTO,   1, 
        Offset (0x69), 
            ,   7, 
        WDTS,   1, 
        Offset (0x6D), 
            ,   7, 
        WDTN,   1
    }

    Name (\PICM, Zero)
    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        \PICM = Arg0
    }

    Scope (\_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            OperationRegion (MCHC, PCI_Config, 0x40, 0xC0)
            Field (MCHC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                    ,   1, 
                D1EN,   1
            }

            Device (LPC)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (PIRQ, PCI_Config, 0x60, 0x0C)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    Offset (0x08), 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8
                }

                OperationRegion (GPM1, PCI_Config, 0xA0, 0x02)
                Field (GPM1, WordAcc, NoLock, Preserve)
                {
                        ,   10, 
                    BPEN,   1
                }
            }

            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y00)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRA & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRA |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKA._Y00._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRA & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKA.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRA & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRA = (Local0 | Local1--)
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y01)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRB & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRB |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKB._Y01._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRB & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKB.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRB & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRB = (Local0 | Local1--)
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y02)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRC & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRC |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKC._Y02._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRC & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKC.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRC & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRC = (Local0 | Local1--)
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y03)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRD & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRD |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKD._Y03._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRD & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKD.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRD & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRD = (Local0 | Local1--)
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y04)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRE & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRE |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKE._Y04._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRE & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKE.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRE & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRE = (Local0 | Local1--)
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y05)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRF & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRF |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKF._Y05._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRF & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKF.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRF & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRF = (Local0 | Local1--)
                }
            }

            Device (LNKG)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y06)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRG & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRG |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKG._Y06._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRG & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKG.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRG & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRG = (Local0 | Local1--)
                }
            }

            Device (LNKH)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Name (CRES, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y07)
                        {11}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (\_SB.PCI0.LPC.PIRH & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    \_SB.PCI0.LPC.PIRH |= 0x80
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,7,10,11,14,15}
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (CRES, \_SB.PCI0.LNKH._Y07._INT, IRQW)  // _INT: Interrupts
                    Local0 = (\_SB.PCI0.LPC.PIRH & 0x0F)
                    Local1 = One
                    IRQW = (Local1 << Local0)
                    Return (CRES) /* \_SB_.PCI0.LNKH.CRES */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQW)
                    Local0 = (\_SB.PCI0.LPC.PIRH & 0x70)
                    Local1 = Zero
                    FindSetLeftBit (IRQW, Local1)
                    \_SB.PCI0.LPC.PIRH = (Local0 | Local1--)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((\PICM == Zero))
                {
                    Return (Package (0x16)
                    {
                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            \_SB.PCI0.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x01, 
                            \_SB.PCI0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            \_SB.PCI0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            \_SB.PCI0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            \_SB.PCI0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }
                    })
                }
                Else
                {
                    Return (Package (0x15)
                    {
                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }
                    })
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (S3RS)
                {
                    SSMI = UPEC /* \UPEC */
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                Noop
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0B, 
                0x04
            })
            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S5D, 0, NotSerialized)
            {
                Return (0x03)
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0xBA, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0xC0, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (PGLC, PCI_Config, 0xEC, 0x04)
                Field (PGLC, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    PMGE,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }

                Device (SLT1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0xBA, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0xC0, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (PGLC, PCI_Config, 0xEC, 0x04)
                Field (PGLC, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    PMGE,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }

                Device (SLT1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (IGBE)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                OperationRegion (INCP, PCI_Config, 0xCC, 0x02)
                Field (INCP, WordAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (PCX1)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0x5A, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (MPCR, PCI_Config, 0xD8, 0x04)
                Field (MPCR, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCE,   1
                }

                OperationRegion (SSCS, PCI_Config, 0xDC, 0x04)
                Field (SSCS, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCS,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }

                Device (SLT1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (PCX2)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0x5A, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (MPCR, PCI_Config, 0xD8, 0x04)
                Field (MPCR, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCE,   1
                }

                OperationRegion (SSCS, PCI_Config, 0xDC, 0x04)
                Field (SSCS, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCS,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }

                Device (SLT2)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (PCX5)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0x5A, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (MPCR, PCI_Config, 0xD8, 0x04)
                Field (MPCR, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCE,   1
                }

                OperationRegion (SSCS, PCI_Config, 0xDC, 0x04)
                Field (SSCS, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCS,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }

                Device (SLT5)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (PCX6)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (SLST, PCI_Config, 0x5A, 0x02)
                Field (SLST, WordAcc, NoLock, Preserve)
                {
                        ,   6, 
                    SPDS,   1
                }

                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PEPS,   1
                }

                OperationRegion (MPCR, PCI_Config, 0xD8, 0x04)
                Field (MPCR, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCE,   1
                }

                OperationRegion (SSCS, PCI_Config, 0xDC, 0x04)
                Field (SSCS, DWordAcc, NoLock, Preserve)
                {
                        ,   31, 
                    PMCS,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\PICM == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }

                Device (SLT6)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (HUB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x04
                })
                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB1, Package (0x02)
                    {
                        0x03, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB1 [0x01] = 0x01
                    }

                    Return (PUB1) /* \_SB_.PCI0.USB1._PRW.PUB1 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB2, Package (0x02)
                    {
                        0x04, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB2 [0x01] = 0x01
                    }

                    Return (PUB2) /* \_SB_.PCI0.USB2._PRW.PUB2 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB3, Package (0x02)
                    {
                        0x0C, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB3 [0x01] = 0x01
                    }

                    Return (PUB3) /* \_SB_.PCI0.USB3._PRW.PUB3 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB4, Package (0x02)
                    {
                        0x0E, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB4 [0x01] = 0x01
                    }

                    Return (PUB4) /* \_SB_.PCI0.USB4._PRW.PUB4 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB5, Package (0x02)
                    {
                        0x05, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB5 [0x01] = 0x01
                    }

                    Return (PUB5) /* \_SB_.PCI0.USB5._PRW.PUB5 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUB6, Package (0x02)
                    {
                        0x20, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUB6 [0x01] = 0x01
                    }

                    Return (PUB6) /* \_SB_.PCI0.USB6._PRW.PUB6 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (EUS1)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUE1, Package (0x02)
                    {
                        0x0D, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUE1 [0x01] = 0x01
                    }

                    Return (PUE1) /* \_SB_.PCI0.EUS1._PRW.PUE1 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Device (EUS2)
            {
                Name (_ADR, 0x001A0007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (PUE2, Package (0x02)
                    {
                        0x0D, 
                        0x03
                    })
                    If (!S3AV)
                    {
                        PUE2 [0x01] = 0x01
                    }

                    Return (PUE2) /* \_SB_.PCI0.EUS2._PRW.PUE2 */
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S5D, 0, NotSerialized)
                {
                    Return (0x03)
                }
            }

            Method (NATA, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    0x001F0002, 
                    0x001F0005
                })
            }
        }
    }

    OperationRegion (MBFD, SystemIO, 0x044F, 0x01)
    Field (MBFD, ByteAcc, NoLock, Preserve)
    {
        MBFP,   1
    }

    Scope (\_SB.PCI0)
    {
        Method (_OSC, 5, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = (Arg2 - 0x01)
            Name (CAPB, Buffer ((Arg2 * 0x04)){})
            CAPB = Arg3
            Local1 = One
            CreateDWordField (CAPB, Zero, CAPF)
            While (Local0)
            {
                CreateDWordField (CAPB, Local1, CAPD)
                If ((CAPF & 0x01))
                {
                    If ((Local1 == 0x01))
                    {
                        CAPD &= 0x09
                    }
                    Else
                    {
                        CAPD = Zero
                    }
                }
                ElseIf ((Local1 == 0x01))
                {
                    If ((CAPD & 0x08))
                    {
                        \_SB.PCI0.PEG1.PMGE = Zero
                        \_SB.PCI0.PCX1.PMCE = Zero
                        \_SB.PCI0.PCX2.PMCE = Zero
                        \_SB.PCI0.LPC.BPEN = Zero
                    }
                }

                Local0--
                Local1 += 0x04
            }

            Return (CAPB) /* \_SB_.PCI0._OSC.CAPB */
        }
    }

    Scope (\_SB.PCI0.HUB)
    {
        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If ((\PICM == Zero))
            {
                Return (Package (0x0C)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKE, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKF, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKG, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKH, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKF, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKG, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKH, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKE, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKG, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKH, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKE, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKF, 
                        0x00
                    }
                })
            }
            Else
            {
                Return (Package (0x0C)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x00, 
                        0x00, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x01, 
                        0x00, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        0x00, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        0x00, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        0x00, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        0x00, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        0x00, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        0x00, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x00, 
                        0x00, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x01, 
                        0x00, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x02, 
                        0x00, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x03, 
                        0x00, 
                        0x15
                    }
                })
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (SBD1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0010,             // Range Minimum
                    0x0010,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x00,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0072,             // Range Minimum
                    0x0072,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
                IO (Decode16,
                    0x0090,             // Range Minimum
                    0x0090,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
            })
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (SBD2)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0400,             // Range Minimum
                    0x0400,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0420,             // Range Minimum
                    0x0420,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0440,             // Range Minimum
                    0x0440,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0460,             // Range Minimum
                    0x0460,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0480,             // Range Minimum
                    0x0480,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0xF800,             // Range Minimum
                    0xF800,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xF820,             // Range Minimum
                    0xF820,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xF840,             // Range Minimum
                    0xF840,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xF860,             // Range Minimum
                    0xF860,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xFA00,             // Range Minimum
                    0xFA00,             // Range Maximum
                    0x00,               // Alignment
                    0x40,               // Length
                    )
                IO (Decode16,
                    0xFC00,             // Range Minimum
                    0xFC00,             // Range Maximum
                    0x00,               // Alignment
                    0x80,               // Length
                    )
                IO (Decode16,
                    0xFC80,             // Range Minimum
                    0xFC80,             // Range Maximum
                    0x00,               // Alignment
                    0x80,               // Length
                    )
                IO (Decode16,
                    0xFE00,             // Range Minimum
                    0xFE00,             // Range Maximum
                    0x00,               // Alignment
                    0x80,               // Length
                    )
                IO (Decode16,
                    0xFE80,             // Range Minimum
                    0xFE80,             // Range Maximum
                    0x00,               // Alignment
                    0x80,               // Length
                    )
            })
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (SBD3)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (CRS1, ResourceTemplate ()
            {
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
            })
            Name (CRS2, ResourceTemplate ()
            {
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0CB0,             // Range Minimum
                    0x0CB0,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (TPMA)
                {
                    Return (CRS1) /* \_SB_.PCI0.SBD3.CRS1 */
                }
                Else
                {
                    Return (CRS2) /* \_SB_.PCI0.SBD3.CRS2 */
                }
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        PKWN = OPKW /* \OPKW */
        PMWN = OPMW /* \OPMW */
        If ((Arg0 == 0x03))
        {
            SSMI = S3SV /* \S3SV */
            If ((OPMW && FPMW))
            {
                PMWN = One
            }
            Else
            {
                PMWN = Zero
            }
        }

        PSMI = One
        SMI6 = One
    }

    Method (GDBF, 2, NotSerialized)
    {
        CreateDWordField (Arg0, Arg1, BPTR)
        Return (BPTR) /* \GDBF.BPTR */
    }

    Method (SDBF, 3, NotSerialized)
    {
        CreateDWordField (Arg0, Arg1, BPTR)
        BPTR = Arg2
    }

    Method (GWBF, 2, NotSerialized)
    {
        CreateWordField (Arg0, Arg1, BPTR)
        Return (BPTR) /* \GWBF.BPTR */
    }

    Method (SWBF, 3, NotSerialized)
    {
        CreateWordField (Arg0, Arg1, BPTR)
        BPTR = Arg2
    }

    Method (GBBF, 2, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, BPTR)
        Return (BPTR) /* \GBBF.BPTR */
    }

    Method (SBBF, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, BPTR)
        BPTR = Arg2
    }

    Scope (\_SB.PCI0)
    {
        Name (CRES, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0x013A)
        {
            /* 0000 */  0x87, 0x17, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x88, 0x0D, 0x00, 0x02, 0x0C, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x01, 0x47, 0x01, 0xF8, 0x0C, 0xF8, 0x0C,  // ..G.....
            /* 0030 */  0x01, 0x08, 0x88, 0x0D, 0x00, 0x01, 0x0C, 0x03,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0xF7, 0x0C, 0x00, 0x00,  // ........
            /* 0040 */  0xF8, 0x0C, 0x88, 0x0D, 0x00, 0x01, 0x0C, 0x03,  // ........
            /* 0048 */  0x00, 0x00, 0x00, 0x10, 0xFF, 0x2F, 0x00, 0x00,  // ...../..
            /* 0050 */  0x00, 0x20, 0x88, 0x0D, 0x00, 0x01, 0x0C, 0x03,  // . ......
            /* 0058 */  0x00, 0x00, 0x00, 0x30, 0xFF, 0x6F, 0x00, 0x00,  // ...0.o..
            /* 0060 */  0x00, 0x40, 0x88, 0x0D, 0x00, 0x01, 0x0C, 0x03,  // .@......
            /* 0068 */  0x00, 0x00, 0x00, 0x70, 0xFF, 0xAF, 0x00, 0x00,  // ...p....
            /* 0070 */  0x00, 0x40, 0x88, 0x0D, 0x00, 0x01, 0x0C, 0x03,  // .@......
            /* 0078 */  0x00, 0x00, 0x00, 0xB0, 0xFF, 0xFF, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x50, 0x87, 0x17, 0x00, 0x00, 0x0C, 0x03,  // .P......
            /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
            /* 0090 */  0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x02, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00,  // ......y.
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // y.......
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..y.....
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00,  // ......y.
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x79, 0x00                                       // y.
        })
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateDWordField (CRES, 0x0A, PR1S)
            CreateDWordField (CRES, 0x0E, PR1M)
            CreateDWordField (CRES, 0x16, PR1L)
            PR1M = (NPCI - One)
            Local0 = 0x9C
            If (PEXS)
            {
                PR1S = (PEXB + PEXS) /* \PEXS */
                If ((TOPM != PEXB))
                {
                    CreateDWordField (CRES, 0x9C, FLG1)
                    CreateDWordField (CRES, 0xA0, FLG2)
                    FLG1 = 0x1787
                    FLG2 = 0x030C
                    CreateDWordField (CRES, 0xA6, PR2S)
                    CreateDWordField (CRES, 0xAA, PR2M)
                    CreateDWordField (CRES, 0xB2, PR2L)
                    PR2S = TOPM /* \TOPM */
                    PR2M = (PEXB - One)
                    PR2L = (PEXB - TOPM) /* \TOPM */
                    Local0 = 0xB6
                }
            }
            Else
            {
                PR1S = TOPM /* \TOPM */
            }

            PR1L = (NPCI - PR1S) /* \_SB_.PCI0._CRS.PR1S */
            If (TPMA)
            {
                CreateDWordField (CRES, Local0, TPMC)
                CreateDWordField (CRES, (Local0 + 0x04), TPMF)
                CreateDWordField (CRES, (Local0 + 0x0A), TPMS)
                CreateDWordField (CRES, (Local0 + 0x0E), TPME)
                CreateDWordField (CRES, (Local0 + 0x16), TPML)
                TPMC = 0x1787
                TPMF = 0x010E
                TPMS = 0xFED40000
                TPME = 0xFED44FFF
                TPML = 0x5000
                Local0 += 0x1A
            }

            Local1 = 0x00
            Local2 = \GDBF (DCHM, Local1)
            While ((Local2 && (Local1 < 0x20)))
            {
                \SDBF (CRES, Local0, 0x1787)
                Local0 += 0x04
                \SDBF (CRES, Local0, 0x030C)
                Local0 += 0x06
                \SDBF (CRES, Local0, Local2)
                Local0 += 0x04
                Local1 += 0x04
                Local3 = \GDBF (DCHM, Local1)
                Local3--
                \SDBF (CRES, Local0, Local3)
                Local0 += 0x08
                Local3++
                Local2 = (Local3 - Local2)
                \SDBF (CRES, Local0, Local2)
                Local0 += 0x04
                Local1 += 0x04
                Local2 = \GDBF (DCHM, Local1)
            }

            Return (CRES) /* \_SB_.PCI0.CRES */
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (NCP)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (PIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (TIME)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x00,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (IDMA)
        {
            Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x00C0,             // Range Minimum
                    0x00C0,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                DMA (Compatibility, NotBusMaster, Transfer16, )
                    {4}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (SPKR)
        {
            Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
        }
    }

    Scope (\_SB)
    {
        Device (MBRD)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Name (CRES, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0x86)
            {
                /* 0000 */  0x86, 0x09, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x0A, 0x00, 0x86, 0x09, 0x00, 0x01,  // ........
                /* 0010 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xF0, 0x01,  // ........
                /* 0018 */  0x86, 0x09, 0x00, 0x01, 0x00, 0x80, 0x0E, 0x00,  // ........
                /* 0020 */  0x00, 0x80, 0x00, 0x00, 0x86, 0x09, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x08, 0x00,  // ........
                /* 0030 */  0x86, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x86, 0x09, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // y.......
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // y.......
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0078 */  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // y.......
                /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x79, 0x00               // ....y.
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, 0x14, RAMT)
                RAMT = MLEN /* \MLEN */
                CreateDWordField (CRES, 0x1C, CE0S)
                CE0S = E00S /* \E00S */
                CreateDWordField (CRES, 0x20, CE0L)
                Local0 = 0x00100000
                CE0L = (Local0 - E00S) /* \E00S */
                CreateDWordField (CRES, 0x28, S4GS)
                S4GS = SR4G /* \SR4G */
                CreateDWordField (CRES, 0x2C, HPT1)
                If (HPTB)
                {
                    Local0 = HPTB /* \HPTB */
                }
                Else
                {
                    Local0 = 0xFED00000
                }

                HPT1 = (Local0 - SR4G) /* \SR4G */
                If (HPTA)
                {
                    Local0 += 0x0400
                }

                CreateDWordField (CRES, 0x34, HPT2)
                CreateDWordField (CRES, 0x38, TPM1)
                HPT2 = Local0
                TPM1 = (0xFED40000 - Local0)
                CreateDWordField (CRES, 0x40, TPM2)
                CreateDWordField (CRES, 0x44, TPM3)
                If (TPMA)
                {
                    TPM2 = 0xFED45000
                }
                Else
                {
                    TPM2 = 0xFED40000
                }

                TPM3 = (0xFFFFFFFF - TPM2) /* \_SB_.MBRD._CRS.TPM2 */
                TPM3++
                If (PEXS)
                {
                    CreateDWordField (CRES, 0x48, FLGS)
                    FLGS = 0x0986
                    CreateDWordField (CRES, 0x4C, RPXB)
                    CreateDWordField (CRES, 0x50, RPXS)
                    RPXB = PEXB /* \PEXB */
                    RPXS = PEXS /* \PEXS */
                    Local0 = 0x54
                }
                Else
                {
                    Local0 = 0x48
                }

                OperationRegion (ODMT, SystemMemory, ODDM, 0x38)
                Field (ODMT, DWordAcc, NoLock, Preserve)
                {
                    OMTF,   448
                }

                Local1 = 0x04
                Local2 = \GDBF (OMTF, Local1)
                While ((Local2 && (Local1 < 0x30)))
                {
                    \SDBF (CRES, Local0, 0x0986)
                    Local0 += 0x04
                    \SDBF (CRES, Local0, Local2)
                    Local0 += 0x04
                    Local1 += 0x04
                    \SDBF (CRES, Local0, \GDBF (OMTF, Local1))
                    Local0 += 0x04
                    Local1 += 0x08
                    Local2 = \GDBF (OMTF, Local1)
                }

                Return (CRES) /* \_SB_.MBRD.CRES */
            }
        }
    }

    Method (SCMP, 2, NotSerialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (0x01)
        }

        Name (STR0, Buffer (Local7){})
        Name (STR1, Buffer (Local7){})
        STR0 = Arg0
        STR1 = Arg1
        Local6 = 0x00
        Local0 = 0x00
        While (((Local6 != Local7) && (Local0 == 0x00)))
        {
            Local2 = DerefOf (STR0 [Local6])
            Local3 = DerefOf (STR1 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = 0x01
            }
        }

        Return (Local0)
    }

    Method (WSTB, 4, Serialized)
    {
        OperationRegion (BPDS, SystemIO, Arg3, 0x01)
        Field (BPDS, ByteAcc, NoLock, Preserve)
        {
            BPRT,   8
        }

        Local0 = (BPRT & Arg1)
        If (!(WN98 || WNME))
        {
            Local1 = (Arg2 * 0x0A)
            While (((Local0 != Arg0) && Local1))
            {
                Local1--
                Sleep (0x01)
                Local0 = (BPRT & Arg1)
            }
        }
        Else
        {
            Local1 = (Arg2 * 0x03E8)
            While (((Local0 != Arg0) && Local1))
            {
                Local1--
                Stall (0x0A)
                Local0 = (BPRT & Arg1)
            }
        }

        Return (Local1)
    }

    Method (WNST, 4, Serialized)
    {
        OperationRegion (BPDS, SystemIO, Arg3, 0x01)
        Field (BPDS, ByteAcc, NoLock, Preserve)
        {
            BPRT,   8
        }

        Local0 = (BPRT & Arg1)
        If (!(WN98 || WNME))
        {
            Local1 = (Arg2 * 0x0A)
            While (((Local0 == Arg0) && Local1))
            {
                Local1--
                Sleep (0x01)
                Local0 = (BPRT & Arg1)
            }
        }
        Else
        {
            Local1 = (Arg2 * 0x03E8)
            While (((Local0 == Arg0) && Local1))
            {
                Local1--
                Stall (0x0A)
                Local0 = (BPRT & Arg1)
            }
        }

        Return (Local1)
    }

    Method (STAL, 1, Serialized)
    {
        If (!(WN98 || WNME))
        {
            Local0 = Arg0
            While (Local0)
            {
                Sleep (0x01)
                Local0--
            }
        }
        Else
        {
            Local0 = (Arg0 * 0x64)
            While (Local0)
            {
                Stall (0x0A)
                Local0--
            }
        }
    }

    Method (OSFG, 0, NotSerialized)
    {
        If (!OSFS)
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (\_OSI ("Windows 2001"))
                {
                    WNXP = One
                }

                If (\_OSI ("Windows 2001 SP2"))
                {
                    XPS2 = One
                }
            }
            ElseIf (!\SCMP (\_OS, "Microsoft Windows"))
            {
                WN98 = One
            }
            ElseIf (!\SCMP (\_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                WNME = One
            }
            ElseIf (!\SCMP (\_OS, "Microsoft Windows NT"))
            {
                WN2K = One
            }

            OSFS = One
        }
    }

    OperationRegion (RCPX, SystemMemory, RCBA, 0x3420)
    Field (RCPX, DWordAcc, NoLock, Preserve)
    {
        Offset (0x3418), 
        Offset (0x341A), 
        PE1D,   1, 
        PE2D,   1, 
            ,   1, 
            ,   1
    }

    Scope (\_SB)
    {
        Device (PBTN)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        OperationRegion (L47B, SystemIO, 0x2E, 0x02)
        Field (L47B, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            CFG,    8, 
            Offset (0x07), 
            LDN,    8, 
            Offset (0x22), 
            DPWR,   8, 
            APWR,   8, 
            Offset (0x30), 
            ACTR,   8, 
            Offset (0x60), 
            IOAH,   8, 
            IOAL,   8, 
            Offset (0x70), 
            INTR,   8, 
            Offset (0x74), 
            DMCH,   8, 
            Offset (0xF0), 
            CFG1,   8, 
            CFG2,   8, 
            CFG3,   8, 
            Offset (0xF4), 
            CFG4,   8, 
            CFG5,   8
        }

        Method (_REG, 2, NotSerialized)  // _REG: Region Availability
        {
            If (MRBS)
            {
                If (!Arg1)
                {
                    SSMI = RSTT /* \RSTT */
                }
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        OperationRegion (LPCC, SystemIO, 0x2E, 0x01)
        Field (LPCC, ByteAcc, NoLock, Preserve)
        {
            LCFG,   8
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        OperationRegion (DCOD, PCI_Config, 0x80, 0x04)
        Field (DCOD, AnyAcc, NoLock, Preserve)
        {
            COMA,   3, 
                ,   1, 
            COMB,   3, 
            Offset (0x01), 
            LPTD,   2, 
                ,   2, 
            FDCD,   1, 
            Offset (0x02), 
            CADN,   1, 
            CBDN,   1, 
            LPDN,   1, 
            FPDN,   1
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Method (LETR, 0, NotSerialized)
        {
            LCFG = 0x55
        }

        Method (LEXT, 0, NotSerialized)
        {
            LCFG = 0xAA
        }
    }

    Scope (\_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.D1EN && !GVCS))
            {
                If (\_SB.PCI0.PEG1.SPDS)
                {
                    If (\_SB.PCI0.PEG1.PEPS)
                    {
                        \_SB.PCI0.PEG1.PEPS = One
                        While (\_SB.PCI0.PEG1.PEPS)
                        {
                            \_SB.PCI0.PEG1.PEPS = One
                        }

                        Notify (\_SB.PCI0.PEG1.SLT1, 0x02) // Device Wake
                    }
                }
            }

            If (!PE1D)
            {
                If (\_SB.PCI0.PCX1.SPDS)
                {
                    If (\_SB.PCI0.PCX1.PEPS)
                    {
                        \_SB.PCI0.PCX1.PEPS = One
                        While (\_SB.PCI0.PCX1.PEPS)
                        {
                            \_SB.PCI0.PCX1.PEPS = One
                        }

                        \_SB.PCI0.PCX1.PMCS = One
                        Notify (\_SB.PCI0.PCX1.SLT1, 0x02) // Device Wake
                    }
                }
            }

            If (!PE2D)
            {
                If (\_SB.PCI0.PCX2.SPDS)
                {
                    If (\_SB.PCI0.PCX2.PEPS)
                    {
                        \_SB.PCI0.PCX2.PEPS = One
                        While (\_SB.PCI0.PCX2.PEPS)
                        {
                            \_SB.PCI0.PCX2.PEPS = One
                        }

                        \_SB.PCI0.PCX2.PMCS = One
                        Notify (\_SB.PCI0.PCX2.SLT2, 0x02) // Device Wake
                    }
                }
            }

            SMI6 = One
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.HUB, 0x02) // Device Wake
            PSMI = One
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (EUWK)
            {
                Notify (\_SB.PBTN, 0x02) // Device Wake
                Notify (\_SB.PCI0.EUS1, 0x02) // Device Wake
                Notify (\_SB.PCI0.EUS2, 0x02) // Device Wake
                EUWK = Zero
            }
            ElseIf (CondRefOf (\_SB.PCI0.IGBE, Local0))
            {
                Notify (\_SB.PCI0.IGBE, 0x02) // Device Wake
            }
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }

        Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PBTN, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
        }
    }

    Name (\_S0, Package (0x02)  // _S0_: S0 System State
    {
        0x00, 
        0x03
    })
    Name (\_S4, Package (0x02)  // _S4_: S4 System State
    {
        0x00, 
        0x06
    })
    Name (\_S5, Package (0x02)  // _S5_: S5 System State
    {
        0x00, 
        0x07
    })
    Mutex (PDCX, 0x00)
    Name (PDCC, 0x00)
    Name (PSSL, 0x00)
    Name (CSSL, 0x00)
    Name (ESTH, 0x00)
    Name (PHND, 0x00)
    Name (CHND, 0x00)
    Processor (\_PR.CPU0, 0x01, 0x0000F810, 0x06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Acquire (PDCX, 0xFFFF)
            PDCC |= 0x01
            CreateDWordField (Arg0, 0x08, CAP2)
            If ((ESTA && ((CAP2 & 0x09) == 0x09)))
            {
                ESTE = One
                ESTH = One
                If ((RPMA && !PSSL))
                {
                    OperationRegion (PSSD, SystemMemory, PSSA, PSSZ)
                    Load (PSSD, PHND) /* \PHND */
                    PSSL = One
                }
            }

            \OSFG ()
            If (((XPS2 && C2AV) && !CSSL))
            {
                OperationRegion (CSSD, SystemMemory, CSSA, CSSZ)
                Load (CSSD, CHND) /* \CHND */
                CSSL = One
            }

            Release (PDCX)
        }
    }

    Processor (\_PR.CPU1, 0x02, 0x0000F810, 0x06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Acquire (PDCX, 0xFFFF)
            PDCC |= 0x02
            CreateDWordField (Arg0, 0x08, CAP2)
            If ((ESTA && ((CAP2 & 0x09) == 0x09)))
            {
                ESTE = One
                ESTH = One
                If ((RPMA && !PSSL))
                {
                    OperationRegion (PSSD, SystemMemory, PSSA, PSSZ)
                    Load (PSSD, PHND) /* \PHND */
                    PSSL = 0x02
                }
            }

            \OSFG ()
            If (((XPS2 && C2AV) && !CSSL))
            {
                OperationRegion (CSSD, SystemMemory, CSSA, CSSZ)
                Load (CSSD, CHND) /* \CHND */
                CSSL = One
            }

            Release (PDCX)
        }
    }

    Processor (\_PR.CPU2, 0x03, 0x0000F810, 0x06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Acquire (PDCX, 0xFFFF)
            PDCC |= 0x04
            CreateDWordField (Arg0, 0x08, CAP2)
            If ((ESTA && ((CAP2 & 0x09) == 0x09)))
            {
                ESTE = One
                ESTH = One
                If ((RPMA && !PSSL))
                {
                    OperationRegion (PSSD, SystemMemory, PSSA, PSSZ)
                    Load (PSSD, PHND) /* \PHND */
                    PSSL = One
                }
            }

            \OSFG ()
            If (((XPS2 && C2AV) && !CSSL))
            {
                OperationRegion (CSSD, SystemMemory, CSSA, CSSZ)
                Load (CSSD, CHND) /* \CHND */
                CSSL = One
            }

            Release (PDCX)
        }
    }

    Processor (\_PR.CPU3, 0x04, 0x0000F810, 0x06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Acquire (PDCX, 0xFFFF)
            PDCC |= 0x08
            CreateDWordField (Arg0, 0x08, CAP2)
            If ((ESTA && ((CAP2 & 0x09) == 0x09)))
            {
                ESTE = One
                ESTH = One
                If ((RPMA && !PSSL))
                {
                    OperationRegion (PSSD, SystemMemory, PSSA, PSSZ)
                    Load (PSSD, PHND) /* \PHND */
                    PSSL = One
                }
            }

            \OSFG ()
            If (((XPS2 && C2AV) && !CSSL))
            {
                OperationRegion (CSSD, SystemMemory, CSSA, CSSZ)
                Load (CSSD, CHND) /* \CHND */
                CSSL = One
            }

            Release (PDCX)
        }
    }

    Method (MSCI, 0, NotSerialized)
    {
        Noop
    }

    Method (PSS4, 0, NotSerialized)
    {
        If (ESTH)
        {
            ESTE = One
        }

        If ((HTTE && ESTE))
        {
            SSMI = 0x21
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (PS2M)
        {
            Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0F0E"))  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQNoFlags ()
                    {12}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (KBD)
        {
            Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (ECP0)
        {
            Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
            Name (_DDN, "LPT1")  // _DDN: DOS Device Name
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags (_Y08)
                    {7}
                DMA (Compatibility, NotBusMaster, Transfer8, _Y09)
                    {3}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    _Y0A)
                IO (Decode16,
                    0x0778,             // Range Minimum
                    0x0778,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    _Y0B)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LPTN)
                {
                    LETR ()
                    LDN = 0x03
                    Local0 = CFG1 /* \_SB_.PCI0.LPC_.CFG1 */
                    Local0 &= 0x07
                    If ((Local0 == 0x03))
                    {
                        If (ACTR)
                        {
                            LEXT ()
                            Return (0x0F)
                        }
                        Else
                        {
                            LEXT ()
                            Return (0x0D)
                        }
                    }
                    Else
                    {
                        LEXT ()
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, \_SB.PCI0.LPC.ECP0._Y08._INT, IRQW)  // _INT: Interrupts
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y09._DMA, DMAC)  // _DMA: Direct Memory Access
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x09, IOHI)
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x0B, IORH)
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0A._LEN, LEN1)  // _LEN: Length
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0B._MIN, ISL1)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x11, ISH1)
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0B._MAX, ISL2)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x13, ISH2)
                CreateByteField (CRES, \_SB.PCI0.LPC.ECP0._Y0B._LEN, LEN2)  // _LEN: Length
                LETR ()
                LDN = 0x03
                IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                ISL1 = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                ISH1 = (0x04 + IOAH) /* \_SB_.PCI0.LPC_.IOAH */
                ISL2 = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                ISH2 = (0x04 + IOAH) /* \_SB_.PCI0.LPC_.IOAH */
                If ((IOAL == 0xBC))
                {
                    LEN1 = 0x03
                    LEN2 = 0x03
                }
                Else
                {
                    LEN1 = 0x08
                    LEN2 = 0x06
                }

                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                }

                If ((DMCH == 0x04))
                {
                    DMAC = Zero
                }
                Else
                {
                    Local0 = One
                    DMAC = (Local0 << DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                }

                LEXT ()
                Return (CRES) /* \_SB_.PCI0.LPC_.ECP0.CRES */
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (LPT0)
        {
            Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
            Name (_DDN, "LPT1")  // _DDN: DOS Device Name
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags (_Y0C)
                    {7}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    _Y0D)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LPTN)
                {
                    LETR ()
                    LDN = 0x03
                    Local0 = CFG1 /* \_SB_.PCI0.LPC_.CFG1 */
                    Local0 &= 0x07
                    If ((Local0 == Zero))
                    {
                        If (ACTR)
                        {
                            LEXT ()
                            Return (0x0F)
                        }
                        Else
                        {
                            LEXT ()
                            Return (0x0D)
                        }
                    }

                    If ((Local0 == 0x04))
                    {
                        If (ACTR)
                        {
                            LEXT ()
                            Return (0x0F)
                        }
                        Else
                        {
                            LEXT ()
                            Return (0x0D)
                        }
                    }
                    Else
                    {
                        LEXT ()
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, \_SB.PCI0.LPC.LPT0._Y0C._INT, IRQW)  // _INT: Interrupts
                CreateByteField (CRES, \_SB.PCI0.LPC.LPT0._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x06, IOHI)
                CreateByteField (CRES, \_SB.PCI0.LPC.LPT0._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x08, IORH)
                LETR ()
                LDN = 0x03
                IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                }

                LEXT ()
                Return (CRES) /* \_SB_.PCI0.LPC_.LPT0.CRES */
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (COM1)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _CID: Compatible ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags (_Y0E)
                    {4}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    _Y0F)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CM1N)
                {
                    LETR ()
                    LDN = 0x04
                    If (ACTR)
                    {
                        LEXT ()
                        Return (0x0F)
                    }
                    Else
                    {
                        LEXT ()
                        Return (0x0D)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, \_SB.PCI0.LPC.COM1._Y0E._INT, IRQW)  // _INT: Interrupts
                CreateByteField (CRES, \_SB.PCI0.LPC.COM1._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x06, IOHI)
                CreateByteField (CRES, \_SB.PCI0.LPC.COM1._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x08, IORH)
                LETR ()
                LDN = 0x04
                IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                }

                LEXT ()
                Return (CRES) /* \_SB_.PCI0.LPC_.COM1.CRES */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If ((Arg0 == 0x00))
                {
                    RI1N = Zero
                }
                Else
                {
                    RI1N = One
                }
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (COM2)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags (_Y10)
                    {3}
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    _Y11)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CM2N)
                {
                    LETR ()
                    LDN = 0x05
                    If (ACTR)
                    {
                        LEXT ()
                        Return (0x0F)
                    }
                    Else
                    {
                        LEXT ()
                        Return (0x0D)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, \_SB.PCI0.LPC.COM2._Y10._INT, IRQW)  // _INT: Interrupts
                CreateByteField (CRES, \_SB.PCI0.LPC.COM2._Y11._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x06, IOHI)
                CreateByteField (CRES, \_SB.PCI0.LPC.COM2._Y11._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x08, IORH)
                LETR ()
                LDN = 0x05
                IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                }

                LEXT ()
                Return (CRES) /* \_SB_.PCI0.LPC_.COM2.CRES */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If ((Arg0 == 0x00))
                {
                    RI2N = Zero
                }
                Else
                {
                    RI2N = One
                }
            }
        }
    }

    Scope (\_SB.PBTN)
    {
        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
        {
            If ((Arg0 == 0x00))
            {
                OPKW = Zero
                OPMW = Zero
            }
            Else
            {
                OPKW = One
                OPMW = One
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (FDC0)
        {
            Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags (_Y12)
                    {6}
                DMA (Compatibility, NotBusMaster, Transfer8, _Y13)
                    {2}
                IO (Decode16,
                    0x03F0,             // Range Minimum
                    0x03F0,             // Range Maximum
                    0x01,               // Alignment
                    0x06,               // Length
                    _Y14)
                IO (Decode16,
                    0x03F7,             // Range Minimum
                    0x03F7,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                LETR ()
                LDN = 0x00
                If (ACTR)
                {
                    LEXT ()
                    Return (0x0F)
                }
                Else
                {
                    LEXT ()
                    Return (0x0D)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, \_SB.PCI0.LPC.FDC0._Y12._INT, IRQW)  // _INT: Interrupts
                CreateByteField (CRES, \_SB.PCI0.LPC.FDC0._Y13._DMA, DMAC)  // _DMA: Direct Memory Access
                CreateByteField (CRES, \_SB.PCI0.LPC.FDC0._Y14._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x09, IOHI)
                CreateByteField (CRES, \_SB.PCI0.LPC.FDC0._Y14._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x0B, IORH)
                LETR ()
                LDN = 0x00
                IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                }

                If ((DMCH == 0x04))
                {
                    DMAC = Zero
                }
                Else
                {
                    Local0 = One
                    DMAC = (Local0 << DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                }

                LEXT ()
                Return (CRES) /* \_SB_.PCI0.LPC_.FDC0.CRES */
            }
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (APIC)
        {
            Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (CRES, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y15)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0.LPC.APIC._Y15._BAS, BASE)  // _BAS: Base Address
                CreateDWordField (CRES, \_SB.PCI0.LPC.APIC._Y15._LEN, LNTH)  // _LEN: Length
                BASE = APAD /* \APAD */
                LNTH = APLN /* \APLN */
                Return (CRES) /* \_SB_.PCI0.LPC_.APIC.CRES */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\PICM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (\_SB.PCI0.LPC.ECP0)
    {
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            LETR ()
            LDN = 0x03
            INTR = Zero
            ACTR = Zero
            LEXT ()
        }

        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
        {
            StartDependentFn (0x00, 0x00)
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {1,2,3}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0778,             // Range Minimum
                    0x0778,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
            }
            StartDependentFn (0x00, 0x00)
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {1,2,3}
                IO (Decode16,
                    0x0278,             // Range Minimum
                    0x0278,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0678,             // Range Minimum
                    0x0678,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {1,2,3}
                IO (Decode16,
                    0x03BC,             // Range Minimum
                    0x03BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
                IO (Decode16,
                    0x07BC,             // Range Minimum
                    0x07BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0778,             // Range Minimum
                    0x0778,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {}
                IO (Decode16,
                    0x0278,             // Range Minimum
                    0x0278,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0678,             // Range Minimum
                    0x0678,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {}
                IO (Decode16,
                    0x03BC,             // Range Minimum
                    0x03BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
                IO (Decode16,
                    0x07BC,             // Range Minimum
                    0x07BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            EndDependentFn ()
        })
        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, 0x01, IRQW)
            CreateByteField (Arg0, 0x04, DMAC)
            CreateByteField (Arg0, 0x08, IOLO)
            CreateByteField (Arg0, 0x09, IOHI)
            LETR ()
            LDN = 0x03
            IOAL = IOLO /* \_SB_.PCI0.LPC_.ECP0._SRS.IOLO */
            IOAH = IOHI /* \_SB_.PCI0.LPC_.ECP0._SRS.IOHI */
            If ((IRQW == Zero))
            {
                INTR = Zero
            }
            Else
            {
                FindSetLeftBit (IRQW, Local0)
                INTR = Local0--
            }

            If ((DMAC == Zero))
            {
                DMCH = 0x04
            }
            Else
            {
                FindSetLeftBit (DMAC, Local0)
                DMCH = Local0--
            }

            ACTR = One
            LEXT ()
            If ((IOLO == 0x78))
            {
                If ((IOHI == 0x03))
                {
                    LPTD = Zero
                }
                Else
                {
                    LPTD = One
                }
            }
            Else
            {
                LPTD = 0x02
            }

            LPDN = One
        }
    }

    Scope (\_SB.PCI0.LPC.LPT0)
    {
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            LETR ()
            LDN = 0x03
            INTR = Zero
            ACTR = Zero
            LEXT ()
        }

        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
        {
            StartDependentFn (0x00, 0x00)
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFn (0x00, 0x00)
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                IO (Decode16,
                    0x0278,             // Range Minimum
                    0x0278,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {5,7,10,11,14,15}
                IO (Decode16,
                    0x03BC,             // Range Minimum
                    0x03BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                IO (Decode16,
                    0x0378,             // Range Minimum
                    0x0378,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                IO (Decode16,
                    0x0278,             // Range Minimum
                    0x0278,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {}
                IO (Decode16,
                    0x03BC,             // Range Minimum
                    0x03BC,             // Range Maximum
                    0x00,               // Alignment
                    0x03,               // Length
                    )
            }
            EndDependentFn ()
        })
        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, 0x01, IRQW)
            CreateByteField (Arg0, 0x05, IOLO)
            CreateByteField (Arg0, 0x06, IOHI)
            LETR ()
            LDN = 0x03
            IOAL = IOLO /* \_SB_.PCI0.LPC_.LPT0._SRS.IOLO */
            IOAH = IOHI /* \_SB_.PCI0.LPC_.LPT0._SRS.IOHI */
            If ((IRQW == Zero))
            {
                INTR = Zero
            }
            Else
            {
                FindSetLeftBit (IRQW, Local0)
                INTR = Local0--
            }

            ACTR = One
            LEXT ()
            If ((IOLO == 0x78))
            {
                If ((IOHI == 0x03))
                {
                    LPTD = Zero
                }
                Else
                {
                    LPTD = One
                }
            }
            Else
            {
                LPTD = 0x02
            }

            LPDN = One
        }
    }

    Scope (\_SB.PCI0.LPC.COM1)
    {
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            LETR ()
            LDN = 0x04
            INTR = Zero
            ACTR = Zero
            LEXT ()
        }

        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
        {
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {4}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {3}
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {4}
                IO (Decode16,
                    0x03E8,             // Range Minimum
                    0x03E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {3}
                IO (Decode16,
                    0x02E8,             // Range Minimum
                    0x02E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {3,5,7,10}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {4,5,7,10}
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {3,5,7,10}
                IO (Decode16,
                    0x03E8,             // Range Minimum
                    0x03E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {4,5,7,10}
                IO (Decode16,
                    0x02E8,             // Range Minimum
                    0x02E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            EndDependentFn ()
        })
        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, 0x01, IRQW)
            CreateByteField (Arg0, 0x05, IOLO)
            CreateByteField (Arg0, 0x06, IOHI)
            LETR ()
            LDN = 0x04
            IOAL = IOLO /* \_SB_.PCI0.LPC_.COM1._SRS.IOLO */
            IOAH = IOHI /* \_SB_.PCI0.LPC_.COM1._SRS.IOHI */
            If ((IRQW == Zero))
            {
                INTR = Zero
            }
            Else
            {
                FindSetLeftBit (IRQW, Local0)
                INTR = Local0--
            }

            ACTR = One
            LEXT ()
            If ((IOLO == 0xF8))
            {
                If ((IOHI == 0x03))
                {
                    COMA = Zero
                }
                Else
                {
                    COMA = 0x01
                }
            }
            ElseIf ((IOHI == 0x03))
            {
                COMA = 0x07
            }
            Else
            {
                COMA = 0x05
            }

            CADN = One
        }
    }

    Scope (\_SB.PCI0.LPC.COM2)
    {
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            LETR ()
            LDN = 0x05
            INTR = Zero
            ACTR = Zero
            LEXT ()
        }

        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
        {
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {3}
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {4}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {3}
                IO (Decode16,
                    0x02E8,             // Range Minimum
                    0x02E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFnNoPri ()
            {
                IRQNoFlags ()
                    {4}
                IO (Decode16,
                    0x03E8,             // Range Minimum
                    0x03E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {4,7,10}
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {3,7,10}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {4,7,10}
                IO (Decode16,
                    0x02E8,             // Range Minimum
                    0x02E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            StartDependentFn (0x02, 0x00)
            {
                IRQNoFlags ()
                    {3,7,10}
                IO (Decode16,
                    0x03E8,             // Range Minimum
                    0x03E8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
            }
            EndDependentFn ()
        })
        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, 0x01, IRQW)
            CreateByteField (Arg0, 0x05, IOLO)
            CreateByteField (Arg0, 0x06, IOHI)
            LETR ()
            LDN = 0x05
            IOAL = IOLO /* \_SB_.PCI0.LPC_.COM2._SRS.IOLO */
            IOAH = IOHI /* \_SB_.PCI0.LPC_.COM2._SRS.IOHI */
            If ((IRQW == Zero))
            {
                INTR = Zero
            }
            Else
            {
                FindSetLeftBit (IRQW, Local0)
                INTR = Local0--
            }

            ACTR = One
            LEXT ()
            If ((IOLO == 0xF8))
            {
                If ((IOHI == 0x03))
                {
                    COMB = Zero
                }
                Else
                {
                    COMB = 0x01
                }
            }
            ElseIf ((IOHI == 0x03))
            {
                COMB = 0x07
            }
            Else
            {
                COMB = 0x05
            }

            CBDN = One
        }
    }

    Scope (\_SB.PCI0.LPC.FDC0)
    {
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            LETR ()
            LDN = 0x00
            ACTR = Zero
            LEXT ()
        }

        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
        {
            IRQNoFlags ()
                {6}
            DMA (Compatibility, NotBusMaster, Transfer8, )
                {2}
            IO (Decode16,
                0x03F0,             // Range Minimum
                0x03F0,             // Range Maximum
                0x01,               // Alignment
                0x06,               // Length
                )
            IO (Decode16,
                0x03F7,             // Range Minimum
                0x03F7,             // Range Maximum
                0x01,               // Alignment
                0x01,               // Length
                )
        })
        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, 0x01, IRQW)
            CreateByteField (Arg0, 0x04, DMAC)
            CreateByteField (Arg0, 0x08, IOLO)
            CreateByteField (Arg0, 0x09, IOHI)
            LETR ()
            LDN = 0x00
            IOAL = IOLO /* \_SB_.PCI0.LPC_.FDC0._SRS.IOLO */
            IOAH = IOHI /* \_SB_.PCI0.LPC_.FDC0._SRS.IOHI */
            If ((IRQW == Zero))
            {
                INTR = Zero
            }
            Else
            {
                FindSetLeftBit (IRQW, Local0)
                INTR = Local0--
            }

            If ((DMAC == Zero))
            {
                DMCH = 0x04
            }
            Else
            {
                FindSetLeftBit (DMAC, Local0)
                DMCH = Local0--
            }

            ACTR = One
            LEXT ()
            If ((IOLO == 0xF0))
            {
                FDCD = Zero
            }
            Else
            {
                FDCD = 0x01
            }

            FPDN = One
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (S3D, 0, NotSerialized)
        {
            If (WNME)
            {
                Return (0x02)
            }
            Else
            {
                Return (0x03)
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.HUB)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }
    }

    Scope (\_SB.PCI0.PEG1)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }
    }

    Scope (\_SB.PCI0.PCX1)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }
    }

    Scope (\_SB.PCI0.PCX2)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }
    }

    Scope (\_SB.PCI0.IGBE)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }
    }

    Scope (\_SB.PCI0.USB1)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.USB2)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.USB3)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.USB4)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.USB5)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.EUS1)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Scope (\_SB.PCI0.EUS2)
    {
        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (\_SB.PCI0.S3D ())
        }
    }

    Name (\_S3, Package (0x02)  // _S3_: S3 System State
    {
        0x00, 
        0x05
    })
    Scope (\_SB.PCI0)
    {
        Method (GTF, 2, Serialized)
        {
            Local0 = (Arg0 * 0x07)
            Name (HCTM, Buffer (Local0){})
            HCTM = Arg1
            Return (HCTM) /* \_SB_.PCI0.GTF_.HCTM */
        }

        Method (XGTF, 3, NotSerialized)
        {
            Local0 = Zero
            Local1 = Zero
            Local2 = (Arg2 + 0x06)
            While ((\WSTB (0x00, 0x80, 0x0BB8, Local2) && (Local0 < Arg0)))
            {
                Local3 = Zero
                While ((Local3 < 0x07))
                {
                    Local4 = (Local3 + Arg2)
                    OTFB (DerefOf (Arg1 [Local1]), Local4)
                    Local1++
                    Local3++
                }

                Local0++
            }
        }

        Method (OTFB, 2, NotSerialized)
        {
            OperationRegion (IDEX, SystemIO, Arg1, 0x01)
            Field (IDEX, ByteAcc, NoLock, Preserve)
            {
                I1XX,   8
            }

            I1XX = Arg0
        }

        Method (AAPB, 1, NotSerialized)
        {
            PS0D |= Arg0
            If ((PS0D == PS0F))
            {
                S3OC = Zero
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (SATA)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            OperationRegion (SATP, PCI_Config, 0x00, 0x94)
            Field (SATP, DWordAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                PSCM,   32, 
                PSCL,   32, 
                SSCM,   32, 
                SSCL,   32
            }

            Field (SATP, ByteAcc, NoLock, Preserve)
            {
                Offset (0x09), 
                PNAV,   1, 
                    ,   1, 
                SNAV,   1, 
                Offset (0x92), 
                SPWR,   4, 
                Offset (0x93), 
                SPRS,   4
            }

            Method (PBLK, 1, NotSerialized)
            {
                If (PNAV)
                {
                    Return ((Arg0 + (PSCM & 0xFFFFFFFE)))
                }
                Else
                {
                    Return ((Arg0 + 0x01F0))
                }
            }

            Method (SBLK, 1, NotSerialized)
            {
                If (SNAV)
                {
                    Return ((Arg0 + (SSCM & 0xFFFFFFFE)))
                }
                Else
                {
                    Return ((Arg0 + 0x0170))
                }
            }

            Method (WSPP, 1, NotSerialized)
            {
                If (!(WN98 || WNME))
                {
                    Local0 = 0x01F4
                    While ((!(SPRS & Arg0) && Local0))
                    {
                        Sleep (0x01)
                        Local0--
                    }
                }
                Else
                {
                    Local0 = 0xC350
                    While ((!(SPRS & Arg0) && Local0))
                    {
                        Stall (0x0A)
                        Local0--
                    }
                }

                Return (Local0)
            }

            Method (SPRO, 2, Serialized)
            {
                OperationRegion (SCTL, SystemIO, Arg1, 0x01)
                Field (SCTL, ByteAcc, NoLock, Preserve)
                {
                    SSTS,   8
                }

                If ((!WSPP (Arg0) || (SSTS == 0x7F)))
                {
                    SPWR &= ~Arg0 /* \_SB_.PCI0.SATA.SPWR */
                    \STAL (0x01)
                    SPWR |= Arg0 /* \_SB_.PCI0.SATA.SPWR */
                    WSPP (Arg0)
                    \WNST (0x7F, 0xFF, 0xC8, Arg1)
                }
            }
        }
    }

    Scope (\_SB.PCI0.SATA)
    {
        Device (SAT0)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Mutex (S0MX, 0x00)
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Return (S0TB) /* \S0TB */
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                S0TB = Arg0
                STMC |= 0x04 /* \STMC */
                SSMI = STMS /* \STMS */
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (S3OC)
                {
                    \_SB.PCI0.AAPB (0x40)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                Noop
            }
        }
    }

    Scope (\_SB.PCI0.SATA.SAT0)
    {
        Device (DRV0)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                Acquire (\_SB.PCI0.SATA.SAT0.S0MX, 0xFFFF)
                \_SB.PCI0.SATA.SAT0.DRV0.PS0 ()
                If ((S3OC && PF0S))
                {
                    \_SB.PCI0.SATA.SAT0.DRV1.PS0 ()
                }

                Release (\_SB.PCI0.SATA.SAT0.S0MX)
            }

            Method (PS0, 0, NotSerialized)
            {
                If ((S3OC && !PD0M))
                {
                    \_SB.PCI0.SATA.SPRO (0x01, \_SB.PCI0.SATA.PBLK (0x07))
                    \_SB.PCI0.AAPB (0x0400)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                Noop
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                Return (\_SB.PCI0.GTF (S0CC, S0CB))
            }
        }
    }

    Scope (\_SB.PCI0.SATA)
    {
        Device (SAT1)
        {
            Name (_ADR, 0x01)  // _ADR: Address
            Mutex (S1MX, 0x00)
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Return (S1TB) /* \S1TB */
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                S1TB = Arg0
                STMC |= 0x08 /* \STMC */
                SSMI = STMS /* \STMS */
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (S3OC)
                {
                    \_SB.PCI0.AAPB (0x80)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                Noop
            }
        }
    }

    Scope (\_SB.PCI0.SATA.SAT1)
    {
        Device (DRV0)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                Acquire (\_SB.PCI0.SATA.SAT1.S1MX, 0xFFFF)
                \_SB.PCI0.SATA.SAT1.DRV0.PS0 ()
                If ((S3OC && PF1S))
                {
                    \_SB.PCI0.SATA.SAT1.DRV1.PS0 ()
                }

                Release (\_SB.PCI0.SATA.SAT1.S1MX)
            }

            Method (PS0, 0, NotSerialized)
            {
                If ((S3OC && !PD1M))
                {
                    \_SB.PCI0.SATA.SPRO (0x02, \_SB.PCI0.SATA.SBLK (0x07))
                    \_SB.PCI0.AAPB (0x1000)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                Noop
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                Return (\_SB.PCI0.GTF (S1CC, S1CB))
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (WDTO)
            {
                WDTV = Zero
                WDTS = One
                WDTN = Zero
                WDTO = Zero
                If (WMIT)
                {
                    \_SB.WMID.WMBB (0x01)
                }

                If (WMIF)
                {
                    \_SB.WMID.WMBB (0x02)
                }

                If (WMIH)
                {
                    \_SB.WMID.WMBB (0x03)
                }
            }

            If (RI1U)
            {
                Notify (\_SB.PCI0.LPC.COM1, 0x02) // Device Wake
                RI1U = One
            }

            If (RI2U)
            {
                Notify (\_SB.PCI0.LPC.COM2, 0x02) // Device Wake
                RI2U = One
            }

            If ((PKWU || PMWU))
            {
                Notify (\_SB.PBTN, 0x02) // Device Wake
                PMWU = Zero
                PKWU = Zero
            }

            SIPU = One
        }
    }

    Method (MSCW, 1, NotSerialized)
    {
        If ((Arg0 == 0x04))
        {
            PSS4 ()
        }
    }

    Scope (\_SB)
    {
        Device (WMID)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x0104)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x34, 0xF0, 0xB7, 0x6F,  // AA..4..o
                /* 0018 */  0x63, 0x2C, 0xE9, 0x45, 0xBE, 0x91, 0x3D, 0x44,  // c,.E..=D
                /* 0020 */  0xE2, 0xC7, 0x07, 0xE4, 0x41, 0x43, 0x02, 0x00,  // ....AC..
                /* 0028 */  0x3F, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // ?.2.=f'C
                /* 0030 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0038 */  0x41, 0x49, 0x03, 0x00, 0xD8, 0x90, 0xB5, 0xC9,  // AI......
                /* 0040 */  0xE4, 0xE7, 0xC5, 0x4D, 0xBB, 0x0F, 0xCB, 0x8A,  // ...M....
                /* 0048 */  0x35, 0x22, 0x02, 0x7E, 0x41, 0x44, 0x01, 0x02,  // 5".~AD..
                /* 0050 */  0x35, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 5d..B..B
                /* 0058 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 0060 */  0x41, 0x45, 0x06, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // AE..6d..
                /* 0068 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
                /* 0070 */  0x24, 0xF2, 0x0C, 0x9A, 0x42, 0x45, 0x0E, 0x00,  // $...BE..
                /* 0078 */  0x3C, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // <.2.=f'C
                /* 0080 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0088 */  0x41, 0x46, 0x17, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // AF..=.2.
                /* 0090 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
                /* 0098 */  0xAD, 0xB9, 0xBF, 0x05, 0x41, 0x47, 0x19, 0x00,  // ....AG..
                /* 00A0 */  0x3E, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // >.2.=f'C
                /* 00A8 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 00B0 */  0x41, 0x48, 0x78, 0x01, 0x79, 0x42, 0xF2, 0x95,  // AHx.yB..
                /* 00B8 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 00C0 */  0xC6, 0x7E, 0xF6, 0x1C, 0xA0, 0x00, 0x01, 0x08,  // .~......
                /* 00C8 */  0x5B, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // [.......
                /* 00D0 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 00D8 */  0x42, 0x42, 0x02, 0x02, 0x2D, 0x7C, 0x22, 0x41,  // BB..-|"A
                /* 00E0 */  0xE1, 0x80, 0x3F, 0x42, 0x8B, 0x8E, 0x87, 0xE3,  // ..?B....
                /* 00E8 */  0x27, 0x55, 0xA0, 0xEB, 0x42, 0x43, 0x07, 0x00,  // 'U..BC..
                /* 00F0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00F8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0100 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
            })
            Name (ZBUF, Buffer (0x1040){})
            Name (GETN, Buffer (0x0400){})
            Name (GETV, Buffer (0x0400){})
            Name (GETP, Buffer (0x0400){})
            Name (GETZ, Buffer (0x0400){})
            Name (STPW, Buffer (0x11)
            {
                /* 0000 */  0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x50, 0x61,  // Setup Pa
                /* 0008 */  0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x20, 0x33,  // ssword 3
                /* 0010 */  0x32                                             // 2
            })
            Name (POPW, Buffer (0x14)
            {
                /* 0000 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x2D, 0x4F, 0x6E,  // Power-On
                /* 0008 */  0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72,  //  Passwor
                /* 0010 */  0x64, 0x20, 0x33, 0x32                           // d 32
            })
            Method (WMAD, 3, Serialized)
            {
                \_SB.WMID.REGZ ()
                EBX = 0x01
                Local0 = 0x00
                Local1 = 0x00
                Local3 = 0x00
                Local4 = 0x00
                Local5 = 0x00
                GETN = GETZ /* \_SB_.WMID.GETZ */
                GETV = GETZ /* \_SB_.WMID.GETZ */
                GETP = GETZ /* \_SB_.WMID.GETZ */
                If ((Arg1 == 0x03))
                {
                    Local3 = Arg2
                    While ((Local1 != 0x07))
                    {
                        Local0 = 0x00
                        Local2 = 0x02
                        GETN = DerefOf (DerefOf (EVNT [Local1]) [0x00])
                        GETV = Local3
                        Local4 = DerefOf (GETV [0x00])
                        Local4 = (Local4 / 0x02)
                        While (((Local0 != Local4) && (DerefOf (GETV [Local2]) == 
                            DerefOf (GETN [Local0]))))
                        {
                            Local0++
                            Local2++
                            Local2++
                        }

                        If ((Local0 == Local4))
                        {
                            TEVT = 0x01
                            EBX = Local1
                            Notify (WMID, 0xA0) // Device-Specific
                            Return (0x00)
                        }

                        Local1++
                    }

                    Return (0x05)
                }

                If ((Arg1 == 0x02))
                {
                    EBX = 0x02
                }

                If ((Arg1 == 0x01))
                {
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETN [Local3] = DerefOf (Arg2 [Local0])
                        If ((Local4 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (STPW [Local3])))
                            {
                                Local4 = 0x00
                                ECX = 0x01
                            }
                            Else
                            {
                                Local4 = 0x01
                                ECX = 0x00
                            }
                        }

                        If ((Local5 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (POPW [Local3])))
                            {
                                Local5 = 0x00
                                ECX = 0x02
                            }
                            Else
                            {
                                Local5 = 0x01
                                ECX = 0x00
                            }
                        }

                        If ((DerefOf (Arg2 [Local0]) == 0x00))
                        {
                            Local1 = 0x00
                        }

                        Local0 += 0x02
                        Local3++
                    }

                    Local3 = 0x00
                    Local4 = 0x00
                    Local5 = 0x00
                    Local1 = 0x00
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETV [Local3] = DerefOf (Arg2 [Local0])
                        If ((DerefOf (Arg2 [Local0]) == 0x00))
                        {
                            GETV [Local3] = 0x20
                        }

                        Local0 += 0x02
                        Local3++
                    }
                }

                Local3 = 0x00
                Local0++
                Local1 = DerefOf (Arg2 [Local0])
                Local1 <<= 0x08
                Local0--
                Local1 += DerefOf (Arg2 [Local0])
                Local0 += 0x02
                Local1 += Local0
                While ((Local0 < Local1))
                {
                    GETP [Local3] = DerefOf (Arg2 [Local0])
                    If ((DerefOf (Arg2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }

                    Local0 += 0x02
                    Local3++
                }

                If ((Arg1 == 0x01))
                {
                    If ((0x00 != ECX))
                    {
                        EAX = 0x00
                        Local0 = 0x00
                        If ((DerefOf (GETP [Local0]) == 0x00))
                        {
                            EAX = 0x02
                            If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                            {
                                EAX = 0x01
                            }
                        }

                        If ((0x00 == EAX))
                        {
                            Local0 = 0x00
                            While ((((DerefOf (GETP [Local0]) != 0x00) && 
                                (DerefOf (GETV [Local0]) != 0x00)) && (EAX != 0x02)))
                            {
                                If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }

                                Local0++
                            }

                            If ((0x01 == EAX))
                            {
                                If (((DerefOf (GETV [Local0]) == 0x00) && (DerefOf (
                                    GETP [Local0]) == 0x00)))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }
                            }
                        }
                    }
                }

                Return (WMIE (GETN, GETV, GETP, Arg1))
            }

            Method (WMIE, 4, Serialized)
            {
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local2 = WMIB /* \WMIB */
                Local0 = 0x00
                Local3 = 0x00
                If ((Arg3 != 0x02))
                {
                    If ((0x00 == EAX))
                    {
                        While ((DerefOf (Arg0 [Local0]) != 0x00))
                        {
                            Local2 [Local3] = DerefOf (Arg0 [Local0])
                            Local0++
                            Local3++
                        }

                        Local2 [Local3] = 0x00
                        Local3++
                        Local0 = 0x00
                    }

                    While ((DerefOf (Arg1 [Local0]) != 0x00))
                    {
                        Local2 [Local3] = DerefOf (Arg1 [Local0])
                        Local0++
                        Local3++
                    }

                    Local2 [Local3] = 0x00
                    Local3++
                    Local0 = 0x00
                }

                While ((DerefOf (Arg2 [Local0]) != 0x00))
                {
                    Local2 [Local3] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local3++
                }

                Local2 [Local3] = 0x00
                WMIB = Local2
                SSMI = WM10 /* \WM10 */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local7 = EAX /* \EAX_ */
                If ((Arg3 != 0x02))
                {
                    Notify (WMID, 0xA0) // Device-Specific
                }

                Return (Local7)
            }

            Name (SEN1, Package (0x06)
            {
                Package (0x0C)
                {
                    "CPU Fan Speed", 
                    "Reports CPU fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Front Chassis Fan Speed", 
                    "Reports front chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Rear Chassis Fan Speed", 
                    "Reports rear chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Power Supply Fan Speed", 
                    "Reports power supply fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "CPU Thermal Index", 
                    "Reports CPU Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Caution", 
                    "Critical", 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Chassis Thermal Index", 
                    "Reports chassis\' Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Sensor Not Present ", 
                    " ", 
                    0x01, 
                    0x00, 
                    0x00
                }
            })
            Method (WQAE, 1, Serialized)
            {
                If ((Arg0 == 0x00))
                {
                    ECX = 0x00
                    EBX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    ECX = 0x01
                    EBX = 0x03
                }

                If ((Arg0 == 0x02))
                {
                    ECX = 0x02
                    EBX = 0x02
                }

                If ((Arg0 == 0x03))
                {
                    ECX = 0x03
                    EBX = 0x01
                }

                If ((Arg0 < 0x04))
                {
                    EAX = 0x00
                    SSMI = WMBH /* \WMBH */
                    If ((EAX == 0xFFFF0000))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Not Present"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x0C
                    }
                    Else
                    {
                        EAX = (0x23C34600 / (EAX * 0x6F))
                        DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* \EAX_ */
                        If ((EAX <= 0xC8))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Stalled"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x0A
                            DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                        }
                        Else
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                        }
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x04))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x04
                    SSMI = WMBH /* \WMBH */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* \EAX_ */
                    If ((EDX == 0x00))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    }

                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Caution"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                    }

                    If ((EDX == 0x02))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Critical"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x05
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x05))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x05
                    SSMI = WMBH /* \WMBH */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* \EAX_ */
                    DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Sensor Not Present"
                        DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }
            }

            Name (SBLK, " ")
            Name (SEN2, Package (0x09)
            {
                " ", 
                " ", 
                0x01, 
                " ", 
                0x00, 
                " ", 
                " ", 
                " ", 
                ""
            })
            Method (WQBE, 1, Serialized)
            {
                SEN2 [0x00] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x01] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x03] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x06] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x07] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x04] = 0x00
                SEN2 [0x05] = SBLK /* \_SB_.WMID.SBLK */
                ECX = 0x06
                EAX = Arg0
                SSMI = WMBH /* \WMBH */
                If ((EAX == 0x01))
                {
                    SEN2 [0x00] = "BIOS Post Error"
                    SEN2 [0x03] = "BIOS Post Error"
                    SEN2 [0x06] = "Post Error Occurred"
                    SEN2 [0x07] = "No Error Reported"
                    SEN2 [0x05] = "Post Error Occurred"
                    If ((Arg0 == 0x00))
                    {
                        SEN2 [0x01] = "Out of memory space for option ROMs"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        SEN2 [0x01] = "Memory Size Error"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x02))
                    {
                        SEN2 [0x01] = "DIMM Configuration Warning"
                        SEN2 [0x04] = 0x03
                    }

                    If ((Arg0 == 0x03))
                    {
                        SEN2 [0x01] = "CPU fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x04))
                    {
                        SEN2 [0x01] = "Chassis fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x05))
                    {
                        SEN2 [0x01] = "Power supply fan failed"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x06))
                    {
                        SEN2 [0x01] = "The computer cover has been removed"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x07))
                    {
                        SEN2 [0x01] = "Front Audio Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x08))
                    {
                        SEN2 [0x01] = "Front USB Not Connected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x09))
                    {
                        SEN2 [0x01] = "Multi-Bay Riser Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x0A))
                    {
                        SEN2 [0x01] = "SMART Hard Drive detects imminent failure"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x0B))
                    {
                        SEN2 [0x01] = "Microcode Update Error"
                        SEN2 [0x04] = 0x06
                    }

                    If ((Arg0 == 0x0C))
                    {
                        SEN2 [0x01] = "System Time Not Set"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x0D))
                    {
                        SEN2 [0x01] = "Memory not configured correctly for proper MEBx execution"
                        SEN2 [0x04] = 0x03
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (SEN2) /* \_SB_.WMID.SEN2 */
            }

            Name (SETN, "                                                                                                                                                                                                                                                               ")
            Name (SETV, "                                                                                                                                                                                                                                                               ")
            Name (SETP, "                                                                                                                                                                                                                                                               ")
            Name (SETB, Buffer (0x0300){})
            Name (SETZ, Buffer (0x0300){})
            Name (STRP, Package (0x0B)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAF, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                Local4 = 0x00
                Local5 = 0x00
                STRP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x03] = 0x01
                STRP [0x04] = 0x00
                STRP [0x05] = 0x00
                STRP [0x06] = 0x00
                STRP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x08] = 0x00
                STRP [0x09] = 0x00
                STRP [0x0A] = 0x00
                If ((Arg0 <= 0x13))
                {
                    EDX = 0x01
                    ECX = Arg0
                }
                Else
                {
                    EDX = 0x07
                    ECX = (Arg0 - 0x14)
                }

                EAX = 0x01
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* \WM10 */
                Local0 = 0x00
                Local1 = 0xEA
                Local2 = WMIB /* \WMIB */
                STRP [0x06] = ECX /* \ECX_ */
                STRP [0x03] = EAX /* \EAX_ */
                STRP [0x04] = EBX /* \EBX_ */
                Local4 = EDX /* \EDX_ */
                STRP [0x08] = EDI /* \EDI_ */
                STRP [0x05] = (Local4 & 0xFF)
                STRP [0x0A] = (EDX >> 0x10)
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local0] = DerefOf (Local2 [Local0])
                    Local0++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETN = SETB /* \_SB_.WMID.SETB */
                STRP [0x00] = SETN /* \_SB_.WMID.SETN */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0xEA
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETV = SETB /* \_SB_.WMID.SETB */
                STRP [0x01] = SETV /* \_SB_.WMID.SETV */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x00
                Local0++
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                }

                Local0++
                SETB [Local3] = 0x00
                SETP = SETB /* \_SB_.WMID.SETB */
                STRP [0x02] = SETP /* \_SB_.WMID.SETP */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (STRP) /* \_SB_.WMID.STRP */
            }

            Name (PASP, Package (0x0E)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                0x00, 
                "kbd", 
                " ", 
                0x00
            })
            Method (WQAC, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                PASP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x03] = 0x01
                PASP [0x04] = 0x00
                PASP [0x05] = 0x00
                PASP [0x06] = 0x00
                PASP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x08] = 0x00
                PASP [0x09] = 0x00
                PASP [0x0A] = 0x00
                PASP [0x0D] = 0x00
                If ((Arg0 == 0x00))
                {
                    EAX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    EAX = 0x01
                }

                DSMI = 0x0B
                SSMI = WMPI /* \WMPI */
                PASP [0x0D] = ECX /* \ECX_ */
                ECX = Arg0
                EDX = 0x04
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* \WM10 */
                Local0 = 0x00
                Local1 = 0xEA
                Local2 = WMIB /* \WMIB */
                PASP [0x06] = ECX /* \ECX_ */
                PASP [0x03] = EAX /* \EAX_ */
                PASP [0x04] = EBX /* \EBX_ */
                PASP [0x08] = EDI /* \EDI_ */
                Local4 = EDX /* \EDX_ */
                PASP [0x05] = (Local4 & 0xFF)
                PASP [0x0A] = (EDX >> 0x10)
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local0] = DerefOf (Local2 [Local0])
                    Local0++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETN = SETB /* \_SB_.WMID.SETB */
                PASP [0x00] = SETN /* \_SB_.WMID.SETN */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0xEA
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    Local0++
                    Local3++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                Local0++
                Local3 = 0x00
                Local1 = 0x00
                Local0++
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                }

                Local0++
                SETB [Local3] = 0x00
                SETP = SETB /* \_SB_.WMID.SETB */
                PASP [0x02] = SETP /* \_SB_.WMID.SETP */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (PASP) /* \_SB_.WMID.PASP */
            }

            Name (INTP, Package (0x0C)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAG, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                INTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x03] = 0x01
                INTP [0x04] = 0x00
                INTP [0x05] = 0x00
                INTP [0x06] = 0x00
                INTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x08] = 0x00
                INTP [0x09] = 0x00
                INTP [0x0A] = 0x00
                INTP [0x0B] = 0x00
                If ((Arg0 <= 0x02))
                {
                    ECX = Arg0
                    EDX = 0x03
                }
                Else
                {
                    ECX = (Arg0 - 0x03)
                    EDX = 0x0A
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* \WM10 */
                Local0 = 0x00
                Local1 = 0xEA
                Local2 = WMIB /* \WMIB */
                INTP [0x06] = ECX /* \ECX_ */
                INTP [0x03] = EAX /* \EAX_ */
                INTP [0x04] = EBX /* \EBX_ */
                INTP [0x05] = EDX /* \EDX_ */
                INTP [0x08] = EDI /* \EDI_ */
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local0] = DerefOf (Local2 [Local0])
                    Local0++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETN = SETB /* \_SB_.WMID.SETB */
                INTP [0x00] = SETN /* \_SB_.WMID.SETN */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0xEA
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                Local0++
                SETV = SETB /* \_SB_.WMID.SETB */
                INTP [0x01] = SETV /* \_SB_.WMID.SETV */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x00
                Local0++
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                }

                SETB [Local3] = 0x00
                SETP = SETB /* \_SB_.WMID.SETB */
                INTP [0x02] = SETP /* \_SB_.WMID.SETP */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (INTP) /* \_SB_.WMID.INTP */
            }

            Name (STR1, "                                               ")
            Name (STR2, "                                               ")
            Name (STR3, "                                               ")
            Name (STR4, "                                               ")
            Name (STR5, "                                               ")
            Name (STR6, "                                               ")
            Name (STR7, "                                               ")
            Name (STR8, "                                               ")
            Name (STR9, "                                               ")
            Name (STRA, "                                               ")
            Name (STRB, "                                               ")
            Name (STRC, "                                               ")
            Name (STRD, "                                               ")
            Name (STRE, "                                               ")
            Name (STRF, "                                               ")
            Name (STRG, "                                               ")
            Name (STRH, "                                               ")
            Name (STRI, "                                                                                                              ")
            Name (STRJ, "                                                                                                              ")
            Name (STRS, "                                               ")
            Name (ENUP, Package (0x19)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                " ", 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAH, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                ENUP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x03] = 0x01
                ENUP [0x04] = 0x00
                ENUP [0x05] = 0x00
                ENUP [0x06] = 0x00
                ENUP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x08] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x09] = 0x00
                ENUP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0B] = 0x00
                ENUP [0x0C] = 0x00
                ENUP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                If ((Arg0 <= 0x5A))
                {
                    EDX = 0x00
                    ECX = Arg0
                }

                If ((Arg0 >= 0x5B))
                {
                    EDX = 0x09
                    ECX = (Arg0 - 0x5B)
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* \WM10 */
                Local0 = 0x00
                Local1 = 0xEA
                Local2 = WMIB /* \WMIB */
                ENUP [0x06] = ECX /* \ECX_ */
                ENUP [0x03] = EAX /* \EAX_ */
                ENUP [0x04] = EBX /* \EBX_ */
                ENUP [0x05] = EDX /* \EDX_ */
                ENUP [0x09] = EDI /* \EDI_ */
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local0] = DerefOf (Local2 [Local0])
                    Local0++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETN = SETB /* \_SB_.WMID.SETB */
                ENUP [0x00] = SETN /* \_SB_.WMID.SETN */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x3B
                Local4 = Local0
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                Local0++
                Local3--
                SETB [Local3] = 0x00
                SETV = SETB /* \_SB_.WMID.SETB */
                ENUP [0x01] = SETV /* \_SB_.WMID.SETV */
                Local5 = 0x00
                Local6 = 0x2C
                Local3 = 0x00
                Local1 = 0x3B
                While ((Local1 != DerefOf (Local2 [Local4])))
                {
                    If ((DerefOf (Local2 [Local4]) == 0x00))
                    {
                        Local6 = DerefOf (Local2 [Local4])
                        Local1 = DerefOf (Local2 [Local4])
                    }

                    Local0 = 0x00
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    While ((Local6 != DerefOf (Local2 [Local4])))
                    {
                        SETB [Local0] = DerefOf (Local2 [Local4])
                        Local0++
                        If ((DerefOf (Local2 [Local4]) == 0x2A))
                        {
                            Local7 = Local5
                            Local3 = 0x01
                            Local0--
                        }

                        Local4++
                    }

                    If ((Local3 != 0x00))
                    {
                        STRD = SETB /* \_SB_.WMID.SETB */
                        ENUP [0x0A] = STRD /* \_SB_.WMID.STRD */
                        ENUP [0x0B] = Local7
                        Local3 = 0x00
                    }

                    If ((Local5 == 0x00))
                    {
                        STR1 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR1 /* \_SB_.WMID.STR1 */
                    }

                    If ((Local5 == 0x01))
                    {
                        STR2 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR2 /* \_SB_.WMID.STR2 */
                    }

                    If ((Local5 == 0x02))
                    {
                        STR3 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR3 /* \_SB_.WMID.STR3 */
                    }

                    If ((Local5 == 0x03))
                    {
                        STR4 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR4 /* \_SB_.WMID.STR4 */
                    }

                    If ((Local5 == 0x04))
                    {
                        STR5 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR5 /* \_SB_.WMID.STR5 */
                    }

                    If ((Local5 == 0x05))
                    {
                        STR6 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR6 /* \_SB_.WMID.STR6 */
                    }

                    If ((Local5 == 0x06))
                    {
                        STR7 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR7 /* \_SB_.WMID.STR7 */
                    }

                    If ((Local5 == 0x07))
                    {
                        STR8 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR8 /* \_SB_.WMID.STR8 */
                    }

                    If ((Local5 == 0x08))
                    {
                        STR9 = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STR9 /* \_SB_.WMID.STR9 */
                    }

                    If ((Local5 == 0x09))
                    {
                        STRA = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STRA /* \_SB_.WMID.STRA */
                    }

                    If ((Local5 == 0x0A))
                    {
                        STRB = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STRB /* \_SB_.WMID.STRB */
                    }

                    If ((Local5 == 0x0B))
                    {
                        STRC = SETB /* \_SB_.WMID.SETB */
                        ENUP [(Local5 + 0x0D)] = STRC /* \_SB_.WMID.STRC */
                    }

                    Local4++
                    Local5++
                }

                ENUP [0x0C] = Local5
                Local4++
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x3B
                Local6 = 0xFF
                Local5 = 0x00
                While ((Local1 != DerefOf (Local2 [Local4])))
                {
                    While ((Local6 != DerefOf (Local2 [Local4])))
                    {
                        SETB [Local3] = DerefOf (Local2 [Local4])
                        Local4++
                        Local3++
                        If ((DerefOf (Local2 [Local4]) == 0x00))
                        {
                            Local6 = 0x00
                            Local1 = 0x00
                            Local3 = 0x00
                        }
                    }

                    If ((Local3 != 0x00))
                    {
                        SETB [Local3] = 0x00
                        If ((Local5 == 0x00))
                        {
                            STRI = SETB /* \_SB_.WMID.SETB */
                            ENUP [0x07] = STRI /* \_SB_.WMID.STRI */
                        }

                        If ((Local5 == 0x01))
                        {
                            STRJ = SETB /* \_SB_.WMID.SETB */
                            ENUP [0x08] = STRJ /* \_SB_.WMID.STRJ */
                        }
                    }

                    Local3 = 0x00
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local4++
                    Local5++
                }

                Local4++
                Local3 = 0x00
                Local1 = 0x00
                While ((Local1 != DerefOf (Local2 [Local4])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local4])
                    Local4++
                    Local3++
                }

                SETB [Local3] = 0x00
                SETP = SETB /* \_SB_.WMID.SETB */
                ENUP [0x02] = SETP /* \_SB_.WMID.SETP */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (ENUP) /* \_SB_.WMID.ENUP */
            }

            Name (LSTP, Package (0x1A)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAI, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                LSTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x03] = 0x01
                LSTP [0x04] = 0x00
                LSTP [0x05] = 0x00
                LSTP [0x06] = 0x00
                LSTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x08] = 0x00
                LSTP [0x09] = 0x00
                LSTP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0B] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0C] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x19] = SBLK /* \_SB_.WMID.SBLK */
                ECX = Arg0
                EDX = 0x08
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* \WM10 */
                Local0 = 0x00
                Local1 = 0xEA
                Local2 = WMIB /* \WMIB */
                LSTP [0x06] = ECX /* \ECX_ */
                LSTP [0x03] = EAX /* \EAX_ */
                LSTP [0x04] = EBX /* \EBX_ */
                LSTP [0x05] = EDX /* \EDX_ */
                LSTP [0x08] = EDI /* \EDI_ */
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local0] = DerefOf (Local2 [Local0])
                    Local0++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                SETB [Local0] = 0x00
                Local0++
                SETN = SETB /* \_SB_.WMID.SETB */
                LSTP [0x00] = SETN /* \_SB_.WMID.SETN */
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x3B
                Local4 = Local0
                While ((Local1 != DerefOf (Local2 [Local0])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local0])
                    Local0++
                    Local3++
                    If ((DerefOf (Local2 [Local0]) == 0x00))
                    {
                        Local1 = 0x00
                    }
                }

                Local0++
                Local3--
                SETB [Local3] = 0x00
                SETV = SETB /* \_SB_.WMID.SETB */
                LSTP [0x01] = SETV /* \_SB_.WMID.SETV */
                Local5 = 0x00
                Local6 = 0x2C
                Local3 = 0x00
                Local1 = 0x3B
                While ((Local1 != DerefOf (Local2 [Local4])))
                {
                    If ((DerefOf (Local2 [Local4]) == 0x00))
                    {
                        Local1 = DerefOf (Local2 [Local4])
                        Local6 = DerefOf (Local2 [Local4])
                    }

                    Local0 = 0x00
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    While ((Local6 != DerefOf (Local2 [Local4])))
                    {
                        SETB [Local0] = DerefOf (Local2 [Local4])
                        Local0++
                        Local4++
                    }

                    If ((Local5 == 0x00))
                    {
                        STR1 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR1 /* \_SB_.WMID.STR1 */
                    }

                    If ((Local5 == 0x01))
                    {
                        STR2 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR2 /* \_SB_.WMID.STR2 */
                    }

                    If ((Local5 == 0x02))
                    {
                        STR3 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR3 /* \_SB_.WMID.STR3 */
                    }

                    If ((Local5 == 0x03))
                    {
                        STR4 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR4 /* \_SB_.WMID.STR4 */
                    }

                    If ((Local5 == 0x04))
                    {
                        STR5 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR5 /* \_SB_.WMID.STR5 */
                    }

                    If ((Local5 == 0x05))
                    {
                        STR6 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR6 /* \_SB_.WMID.STR6 */
                    }

                    If ((Local5 == 0x06))
                    {
                        STR7 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR7 /* \_SB_.WMID.STR7 */
                    }

                    If ((Local5 == 0x07))
                    {
                        STR8 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR8 /* \_SB_.WMID.STR8 */
                    }

                    If ((Local5 == 0x08))
                    {
                        STR9 = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STR9 /* \_SB_.WMID.STR9 */
                    }

                    If ((Local5 == 0x09))
                    {
                        STRA = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRA /* \_SB_.WMID.STRA */
                    }

                    If ((Local5 == 0x0A))
                    {
                        STRB = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRB /* \_SB_.WMID.STRB */
                    }

                    If ((Local5 == 0x0B))
                    {
                        STRC = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRC /* \_SB_.WMID.STRC */
                    }

                    If ((Local5 == 0x0C))
                    {
                        STRD = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRD /* \_SB_.WMID.STRD */
                    }

                    If ((Local5 == 0x0D))
                    {
                        STRE = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRE /* \_SB_.WMID.STRE */
                    }

                    If ((Local5 == 0x0E))
                    {
                        STRF = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRF /* \_SB_.WMID.STRF */
                    }

                    If ((Local5 == 0x0F))
                    {
                        STRG = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRG /* \_SB_.WMID.STRG */
                    }

                    If ((Local5 == 0x10))
                    {
                        STRH = SETB /* \_SB_.WMID.SETB */
                        LSTP [(Local5 + 0x0A)] = STRH /* \_SB_.WMID.STRH */
                    }

                    Local4++
                    Local5++
                }

                LSTP [0x09] = Local5
                Local4++
                SETB = SETZ /* \_SB_.WMID.SETZ */
                Local3 = 0x00
                Local1 = 0x00
                Local4++
                While ((Local1 != DerefOf (Local2 [Local4])))
                {
                    SETB [Local3] = DerefOf (Local2 [Local4])
                    Local4++
                    Local3++
                }

                SETB [Local3] = 0x00
                SETP = SETB /* \_SB_.WMID.SETB */
                LSTP [0x02] = SETP /* \_SB_.WMID.SETP */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (LSTP) /* \_SB_.WMID.LSTP */
            }

            Method (WMSC, 0, Serialized)
            {
                EAX = 0x00
                SSMI = WMPI /* \WMPI */
            }

            Method (WMAA, 3, Serialized)
            {
                CreateDWordField (Arg2, 0x00, SSIG)
                CreateDWordField (Arg2, 0x04, COMM)
                CreateDWordField (Arg2, 0x08, CTYP)
                CreateDWordField (Arg2, 0x0C, DSIN)
                If ((Arg1 == 0x01))
                {
                    Local0 = 0x00
                }

                If ((Arg1 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg1 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg1 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg1 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)){}
                CreateDWordField (Local1, 0x00, SOUT)
                CreateDWordField (Local1, 0x04, RCOD)
                Local5 = DSIN /* \_SB_.WMID.WMAA.DSIN */
                If ((DSIN > 0x1030))
                {
                    Local5 = 0x1030
                }

                CreateField (Arg2, 0x00, ((Local5 + 0x10) * 0x08), DTIN)
                WMIB = DTIN /* \_SB_.WMID.WMAA.DTIN */
                SOUT = 0x4C494146
                RCOD = 0x02
                DSMI = 0x00
                \_SB.WMID.WMSC ()
                If ((EAX == 0x00))
                {
                    SOUT = 0x53534150
                    RCOD = 0x04
                    If ((0x00020000 == COMM))
                    {
                        If ((0x01 == CTYP))
                        {
                            DSMI = 0x01
                        }

                        If ((0x02 == CTYP))
                        {
                            DSMI = 0x02
                        }

                        If ((0x03 == CTYP))
                        {
                            DSMI = 0x03
                        }

                        If ((0x04 == CTYP))
                        {
                            DSMI = 0x04
                        }

                        If ((0x05 == CTYP))
                        {
                            DSMI = 0x05
                        }

                        If ((0x06 == CTYP))
                        {
                            DSMI = 0x06
                        }

                        If ((0x07 == CTYP))
                        {
                            DSMI = 0x07
                        }

                        If ((0x08 == CTYP))
                        {
                            DSMI = 0x08
                        }

                        If ((0x09 == CTYP))
                        {
                            DSMI = 0x09
                        }

                        If ((0x0A == CTYP))
                        {
                            DSMI = 0x0A
                        }

                        EAX = 0x00
                        SSMI = WMPI /* \WMPI */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020001 == COMM))
                    {
                        EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                        DSMI = 0x0C
                        EAX = 0x00
                        SSMI = WMPI /* \WMPI */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020002 == COMM))
                    {
                        EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                        DSMI = 0x0D
                        EAX = 0x00
                        SSMI = WMPI /* \WMPI */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }
                }

                If ((0x00 == RCOD))
                {
                    RCOD = DerefOf (Local2 [0x00])
                    If ((0x00 == RCOD))
                    {
                        If ((DerefOf (Local2 [0x01]) <= Local0))
                        {
                            Local0 = 0x00
                            While ((Local0 < DerefOf (Local2 [0x01])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            SOUT = 0x53534150
                        }
                        Else
                        {
                            RCOD = 0x05
                        }
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (Local1)
            }

            Method (WMRD, 0, Serialized)
            {
                If ((ECX == 0x00))
                {
                    Local0 = Package (0x02)
                        {
                            0x00, 
                            0x00
                        }
                }
                Else
                {
                    Local1 = ECX /* \ECX_ */
                    Local0 = Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            Buffer (Local1){}
                        }
                }

                Local0 [0x00] = EAX /* \EAX_ */
                Local0 [0x01] = ECX /* \ECX_ */
                If ((EAX == 0x00))
                {
                    If ((ECX != 0x00))
                    {
                        Local1 = WMIB /* \WMIB */
                        Local2 = 0x00
                        While ((Local2 < ECX))
                        {
                            DerefOf (Local0 [0x02]) [Local2] = DerefOf (Local1 [
                                Local2])
                            Local2++
                        }
                    }
                }

                Return (Local0)
            }

            Name (EVNT, Package (0x09)
            {
                Package (0x05)
                {
                    "CPU Fan Stall", 
                    "CPU Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Front Chassis Fan Stall", 
                    " Front Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Rear Chassis Fan Stall", 
                    "Rear Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Power Supply Fan Stall", 
                    "Power Supply Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Thermal Caution", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x0A, 
                    0x04
                }, 

                Package (0x05)
                {
                    "Thermal Critical", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Security", 
                    "An attempt has been made to Access BIOS features unsuccessfully", 
                    0x04, 
                    0x0A, 
                    0x06
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Change", 
                    " ", 
                    0x04, 
                    0x05, 
                    0x02
                }, 

                Package (0x05)
                {
                    "Hood Intrusion", 
                    "The computer cover has been removed", 
                    0x03, 
                    0x00, 
                    0x01
                }
            })
            Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (TEVT)
                {
                    DerefOf (EVNT [EBX]) [0x01] = "TEST EVENT"
                    Return (DerefOf (EVNT [EBX]))
                }

                If (WMIT)
                {
                    WMIT = Zero
                    If ((EBX == 0x01))
                    {
                        Return (DerefOf (EVNT [0x04]))
                    }

                    If ((EBX == 0x02))
                    {
                        Return (DerefOf (EVNT [0x05]))
                    }
                }

                If (WMIF)
                {
                    WMIF = Zero
                    ECX = 0x00
                    EBX = 0x00
                    EAX = 0x00
                    SSMI = WMBH /* \WMBH */
                    If ((EAX != 0xFFFF0000))
                    {
                        EAX = (0x23C34600 / (EAX * 0x6F))
                        If ((EAX <= 0xC8))
                        {
                            Return (DerefOf (EVNT [0x00]))
                        }
                    }

                    ECX = 0x01
                    EBX = 0x01
                    EAX = 0x00
                    SSMI = WMBH /* \WMBH */
                    If ((EAX != 0xFFFF0000))
                    {
                        EAX = (0x23C34600 / (EAX * 0x6F))
                        If ((EAX <= 0xC8))
                        {
                            Return (DerefOf (EVNT [0x03]))
                        }
                    }

                    ECX = 0x02
                    EBX = 0x02
                    EAX = 0x00
                    SSMI = WMBH /* \WMBH */
                    If ((EAX != 0xFFFF0000))
                    {
                        EAX = (0x23C34600 / (EAX * 0x6F))
                        If ((EAX <= 0xC8))
                        {
                            Return (DerefOf (EVNT [0x02]))
                        }
                    }

                    ECX = 0x03
                    EBX = 0x03
                    EAX = 0x00
                    SSMI = WMBH /* \WMBH */
                    If ((EAX != 0xFFFF0000))
                    {
                        EAX = (0x23C34600 / (EAX * 0x6F))
                        If ((EAX <= 0xC8))
                        {
                            Return (DerefOf (EVNT [0x01]))
                        }
                    }
                }

                If (WMIP)
                {
                    WMIP = Zero
                    Return (DerefOf (EVNT [0x06]))
                }

                If (WMIH)
                {
                    WMIH = Zero
                    Return (DerefOf (EVNT [0x08]))
                }

                If (WMIS)
                {
                    WMIS = Zero
                    SETN = GETN /* \_SB_.WMID.GETN */
                    DerefOf (EVNT [0x07]) [0x01] = SETN /* \_SB_.WMID.SETN */
                    Return (DerefOf (EVNT [0x07]))
                }

                \_SB.WMID.REGZ ()
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
            }

            Method (WMBB, 1, Serialized)
            {
                Notify (WMID, 0xA0) // Device-Specific
            }

            Method (REGZ, 0, Serialized)
            {
                EAX = 0x00
                ECX = 0x00
                EDX = 0x00
                EBX = 0x00
            }

            Name (PEVT, Package (0x07)
            {
                "", 
                "", 
                "root\\wmi", 
                "HPBIOS_BIOSEvent", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQBC, 1, Serialized)
            {
                PEVT [0x00] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x00])
                PEVT [0x01] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x01])
                PEVT [0x04] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x02])
                PEVT [0x05] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x03])
                PEVT [0x06] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x04])
                Return (PEVT) /* \_SB_.WMID.PEVT */
            }

            Name (WQZZ, Buffer (0x1EC7)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xB7, 0x1E, 0x00, 0x00, 0x46, 0xBC, 0x00, 0x00,  // ....F...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xB2, 0x99, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x47, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // .G......
                /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
                /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
                /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
                /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
                /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
                /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
                /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
                /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
                /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
                /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
                /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
                /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
                /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
                /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
                /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0xE2, 0xA0,  // X...!...
                /* 00A0 */  0x84, 0x54, 0x19, 0x8A, 0x2C, 0xA2, 0x48, 0xA1,  // .T..,.H.
                /* 00A8 */  0x00, 0x67, 0x02, 0x84, 0xE1, 0x4A, 0x23, 0xA8,  // .g...J#.
                /* 00B0 */  0x10, 0x62, 0x45, 0x8A, 0xD5, 0xFE, 0x20, 0x48,  // .bE... H
                /* 00B8 */  0x7C, 0x0B, 0x10, 0x55, 0x80, 0x28, 0xD2, 0x68,  // |..U.(.h
                /* 00C0 */  0x50, 0xC3, 0x4B, 0x70, 0xB8, 0x1E, 0xEA, 0x39,  // P.Kp...9
                /* 00C8 */  0x76, 0x2E, 0x40, 0xFA, 0x24, 0x05, 0x72, 0x90,  // v.@.$.r.
                /* 00D0 */  0x67, 0x51, 0xE7, 0x38, 0x09, 0x48, 0x02, 0x63,  // gQ.8.H.c
                /* 00D8 */  0x25, 0xE8, 0x60, 0xE0, 0x50, 0x5C, 0x03, 0x6A,  // %.`.P\.j
                /* 00E0 */  0xC6, 0xC7, 0xCB, 0x04, 0xC1, 0xA1, 0x86, 0xE8,  // ........
                /* 00E8 */  0x81, 0x86, 0x3B, 0x81, 0x43, 0x64, 0x80, 0x9E,  // ..;.Cd..
                /* 00F0 */  0xD4, 0xD1, 0x60, 0x0E, 0x00, 0x1E, 0xDC, 0xC9,  // ..`.....
                /* 00F8 */  0xBC, 0x07, 0x94, 0x2A, 0xC0, 0xEC, 0x98, 0x35,  // ...*...5
                /* 0100 */  0xB0, 0x04, 0xC7, 0x63, 0xE8, 0xD3, 0x3D, 0x9F,  // ...c..=.
                /* 0108 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x8D, 0xCC,  // .N`..@..
                /* 0110 */  0xD0, 0x1E, 0xE5, 0x69, 0xC5, 0x0C, 0x79, 0xF8,  // ...i..y.
                /* 0118 */  0x87, 0xC5, 0xC4, 0x42, 0x48, 0x01, 0x84, 0xC6,  // ...BH...
                /* 0120 */  0x03, 0xEF, 0xFF, 0x3F, 0x1E, 0xF0, 0xDC, 0x00,  // ...?....
                /* 0128 */  0x9E, 0x09, 0x22, 0xBC, 0x12, 0xC4, 0xF6, 0x80,  // ..".....
                /* 0130 */  0x12, 0x0C, 0x0B, 0x21, 0x23, 0xAB, 0xF0, 0x78,  // ...!#..x
                /* 0138 */  0xE8, 0x28, 0xEC, 0x74, 0x38, 0x9A, 0x56, 0x3C,  // .(.t8.V<
                /* 0140 */  0x13, 0x0C, 0x07, 0xA1, 0x2F, 0x80, 0x04, 0x88,  // ..../...
                /* 0148 */  0x1A, 0x36, 0x3D, 0x2C, 0xF0, 0x73, 0x02, 0xBB,  // .6=,.s..
                /* 0150 */  0x19, 0x9C, 0xC1, 0x23, 0x80, 0x47, 0x72, 0x42,  // ...#.GrB
                /* 0158 */  0x3E, 0x4E, 0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE,  // >Nx`....
                /* 0160 */  0xA7, 0x4C, 0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71,  // .LFp...q
                /* 0168 */  0xC0, 0x43, 0xE1, 0x43, 0xF4, 0xF8, 0x4E, 0xF9,  // .C.C..N.
                /* 0170 */  0x78, 0x7D, 0xBA, 0xB0, 0xAC, 0x71, 0x42, 0xBF,  // x}...qB.
                /* 0178 */  0x43, 0x78, 0x76, 0xC7, 0xF0, 0xE4, 0x90, 0x60,  // Cxv....`
                /* 0180 */  0x44, 0x08, 0x39, 0x39, 0x05, 0xA0, 0x81, 0x4F,  // D.99...O
                /* 0188 */  0xF7, 0xEC, 0x22, 0x9C, 0xAE, 0x27, 0xE5, 0x40,  // .."..'.@
                /* 0190 */  0xC3, 0xA0, 0xE3, 0x04, 0xC7, 0x79, 0x00, 0x1C,  // .....y..
                /* 0198 */  0xE3, 0x84, 0x7F, 0x2E, 0x80, 0x3F, 0x40, 0x7E,  // .....?@~
                /* 01A0 */  0xCA, 0x78, 0xC5, 0x48, 0xE0, 0x98, 0x23, 0x44,  // .x.H..#D
                /* 01A8 */  0x8B, 0x19, 0x21, 0x04, 0xF8, 0xA7, 0x8A, 0xC2,  // ..!.....
                /* 01B0 */  0x07, 0x42, 0xFE, 0xFF, 0x63, 0x04, 0x17, 0xA0,  // .B..c...
                /* 01B8 */  0xC7, 0x08, 0x7C, 0x03, 0x8E, 0x11, 0x7D, 0x94,  // ..|...}.
                /* 01C0 */  0xE0, 0xEA, 0x0F, 0x1A, 0x74, 0x80, 0xE0, 0x02,  // ....t...
                /* 01C8 */  0xF5, 0x00, 0x81, 0x6F, 0xF4, 0xA3, 0x07, 0x7A,  // ...o...z
                /* 01D0 */  0x5C, 0x16, 0x7D, 0x1E, 0x90, 0xF1, 0x13, 0x8D,  // \.}.....
                /* 01D8 */  0xE6, 0xC5, 0x4F, 0x07, 0xFC, 0xF0, 0x01, 0x1E,  // ..O.....
                /* 01E0 */  0x50, 0x0F, 0x09, 0x07, 0x8A, 0x99, 0x36, 0x07,  // P.....6.
                /* 01E8 */  0x7D, 0x76, 0x39, 0x74, 0xEC, 0x70, 0xE1, 0xFD,  // }v9t.p..
                /* 01F0 */  0xFF, 0x87, 0x0B, 0x9E, 0x13, 0x08, 0xB8, 0xE4,  // ........
                /* 01F8 */  0xC1, 0xA2, 0x87, 0x6B, 0xBF, 0x02, 0x10, 0x42,  // ...k...B
                /* 0200 */  0x97, 0x79, 0x2B, 0xD1, 0xAC, 0x22, 0x1C, 0x31,  // .y+..".1
                /* 0208 */  0x8C, 0x73, 0x90, 0x09, 0x2C, 0x12, 0x1E, 0x75,  // .s..,..u
                /* 0210 */  0xBC, 0x30, 0x3C, 0x3F, 0x0B, 0x45, 0x3F, 0x98,  // .0<?.E?.
                /* 0218 */  0x53, 0x09, 0x7F, 0x30, 0x51, 0x4E, 0xE1, 0x68,  // S..0QN.h
                /* 0220 */  0x2C, 0x17, 0x41, 0xBA, 0x20, 0x74, 0x74, 0x32,  // ,.A. tt2
                /* 0228 */  0xC2, 0x19, 0x44, 0x39, 0xBB, 0x33, 0x36, 0x81,  // ..D9.36.
                /* 0230 */  0x8F, 0x52, 0x3E, 0x02, 0xF0, 0x73, 0x8B, 0x47,  // .R>..s.G
                /* 0238 */  0x04, 0xE3, 0xBC, 0x14, 0xC5, 0x1E, 0xE7, 0x44,  // .......D
                /* 0240 */  0x08, 0x0A, 0x1C, 0x0E, 0x2A, 0xC8, 0xD3, 0xC1,  // ....*...
                /* 0248 */  0xA7, 0x2D, 0x2A, 0x1D, 0x06, 0x75, 0xE0, 0x02,  // .-*..u..
                /* 0250 */  0xAC, 0x4C, 0x22, 0xC2, 0xB3, 0x44, 0x6D, 0x10,  // .L"..Dm.
                /* 0258 */  0x3A, 0x35, 0xBC, 0x4D, 0xBC, 0x6D, 0xF9, 0x16,  // :5.M.m..
                /* 0260 */  0x10, 0xE7, 0x34, 0x7B, 0x3B, 0x70, 0x11, 0x8C,  // ..4{;p..
                /* 0268 */  0x08, 0x35, 0x43, 0x91, 0x93, 0x56, 0xC4, 0x18,  // .5C..V..
                /* 0270 */  0x51, 0x1E, 0xB7, 0x8C, 0xF2, 0xB6, 0xF5, 0x02,  // Q.......
                /* 0278 */  0x10, 0xEF, 0xC4, 0xFE, 0xFF, 0xCF, 0x5B, 0xC6,  // ......[.
                /* 0280 */  0x08, 0x1E, 0xF9, 0x81, 0x8B, 0xC5, 0x58, 0xBD,  // ......X.
                /* 0288 */  0xFE, 0x6B, 0x3E, 0x70, 0x01, 0x3C, 0xFF, 0xFF,  // .k>p.<..
                /* 0290 */  0x9F, 0x4F, 0xF0, 0x41, 0x0F, 0x43, 0xE8, 0x61,  // .O.A.C.a
                /* 0298 */  0x78, 0x2A, 0xE7, 0x52, 0xE9, 0x54, 0x84, 0x18,  // x*.R.T..
                /* 02A0 */  0x35, 0x4C, 0xD4, 0x67, 0x28, 0xDF, 0x2D, 0x7C,  // 5L.g(.-|
                /* 02A8 */  0x20, 0x02, 0xDF, 0x99, 0x0B, 0x38, 0x1F, 0x53,  //  ....8.S
                /* 02B0 */  0x70, 0x67, 0x1A, 0xF0, 0xF8, 0x9C, 0x81, 0x40,  // pg.....@
                /* 02B8 */  0x4E, 0xC5, 0x87, 0x1A, 0xC0, 0x82, 0xE8, 0x27,  // N......'
                /* 02C0 */  0x84, 0x4F, 0x34, 0x54, 0x26, 0x0C, 0xEA, 0x50,  // .O4T&..P
                /* 02C8 */  0x03, 0x1C, 0xFE, 0xFF, 0x87, 0x1A, 0x60, 0x74,  // ......`t
                /* 02D0 */  0x85, 0x79, 0x1A, 0x3D, 0xE7, 0x67, 0x19, 0x9F,  // .y.=.g..
                /* 02D8 */  0x6A, 0x7C, 0x28, 0x35, 0x8E, 0x21, 0x5E, 0x66,  // j|(5.!^f
                /* 02E0 */  0x1E, 0x6A, 0x7C, 0x2C, 0x78, 0x25, 0xF5, 0xA1,  // .j|,x%..
                /* 02E8 */  0xC6, 0x50, 0x71, 0x1E, 0x6A, 0x3C, 0xDC, 0x40,  // .Pq.j<.@
                /* 02F0 */  0x51, 0xDF, 0x6C, 0x9E, 0x6D, 0x8C, 0x1E, 0xDF,  // Q.l.m...
                /* 02F8 */  0x37, 0x54, 0x43, 0x3C, 0xD4, 0x30, 0xC9, 0x2B,  // 7TC<.0.+
                /* 0300 */  0xD5, 0x58, 0x7C, 0xA8, 0x01, 0x78, 0xF5, 0xFF,  // .X|..x..
                /* 0308 */  0x3F, 0xD4, 0x00, 0x7C, 0x3B, 0x1A, 0xC0, 0x39,  // ?..|;..9
                /* 0310 */  0x32, 0xE2, 0x8E, 0x06, 0xE0, 0x3A, 0x94, 0x02,  // 2....:..
                /* 0318 */  0x87, 0xFF, 0xFF, 0xD1, 0x00, 0x78, 0x1C, 0x85,  // .....x..
                /* 0320 */  0xC0, 0x7C, 0xA1, 0xF1, 0x51, 0x08, 0xB0, 0x20,  // .|..Q.. 
                /* 0328 */  0xFB, 0x1C, 0x84, 0x12, 0x7A, 0x14, 0x02, 0x04,  // ....z...
                /* 0330 */  0xDD, 0x7E, 0x9E, 0x22, 0x9E, 0x7D, 0x7C, 0xF9,  // .~.".}|.
                /* 0338 */  0x79, 0x20, 0x88, 0xF0, 0x9A, 0xEF, 0x53, 0x90,  // y ....S.
                /* 0340 */  0x0F, 0xF9, 0x3E, 0x0A, 0x31, 0x18, 0x43, 0xF9,  // ..>.1.C.
                /* 0348 */  0x1A, 0xE4, 0xA3, 0x10, 0x83, 0x7A, 0x0D, 0xF2,  // .....z..
                /* 0350 */  0x7D, 0xDF, 0x20, 0x8F, 0x17, 0x41, 0x62, 0x47,  // }. ..AbG
                /* 0358 */  0xF9, 0xFF, 0x07, 0x7A, 0x14, 0x62, 0xA2, 0x8F,  // ...z.b..
                /* 0360 */  0x42, 0x00, 0xED, 0xFF, 0xFF, 0x47, 0x21, 0x80,  // B....G!.
                /* 0368 */  0x7F, 0x01, 0x8E, 0x06, 0xA0, 0x9B, 0xD6, 0xA3,  // ........
                /* 0370 */  0x10, 0x78, 0xEF, 0x2C, 0xA7, 0x7D, 0x02, 0x3E,  // .x.,.}.>
                /* 0378 */  0x0B, 0x61, 0xFF, 0xFF, 0x67, 0x21, 0x80, 0x25,  // .a..g!.%
                /* 0380 */  0x47, 0xA1, 0xA3, 0x38, 0xCB, 0x57, 0xA1, 0x27,  // G..8.W.'
                /* 0388 */  0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81, 0x5E,  // ....a..^
                /* 0390 */  0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E, 0x67,  // 2.].8O.g
                /* 0398 */  0xF1, 0x24, 0xEE, 0x4B, 0x90, 0x0F, 0x14, 0xCF,  // .$.K....
                /* 03A0 */  0x42, 0x86, 0x3A, 0xDD, 0xA0, 0x6F, 0xE4, 0x1E,  // B.:..o..
                /* 03A8 */  0x58, 0xCC, 0xF8, 0x21, 0x9E, 0x87, 0x0C, 0xF1,  // X..!....
                /* 03B0 */  0x2C, 0x04, 0x18, 0xF9, 0xFF, 0x9F, 0x85, 0x00,  // ,.......
                /* 03B8 */  0xFE, 0xFF, 0xFF, 0xCF, 0x42, 0x80, 0xEB, 0x17,  // ....B...
                /* 03C0 */  0x80, 0xCF, 0x42, 0xC0, 0xF3, 0x04, 0xF0, 0xA0,  // ..B.....
                /* 03C8 */  0xED, 0xB3, 0x10, 0x60, 0xE8, 0xFF, 0x7F, 0x16,  // ...`....
                /* 03D0 */  0x02, 0x8C, 0x1C, 0x2E, 0xCF, 0xFF, 0x15, 0xE8,  // ........
                /* 03D8 */  0x58, 0xDE, 0x23, 0x3C, 0xEB, 0x93, 0x7C, 0xBD,  // X.#<..|.
                /* 03E0 */  0xF4, 0x4C, 0x1F, 0x0A, 0x9E, 0x85, 0x18, 0xD6,  // .L......
                /* 03E8 */  0x61, 0xF8, 0x2C, 0xC4, 0x20, 0x5E, 0x34, 0x0D,  // a.,. ^4.
                /* 03F0 */  0xF1, 0xC2, 0xE9, 0xC3, 0x00, 0x03, 0x7E, 0xE5,  // ......~.
                /* 03F8 */  0x34, 0x50, 0x90, 0x40, 0xCF, 0x42, 0x00, 0x4B,  // 4P.@.B.K
                /* 0400 */  0xFE, 0xFF, 0x67, 0x21, 0x80, 0xFF, 0xFF, 0xFF,  // ..g!....
                /* 0408 */  0xB3, 0x10, 0x10, 0x5B, 0xA3, 0xCE, 0x42, 0xC0,  // ...[..B.
                /* 0410 */  0xF2, 0xB6, 0xF2, 0x8C, 0xED, 0xD3, 0xCA, 0xB3,  // ........
                /* 0418 */  0x10, 0x60, 0x21, 0x97, 0x91, 0x83, 0x10, 0x26,  // .`!....&
                /* 0420 */  0xE2, 0xC3, 0xC1, 0xC7, 0x4C, 0x40, 0xCF, 0xFF,  // ....L@..
                /* 0428 */  0x7F, 0x8A, 0x2F, 0xEE, 0xC6, 0x78, 0x02, 0x78,  // ../..x.x
                /* 0430 */  0x91, 0x78, 0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C,  // .x.dGM.<
                /* 0438 */  0x0B, 0x19, 0xEF, 0x2C, 0x5E, 0x03, 0x9E, 0xE0,  // ...,^...
                /* 0440 */  0x3D, 0xF9, 0x67, 0x21, 0x06, 0x76, 0x58, 0xC1,  // =.g!.vX.
                /* 0448 */  0x1E, 0x85, 0x0C, 0x6A, 0xF0, 0xD8, 0x21, 0xC2,  // ...j..!.
                /* 0450 */  0x04, 0x7A, 0x16, 0x62, 0x71, 0x9F, 0x2B, 0x3A,  // .z.bq.+:
                /* 0458 */  0x4F, 0xF8, 0x2C, 0x04, 0x38, 0xB9, 0x1A, 0x3C,  // O.,.8..<
                /* 0460 */  0x0B, 0x01, 0x26, 0x0E, 0x1B, 0x3E, 0x6B, 0x80,  // ..&..>k.
                /* 0468 */  0x67, 0xF8, 0x1E, 0xD5, 0x39, 0x3C, 0x1E, 0x03,  // g...9<..
                /* 0470 */  0xAF, 0xFF, 0xFF, 0x41, 0x03, 0x3C, 0x59, 0x75,  // ...A.<Yu
                /* 0478 */  0x9C, 0x13, 0x58, 0xEE, 0x45, 0xCB, 0xC6, 0x81,  // ..X.E...
                /* 0480 */  0x86, 0x8E, 0xC8, 0xEA, 0x80, 0x34, 0x36, 0xCC,  // .....46.
                /* 0488 */  0xA5, 0x24, 0xF2, 0xC9, 0xB1, 0x51, 0x5B, 0x11,  // .$...Q[.
                /* 0490 */  0x9C, 0xCE, 0x4C, 0x3E, 0x01, 0x58, 0x0B, 0x85,  // ..L>.X..
                /* 0498 */  0x14, 0xD0, 0x68, 0x2C, 0x86, 0x77, 0xE6, 0xA3,  // ..h,.w..
                /* 04A0 */  0x13, 0x05, 0x31, 0xA0, 0x8F, 0x43, 0xB6, 0x71,  // ..1..C.q
                /* 04A8 */  0x28, 0x40, 0xED, 0x45, 0x53, 0x20, 0xE7, 0x1C,  // (@.ES ..
                /* 04B0 */  0x8C, 0xFE, 0xD9, 0xD1, 0xD9, 0xF8, 0x4E, 0xC0,  // ......N.
                /* 04B8 */  0x35, 0x40, 0xE8, 0x94, 0x60, 0x68, 0xAB, 0x99,  // 5@..`h..
                /* 04C0 */  0x25, 0x0A, 0xCC, 0xF8, 0x4F, 0x31, 0x26, 0xF0,  // %...O1&.
                /* 04C8 */  0x39, 0x06, 0x7F, 0x30, 0xC0, 0x0F, 0xFC, 0xC5,  // 9..0....
                /* 04D0 */  0xA0, 0xEA, 0x7B, 0x81, 0xEE, 0x0B, 0x56, 0x77,  // ..{...Vw
                /* 04D8 */  0x93, 0x81, 0x30, 0x23, 0x13, 0xD4, 0x77, 0x3A,  // ..0#..w:
                /* 04E0 */  0x00, 0x05, 0x90, 0x2F, 0x04, 0x3E, 0x47, 0x3D,  // .../.>G=
                /* 04E8 */  0x14, 0xB0, 0x89, 0x84, 0x08, 0x13, 0xCD, 0xE8,  // ........
                /* 04F0 */  0x88, 0x09, 0xA3, 0xA2, 0x4F, 0x98, 0x82, 0x78,  // ....O..x
                /* 04F8 */  0xC2, 0x8E, 0x35, 0x61, 0xF4, 0x4C, 0x7C, 0xD1,  // ..5a.L|.
                /* 0500 */  0x61, 0x23, 0xC6, 0x84, 0xB8, 0x7A, 0x40, 0x9B,  // a#...z@.
                /* 0508 */  0x60, 0x50, 0x5F, 0x8A, 0x60, 0x0D, 0x99, 0x8F,  // `P_.`...
                /* 0510 */  0xC5, 0x17, 0x08, 0xDC, 0x94, 0xD9, 0xFF, 0x7F,  // ........
                /* 0518 */  0xCA, 0xE0, 0x9A, 0x13, 0xBB, 0x26, 0xF8, 0xB2,  // .....&..
                /* 0520 */  0x83, 0x9B, 0x33, 0x18, 0xE1, 0x31, 0x77, 0x31,  // ..3..1w1
                /* 0528 */  0x7E, 0x75, 0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37,  // ~u...A.7
                /* 0530 */  0x1C, 0x86, 0xFD, 0x64, 0xE6, 0x19, 0xBD, 0x97,  // ...d....
                /* 0538 */  0xF9, 0x1A, 0x87, 0x81, 0xF5, 0x78, 0x39, 0xAC,  // .....x9.
                /* 0540 */  0xD1, 0xC2, 0x1E, 0xDA, 0x7B, 0x88, 0x0F, 0x31,  // ....{..1
                /* 0548 */  0x3E, 0x4F, 0x18, 0x23, 0xAC, 0x6F, 0x2F, 0xE0,  // >O.#.o/.
                /* 0550 */  0xB8, 0x67, 0xC1, 0xBF, 0x6B, 0x80, 0xE7, 0x12,  // .g..k...
                /* 0558 */  0xE2, 0xBB, 0x06, 0x60, 0xED, 0xFF, 0x7F, 0xD7,  // ...`....
                /* 0560 */  0x00, 0xF8, 0x71, 0x4D, 0xF0, 0x5D, 0x03, 0x78,  // ..qM.].x
                /* 0568 */  0x0F, 0xDD, 0x77, 0x0D, 0xE0, 0xF7, 0xFF, 0xBF,  // ..w.....
                /* 0570 */  0x6B, 0xE0, 0xB2, 0xDF, 0x35, 0x50, 0xC7, 0x00,  // k...5P..
                /* 0578 */  0x2B, 0xBC, 0x6B, 0x40, 0xBB, 0xB2, 0xBD, 0xAF,  // +.k@....
                /* 0580 */  0x3D, 0x61, 0x59, 0xD3, 0x65, 0x03, 0xA5, 0xE6,  // =aY.e...
                /* 0588 */  0xB2, 0x01, 0x90, 0x40, 0xCA, 0x84, 0x51, 0xE1,  // ...@..Q.
                /* 0590 */  0x27, 0x4C, 0x41, 0x3C, 0x61, 0x07, 0xBB, 0x6C,  // 'LA<a..l
                /* 0598 */  0x80, 0x22, 0xC6, 0x65, 0x03, 0xF4, 0x63, 0x3B,  // .".e..c;
                /* 05A0 */  0x65, 0xF0, 0xFD, 0xFF, 0xCF, 0xF7, 0x70, 0xEE,  // e.....p.
                /* 05A8 */  0x09, 0xEC, 0xB6, 0x01, 0xBC, 0x21, 0x7D, 0xDB,  // .....!}.
                /* 05B0 */  0x00, 0xAE, 0xF9, 0x6F, 0x1B, 0x28, 0x0E, 0xAB,  // ...o.(..
                /* 05B8 */  0xBC, 0x6D, 0x40, 0x3C, 0xC9, 0x33, 0x02, 0xAB,  // .m@<.3..
                /* 05C0 */  0xBA, 0x6E, 0xA0, 0xF4, 0x5C, 0x37, 0x00, 0x79,  // .n..\7.y
                /* 05C8 */  0xFF, 0xFF, 0xEB, 0x06, 0xF0, 0x10, 0x33, 0x61,  // ......3a
                /* 05D0 */  0x54, 0xFC, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xD1,  // T..S.O..
                /* 05D8 */  0xAE, 0x1B, 0xA0, 0x08, 0x72, 0xDD, 0x00, 0xFD,  // ....r...
                /* 05E0 */  0xBC, 0x5E, 0x37, 0x80, 0xC3, 0x45, 0x01, 0x73,  // .^7..E.s
                /* 05E8 */  0xDF, 0x00, 0xDE, 0xB0, 0xFC, 0xBE, 0x01, 0x3C,  // .......<
                /* 05F0 */  0xFF, 0xFF, 0xF7, 0x0D, 0xF0, 0xDC, 0xC4, 0x31,  // .......1
                /* 05F8 */  0xF7, 0x0D, 0x80, 0xCD, 0xFF, 0xFF, 0xAB, 0x1E,  // ........
                /* 0600 */  0xEE, 0xA2, 0x80, 0xB9, 0x6F, 0x00, 0xEF, 0x8B,  // ....o...
                /* 0608 */  0xB4, 0xEF, 0x1B, 0xC0, 0x55, 0xDA, 0xFA, 0x3D,  // ....U..=
                /* 0610 */  0x38, 0x7A, 0x42, 0xF0, 0xF8, 0x70, 0xF7, 0x4B,  // 8zB..p.K
                /* 0618 */  0x8F, 0xCF, 0x77, 0x73, 0x70, 0x0C, 0xF2, 0x18,  // ..wsp...
                /* 0620 */  0x0F, 0xED, 0x80, 0x5F, 0xDF, 0x3D, 0x31, 0xDF,  // ..._.=1.
                /* 0628 */  0xCD, 0x81, 0xFF, 0x99, 0xE0, 0x78, 0x30, 0xD0,  // .....x0.
                /* 0630 */  0x38, 0xC4, 0x56, 0x2F, 0x0D, 0xE4, 0x68, 0x10,  // 8.V/..h.
                /* 0638 */  0x9F, 0xFF, 0xFF, 0xA1, 0x19, 0x9C, 0xB1, 0x8A,  // ........
                /* 0640 */  0x3F, 0xF9, 0x23, 0x9C, 0x63, 0xE8, 0xEC, 0x70,  // ?.#.c..p
                /* 0648 */  0x90, 0xD8, 0x41, 0x70, 0x49, 0x26, 0x86, 0x8E,  // ..ApI&..
                /* 0650 */  0x11, 0x01, 0x83, 0x22, 0x20, 0x40, 0x3A, 0x0C,  // ..." @:.
                /* 0658 */  0x38, 0x12, 0x14, 0x6A, 0x3C, 0x1E, 0x91, 0x0F,  // 8..j<...
                /* 0660 */  0x23, 0x1E, 0xC6, 0xC3, 0x84, 0x41, 0x8E, 0xE3,  // #....A..
                /* 0668 */  0x30, 0x0E, 0x39, 0xCA, 0x4B, 0x82, 0x09, 0x3C,  // 0.9.K..<
                /* 0670 */  0x11, 0x1F, 0x38, 0xE0, 0xB8, 0x06, 0x94, 0xF9,  // ..8.....
                /* 0678 */  0xB3, 0x02, 0x68, 0x8E, 0xD5, 0x3E, 0x71, 0xC0,  // ..h..>q.
                /* 0680 */  0x1D, 0x8F, 0xE7, 0xC9, 0x3C, 0x43, 0x12, 0xF9,  // ....<C..
                /* 0688 */  0x83, 0x40, 0x1D, 0x4B, 0xF8, 0xA4, 0x5F, 0x3C,  // .@.K.._<
                /* 0690 */  0x0C, 0x79, 0xB8, 0x26, 0xB0, 0xD8, 0x13, 0x0A,  // .y.&....
                /* 0698 */  0x1D, 0x0F, 0xF8, 0xCF, 0x22, 0x8F, 0x09, 0x3E,  // ...."..>
                /* 06A0 */  0x61, 0x78, 0xBE, 0x3E, 0x76, 0xB0, 0x81, 0xE3,  // ax.>v...
                /* 06A8 */  0x46, 0xE1, 0x41, 0xE3, 0x02, 0x0C, 0x9A, 0x8A,  // F.A.....
                /* 06B0 */  0x3A, 0x2F, 0xA0, 0xA4, 0x1C, 0x3F, 0x10, 0x17,  // :/...?..
                /* 06B8 */  0x1C, 0xCC, 0x85, 0xC5, 0xBF, 0x0B, 0x0F, 0x0C,  // ........
                /* 06C0 */  0xCC, 0xFF, 0xFF, 0x71, 0xC3, 0x5A, 0x85, 0x07,  // ...q.Z..
                /* 06C8 */  0x86, 0x3B, 0x60, 0x78, 0x2C, 0x47, 0x11, 0xF4,  // .;`x,G..
                /* 06D0 */  0xC0, 0x83, 0xFA, 0x50, 0x72, 0xE6, 0x9E, 0xE4,  // ...Pr...
                /* 06D8 */  0x31, 0x3A, 0xEA, 0x49, 0x85, 0x9E, 0x26, 0x70,  // 1:.I..&p
                /* 06E0 */  0x92, 0x20, 0x74, 0x8D, 0x38, 0x0A, 0x0C, 0x5C,  // . t.8..\
                /* 06E8 */  0xF8, 0x30, 0xC7, 0x67, 0x9C, 0xE3, 0x33, 0x3C,  // .0.g..3<
                /* 06F0 */  0x1F, 0xED, 0xEB, 0xCC, 0x59, 0x47, 0x08, 0x88,  // ....YG..
                /* 06F8 */  0xBF, 0xA8, 0xB0, 0x01, 0x83, 0xE5, 0x60, 0x00,  // ......`.
                /* 0700 */  0x1C, 0x06, 0x8C, 0x4F, 0x34, 0x60, 0x39, 0x19,  // ...O4`9.
                /* 0708 */  0x30, 0x6A, 0x3C, 0x86, 0x3E, 0x2D, 0x86, 0x78,  // 0j<.>-.x
                /* 0710 */  0x7C, 0x61, 0xDF, 0x2A, 0x4C, 0x50, 0x3D, 0xA8,  // |a.*LP=.
                /* 0718 */  0x4E, 0x37, 0x1E, 0x1A, 0x38, 0x00, 0x3D, 0x34,  // N7..8.=4
                /* 0720 */  0xF8, 0xA7, 0x17, 0x72, 0x27, 0xA3, 0x43, 0xB0,  // ...r'.C.
                /* 0728 */  0x56, 0x3C, 0xCD, 0xFB, 0xC8, 0x63, 0x9E, 0x5B,  // V<...c.[
                /* 0730 */  0x94, 0xB7, 0x81, 0xE7, 0x00, 0x7E, 0x5A, 0xF0,  // .....~Z.
                /* 0738 */  0x70, 0x7C, 0x2C, 0xF0, 0x38, 0x7D, 0xBD, 0x4B,  // p|,.8}.K
                /* 0740 */  0xF0, 0x7A, 0x97, 0xA0, 0xB3, 0xC3, 0x0B, 0x4D,  // .z.....M
                /* 0748 */  0x36, 0x04, 0xD4, 0x60, 0x3D, 0x04, 0xCC, 0x54,  // 6..`=..T
                /* 0750 */  0x13, 0x38, 0xC9, 0x08, 0x10, 0xFF, 0x7F, 0x82,  // .8......
                /* 0758 */  0x19, 0x20, 0x74, 0x6B, 0x39, 0xDD, 0x67, 0x91,  // . tk9.g.
                /* 0760 */  0x10, 0xA7, 0xF9, 0x38, 0xF3, 0x58, 0xE0, 0xB1,  // ...8.X..
                /* 0768 */  0x3E, 0x18, 0x58, 0xF3, 0x08, 0x35, 0xD7, 0xD8,  // >.X..5..
                /* 0770 */  0x67, 0xF6, 0x74, 0x80, 0x59, 0x45, 0xB8, 0x97,  // g.t.YE..
                /* 0778 */  0xA3, 0x37, 0x0C, 0xA3, 0x3D, 0x5B, 0xF8, 0x9A,  // .7..=[..
                /* 0780 */  0xF1, 0xFC, 0x64, 0x84, 0x70, 0xEC, 0x0E, 0x70,  // ..d.p..p
                /* 0788 */  0x92, 0x1E, 0x49, 0x84, 0x17, 0x04, 0x76, 0x62,  // ..I...vb
                /* 0790 */  0x78, 0x80, 0x31, 0xCE, 0xC9, 0x1B, 0xD6, 0x97,  // x.1.....
                /* 0798 */  0x38, 0x06, 0x1A, 0xCC, 0xD8, 0xBE, 0x0C, 0xB0,  // 8.......
                /* 07A0 */  0x51, 0xF9, 0x62, 0x00, 0x7F, 0x26, 0x61, 0x8D,  // Q.b..&a.
                /* 07A8 */  0x7C, 0xA2, 0x87, 0x6A, 0x82, 0xC9, 0x2F, 0x06,  // |..j../.
                /* 07B0 */  0x50, 0x66, 0xE1, 0xEB, 0x89, 0x4F, 0x4A, 0xEC,  // Pf...OJ.
                /* 07B8 */  0x62, 0xC0, 0x52, 0x5E, 0x0C, 0x40, 0x75, 0xC3,  // b.R^.@u.
                /* 07C0 */  0xF0, 0xC5, 0x00, 0xFE, 0xB5, 0xE8, 0xC5, 0x00,  // ........
                /* 07C8 */  0x0C, 0x97, 0x27, 0xDF, 0x03, 0xEC, 0xE1, 0x8E,  // ..'.....
                /* 07D0 */  0x45, 0xC7, 0x69, 0x6B, 0x37, 0x03, 0x72, 0x36,  // E.ik7.r6
                /* 07D8 */  0x60, 0x30, 0x9E, 0x61, 0x18, 0x63, 0x84, 0xF1,  // `0.a.c..
                /* 07E0 */  0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB, 0x01, 0xF4,  // (..`....
                /* 07E8 */  0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D, 0x40, 0x39,  // ..@%..@9
                /* 07F0 */  0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7, 0x80, 0xA7,  // .ty4....
                /* 07F8 */  0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE, 0xC6, 0x2A,  // .......*
                /* 0800 */  0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8, 0xD4, 0xA2,  // .@..4...
                /* 0808 */  0xF8, 0x54, 0xE0, 0xB5, 0xFC, 0xFF, 0x9F, 0x9F,  // .T......
                /* 0810 */  0xC2, 0xC5, 0x39, 0x13, 0x4F, 0xD5, 0x70, 0x06,  // ..9.O.p.
                /* 0818 */  0x7A, 0x75, 0x0B, 0x07, 0xEB, 0x54, 0xF0, 0x1A,  // zu...T..
                /* 0820 */  0xC0, 0xCE, 0x4D, 0x9E, 0x96, 0x11, 0x61, 0x1C,  // ..M...a.
                /* 0828 */  0x52, 0x1E, 0x19, 0x6C, 0x0B, 0x87, 0x40, 0x86,  // R..l..@.
                /* 0830 */  0x79, 0x27, 0x60, 0x90, 0xEF, 0x73, 0xCF, 0x3B,  // y'`..s.;
                /* 0838 */  0x06, 0x7E, 0x45, 0x88, 0xF3, 0xA4, 0xE5, 0x3B,  // .~E....;
                /* 0840 */  0x83, 0x2F, 0x0B, 0xE0, 0x8B, 0x74, 0x59, 0x40,  // ./...tY@
                /* 0848 */  0x43, 0xFB, 0x24, 0xE3, 0x0B, 0x82, 0x61, 0x4F,  // C.$...aO
                /* 0850 */  0x9C, 0x05, 0xB8, 0x2B, 0x80, 0x0A, 0xD4, 0x77,  // ...+...w
                /* 0858 */  0x05, 0xF8, 0x17, 0x82, 0x77, 0x05, 0x30, 0xCC,  // ....w.0.
                /* 0860 */  0xCB, 0xB7, 0x02, 0xAE, 0xE9, 0x50, 0x82, 0x3E,  // .....P.>
                /* 0868 */  0x93, 0xF8, 0xBA, 0x80, 0x9B, 0x22, 0x4B, 0x75,  // ....."Ku
                /* 0870 */  0x54, 0x80, 0x9E, 0x62, 0x12, 0xA8, 0x7B, 0xA7,  // T..b..{.
                /* 0878 */  0x8F, 0x0A, 0x30, 0x6E, 0x7F, 0xBE, 0x06, 0xF8,  // ..0n....
                /* 0880 */  0xB4, 0xC0, 0xCF, 0x42, 0xEC, 0x3A, 0x82, 0xBB,  // ...B.:..
                /* 0888 */  0x92, 0x30, 0x94, 0x67, 0x03, 0x5F, 0xB2, 0xF8,  // .0.g._..
                /* 0890 */  0xE1, 0x00, 0x06, 0xF8, 0xFF, 0xFF, 0xF5, 0xC4,  // ........
                /* 0898 */  0x43, 0x8C, 0x10, 0x9B, 0x1D, 0xB8, 0x5E, 0x0D,  // C.....^.
                /* 08A0 */  0xDE, 0x0B, 0x7C, 0x21, 0xE2, 0x27, 0x03, 0xF0,  // ..|!.'..
                /* 08A8 */  0x1D, 0x1F, 0xC1, 0x71, 0xD2, 0x09, 0x1F, 0xE9,  // ...q....
                /* 08B0 */  0x99, 0x85, 0x9F, 0xFE, 0x00, 0x13, 0x77, 0x58,  // ......wX
                /* 08B8 */  0xDC, 0xE9, 0x0F, 0x1C, 0xA7, 0x45, 0x38, 0x03,  // .....E8.
                /* 08C0 */  0xE0, 0xF2, 0x5E, 0x55, 0x06, 0xF2, 0x0F, 0x41,  // ..^U...A
                /* 08C8 */  0x82, 0x60, 0x50, 0x17, 0x19, 0x9F, 0xF4, 0xF0,  // .`P.....
                /* 08D0 */  0x43, 0x60, 0x87, 0x09, 0x76, 0x4E, 0x32, 0x1C,  // C`..vN2.
                /* 08D8 */  0x3F, 0x00, 0x78, 0x54, 0x6F, 0x38, 0x2F, 0x5D,  // ?.xTo8/]
                /* 08E0 */  0x1E, 0xA6, 0x8F, 0x08, 0x21, 0xD9, 0x51, 0x0C,  // ....!.Q.
                /* 08E8 */  0x77, 0xAA, 0xF0, 0x55, 0xC1, 0x57, 0x11, 0x23,  // w..U.W.#
                /* 08F0 */  0x3E, 0xAC, 0xF8, 0xD4, 0x60, 0x28, 0x18, 0x87,  // >...`(..
                /* 08F8 */  0x01, 0xCC, 0x1D, 0x99, 0x41, 0xF9, 0x9E, 0x74,  // ....A..t
                /* 0900 */  0x18, 0x47, 0xF1, 0xFF, 0x7F, 0x98, 0x63, 0x97,  // .G....c.
                /* 0908 */  0x86, 0xA3, 0xC0, 0x1C, 0x39, 0x7C, 0x5B, 0x32,  // ....9|[2
                /* 0910 */  0xBC, 0x09, 0xEC, 0xFE, 0xD6, 0xAA, 0x13, 0xC6,  // ........
                /* 0918 */  0xC1, 0xBF, 0x76, 0x1B, 0xA2, 0x37, 0x1C, 0x1D,  // ..v..7..
                /* 0920 */  0x54, 0xA2, 0x9C, 0x56, 0x94, 0xA3, 0x88, 0xE2,  // T..V....
                /* 0928 */  0xF3, 0x42, 0x84, 0x18, 0x51, 0x82, 0x05, 0x79,  // .B..Q..y
                /* 0930 */  0xDD, 0x89, 0x15, 0xE5, 0xC5, 0xC0, 0x08, 0x11,  // ........
                /* 0938 */  0x43, 0xBC, 0xC3, 0x06, 0x3A, 0xF1, 0xF0, 0x41,  // C...:..A
                /* 0940 */  0x9E, 0x37, 0xE2, 0xB4, 0x7F, 0xF6, 0x45, 0x0C,  // .7....E.
                /* 0948 */  0xD9, 0x67, 0x05, 0xDC, 0xD9, 0x01, 0xEE, 0xF4,  // .g......
                /* 0950 */  0xF8, 0xE9, 0x01, 0x70, 0x02, 0xF4, 0xF4, 0x00,  // ...p....
                /* 0958 */  0xB6, 0xF3, 0x06, 0xDC, 0x03, 0x01, 0xE2, 0x48,  // .......H
                /* 0960 */  0x8B, 0x0A, 0x7E, 0x65, 0xA1, 0x70, 0x3C, 0xF4,  // ..~e.p<.
                /* 0968 */  0xCD, 0x8A, 0x1E, 0x4B, 0x70, 0x87, 0x03, 0x1F,  // ...Kp...
                /* 0970 */  0x19, 0x7C, 0x80, 0xC4, 0x0D, 0xC5, 0x87, 0x0A,  // .|......
                /* 0978 */  0xE4, 0x59, 0x00, 0xE2, 0xFF, 0xFF, 0x90, 0x8C,  // .Y......
                /* 0980 */  0x1D, 0x01, 0xBF, 0xC1, 0xBC, 0xB4, 0xBC, 0x37,  // .......7
                /* 0988 */  0xF0, 0x53, 0x0A, 0xEE, 0x20, 0x00, 0xBE, 0x63,  // .S.. ..c
                /* 0990 */  0x00, 0x78, 0x07, 0xC3, 0x65, 0x8D, 0x19, 0x75,  // .x..e..u
                /* 0998 */  0x28, 0xF6, 0x98, 0x71, 0x87, 0x10, 0x7E, 0x22,  // (..q..~"
                /* 09A0 */  0xC0, 0x8D, 0xD9, 0xE3, 0xF6, 0x98, 0x71, 0xC7,  // ......q.
                /* 09A8 */  0x59, 0x3E, 0xAA, 0xA7, 0x8C, 0x17, 0x68, 0xDC,  // Y>....h.
                /* 09B0 */  0x8D, 0x80, 0x0F, 0x1D, 0x78, 0x1C, 0x60, 0x70,  // ....x.`p
                /* 09B8 */  0x47, 0x0A, 0x30, 0x5E, 0x0E, 0xD8, 0xD8, 0xC1,  // G.0^....
                /* 09C0 */  0x1D, 0x84, 0x9C, 0x02, 0x59, 0x3A, 0x8C, 0xC6,  // ....Y:..
                /* 09C8 */  0x8E, 0x93, 0x0D, 0xA4, 0x63, 0x8C, 0x0F, 0xB9,  // ....c...
                /* 09D0 */  0x1E, 0x3B, 0x6E, 0xB0, 0xFF, 0xFF, 0x63, 0xC7,  // .;n...c.
                /* 09D8 */  0x1E, 0x5F, 0xC0, 0x37, 0x06, 0x7E, 0x7D, 0x3E,  // ._.7.~}>
                /* 09E0 */  0x0C, 0xEC, 0xCD, 0xCF, 0xA3, 0x33, 0xB8, 0x87,  // .....3..
                /* 09E8 */  0xED, 0x13, 0x4C, 0x8C, 0xE7, 0x97, 0x10, 0x8F,  // ..L.....
                /* 09F0 */  0x30, 0x2F, 0x2E, 0x11, 0x8E, 0x22, 0xC8, 0x9B,  // 0/..."..
                /* 09F8 */  0x4B, 0x9C, 0x57, 0x83, 0x30, 0x8F, 0x2D, 0x51,  // K.W.0.-Q
                /* 0A00 */  0x42, 0x44, 0x38, 0x98, 0x38, 0x4F, 0x30, 0x46,  // BD8.8O0F
                /* 0A08 */  0x38, 0xF0, 0x28, 0x86, 0x88, 0x70, 0x02, 0x21,  // 8.(..p.!
                /* 0A10 */  0x4E, 0xFA, 0x64, 0x83, 0x84, 0x8F, 0x11, 0x36,  // N.d....6
                /* 0A18 */  0xDA, 0x13, 0x0C, 0x1F, 0x0B, 0x3F, 0xAF, 0x78,  // .....?.x
                /* 0A20 */  0xF0, 0xFC, 0xB4, 0xE6, 0xBB, 0xA0, 0x0F, 0xEF,  // ........
                /* 0A28 */  0x6C, 0x6A, 0x3E, 0x4E, 0xFA, 0x30, 0x8B, 0x1B,  // lj>N.0..
                /* 0A30 */  0xD4, 0x83, 0x23, 0xBB, 0xEB, 0xF8, 0x78, 0x8D,  // ..#...x.
                /* 0A38 */  0x3D, 0x05, 0x79, 0x08, 0xFC, 0x44, 0xE0, 0x0B,  // =.y..D..
                /* 0A40 */  0xA2, 0x27, 0xEB, 0xBB, 0x1E, 0xBB, 0x97, 0x19,  // .'......
                /* 0A48 */  0xA3, 0xFA, 0x29, 0xA0, 0x8E, 0x29, 0x67, 0xF0,  // ..)..)g.
                /* 0A50 */  0x0A, 0xC1, 0xEE, 0x79, 0x3E, 0x64, 0xFB, 0x2E,  // ...y>d..
                /* 0A58 */  0xC9, 0x46, 0x81, 0x3B, 0x24, 0xF8, 0x8C, 0xC4,  // .F.;$...
                /* 0A60 */  0x4F, 0x15, 0x1E, 0x86, 0x47, 0x01, 0x63, 0x06,  // O...G.c.
                /* 0A68 */  0xEF, 0x08, 0x87, 0x16, 0xE2, 0x80, 0xDF, 0x77,  // .......w
                /* 0A70 */  0xD9, 0x50, 0x63, 0x9C, 0x9E, 0xCF, 0x1F, 0x6C,  // .Pc....l
                /* 0A78 */  0x10, 0xF0, 0xA1, 0x0E, 0xD5, 0xC3, 0x3C, 0xAA,  // ......<.
                /* 0A80 */  0x97, 0x42, 0x86, 0x73, 0x76, 0x70, 0x07, 0x81,  // .B.svp..
                /* 0A88 */  0x3D, 0x7E, 0x78, 0x10, 0xFF, 0xFF, 0x47, 0x11,  // =~x...G.
                /* 0A90 */  0x3A, 0x0A, 0x3A, 0x08, 0x76, 0xBE, 0x79, 0x83,  // :.:.v.y.
                /* 0A98 */  0x33, 0xC8, 0x31, 0xC0, 0x3E, 0x53, 0xF9, 0x68,  // 3.1.>S.h
                /* 0AA0 */  0x82, 0x38, 0x02, 0xA2, 0xCF, 0x1F, 0x1E, 0xC3,  // .8......
                /* 0AA8 */  0x9B, 0x1C, 0x1F, 0x0E, 0xF6, 0xE8, 0x81, 0x3B,  // .......;
                /* 0AB0 */  0x89, 0xC0, 0x3D, 0x76, 0x1D, 0xB4, 0xAF, 0x71,  // ..=v...q
                /* 0AB8 */  0xBE, 0x68, 0xC1, 0xB8, 0xEF, 0x3D, 0x8B, 0x80,  // .h...=..
                /* 0AC0 */  0x1F, 0xE3, 0xB1, 0x05, 0x1C, 0x87, 0x12, 0x70,  // .......p
                /* 0AC8 */  0x07, 0x3B, 0xAE, 0x71, 0x08, 0x45, 0x81, 0xD1,  // .;.q.E..
                /* 0AD0 */  0xA1, 0x04, 0x17, 0x03, 0x48, 0x30, 0x8E, 0x71,  // ....H0.q
                /* 0AD8 */  0x46, 0x43, 0x5F, 0x22, 0x7D, 0x48, 0x83, 0x33,  // FC_"}H.3
                /* 0AE0 */  0x68, 0xD8, 0xF3, 0x7C, 0x42, 0xE1, 0xF6, 0x04,  // h..|B...
                /* 0AE8 */  0x28, 0x3A, 0xA1, 0x80, 0x0C, 0xF7, 0xFF, 0xFF,  // (:......
                /* 0AF0 */  0x0C, 0x82, 0x3D, 0x21, 0xF0, 0x33, 0x08, 0x87,  // ..=!.3..
                /* 0AF8 */  0x3E, 0xEE, 0xF7, 0x46, 0x9F, 0x1A, 0xD9, 0xDC,  // >..F....
                /* 0B00 */  0x1F, 0x02, 0x4E, 0xE0, 0xDC, 0xD9, 0xA9, 0x19,  // ..N.....
                /* 0B08 */  0x77, 0x66, 0xC0, 0x9E, 0x3F, 0x3C, 0x04, 0x7E,  // wf..?<.~
                /* 0B10 */  0x2E, 0xF0, 0xF0, 0x3D, 0x04, 0xFC, 0xE0, 0x1F,  // ...=....
                /* 0B18 */  0x98, 0x0D, 0x0E, 0xC6, 0x53, 0x84, 0xAF, 0x1D,  // ....S...
                /* 0B20 */  0x1C, 0x9C, 0x9F, 0x06, 0x0C, 0xCE, 0x5F, 0xA1,  // ......_.
                /* 0B28 */  0x3E, 0xCF, 0x33, 0x70, 0xEC, 0xA9, 0xD7, 0xF7,  // >.3p....
                /* 0B30 */  0x0E, 0xCF, 0xD7, 0x87, 0x0A, 0xFC, 0x4D, 0xCF,  // ......M.
                /* 0B38 */  0x87, 0x0A, 0x70, 0x1C, 0x1E, 0xF8, 0x61, 0x85,  // ..p...a.
                /* 0B40 */  0x0D, 0xE1, 0x51, 0x00, 0x7F, 0x6A, 0xF1, 0xF1,  // ..Q..j..
                /* 0B48 */  0x2F, 0xCE, 0x53, 0x04, 0xBB, 0x8D, 0x60, 0x0F,  // /.S...`.
                /* 0B50 */  0x17, 0x80, 0x99, 0xFF, 0xFF, 0xB0, 0x30, 0xD1,  // ......0.
                /* 0B58 */  0xCE, 0x62, 0xA8, 0x30, 0x67, 0x31, 0x74, 0x90,  // .b.0g1t.
                /* 0B60 */  0xB3, 0x18, 0x3D, 0x5C, 0x00, 0x2E, 0x04, 0x1F,  // ..=\....
                /* 0B68 */  0x0F, 0x40, 0x73, 0x10, 0x78, 0x5C, 0xF0, 0x85,  // .@s.x\..
                /* 0B70 */  0xE0, 0x48, 0x0E, 0xE4, 0xE9, 0x00, 0xF0, 0x29,  // .H.....)
                /* 0B78 */  0xF6, 0xE3, 0xEC, 0xF3, 0x11, 0x95, 0x07, 0x83,  // ........
                /* 0B80 */  0x3A, 0x1F, 0xF8, 0x84, 0xE2, 0x63, 0x07, 0x3F,  // :....c.?
                /* 0B88 */  0x1B, 0xF8, 0x46, 0xEE, 0xA1, 0xF2, 0x53, 0xB3,  // ..F...S.
                /* 0B90 */  0x4F, 0xDA, 0xEC, 0xFF, 0x7F, 0x38, 0x12, 0xB8,  // O....8..
                /* 0B98 */  0x4E, 0x47, 0x0E, 0x34, 0x0C, 0xD4, 0x88, 0x0C,  // NG.4....
                /* 0BA0 */  0xE5, 0x73, 0x1B, 0x2E, 0xC0, 0xD0, 0xE8, 0x39,  // .s.....9
                /* 0BA8 */  0x1C, 0xC6, 0x01, 0xD7, 0xE7, 0x70, 0xEC, 0x80,  // .....p..
                /* 0BB0 */  0x7C, 0x0E, 0x87, 0x7F, 0x8E, 0x86, 0x3F, 0x36,  // |.....?6
                /* 0BB8 */  0x76, 0xBA, 0xE7, 0x03, 0x83, 0x75, 0xFD, 0xC6,  // v....u..
                /* 0BC0 */  0x0C, 0x0C, 0x6C, 0xDF, 0x22, 0x0F, 0x0C, 0x38,  // ..l."..8
                /* 0BC8 */  0xA2, 0x9E, 0x8D, 0xAF, 0x10, 0x1E, 0x18, 0xD8,  // ........
                /* 0BD0 */  0x00, 0x3D, 0x30, 0xE0, 0x13, 0x0B, 0x42, 0x4E,  // .=0...BN
                /* 0BD8 */  0x06, 0x86, 0x3A, 0x65, 0x18, 0xF9, 0xFF, 0x1F,  // ..:e....
                /* 0BE0 */  0xF3, 0x89, 0xC3, 0xC3, 0xF0, 0xA1, 0x22, 0xEA,  // ......".
                /* 0BE8 */  0x33, 0xC0, 0x23, 0x1E, 0x1B, 0x1B, 0xB8, 0x8E,  // 3.#.....
                /* 0BF0 */  0x2D, 0x1E, 0x1B, 0xF8, 0x8F, 0xF0, 0xF8, 0xB1,  // -.......
                /* 0BF8 */  0xC1, 0x19, 0xCB, 0xA3, 0x89, 0x2F, 0x33, 0x47,  // ...../3G
                /* 0C00 */  0x76, 0x1A, 0x67, 0xF6, 0x1A, 0xE2, 0xA3, 0xDD,  // v.g.....
                /* 0C08 */  0xE3, 0xB7, 0xC7, 0x06, 0x2E, 0x0B, 0x63, 0x03,  // ......c.
                /* 0C10 */  0x4A, 0x21, 0xC7, 0x86, 0x3E, 0xA4, 0xF8, 0x14,  // J!..>...
                /* 0C18 */  0x60, 0xE3, 0xA8, 0x64, 0x1E, 0x3E, 0x5E, 0xF9,  // `..d.>^.
                /* 0C20 */  0xC4, 0x70, 0x74, 0x41, 0xDE, 0xD0, 0x7D, 0xB9,  // .ptA..}.
                /* 0C28 */  0xF0, 0x91, 0xC6, 0x60, 0xBE, 0xB4, 0xF8, 0x0C,  // ...`....
                /* 0C30 */  0xCA, 0x87, 0x08, 0x2E, 0x0D, 0x43, 0x04, 0x22,  // .....C."
                /* 0C38 */  0xFF, 0xFF, 0x21, 0x62, 0x42, 0x0D, 0x11, 0x3D,  // ..!bB..=
                /* 0C40 */  0x1E, 0x5F, 0x66, 0x0E, 0x91, 0x0D, 0x0D, 0xBC,  // ._f.....
                /* 0C48 */  0x9F, 0x1A, 0x0F, 0x0D, 0xF8, 0xC4, 0x04, 0xF6,  // ........
                /* 0C50 */  0x2A, 0x3C, 0x34, 0x7A, 0xFA, 0xF1, 0x21, 0x80,  // *<4z..!.
                /* 0C58 */  0x41, 0xF8, 0x36, 0xC0, 0xAE, 0x02, 0xBE, 0x0A,  // A.6.....
                /* 0C60 */  0x19, 0x24, 0xC1, 0x38, 0x27, 0x0B, 0x3A, 0x38,  // .$.8'.:8
                /* 0C68 */  0x70, 0x0C, 0xC9, 0x83, 0x83, 0x3F, 0x18, 0x0F,  // p....?..
                /* 0C70 */  0x81, 0x03, 0x7B, 0x06, 0xCF, 0x45, 0x8F, 0xC1,  // ..{..E..
                /* 0C78 */  0x3E, 0xED, 0xF8, 0x54, 0x02, 0xBE, 0x60, 0xA7,  // >..T..`.
                /* 0C80 */  0x01, 0xF4, 0x69, 0x8F, 0x0D, 0xE6, 0x59, 0xE0,  // ..i...Y.
                /* 0C88 */  0xF9, 0xD3, 0x23, 0xF4, 0xED, 0xE1, 0xED, 0x16,  // ..#.....
                /* 0C90 */  0x77, 0x1E, 0x00, 0x97, 0x89, 0xF3, 0x00, 0x48,  // w......H
                /* 0C98 */  0xFE, 0xFF, 0xE7, 0x01, 0xB0, 0x9D, 0x4F, 0xC1,  // ......O.
                /* 0CA0 */  0x71, 0xD2, 0xC7, 0xCE, 0xD1, 0x03, 0x78, 0x0C,  // q.....x.
                /* 0CA8 */  0xF3, 0x68, 0xF9, 0x31, 0x0C, 0x70, 0x14, 0xF4,  // .h.1.p..
                /* 0CB0 */  0x7C, 0x4A, 0x07, 0xEE, 0x68, 0x30, 0xA8, 0x63,  // |J..h0.c
                /* 0CB8 */  0x18, 0xB8, 0x22, 0x80, 0xEB, 0x68, 0xE2, 0x63,  // .."..h.c
                /* 0CC0 */  0x08, 0x9C, 0xA1, 0x1E, 0xB4, 0xAF, 0x09, 0x9E,  // ........
                /* 0CC8 */  0xB5, 0x2F, 0x4E, 0xEC, 0x9C, 0x00, 0x2E, 0x15,  // ./N.....
                /* 0CD0 */  0xE7, 0x04, 0x20, 0xF2, 0xFF, 0x3F, 0xB0, 0xC0,  // .. ..?..
                /* 0CD8 */  0x06, 0x3E, 0x89, 0xE7, 0xF4, 0x43, 0x03, 0xF3,  // .>...C..
                /* 0CE0 */  0xC0, 0x3C, 0x34, 0xE0, 0x73, 0x34, 0xC0, 0x9D,  // .<4.s4..
                /* 0CE8 */  0x28, 0xC0, 0x73, 0x1B, 0xC1, 0x1D, 0x28, 0x00,  // (.s...(.
                /* 0CF0 */  0x37, 0x27, 0x75, 0x8F, 0x8B, 0x43, 0xE3, 0x10,  // 7'u..C..
                /* 0CF8 */  0x9F, 0xB5, 0xCE, 0xD9, 0xC7, 0xA8, 0x33, 0xC5,  // ......3.
                /* 0D00 */  0x9D, 0x45, 0xC0, 0x70, 0x4E, 0x46, 0x3C, 0x78,  // .E.pNF<x
                /* 0D08 */  0x0C, 0xE4, 0x07, 0x86, 0x64, 0xC1, 0xA0, 0x58,  // ....d..X
                /* 0D10 */  0xFE, 0xFF, 0x87, 0xC2, 0x0E, 0x06, 0x1C, 0xD8,  // ........
                /* 0D18 */  0x47, 0x04, 0x76, 0x2E, 0x60, 0x67, 0x60, 0xC3,  // G.v.`g`.
                /* 0D20 */  0xF1, 0xB3, 0x80, 0x4F, 0x09, 0x0F, 0x35, 0xC7,  // ...O..5.
                /* 0D28 */  0xF1, 0xD4, 0xE8, 0x2B, 0x96, 0x21, 0xD9, 0xF9,  // ...+.!..
                /* 0D30 */  0xDF, 0xA7, 0x56, 0xDC, 0xA1, 0x15, 0xCE, 0x49,  // ..V....I
                /* 0D38 */  0x15, 0x5C, 0x04, 0x3E, 0xEB, 0x78, 0x14, 0xFC,  // .\.>.x..
                /* 0D40 */  0xF4, 0xE0, 0x39, 0xBE, 0x31, 0xF8, 0xF4, 0xC0,  // ..9.1...
                /* 0D48 */  0xDC, 0x5F, 0x9D, 0x75, 0x65, 0x78, 0x67, 0xF0,  // ._.uexg.
                /* 0D50 */  0x9C, 0x4E, 0x3A, 0xC8, 0x49, 0xB7, 0x25, 0x40,  // .N:.I.%@
                /* 0D58 */  0x1B, 0x82, 0x50, 0x02, 0x45, 0x79, 0x1B, 0x88,  // ..P.Ey..
                /* 0D60 */  0x66, 0x6F, 0x28, 0x9A, 0x79, 0xD0, 0x17, 0x81,  // fo(.y...
                /* 0D68 */  0x40, 0x51, 0x62, 0x46, 0x6A, 0x0E, 0x4C, 0x48,  // @QbFj.LH
                /* 0D70 */  0x11, 0x0F, 0x27, 0x4A, 0x88, 0x60, 0x6F, 0x13,  // ..'J.`o.
                /* 0D78 */  0xAD, 0x09, 0xB0, 0x3F, 0x08, 0x22, 0xE9, 0x65,  // ...?.".e
                /* 0D80 */  0xA0, 0xA3, 0x95, 0x23, 0x1D, 0x10, 0xD1, 0xC3,  // ...#....
                /* 0D88 */  0xF6, 0x69, 0x19, 0x7F, 0xE8, 0xC4, 0x5D, 0x55,  // .i....]U
                /* 0D90 */  0x7C, 0x50, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // |P.....P
                /* 0D98 */  0x37, 0x40, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // 7@....._
                /* 0DA0 */  0x2F, 0xB0, 0x04, 0xE5, 0x0F, 0x02, 0x35, 0x32,  // /.....52
                /* 0DA8 */  0x43, 0x7B, 0x96, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
                /* 0DB0 */  0xF2, 0xA9, 0x95, 0x1C, 0x34, 0x41, 0xF6, 0xFF,  // ....4A..
                /* 0DB8 */  0x1F, 0x0F, 0xCC, 0x99, 0x3F, 0x6D, 0xF8, 0xF6,  // ....?m..
                /* 0DC0 */  0xED, 0xF9, 0xFA, 0x38, 0x06, 0xD8, 0x3C, 0xEB,  // ...8..<.
                /* 0DC8 */  0xFB, 0x04, 0x03, 0x8E, 0x9B, 0x05, 0x3F, 0xC3,  // ......?.
                /* 0DD0 */  0x00, 0xCE, 0x80, 0x9E, 0x61, 0xC0, 0xF1, 0xFF,  // ....a...
                /* 0DD8 */  0x3F, 0xC3, 0xC0, 0x1C, 0x2A, 0x6E, 0x08, 0x5C,  // ?...*n.\
                /* 0DE0 */  0xEE, 0x8A, 0x28, 0x90, 0x05, 0xC2, 0xA0, 0x08,  // ..(.....
                /* 0DE8 */  0x2C, 0xEE, 0x08, 0x42, 0xCF, 0xA7, 0x70, 0x86,  // ,..B..p.
                /* 0DF0 */  0x72, 0xB2, 0xBD, 0x5F, 0x1D, 0xC8, 0x2D, 0xC2,  // r.._..-.
                /* 0DF8 */  0x43, 0x3D, 0x8B, 0xC7, 0x04, 0x76, 0xDA, 0x02,  // C=...v..
                /* 0E00 */  0xFE, 0x63, 0x83, 0x33, 0xEF, 0x27, 0xD9, 0x08,  // .c.3.'..
                /* 0E08 */  0xC7, 0x06, 0xF6, 0xE3, 0x16, 0x70, 0x3A, 0x98,  // .....p:.
                /* 0E10 */  0xC1, 0xB9, 0xFF, 0xB0, 0x1B, 0x37, 0x6E, 0x68,  // .....7nh
                /* 0E18 */  0x60, 0x1B, 0xD6, 0xFF, 0xFF, 0xC9, 0x11, 0x70,  // `......p
                /* 0E20 */  0x70, 0x62, 0xE2, 0x57, 0x89, 0x87, 0x27, 0x7E,  // pb.W..'~
                /* 0E28 */  0x32, 0x03, 0x9C, 0x0B, 0x3D, 0x96, 0xA1, 0xA4,  // 2...=...
                /* 0E30 */  0x9D, 0xCC, 0x80, 0xE8, 0xFF, 0xFF, 0x64, 0x06,  // ......d.
                /* 0E38 */  0x2C, 0xAF, 0x65, 0x3E, 0x99, 0x81, 0x5B, 0xD6,  // ,.e>..[.
                /* 0E40 */  0xC9, 0x0C, 0xE8, 0xB8, 0x3E, 0x99, 0x01, 0x95,  // ....>...
                /* 0E48 */  0x73, 0x14, 0xFE, 0x64, 0x06, 0xD8, 0xFA, 0xFF,  // s..d....
                /* 0E50 */  0x9F, 0xCC, 0x00, 0x33, 0x07, 0x2C, 0xDC, 0xC9,  // ...3.,..
                /* 0E58 */  0x0C, 0x6C, 0x87, 0x18, 0xC0, 0xF5, 0x58, 0x61,  // .l....Xa
                /* 0E60 */  0x8C, 0x81, 0x8B, 0x3E, 0xC1, 0xF0, 0x33, 0x80,  // ...>..3.
                /* 0E68 */  0x61, 0x50, 0x27, 0x23, 0x02, 0x24, 0x18, 0x1F,  // aP'#.$..
                /* 0E70 */  0xE8, 0xFF, 0xFF, 0x0F, 0x21, 0x30, 0xE6, 0xF2,  // ....!0..
                /* 0E78 */  0x3C, 0xEF, 0x6B, 0x82, 0xCF, 0x51, 0x60, 0x3F,  // <.k..Q`?
                /* 0E80 */  0x9C, 0x01, 0x87, 0x53, 0x03, 0x3E, 0xDA, 0x89,  // ...S.>..
                /* 0E88 */  0x0B, 0x3D, 0x10, 0x5F, 0x82, 0x7C, 0xE1, 0xF0,  // .=._.|..
                /* 0E90 */  0x45, 0x84, 0x5D, 0x0E, 0xC2, 0x1E, 0xB5, 0x4F,  // E.]....O
                /* 0E98 */  0x38, 0xBE, 0x5E, 0x3F, 0x9E, 0x01, 0x0E, 0x02,  // 8.^?....
                /* 0EA0 */  0x8D, 0x0E, 0x3D, 0x0A, 0x8F, 0x2E, 0x64, 0xF5,  // ..=...d.
                /* 0EA8 */  0x87, 0x33, 0x40, 0xC2, 0xFF, 0xFF, 0x5D, 0xC2,  // .3@...].
                /* 0EB0 */  0x4E, 0x2F, 0x38, 0x16, 0xA3, 0x3E, 0x02, 0x3C,  // N/8..>.<
                /* 0EB8 */  0x0F, 0xBC, 0xBA, 0xF8, 0x9C, 0xFF, 0x1C, 0xE0,  // ........
                /* 0EC0 */  0x1B, 0x03, 0xE6, 0xF6, 0xE2, 0xA3, 0x0C, 0xB3,  // ........
                /* 0EC8 */  0x30, 0x3A, 0xD0, 0xD8, 0x18, 0x1D, 0xE8, 0x86,  // 0:......
                /* 0ED0 */  0xC0, 0xEE, 0x57, 0x9E, 0x39, 0x1F, 0xC2, 0xD9,  // ..W.9...
                /* 0ED8 */  0x78, 0xF4, 0xB8, 0xA3, 0x0C, 0xBC, 0x71, 0xF8,  // x.....q.
                /* 0EE0 */  0x28, 0x03, 0xBC, 0x4E, 0x23, 0x98, 0x19, 0x84,  // (..N#...
                /* 0EE8 */  0x7F, 0x62, 0x61, 0x43, 0x38, 0x55, 0xDF, 0x26,  // .baC8U.&
                /* 0EF0 */  0xD8, 0x51, 0x06, 0xB0, 0xF6, 0xFF, 0x3F, 0xDE,  // .Q....?.
                /* 0EF8 */  0x01, 0x03, 0xC1, 0x4F, 0x06, 0x9F, 0xED, 0xA8,  // ...O....
                /* 0F00 */  0x44, 0x18, 0xD4, 0xF1, 0x0E, 0x70, 0x08, 0xF1,  // D....p..
                /* 0F08 */  0x78, 0x07, 0x76, 0x79, 0x47, 0x21, 0x7A, 0xBC,  // x.vyG!z.
                /* 0F10 */  0x03, 0xCC, 0xFC, 0xFF, 0x8F, 0x77, 0x00, 0x3B,  // .....w.;
                /* 0F18 */  0xC6, 0xEA, 0x23, 0x00, 0xF8, 0x0E, 0x41, 0x80,  // ..#...A.
                /* 0F20 */  0xAD, 0xFF, 0xFF, 0x21, 0x08, 0x18, 0x9D, 0x4E,  // ...!...N
                /* 0F28 */  0x70, 0xC7, 0x43, 0xB0, 0x1D, 0x83, 0x00, 0x6B,  // p.C....k
                /* 0F30 */  0x43, 0xF7, 0x31, 0x08, 0xCC, 0xA3, 0x85, 0x39,  // C.1....9
                /* 0F38 */  0x0A, 0x2E, 0x6C, 0x51, 0x14, 0xC8, 0x52, 0x60,  // ..lQ..R`
                /* 0F40 */  0x50, 0xE7, 0x05, 0x02, 0x24, 0x0D, 0x27, 0x39,  // P...$.'9
                /* 0F48 */  0x90, 0xFF, 0xFF, 0x8F, 0x87, 0xC0, 0xEA, 0x24,  // .......$
                /* 0F50 */  0x87, 0x97, 0x75, 0xEA, 0x40, 0x8F, 0xC7, 0xA0,  // ..u.@...
                /* 0F58 */  0xAF, 0x1C, 0xBE, 0x12, 0xF0, 0x23, 0x07, 0x93,  // .....#..
                /* 0F60 */  0x00, 0xAA, 0x41, 0xFA, 0x6C, 0x08, 0x9C, 0x8E,  // ..A.l...
                /* 0F68 */  0x1C, 0xE0, 0xB8, 0x25, 0x05, 0xC6, 0xDE, 0x0E,  // ...%....
                /* 0F70 */  0x5E, 0x39, 0x3D, 0x89, 0xA7, 0xA1, 0xE3, 0x0C,  // ^9=.....
                /* 0F78 */  0x51, 0x38, 0x26, 0x39, 0x18, 0x44, 0x7A, 0x95,  // Q8&9.Dz.
                /* 0F80 */  0x62, 0x03, 0x7C, 0xAB, 0xF1, 0xD9, 0xC8, 0x07,  // b.|.....
                /* 0F88 */  0x10, 0x78, 0xE3, 0xF6, 0xA1, 0x0E, 0x18, 0x42,  // .x.....B
                /* 0F90 */  0x9C, 0x14, 0x3F, 0x64, 0x18, 0xF3, 0xAC, 0xF8,  // ..?d....
                /* 0F98 */  0xF1, 0x03, 0x1C, 0xFF, 0xFF, 0x43, 0x1D, 0x60,  // .....C.`
                /* 0FA0 */  0x34, 0xC6, 0x89, 0x0E, 0x25, 0xFC, 0x50, 0x07,  // 4...%.P.
                /* 0FA8 */  0xE8, 0xBC, 0x01, 0x3C, 0xD4, 0x81, 0xFD, 0xD4,  // ...<....
                /* 0FB0 */  0xEC, 0x43, 0x1D, 0xF6, 0xFF, 0x7F, 0xA8, 0x03,  // .C......
                /* 0FB8 */  0xD8, 0xFA, 0xC3, 0xD0, 0x11, 0x00, 0x84, 0xE7,  // ........
                /* 0FC0 */  0x21, 0xD8, 0xFF, 0xFF, 0xF3, 0x10, 0xC0, 0x86,  // !.......
                /* 0FC8 */  0xF3, 0x1D, 0x98, 0x4F, 0x44, 0x80, 0xB5, 0xA1,  // ...OD...
                /* 0FD0 */  0xFF, 0xFF, 0x9F, 0x88, 0xC0, 0x3D, 0x5A, 0x98,  // .....=Z.
                /* 0FD8 */  0xA3, 0xE0, 0x82, 0x5E, 0x1D, 0x06, 0xA2, 0x12,  // ...^....
                /* 0FE0 */  0x60, 0x50, 0x04, 0x8E, 0xBF, 0x36, 0xC1, 0x38,  // `P...6.8
                /* 0FE8 */  0xD4, 0xF9, 0x0E, 0x7D, 0x5E, 0xF0, 0xB0, 0x9F,  // ...}^...
                /* 0FF0 */  0x0A, 0x3C, 0x89, 0x53, 0xF5, 0xB5, 0xE0, 0x28,  // .<.S...(
                /* 0FF8 */  0x9E, 0x00, 0x7C, 0xC2, 0x03, 0xFE, 0x43, 0x83,  // ..|...C.
                /* 1000 */  0x35, 0x89, 0xE2, 0x87, 0x06, 0xEA, 0x23, 0x08,  // 5.....#.
                /* 1008 */  0xF8, 0x86, 0x06, 0x8E, 0xA8, 0xE7, 0x1B, 0xF4,  // ........
                /* 1010 */  0x31, 0xCB, 0x67, 0x83, 0x98, 0x2F, 0x20, 0x11,  // 1.g../ .
                /* 1018 */  0x1E, 0x40, 0x7C, 0x7D, 0x60, 0xC7, 0x49, 0x9F,  // .@|}`.I.
                /* 1020 */  0x81, 0x02, 0xFD, 0xFF, 0xA3, 0xBC, 0x6F, 0xF0,  // ......o.
                /* 1028 */  0x13, 0x0E, 0xB8, 0x86, 0xE6, 0x53, 0x30, 0x70,  // .....S0p
                /* 1030 */  0x3D, 0x68, 0xC2, 0xB9, 0xC0, 0xF8, 0xC6, 0xC6,  // =h......
                /* 1038 */  0x4E, 0x03, 0x60, 0x3B, 0x00, 0x83, 0xEF, 0x34,  // N.`;...4
                /* 1040 */  0x00, 0x8E, 0x63, 0x12, 0x3F, 0x1D, 0x82, 0x09,  // ..c.?...
                /* 1048 */  0xE6, 0x60, 0x5E, 0x9A, 0xED, 0xFD, 0x94, 0x43,  // .`^....C
                /* 1050 */  0x8F, 0x2E, 0xC0, 0xFB, 0xFF, 0x7F, 0x36, 0x04,  // ......6.
                /* 1058 */  0xF6, 0x92, 0x0E, 0x86, 0x28, 0x11, 0x67, 0x43,  // ....(.gC
                /* 1060 */  0x40, 0xE0, 0xB1, 0xF0, 0xF4, 0x0F, 0xE0, 0xA1,  // @.......
                /* 1068 */  0xF0, 0x65, 0xD0, 0xD7, 0x86, 0x77, 0x42, 0xDF,  // .e...wB.
                /* 1070 */  0x1B, 0x0E, 0xFB, 0xDD, 0xD0, 0x67, 0x43, 0x9F,  // .....gC.
                /* 1078 */  0x08, 0x8F, 0xE0, 0xA1, 0x30, 0x4A, 0xC4, 0x83,  // ....0J..
                /* 1080 */  0x0F, 0xD2, 0x18, 0x8A, 0x6E, 0x88, 0x06, 0x8B,  // ....n...
                /* 1088 */  0xF0, 0x74, 0x68, 0xD0, 0xE0, 0xB1, 0x43, 0x84,  // .th...C.
                /* 1090 */  0x09, 0xF4, 0x6C, 0xC8, 0x56, 0xEC, 0xB3, 0x21,  // ..l.V..!
                /* 1098 */  0x30, 0xFC, 0xFF, 0x9F, 0x0D, 0x01, 0x36, 0x9E,  // 0.....6.
                /* 10A0 */  0x8F, 0x80, 0xF1, 0xFF, 0xFF, 0x7C, 0x04, 0x0C,  // .....|..
                /* 10A8 */  0x0F, 0xD9, 0xE0, 0x39, 0x05, 0xC2, 0x38, 0xF9,  // ...9..8.
                /* 10B0 */  0x00, 0xAE, 0xC7, 0x0A, 0x63, 0x0C, 0x5C, 0xB9,  // ....c.\.
                /* 10B8 */  0x0E, 0x10, 0x76, 0x1C, 0xB0, 0xA8, 0x57, 0x84,  // ..v...W.
                /* 10C0 */  0x61, 0x28, 0x8B, 0x0F, 0x0B, 0x3E, 0x22, 0xF0,  // a(...>".
                /* 10C8 */  0xC3, 0x82, 0x47, 0x50, 0xF1, 0x38, 0xE9, 0xE9,  // ..GP.8..
                /* 10D0 */  0xC6, 0x67, 0x42, 0x76, 0x48, 0x70, 0xF8, 0x41,  // .gBvHp.A
                /* 10D8 */  0xD2, 0x83, 0x26, 0x8C, 0xFF, 0xFF, 0xD1, 0x0A,  // ..&.....
                /* 10E0 */  0xFE, 0xF9, 0x08, 0x7B, 0xEB, 0x81, 0x73, 0x2A,  // ...{..s*
                /* 10E8 */  0x00, 0xDC, 0x68, 0x7B, 0xAB, 0x09, 0xDA, 0x01,  // ..h{....
                /* 10F0 */  0xCE, 0x51, 0xB2, 0x71, 0x0C, 0xA1, 0x1C, 0x8E,  // .Q.q....
                /* 10F8 */  0xF9, 0xF6, 0xD0, 0x34, 0xD9, 0xC9, 0x0A, 0x66,  // ...4...f
                /* 1100 */  0x2C, 0x48, 0x9D, 0x04, 0x7C, 0xDA, 0x70, 0x20,  // ,H..|.p 
                /* 1108 */  0x18, 0x69, 0x27, 0xD1, 0x68, 0x0C, 0x67, 0xB5,  // .i'.h.g.
                /* 1110 */  0x30, 0x82, 0x33, 0x88, 0x8F, 0x23, 0xCE, 0x75,  // 0.3..#.u
                /* 1118 */  0x32, 0x42, 0x1F, 0x28, 0x7D, 0x2A, 0xC2, 0x04,  // 2B.(}*..
                /* 1120 */  0xB9, 0x97, 0xD0, 0x79, 0xFB, 0x6E, 0xC0, 0xAF,  // ...y.n..
                /* 1128 */  0xC2, 0x1E, 0x8B, 0x81, 0x7D, 0x3B, 0x01, 0xC7,  // ....};..
                /* 1130 */  0x5C, 0xAC, 0x06, 0x14, 0x35, 0x00, 0xA3, 0x61,  // \...5..a
                /* 1138 */  0x4E, 0x01, 0x4F, 0x25, 0xE0, 0x0A, 0x86, 0x8B,  // N.O%....
                /* 1140 */  0xFA, 0xFF, 0xDF, 0x01, 0xB9, 0xD6, 0xA9, 0xE8,  // ........
                /* 1148 */  0x14, 0xF4, 0x3E, 0x70, 0x70, 0xC0, 0x63, 0xF6,  // ..>pp.c.
                /* 1150 */  0x1E, 0x1C, 0x2C, 0x34, 0x0F, 0x0E, 0x6C, 0xD9,  // ..,4..l.
                /* 1158 */  0x06, 0x87, 0x56, 0x72, 0x17, 0x21, 0x87, 0x0F,  // ..Vr.!..
                /* 1160 */  0xFC, 0xEC, 0x80, 0x03, 0xA0, 0x67, 0x07, 0x0B,  // .....g..
                /* 1168 */  0xC9, 0xB3, 0x03, 0x9B, 0xBE, 0xB3, 0x08, 0x28,  // .......(
                /* 1170 */  0x80, 0x7C, 0xEF, 0xF0, 0xB9, 0xE5, 0xD9, 0x83,  // .|......
                /* 1178 */  0x8D, 0xE1, 0xD1, 0xC5, 0x68, 0x46, 0xE7, 0x9A,  // ....hF..
                /* 1180 */  0x6E, 0x13, 0x28, 0x15, 0xB7, 0x09, 0x0A, 0xE2,  // n.(.....
                /* 1188 */  0x1B, 0x80, 0x13, 0xD2, 0xE8, 0xD6, 0x89, 0x9B,  // ........
                /* 1190 */  0x89, 0xF1, 0x1F, 0x31, 0x7C, 0x44, 0x38, 0xA4,  // ...1|D8.
                /* 1198 */  0xB3, 0x35, 0xC1, 0x3C, 0x90, 0x7A, 0x06, 0xFA,  // .5.<.z..
                /* 11A0 */  0xCE, 0x86, 0x9F, 0x7D, 0xC8, 0x07, 0x17, 0xFF,  // ...}....
                /* 11A8 */  0xFF, 0xA7, 0xE1, 0xEB, 0x0D, 0xB9, 0x77, 0xD0,  // ......w.
                /* 11B0 */  0x69, 0xFB, 0xCC, 0x80, 0x39, 0xE8, 0xFA, 0x3A,  // i...9..:
                /* 11B8 */  0xF5, 0x06, 0x4F, 0xAE, 0x12, 0xD4, 0xC3, 0x05,  // ..O.....
                /* 11C0 */  0x84, 0x5E, 0x68, 0x7C, 0xC2, 0x4B, 0xF0, 0xC0,  // .^h|.K..
                /* 11C8 */  0xE9, 0x23, 0xDE, 0x7B, 0x09, 0xBB, 0xE8, 0xBD,  // .#.{....
                /* 11D0 */  0x8C, 0x08, 0x42, 0x79, 0x07, 0x81, 0x1A, 0x95,  // ..By....
                /* 11D8 */  0x07, 0x81, 0xB9, 0xCA, 0xB3, 0x7C, 0x63, 0x40,  // .....|c@
                /* 11E0 */  0x25, 0xBB, 0x68, 0xD1, 0x33, 0xCC, 0x3B, 0x8C,  // %.h.3.;.
                /* 11E8 */  0x2F, 0x09, 0xBE, 0x7E, 0xF8, 0xDC, 0xE2, 0x05,  // /..~....
                /* 11F0 */  0xBC, 0x6E, 0xC1, 0x20, 0x78, 0x06, 0x7A, 0x75,  // .n. x.zu
                /* 11F8 */  0xF1, 0x9D, 0xDD, 0xC0, 0xAF, 0x02, 0x6F, 0x34,  // ......o4
                /* 1200 */  0x21, 0x82, 0x19, 0xF6, 0xF0, 0xDF, 0xDD, 0x8D,  // !.......
                /* 1208 */  0xEA, 0x9B, 0x8E, 0xB1, 0x5E, 0x47, 0x3C, 0x52,  // ....^G<R
                /* 1210 */  0x7E, 0x6C, 0x39, 0xA0, 0x48, 0x2F, 0x6F, 0x9E,  // ~l9.H/o.
                /* 1218 */  0x80, 0xCF, 0x32, 0x3E, 0xD5, 0x9D, 0x94, 0xAF,  // ..2>....
                /* 1220 */  0x87, 0x46, 0x7F, 0x85, 0xF0, 0xE1, 0xC7, 0xC8,  // .F......
                /* 1228 */  0x3E, 0xE7, 0xB0, 0xF3, 0x1D, 0x1B, 0x14, 0x47,  // >......G
                /* 1230 */  0x7C, 0x60, 0x78, 0xA9, 0xF1, 0x54, 0xD8, 0xB9,  // |`x..T..
                /* 1238 */  0x0B, 0xC6, 0xC1, 0x81, 0x1D, 0x8B, 0x30, 0xC7,  // ......0.
                /* 1240 */  0x57, 0x70, 0x9D, 0x6C, 0x7C, 0x72, 0x00, 0x33,  // Wp.l|r.3
                /* 1248 */  0x3C, 0xE6, 0xE0, 0xEB, 0xF3, 0x86, 0x6F, 0x06,  // <.....o.
                /* 1250 */  0x1E, 0x17, 0x3F, 0x72, 0xF8, 0xA4, 0xF1, 0xD2,  // ..?r....
                /* 1258 */  0x69, 0xEC, 0xD3, 0xF4, 0xD1, 0xE8, 0xE5, 0xCD,  // i.......
                /* 1260 */  0xA7, 0x17, 0x0C, 0xAC, 0x2F, 0x0D, 0xFF, 0xFF,  // ..../...
                /* 1268 */  0xB0, 0x18, 0xB4, 0xB0, 0x8F, 0x01, 0x67, 0xEE,  // ......g.
                /* 1270 */  0x0B, 0x11, 0xEE, 0xF0, 0x08, 0x16, 0x40, 0xFC,  // ......@.
                /* 1278 */  0xAD, 0xE4, 0x91, 0xC3, 0x13, 0x30, 0x20, 0xD3,  // .....0 .
                /* 1280 */  0xB4, 0x2E, 0x1D, 0x88, 0xF8, 0x29, 0xCF, 0xCA,  // .....)..
                /* 1288 */  0x57, 0xA6, 0xCB, 0x10, 0xC3, 0x78, 0xAA, 0x7C,  // W....x.|
                /* 1290 */  0xFC, 0xF0, 0x6C, 0x7C, 0x14, 0xF0, 0x31, 0xCA,  // ..l|..1.
                /* 1298 */  0x33, 0x3F, 0xA3, 0x48, 0xAF, 0x0C, 0x04, 0x54,  // 3?.H...T
                /* 12A0 */  0x27, 0x22, 0xAE, 0x10, 0x46, 0x62, 0x68, 0x74,  // '"..Fbht
                /* 12A8 */  0xE7, 0xE0, 0xF1, 0x87, 0x48, 0x41, 0x0C, 0xE8,  // ....HA..
                /* 12B0 */  0x9B, 0x0B, 0x30, 0x3D, 0x13, 0x01, 0x97, 0x9B,  // ..0=....
                /* 12B8 */  0x0B, 0xF0, 0xFF, 0xFF, 0xDF, 0x5C, 0x00, 0xFE,  // .....\..
                /* 12C0 */  0xFF, 0xFF, 0x6F, 0x2E, 0x70, 0xEF, 0x0F, 0xBE,  // ..o.p...
                /* 12C8 */  0xB9, 0x00, 0xD7, 0x10, 0xAB, 0xD2, 0xCD, 0x85,  // ........
                /* 12D0 */  0x1F, 0x00, 0x1C, 0x75, 0x41, 0xBA, 0x15, 0x44,  // ...uA..D
                /* 12D8 */  0x3C, 0x04, 0x0F, 0xF2, 0x51, 0xC0, 0xB0, 0x67,  // <...Q..g
                /* 12E0 */  0xF9, 0x10, 0xED, 0xE1, 0x98, 0x60, 0xB8, 0xAB,  // .....`..
                /* 12E8 */  0x06, 0x1D, 0x9A, 0x63, 0x51, 0x48, 0xC8, 0xBD,  // ...cQH..
                /* 12F0 */  0x05, 0x15, 0xFD, 0xFE, 0x40, 0x41, 0x0C, 0xE8,  // ....@A..
                /* 12F8 */  0x8B, 0x21, 0x60, 0xEB, 0xD6, 0x02, 0x2C, 0xC2,  // .!`...,.
                /* 1300 */  0x0C, 0x1A, 0x25, 0x1F, 0x46, 0x43, 0x32, 0x88,  // ..%.FC2.
                /* 1308 */  0x07, 0x6D, 0x69, 0xB7, 0x16, 0xFA, 0xFF, 0xBF,  // .mi.....
                /* 1310 */  0xB5, 0xC0, 0x3D, 0x04, 0xF8, 0xD6, 0x02, 0x5F,  // ..=...._
                /* 1318 */  0xDE, 0xAD, 0x05, 0x14, 0xB7, 0x00, 0x1F, 0x0D,  // ........
                /* 1320 */  0xF8, 0x71, 0xC1, 0x07, 0x0E, 0xDF, 0x58, 0x7C,  // .q....X|
                /* 1328 */  0xD3, 0x25, 0x17, 0x16, 0xA8, 0xE3, 0xE7, 0xE0,  // .%......
                /* 1330 */  0x16, 0x77, 0x61, 0x81, 0x72, 0x32, 0x01, 0xC7,  // .wa.r2..
                /* 1338 */  0x91, 0x04, 0x70, 0x08, 0xE9, 0x23, 0x09, 0xF0,  // ..p..#..
                /* 1340 */  0xFA, 0xFF, 0x1F, 0x49, 0xE0, 0x44, 0x5A, 0x15,  // ...I.DZ.
                /* 1348 */  0x15, 0xF1, 0x1E, 0xD0, 0xA9, 0xC4, 0x30, 0x7C,  // ......0|
                /* 1350 */  0x74, 0x3E, 0x33, 0xE0, 0xAF, 0x1C, 0x0C, 0x9C,  // t>3.....
                /* 1358 */  0x5D, 0xD3, 0x0C, 0xC7, 0x07, 0xEE, 0xF1, 0x3D,  // ]......=
                /* 1360 */  0xA7, 0x9D, 0xD6, 0x43, 0x81, 0xE7, 0xF1, 0x76,  // ...C...v
                /* 1368 */  0x10, 0x92, 0x5D, 0xA8, 0x71, 0x87, 0x07, 0x8F,  // ..].q...
                /* 1370 */  0xFD, 0xA1, 0xC8, 0x37, 0x84, 0x17, 0x04, 0x5F,  // ...7..._
                /* 1378 */  0x0E, 0x18, 0x14, 0x8C, 0x3B, 0x35, 0xE6, 0x40,  // ....;5.@
                /* 1380 */  0x0D, 0x87, 0xE0, 0x8C, 0x8F, 0x02, 0x33, 0x48,  // ......3H
                /* 1388 */  0x5F, 0x40, 0x5E, 0x0F, 0x3C, 0x58, 0xE6, 0xFE,  // _@^.<X..
                /* 1390 */  0x5E, 0x20, 0x73, 0x03, 0xD0, 0x61, 0x22, 0xC6,  // ^ s..a".
                /* 1398 */  0xC3, 0xC2, 0x49, 0x3D, 0x42, 0xB4, 0x75, 0x29,  // ..I=B.u)
                /* 13A0 */  0x90, 0x37, 0x08, 0x9D, 0xA9, 0xA2, 0x84, 0x88,  // .7......
                /* 13A8 */  0x79, 0x06, 0xE1, 0xA2, 0x44, 0x8C, 0x10, 0xF0,  // y...D...
                /* 13B0 */  0x5D, 0x26, 0x4A, 0xE0, 0x28, 0x31, 0xDF, 0x0F,  // ]&J.(1..
                /* 13B8 */  0xDE, 0x16, 0x82, 0x3D, 0x2E, 0x44, 0x88, 0x15,  // ...=.D..
                /* 13C0 */  0x22, 0xB0, 0xED, 0x0F, 0x82, 0x04, 0x78, 0x53,  // ".....xS
                /* 13C8 */  0xE8, 0x9A, 0xE2, 0x48, 0x87, 0x18, 0xF4, 0xB0,  // ...H....
                /* 13D0 */  0x7D, 0xC3, 0xE6, 0xD3, 0x0A, 0x72, 0x5C, 0x3E,  // }....r\>
                /* 13D8 */  0xC8, 0x60, 0x08, 0x1E, 0x3E, 0xFC, 0x05, 0xF0,  // .`..>...
                /* 13E0 */  0x01, 0x00, 0xEF, 0x1A, 0x50, 0x33, 0x7F, 0x3C,  // ....P3.<
                /* 13E8 */  0x00, 0xCB, 0xE1, 0x02, 0xFE, 0x09, 0x06, 0x7B,  // .......{
                /* 13F0 */  0x56, 0xD1, 0x20, 0x50, 0x27, 0x15, 0x7E, 0xBA,  // V. P'.~.
                /* 13F8 */  0xF2, 0x4D, 0xDB, 0x37, 0x20, 0x13, 0xF8, 0xFF,  // .M.7 ...
                /* 1400 */  0x2F, 0xF6, 0x20, 0x42, 0xC7, 0x03, 0xFE, 0xD1,  // /. B....
                /* 1408 */  0xBF, 0xA4, 0xFB, 0x50, 0xE1, 0xF9, 0xFA, 0xAA,  // ...P....
                /* 1410 */  0xEE, 0xAB, 0x3C, 0x58, 0xAE, 0x09, 0xFC, 0x32,  // ..<X...2
                /* 1418 */  0x0F, 0x78, 0x14, 0x3C, 0x2E, 0x14, 0x34, 0x0E,  // .x.<..4.
                /* 1420 */  0xF1, 0xA9, 0xEE, 0xD4, 0x7D, 0x66, 0x39, 0x61,  // ....}f9a
                /* 1428 */  0xDC, 0x88, 0xD9, 0x78, 0xC1, 0x35, 0x0E, 0xAE,  // ...x.5..
                /* 1430 */  0x9C, 0x84, 0x1E, 0x0B, 0xAC, 0x15, 0x06, 0x75,  // .......u
                /* 1438 */  0xF8, 0xF1, 0xDD, 0xCA, 0x67, 0x04, 0x7E, 0x12,  // ....g.~.
                /* 1440 */  0x31, 0x7C, 0xC5, 0x63, 0xA5, 0x33, 0xF0, 0x95,  // 1|.c.3..
                /* 1448 */  0xC2, 0xB7, 0x52, 0x0A, 0xAE, 0xFF, 0xFF, 0x91,  // ..R.....
                /* 1450 */  0xCB, 0x87, 0x1A, 0x1F, 0xDA, 0xF1, 0xE7, 0x0B,  // ........
                /* 1458 */  0x5C, 0x80, 0x21, 0xD3, 0x1B, 0x17, 0x8C, 0x6B,  // \.!....k
                /* 1460 */  0x8A, 0x6F, 0x5C, 0x98, 0xBB, 0x83, 0x07, 0xE4,  // .o\.....
                /* 1468 */  0x23, 0x06, 0xF0, 0x59, 0x85, 0x07, 0x86, 0x3B,  // #..Y...;
                /* 1470 */  0x2D, 0xF8, 0x2E, 0x68, 0xD0, 0x73, 0x0C, 0xEA,  // -..h.s..
                /* 1478 */  0x23, 0xCF, 0xC9, 0xFB, 0x9E, 0xF0, 0x38, 0xE1,  // #.....8.
                /* 1480 */  0xA8, 0xE7, 0x20, 0x3A, 0x36, 0x70, 0x1C, 0x37,  // .. :6p.7
                /* 1488 */  0xC0, 0x71, 0xB8, 0xC1, 0x1D, 0x74, 0x7C, 0x31,  // .q...t|1
                /* 1490 */  0x38, 0x2E, 0xCC, 0xA9, 0xCE, 0x30, 0x87, 0xE1,  // 8....0..
                /* 1498 */  0x9B, 0x8E, 0x47, 0x84, 0x19, 0xFF, 0x0B, 0xAE,  // ..G.....
                /* 14A0 */  0x11, 0x02, 0xE2, 0x2F, 0x46, 0x6C, 0xC0, 0x60,  // .../Fl.`
                /* 14A8 */  0xBC, 0x97, 0xFA, 0x6C, 0x86, 0x1B, 0xB0, 0xAF,  // ...l....
                /* 14B0 */  0x0E, 0xBE, 0x60, 0xF8, 0x8C, 0x69, 0xF4, 0x17,  // ..`..i..
                /* 14B8 */  0x98, 0x67, 0x4D, 0x1F, 0x1B, 0xC8, 0xE9, 0x8C,  // .gM.....
                /* 14C0 */  0x0E, 0x18, 0x1C, 0x80, 0xFE, 0xFF, 0x0F, 0x18,  // ........
                /* 14C8 */  0xFE, 0xE1, 0xE2, 0x41, 0x0D, 0x0C, 0xE7, 0x3C,  // ...A...<
                /* 14D0 */  0x1F, 0x17, 0x7C, 0xEC, 0xB1, 0xA2, 0xDB, 0x2A,  // ..|....*
                /* 14D8 */  0xFA, 0xA8, 0x66, 0x98, 0x38, 0x86, 0x78, 0x03,  // ..f.8.x.
                /* 14E0 */  0x63, 0x77, 0x09, 0x72, 0x5B, 0x83, 0x7A, 0x97,  // cw.r[.z.
                /* 14E8 */  0xF0, 0x1C, 0xF8, 0xD9, 0xC2, 0x67, 0x54, 0xDF,  // .....gT.
                /* 14F0 */  0x7C, 0x42, 0x9C, 0xEA, 0xA3, 0xD5, 0x7B, 0x80,  // |B....{.
                /* 14F8 */  0x8F, 0x1E, 0xEF, 0x5D, 0x3E, 0x3B, 0xB1, 0x8B,  // ...]>;..
                /* 1500 */  0x80, 0x8F, 0x5C, 0xC6, 0xF1, 0x34, 0x7D, 0xBE,  // ..\..4}.
                /* 1508 */  0xF3, 0x90, 0x0D, 0xF6, 0xAA, 0xE1, 0x13, 0x98,  // ........
                /* 1510 */  0xCF, 0x6C, 0xB8, 0x63, 0x94, 0x67, 0xE2, 0xE9,  // .l.c.g..
                /* 1518 */  0xFB, 0x0E, 0xC2, 0x8E, 0x24, 0xEF, 0x91, 0x5E,  // ....$..^
                /* 1520 */  0xD3, 0x23, 0xCA, 0x09, 0x1D, 0x88, 0x6F, 0x6D,  // .#....om
                /* 1528 */  0xE0, 0x8C, 0x76, 0xFF, 0x40, 0x6F, 0xD3, 0x23,  // ..v.@o.#
                /* 1530 */  0xC3, 0x1C, 0x0D, 0x60, 0x5D, 0x42, 0xC0, 0x75,  // ...`]B.u
                /* 1538 */  0xC7, 0xF0, 0x25, 0x04, 0xF8, 0x04, 0xBD, 0x44,  // ..%....D
                /* 1540 */  0x20, 0xFE, 0xFF, 0xA3, 0x63, 0xD7, 0x0C, 0x8F,  //  ...c...
                /* 1548 */  0xEE, 0x11, 0x00, 0x73, 0xC5, 0x60, 0xC7, 0x02,  // ...s.`..
                /* 1550 */  0x1F, 0x36, 0x7C, 0x0D, 0x60, 0xF7, 0x02, 0x5F,  // .6|.`.._
                /* 1558 */  0x22, 0x7D, 0x8F, 0x00, 0x0F, 0xA8, 0x87, 0x07,  // "}......
                /* 1560 */  0x5F, 0xED, 0x3D, 0x02, 0x14, 0x67, 0x67, 0x1F,  // _.=..gg.
                /* 1568 */  0x1A, 0x3C, 0x50, 0xAB, 0x3A, 0x45, 0x43, 0x39,  // .<P.:EC9
                /* 1570 */  0x44, 0x73, 0xA8, 0x68, 0xEC, 0x56, 0xC0, 0xEE,  // Ds.h.V..
                /* 1578 */  0xCF, 0xBE, 0x49, 0xC0, 0xCD, 0x33, 0x0B, 0x54,  // ..I..3.T
                /* 1580 */  0x92, 0x9B, 0x04, 0x74, 0x98, 0x2E, 0x2F, 0x33,  // ...t../3
                /* 1588 */  0x74, 0xFE, 0x07, 0xEE, 0x5B, 0x9D, 0x47, 0xE8,  // t...[.G.
                /* 1590 */  0x43, 0x04, 0x43, 0x79, 0xCF, 0xF3, 0x29, 0x8C,  // C.Cy..).
                /* 1598 */  0x9F, 0x21, 0x7C, 0x84, 0x66, 0x67, 0x0A, 0x7E,  // .!|.fg.~
                /* 15A0 */  0x9A, 0xC6, 0xDD, 0x01, 0x8C, 0xF2, 0x6E, 0xED,  // ......n.
                /* 15A8 */  0x09, 0xB0, 0x13, 0xB6, 0x91, 0xDF, 0x0D, 0xDE,  // ........
                /* 15B0 */  0x05, 0x3C, 0x7D, 0xDF, 0x8B, 0xF8, 0x89, 0x02,  // .<}.....
                /* 15B8 */  0x7C, 0xC1, 0xEE, 0x74, 0x50, 0xA0, 0x4F, 0xC8,  // |..tP.O.
                /* 15C0 */  0x23, 0x32, 0xAA, 0x8F, 0x08, 0xFC, 0x92, 0x84,  // #2......
                /* 15C8 */  0xFF, 0xFF, 0x1F, 0x11, 0xC0, 0x70, 0x24, 0xF1,  // .....p$.
                /* 15D0 */  0x81, 0x02, 0x08, 0xDD, 0x0B, 0x50, 0xA7, 0x0F,  // .....P..
                /* 15D8 */  0x8E, 0x7A, 0xC6, 0x8F, 0xA9, 0xC6, 0x7C, 0xB7,  // .z....|.
                /* 15E0 */  0x7A, 0x84, 0xF3, 0xE4, 0x30, 0x97, 0x03, 0x16,  // z...0...
                /* 15E8 */  0xE7, 0x9A, 0x04, 0xAA, 0x03, 0x3D, 0x1F, 0x1D,  // .....=..
                /* 15F0 */  0xDC, 0x6B, 0x2B, 0x7E, 0x70, 0xEF, 0x2C, 0xEF,  // .k+~p.,.
                /* 15F8 */  0x7C, 0x86, 0xF2, 0x20, 0xC1, 0x77, 0x6D, 0x05,  // |.. .wm.
                /* 1600 */  0xC7, 0x55, 0x0D, 0xC6, 0xB1, 0x85, 0x5F, 0xF2,  // .U...._.
                /* 1608 */  0x80, 0xFB, 0xFF, 0xFF, 0x92, 0x07, 0x86, 0x61,  // .......a
                /* 1610 */  0x71, 0xC1, 0x7F, 0x0F, 0x03, 0x51, 0x89, 0x30,  // q....Q.0
                /* 1618 */  0x28, 0x02, 0xCB, 0xBB, 0xB7, 0x52, 0xF8, 0x43,  // (....R.C
                /* 1620 */  0x06, 0xE3, 0x4D, 0x81, 0x4F, 0x1A, 0x3B, 0x6A,  // ..M.O.;j
                /* 1628 */  0xC0, 0xCE, 0x50, 0x71, 0x37, 0x45, 0xB0, 0x4E,  // ..Pq7E.N
                /* 1630 */  0x15, 0x33, 0x04, 0x1E, 0xEC, 0x01, 0xE0, 0xF3,  // .3......
                /* 1638 */  0x95, 0xCF, 0x00, 0x8A, 0x02, 0x83, 0xBA, 0x90,  // ........
                /* 1640 */  0xC3, 0xB9, 0x0D, 0x03, 0x93, 0xFF, 0xFF, 0x6D,  // .......m
                /* 1648 */  0x18, 0xCC, 0x23, 0xC6, 0x5D, 0x0A, 0xE1, 0x4E,  // ..#.]..N
                /* 1650 */  0xF9, 0x1D, 0x25, 0xF6, 0x6B, 0x8A, 0x2F, 0x25,  // ..%.k./%
                /* 1658 */  0xA7, 0x8B, 0xC3, 0x79, 0x3A, 0xE1, 0x17, 0x64,  // ...y:..d
                /* 1660 */  0x18, 0x67, 0x81, 0x47, 0x80, 0x57, 0x73, 0x7E,  // .g.G.Ws~
                /* 1668 */  0x41, 0x7E, 0x27, 0x7E, 0x21, 0x78, 0x4C, 0x0A,  // A~'~!xL.
                /* 1670 */  0xF1, 0xA6, 0xF4, 0x6C, 0xF0, 0xB2, 0x13, 0xE3,  // ...l....
                /* 1678 */  0xC9, 0xF8, 0x19, 0x39, 0x4E, 0x98, 0xE7, 0x9D,  // ...9N...
                /* 1680 */  0x17, 0x64, 0x63, 0x1C, 0xCD, 0x5B, 0xB2, 0xE7,  // .dc..[..
                /* 1688 */  0xF6, 0x30, 0x10, 0xF9, 0x5C, 0xA2, 0xBC, 0x9F,  // .0..\...
                /* 1690 */  0xBC, 0x10, 0x44, 0x8C, 0x66, 0x88, 0xA0, 0x2F,  // ..D.f../
                /* 1698 */  0xC8, 0x3E, 0x31, 0x1B, 0xEF, 0x05, 0x99, 0x09,  // .>1.....
                /* 16A0 */  0x7C, 0x2B, 0xE8, 0xE0, 0xE2, 0x0B, 0x32, 0xC0,  // |+....2.
                /* 16A8 */  0x82, 0xFF, 0xFF, 0x05, 0x19, 0xE6, 0xC9, 0x08,  // ........
                /* 16B0 */  0xF0, 0x79, 0xE2, 0xC0, 0x5D, 0xAA, 0xC1, 0x77,  // .y..]..w
                /* 16B8 */  0xB2, 0x01, 0x9C, 0x0D, 0xDD, 0x27, 0x1B, 0x30,  // .....'.0
                /* 16C0 */  0xFC, 0xFF, 0x4F, 0x36, 0x30, 0x47, 0x0B, 0xEF,  // ..O60G..
                /* 16C8 */  0x68, 0x82, 0x38, 0xD9, 0x50, 0x20, 0x07, 0x5F,  // h.8.P ._
                /* 16D0 */  0x17, 0x85, 0xE3, 0xA1, 0x4F, 0x22, 0xF4, 0xE8,  // ....O"..
                /* 16D8 */  0xE4, 0xA3, 0x24, 0xEE, 0xCC, 0xE0, 0x89, 0xBC,  // ..$.....
                /* 16E0 */  0xB3, 0x78, 0x14, 0x2F, 0x83, 0xBE, 0x17, 0x9C,  // .x./....
                /* 16E8 */  0xC8, 0xEB, 0x83, 0xE5, 0x1C, 0x23, 0x41, 0x35,  // .....#A5
                /* 16F0 */  0x12, 0x1F, 0x1F, 0xE0, 0x5F, 0x5F, 0x7C, 0x8C,  // ....__|.
                /* 16F8 */  0x84, 0xCF, 0xE7, 0x1F, 0x96, 0x07, 0x63, 0x48,  // ......cH
                /* 1700 */  0x9F, 0x22, 0x39, 0xC8, 0xB3, 0xCB, 0x63, 0x08,  // ."9...c.
                /* 1708 */  0xBF, 0x40, 0xC2, 0x3D, 0xCD, 0x1C, 0x00, 0x46,  // .@.=...F
                /* 1710 */  0xD6, 0xE5, 0x11, 0x7D, 0x76, 0xE4, 0x18, 0x71,  // ...}v..q
                /* 1718 */  0x7D, 0x51, 0xF4, 0x15, 0xD8, 0x07, 0x81, 0xF3,  // }Q......
                /* 1720 */  0x79, 0x4E, 0x04, 0xEB, 0xA8, 0xF9, 0xD1, 0x86,  // yN......
                /* 1728 */  0x8F, 0x9F, 0x83, 0xBF, 0x15, 0x3C, 0x50, 0xFA,  // .....<P.
                /* 1730 */  0x58, 0x14, 0xE2, 0x11, 0x89, 0x9F, 0x13, 0xC1,  // X.......
                /* 1738 */  0x65, 0x42, 0xC0, 0xFF, 0xFF, 0x74, 0x03, 0x1C,  // eB...t..
                /* 1740 */  0x0E, 0xBD, 0x30, 0x4E, 0x0B, 0xB8, 0x81, 0xF8,  // ..0N....
                /* 1748 */  0x4C, 0x89, 0x9D, 0xF2, 0x89, 0xB0, 0x73, 0x09,  // L.....s.
                /* 1750 */  0x66, 0x74, 0xE0, 0xBA, 0xDC, 0x7B, 0x74, 0xE0,  // ft...{t.
                /* 1758 */  0x3F, 0x09, 0xE0, 0xB1, 0x1E, 0xEF, 0xC0, 0x77,  // ?......w
                /* 1760 */  0x52, 0xF7, 0xDD, 0xC4, 0x17, 0x19, 0x1F, 0x8A,  // R.......
                /* 1768 */  0x9E, 0xEF, 0x00, 0x73, 0xFF, 0xFF, 0xF3, 0x1D,  // ...s....
                /* 1770 */  0xB0, 0x08, 0x77, 0xB8, 0x43, 0xC5, 0x39, 0xDF,  // ..w.C.9.
                /* 1778 */  0x01, 0xD4, 0x38, 0x5B, 0x3F, 0xDF, 0x81, 0x5D,  // ..8[?..]
                /* 1780 */  0xE4, 0xF9, 0x0E, 0x08, 0xFD, 0xFF, 0xCF, 0x77,  // .......w
                /* 1788 */  0x00, 0x4B, 0xCF, 0x68, 0xB8, 0xF3, 0x1D, 0xD8,  // .K.h....
                /* 1790 */  0x8E, 0x36, 0xF0, 0xFF, 0xFF, 0x47, 0x1B, 0xC0,  // .6...G..
                /* 1798 */  0xCC, 0x34, 0x1E, 0x6D, 0xC0, 0x3D, 0x5C, 0xD8,  // .4.m.=\.
                /* 17A0 */  0xC3, 0xE0, 0x81, 0x1F, 0x08, 0xF4, 0x50, 0xE0,  // ......P.
                /* 17A8 */  0x88, 0x30, 0xA8, 0x63, 0x9A, 0x8F, 0x0C, 0x3E,  // .0.c...>
                /* 17B0 */  0x28, 0xF0, 0x23, 0x83, 0xCF, 0x09, 0x8F, 0x0F,  // (.#.....
                /* 17B8 */  0x87, 0xCA, 0x8E, 0x30, 0xBE, 0x84, 0xF8, 0xA8,  // ...0....
                /* 17C0 */  0xC0, 0xA2, 0x50, 0x0A, 0xD4, 0xA7, 0x12, 0xC0,  // ..P.....
                /* 17C8 */  0x51, 0xA0, 0x91, 0xA1, 0x47, 0xF1, 0xFF, 0x4F,  // Q...G..O
                /* 17D0 */  0x70, 0x54, 0xB8, 0x23, 0x19, 0x78, 0xEE, 0x39,  // pT.#.x.9
                /* 17D8 */  0x1E, 0xB9, 0x07, 0x06, 0x7C, 0x62, 0x0D, 0x0C,  // ....|b..
                /* 17E0 */  0x7D, 0x2E, 0x82, 0x3B, 0x36, 0x70, 0x9D, 0x64,  // }..;6p.d
                /* 17E8 */  0x80, 0xC3, 0xD8, 0xF0, 0x47, 0x3D, 0x8F, 0x0D,  // ....G=..
                /* 17F0 */  0x37, 0x10, 0x1F, 0x25, 0x8E, 0xEB, 0x55, 0xCF,  // 7..%..U.
                /* 17F8 */  0x67, 0x05, 0x1C, 0xF8, 0xD9, 0xBD, 0x4E, 0xF1,  // g.....N.
                /* 1800 */  0xD1, 0x81, 0x0B, 0xD0, 0x07, 0x01, 0x60, 0xF8,  // ......`.
                /* 1808 */  0xFF, 0x1F, 0x1D, 0xF6, 0xB0, 0x85, 0x19, 0x1B,  // ........
                /* 1810 */  0xD8, 0x8E, 0x3F, 0x1E, 0x1B, 0xF0, 0xC9, 0x77,  // ..?....w
                /* 1818 */  0x7E, 0x85, 0x02, 0xFD, 0x72, 0xC4, 0x10, 0x5F,  // ~...r.._
                /* 1820 */  0x51, 0x7C, 0xF3, 0x30, 0xC1, 0x2C, 0xE7, 0x57,  // Q|.0.,.W
                /* 1828 */  0xD0, 0x0C, 0xCD, 0xA0, 0x1E, 0x1A, 0xFC, 0x33,  // .......3
                /* 1830 */  0x23, 0x39, 0xBF, 0x42, 0x3F, 0xAC, 0xFA, 0xC0,  // #9.B?...
                /* 1838 */  0x61, 0x0D, 0x83, 0xA0, 0xE3, 0xF4, 0x01, 0x96,  // a.......
                /* 1840 */  0xDF, 0xD4, 0x1E, 0x76, 0xD8, 0xD9, 0x27, 0x42,  // ...v..'B
                /* 1848 */  0x02, 0x67, 0x3C, 0xC2, 0x42, 0xCF, 0x34, 0x06,  // .g<.B.4.
                /* 1850 */  0x54, 0x9A, 0x73, 0x2A, 0x3D, 0xB1, 0x84, 0x38,  // T.s*=..8
                /* 1858 */  0xD1, 0xDE, 0x4F, 0x74, 0xF4, 0xB0, 0xE1, 0x8B,  // ..Ot....
                /* 1860 */  0xAA, 0x67, 0xFB, 0x68, 0xE0, 0x41, 0xFA, 0xC4,  // .g.h.A..
                /* 1868 */  0xC1, 0x8E, 0xB1, 0xBE, 0x20, 0x3D, 0xC7, 0x18,  // .... =..
                /* 1870 */  0xED, 0x3D, 0xC2, 0xE7, 0x9D, 0x80, 0xE1, 0x22,  // .=....."
                /* 1878 */  0x84, 0x63, 0xA7, 0x3E, 0x8F, 0xC4, 0x67, 0x61,  // .c.>..ga
                /* 1880 */  0xCF, 0xD3, 0x27, 0x1E, 0xEC, 0xD1, 0x87, 0xFF,  // ..'.....
                /* 1888 */  0xFF, 0x8F, 0x79, 0x0C, 0xDB, 0xD7, 0x01, 0x36,  // ..y....6
                /* 1890 */  0x2A, 0x1F, 0x4C, 0x8D, 0x6D, 0xD0, 0x47, 0x33,  // *.L.m.G3
                /* 1898 */  0x4F, 0x9B, 0x5D, 0x42, 0xC1, 0x27, 0xE9, 0x33,  // O.]B.'.3
                /* 18A0 */  0xA2, 0xFB, 0x01, 0xEE, 0xAA, 0xE8, 0x0B, 0x19,  // ........
                /* 18A8 */  0x0C, 0x88, 0x13, 0xF1, 0x6D, 0xC1, 0xE8, 0xEF,  // ....m...
                /* 18B0 */  0x08, 0x2C, 0xF6, 0x1D, 0x01, 0x54, 0xF7, 0x01,  // .,...T..
                /* 18B8 */  0x7E, 0x47, 0x80, 0x3B, 0x95, 0x77, 0x04, 0x30,  // ~G.;.w.0
                /* 18C0 */  0xE8, 0xBB, 0x10, 0xD0, 0x81, 0x7A, 0x7E, 0x1E,  // .....z~.
                /* 18C8 */  0xAB, 0xAF, 0x86, 0x2F, 0x09, 0x3E, 0x26, 0x30,  // .../.>&0
                /* 18D0 */  0x18, 0x5F, 0x09, 0x8D, 0x61, 0x18, 0x8F, 0x34,  // ._..a..4
                /* 18D8 */  0x8C, 0x0F, 0x0A, 0x5C, 0x05, 0xBB, 0x0E, 0x0A,  // ...\....
                /* 18E0 */  0x70, 0x53, 0xCF, 0x03, 0x95, 0xF7, 0xA0, 0x00,  // pS......
                /* 18E8 */  0xE5, 0x46, 0xD0, 0xE5, 0xE5, 0x19, 0x35, 0x3E,  // .F....5>
                /* 18F0 */  0x9F, 0x06, 0xEC, 0x6B, 0xB2, 0x82, 0x09, 0xF4,  // ...k....
                /* 18F8 */  0xA8, 0xEC, 0x4B, 0x07, 0x1B, 0x5C, 0x14, 0xDF,  // ..K..\..
                /* 1900 */  0x27, 0xD9, 0xDD, 0x2B, 0x5C, 0x9C, 0x33, 0xF1,  // '..+\.3.
                /* 1908 */  0x60, 0x0D, 0x67, 0xA0, 0xAA, 0xE1, 0xA0, 0x5D,  // `.g....]
                /* 1910 */  0x0D, 0x1E, 0x04, 0xD8, 0x91, 0xCB, 0xD3, 0x32,  // .......2
                /* 1918 */  0x22, 0xF6, 0xFF, 0x8F, 0xE8, 0xAB, 0xCD, 0xCB,  // ".......
                /* 1920 */  0x83, 0xCF, 0x93, 0x71, 0x0C, 0xF9, 0x08, 0xEA,  // ...q....
                /* 1928 */  0x53, 0x81, 0x0F, 0x5B, 0xBE, 0x19, 0x18, 0xF8,  // S..[....
                /* 1930 */  0x41, 0xE1, 0xF9, 0xD8, 0xC7, 0x07, 0x36, 0xB4,  // A.....6.
                /* 1938 */  0xB7, 0x05, 0x4F, 0x20, 0xD6, 0x9B, 0x03, 0x8C,  // ..O ....
                /* 1940 */  0x93, 0x03, 0xF8, 0xB4, 0x3F, 0x14, 0x74, 0x75,  // ....?.tu
                /* 1948 */  0xC6, 0xDF, 0x0C, 0xE1, 0xC1, 0xBF, 0x03, 0x30,  // .......0
                /* 1950 */  0x85, 0xD0, 0x3A, 0x38, 0x80, 0xE7, 0x66, 0x08,  // ..:8..f.
                /* 1958 */  0x8E, 0x4B, 0x0F, 0x39, 0x38, 0x40, 0x0F, 0x71,  // .K.98@.q
                /* 1960 */  0x41, 0xA0, 0x56, 0x6E, 0x99, 0xF4, 0xAE, 0x02,  // A.Vn....
                /* 1968 */  0xE7, 0xD8, 0xE0, 0x93, 0x6A, 0x82, 0xDE, 0xAE,  // ....j...
                /* 1970 */  0xED, 0xF4, 0x04, 0xEF, 0x03, 0x04, 0x87, 0x35,  // .......5
                /* 1978 */  0xC4, 0x73, 0x3C, 0x03, 0x36, 0x46, 0x64, 0x1F,  // .s<.6Fd.
                /* 1980 */  0x23, 0x18, 0x46, 0x6C, 0x63, 0x04, 0x37, 0x46,  // #.Flc.7F
                /* 1988 */  0x74, 0x1F, 0x23, 0x18, 0x7A, 0xF1, 0x38, 0xC2,  // t.#.z.8.
                /* 1990 */  0x88, 0xE0, 0xAB, 0x04, 0xD7, 0x72, 0x0A, 0xD1,  // .....r..
                /* 1998 */  0x55, 0x02, 0x6E, 0xF6, 0x95, 0x69, 0x68, 0x3C,  // U.n..ih<
                /* 19A0 */  0x35, 0x89, 0xAE, 0x12, 0x30, 0x2E, 0xF6, 0x98,  // 5...0...
                /* 19A8 */  0xDB, 0x04, 0xFF, 0xFF, 0xDF, 0x26, 0xB0, 0x37,  // .....&.7
                /* 19B0 */  0x17, 0xDF, 0x88, 0x7C, 0x7C, 0xC1, 0x1D, 0x61,  // ...||..a
                /* 19B8 */  0xD8, 0xDD, 0xDC, 0xE7, 0x53, 0xCC, 0x09, 0x02,  // ....S...
                /* 19C0 */  0xC6, 0xC9, 0x01, 0x77, 0x88, 0x00, 0xD7, 0x41,  // ...w...A
                /* 19C8 */  0x81, 0xA1, 0x3C, 0xD0, 0x70, 0x24, 0x06, 0xF7,  // ..<.p$..
                /* 19D0 */  0x3A, 0x10, 0x21, 0x12, 0x8C, 0x49, 0xB1, 0x5B,  // :.!..I.[
                /* 19D8 */  0xA0, 0x8F, 0x37, 0xEC, 0x3C, 0xE1, 0x61, 0xF9,  // ..7.<.a.
                /* 19E0 */  0x86, 0xC1, 0x2F, 0x3D, 0x1E, 0x8F, 0x47, 0xE1,  // ../=..G.
                /* 19E8 */  0x93, 0x21, 0xBB, 0x38, 0x3E, 0x44, 0x18, 0x25,  // .!.8>D.%
                /* 19F0 */  0x1A, 0x3B, 0x39, 0x44, 0x38, 0xB9, 0xA7, 0x10,  // .;9D8...
                /* 19F8 */  0x9F, 0x39, 0x7C, 0x86, 0xC3, 0xDC, 0x20, 0x8F,  // .9|... .
                /* 1A00 */  0xEB, 0xA0, 0x7C, 0xBD, 0x64, 0xC3, 0x36, 0x8E,  // ..|.d.6.
                /* 1A08 */  0x61, 0x9F, 0x83, 0x3C, 0x03, 0x8F, 0x25, 0xF6,  // a..<..%.
                /* 1A10 */  0x01, 0x19, 0x92, 0x0D, 0x8B, 0x0D, 0xD1, 0x78,  // .......x
                /* 1A18 */  0x3E, 0xDF, 0x30, 0x9C, 0x58, 0x1E, 0x27, 0x76,  // >.0.X.'v
                /* 1A20 */  0x32, 0x0C, 0xFB, 0x6C, 0x3D, 0x0D, 0x7E, 0xD0,  // 2..l=.~.
                /* 1A28 */  0xF0, 0x9D, 0xE0, 0xF4, 0x0C, 0xFB, 0x22, 0x11,  // ......".
                /* 1A30 */  0xE6, 0x71, 0xC0, 0xB7, 0x10, 0xD8, 0x37, 0x85,  // .q....7.
                /* 1A38 */  0xC7, 0x23, 0xA3, 0xBC, 0xA7, 0xB0, 0xDB, 0x08,  // .#......
                /* 1A40 */  0x30, 0x38, 0x7A, 0x06, 0xC6, 0xFD, 0xFF, 0xCF,  // 08z.....
                /* 1A48 */  0xFA, 0x70, 0x21, 0xDE, 0xD9, 0x8C, 0xFE, 0x3C,  // .p!....<
                /* 1A50 */  0x75, 0xCE, 0x6C, 0x0E, 0x47, 0xE3, 0x31, 0xF8,  // u.l.G.1.
                /* 1A58 */  0x30, 0xE1, 0xF3, 0x2B, 0xE0, 0x66, 0x58, 0x5C,  // 0..+.fX\
                /* 1A60 */  0xF6, 0x73, 0xD1, 0x40, 0xBE, 0x73, 0x48, 0x28,  // .s.@.sH(
                /* 1A68 */  0x0C, 0xEA, 0x70, 0xE7, 0x63, 0x3D, 0xE0, 0xE4,  // ..p.c=..
                /* 1A70 */  0x0C, 0x0F, 0x7B, 0xCA, 0x6F, 0x30, 0x46, 0x78,  // ..{.o0Fx
                /* 1A78 */  0x76, 0x09, 0x1C, 0xE3, 0x24, 0x5E, 0x44, 0x5E,  // v...$^D^
                /* 1A80 */  0x5C, 0x8C, 0x1E, 0xEB, 0x19, 0x9E, 0x5D, 0x14,  // \.....].
                /* 1A88 */  0x8E, 0x21, 0x94, 0xCF, 0x18, 0x21, 0x62, 0x45,  // .!...!bE
                /* 1A90 */  0x31, 0x6A, 0x90, 0xC7, 0x05, 0x83, 0x3C, 0xCB,  // 1j....<.
                /* 1A98 */  0x44, 0x38, 0x94, 0xB8, 0xC6, 0x7B, 0x86, 0xA7,  // D8...{..
                /* 1AA0 */  0x43, 0x26, 0xFF, 0xFF, 0xC3, 0x1E, 0x3D, 0x47,  // C&....=G
                /* 1AA8 */  0x83, 0xEC, 0xD8, 0x00, 0x98, 0x3B, 0x1D, 0xE0,  // .....;..
                /* 1AB0 */  0x4E, 0xD1, 0x60, 0x1A, 0x2C, 0xEC, 0x41, 0x70,  // N.`.,.Ap
                /* 1AB8 */  0x85, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0,  // .6}j4j..
                /* 1AC0 */  0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4,  // L.2.j...
                /* 1AC8 */  0x98, 0x31, 0x3B, 0x07, 0x01, 0xC5, 0x80, 0xD0,  // .1;.....
                /* 1AD0 */  0xC8, 0x2C, 0xE2, 0x3C, 0x21, 0x10, 0x47, 0x06,  // .,.<!.G.
                /* 1AD8 */  0xA1, 0x91, 0x28, 0x04, 0x62, 0xE1, 0x0F, 0x02,  // ..(.b...
                /* 1AE0 */  0x1D, 0xDA, 0xC9, 0x27, 0x4B, 0x67, 0x51, 0xF2,  // ...'KgQ.
                /* 1AE8 */  0xC9, 0x13, 0x88, 0x63, 0xAC, 0x42, 0xE0, 0xC4,  // ...c.B..
                /* 1AF0 */  0x04, 0x38, 0x05, 0xA1, 0xC1, 0x54, 0x9C, 0x9E,  // .8...T..
                /* 1AF8 */  0xA9, 0x0D, 0x10, 0x16, 0x06, 0x84, 0x4A, 0xD7,  // ......J.
                /* 1B00 */  0x01, 0xC2, 0x04, 0xFA, 0x00, 0xA4, 0x4F, 0x04,  // ......O.
                /* 1B08 */  0x81, 0x38, 0x82, 0x92, 0x91, 0xD3, 0x9F, 0x98,  // .8......
                /* 1B10 */  0x40, 0x1C, 0x17, 0x84, 0x86, 0x7A, 0x5C, 0x08,  // @....z\.
                /* 1B18 */  0x90, 0x58, 0xF9, 0xFF, 0x83, 0xB0, 0xE0, 0x5E,  // .X.....^
                /* 1B20 */  0x40, 0x98, 0xEC, 0xC7, 0x81, 0x40, 0x2C, 0xD2,  // @....@,.
                /* 1B28 */  0x0C, 0x08, 0x93, 0xA2, 0x06, 0x90, 0x82, 0x50,  // .......P
                /* 1B30 */  0xB9, 0x76, 0x40, 0x58, 0x58, 0x10, 0x1A, 0x4D,  // .v@XX..M
                /* 1B38 */  0x0F, 0x08, 0x0B, 0xE0, 0x07, 0x90, 0xDE, 0xAB,  // ........
                /* 1B40 */  0x04, 0xE2, 0x90, 0x8A, 0x40, 0x98, 0x44, 0x47,  // ....@.DG
                /* 1B48 */  0x20, 0x2C, 0xE5, 0x23, 0x44, 0x46, 0x86, 0x68,  //  ,.#DF.h
                /* 1B50 */  0x10, 0x01, 0x39, 0xA9, 0x25, 0x20, 0x96, 0x1B,  // ..9.% ..
                /* 1B58 */  0x44, 0x40, 0x0E, 0xE7, 0x09, 0x88, 0x25, 0x05,  // D@....%.
                /* 1B60 */  0x11, 0x90, 0x03, 0xFE, 0xD3, 0x04, 0xE4, 0xB8,  // ........
                /* 1B68 */  0x20, 0x02, 0x72, 0x2A, 0x55, 0x40, 0x2C, 0x22,  //  .r*U@,"
                /* 1B70 */  0x88, 0x80, 0x9C, 0xCC, 0x15, 0x10, 0xCB, 0x09,  // ........
                /* 1B78 */  0xA2, 0x43, 0x00, 0x79, 0x6B, 0x04, 0x22, 0xF9,  // .C.yk.".
                /* 1B80 */  0x40, 0x04, 0xE4, 0x58, 0x8F, 0x2F, 0x01, 0x39,  // @..X./.9
                /* 1B88 */  0x24, 0x88, 0x80, 0x9C, 0xE8, 0xE5, 0x23, 0x20,  // $.....# 
                /* 1B90 */  0xC7, 0x03, 0xD1, 0x20, 0xC8, 0xA7, 0x4C, 0x40,  // ... ..L@
                /* 1B98 */  0xCE, 0x08, 0x22, 0x20, 0xE7, 0x78, 0x43, 0xE8,  // .." .xC.
                /* 1BA0 */  0xDF, 0xE2, 0x54, 0x20, 0x34, 0x25, 0x88, 0xC0,  // ..T 4%..
                /* 1BA8 */  0xAC, 0xE9, 0x63, 0x26, 0x20, 0x6B, 0x04, 0x11,  // ..c& k..
                /* 1BB0 */  0x90, 0xF3, 0x00, 0xD1, 0x8C, 0x20, 0x34, 0x33,  // ..... 43
                /* 1BB8 */  0x18, 0x55, 0xF9, 0x42, 0x13, 0x90, 0xF3, 0x80,  // .U.B....
                /* 1BC0 */  0xD0, 0x8C, 0x20, 0x34, 0x33, 0x88, 0x00, 0xAD,  // .. 43...
                /* 1BC8 */  0xF1, 0x9F, 0x26, 0x20, 0xEB, 0x06, 0xA1, 0x39,  // ..& ...9
                /* 1BD0 */  0x40, 0x68, 0x56, 0x10, 0x1A, 0xE2, 0xB9, 0x26,  // @hV....&
                /* 1BD8 */  0x50, 0x87, 0x06, 0x11, 0x90, 0x85, 0xFC, 0xDF,  // P.......
                /* 1BE0 */  0x04, 0xE2, 0x18, 0x20, 0x54, 0xBD, 0x3A, 0x40,  // ... T.:@
                /* 1BE8 */  0x96, 0x15, 0x44, 0x40, 0xCE, 0x0F, 0x42, 0xF5,  // ..D@..B.
                /* 1BF0 */  0xB8, 0x03, 0x61, 0xD2, 0x41, 0xA8, 0x1E, 0x79,  // ..a.A..y
                /* 1BF8 */  0xA0, 0x4C, 0x99, 0x4A, 0x20, 0xA6, 0x16, 0x84,  // .L.J ...
                /* 1C00 */  0xAA, 0x07, 0xD1, 0x71, 0x80, 0x00, 0xD1, 0xF4,  // ...q....
                /* 1C08 */  0x20, 0x54, 0x8D, 0xCB, 0xFF, 0x3F, 0x18, 0x53,  //  T...?.S
                /* 1C10 */  0x0E, 0x22, 0x20, 0xA7, 0x01, 0xA1, 0xE9, 0xC0,  // ." .....
                /* 1C18 */  0xA8, 0x9E, 0x37, 0xC7, 0x01, 0x33, 0x10, 0xAA,  // ..7..3..
                /* 1C20 */  0x19, 0x44, 0x87, 0x04, 0x02, 0x44, 0x93, 0x83,  // .D...D..
                /* 1C28 */  0x50, 0x25, 0xCF, 0x94, 0x60, 0x24, 0x09, 0x88,  // P%..`$..
                /* 1C30 */  0x06, 0x40, 0x40, 0x68, 0x5A, 0x30, 0xAA, 0xEE,  // .@@hZ0..
                /* 1C38 */  0xBD, 0x12, 0x88, 0x28, 0x06, 0xA1, 0x09, 0x40,  // ...(...@
                /* 1C40 */  0x04, 0xE6, 0xD4, 0x40, 0x54, 0xC9, 0x2B, 0x25,  // ...@T.+%
                /* 1C48 */  0x08, 0xD1, 0x09, 0x22, 0x30, 0x67, 0x03, 0xA2,  // ..."0g..
                /* 1C50 */  0x79, 0x41, 0x68, 0x7E, 0x30, 0x9A, 0xC4, 0xE8,  // yAh~0...
                /* 1C58 */  0x40, 0x28, 0x08, 0x4D, 0x0B, 0xA2, 0x81, 0x90,  // @(.M....
                /* 1C60 */  0xE7, 0xC9, 0x81, 0x30, 0x10, 0x9A, 0x00, 0x44,  // ...0...D
                /* 1C68 */  0x60, 0xD6, 0xFF, 0x4B, 0x09, 0x42, 0xD2, 0x83,  // `..K.B..
                /* 1C70 */  0xD0, 0x8C, 0x6F, 0xB0, 0x20, 0x24, 0x83, 0x58,  // ..o. $.X
                /* 1C78 */  0x50, 0x96, 0x0B, 0x84, 0xE6, 0x04, 0xD1, 0xF0,  // P.......
                /* 1C80 */  0xC9, 0xEB, 0xEB, 0xF0, 0x19, 0x08, 0x55, 0x0F,  // ......U.
                /* 1C88 */  0x22, 0x30, 0xA7, 0x05, 0xA2, 0x0A, 0xD4, 0x82,  // "0......
                /* 1C90 */  0x30, 0x45, 0x20, 0x02, 0xB3, 0x22, 0xBB, 0xC7,  // 0E .."..
                /* 1C98 */  0x06, 0x0A, 0x42, 0x55, 0xEB, 0x05, 0x61, 0xDA,  // ..BU..a.
                /* 1CA0 */  0x04, 0x83, 0x32, 0xBD, 0x20, 0x54, 0x3F, 0x88,  // ..2. T?.
                /* 1CA8 */  0x06, 0x4B, 0x80, 0xA8, 0x92, 0x3F, 0x4C, 0x10,  // .K...?L.
                /* 1CB0 */  0xA2, 0x0C, 0x44, 0x60, 0x4E, 0x01, 0x44, 0x93,  // ..D`N.D.
                /* 1CB8 */  0x81, 0xD0, 0xA4, 0x60, 0x34, 0xE9, 0xFF, 0x56,  // ...`4..V
                /* 1CC0 */  0x03, 0x22, 0xFF, 0x26, 0x81, 0x58, 0xEB, 0x87,  // .".&.X..
                /* 1CC8 */  0xE6, 0x70, 0xD8, 0xAF, 0x4F, 0x20, 0xE4, 0x2D,  // .p..O .-
                /* 1CD0 */  0x24, 0x10, 0xE7, 0x7E, 0x48, 0x05, 0x27, 0x5A,  // $..~H.'Z
                /* 1CD8 */  0x5E, 0xAC, 0x41, 0x88, 0x36, 0x10, 0x81, 0x39,  // ^.A.6..9
                /* 1CE0 */  0x0B, 0x10, 0xCD, 0x07, 0x42, 0xF3, 0x82, 0x50,  // ....B..P
                /* 1CE8 */  0x1D, 0xBF, 0xC6, 0x83, 0x67, 0xAE, 0xFF, 0xFF,  // ....g...
                /* 1CF0 */  0xC3, 0xA3, 0x2F, 0x3E, 0x81, 0x38, 0x33, 0x08,  // ../>.83.
                /* 1CF8 */  0x4D, 0xF6, 0xD4, 0x09, 0x42, 0xF2, 0x3E, 0x38,  // M...B.>8
                /* 1D00 */  0x05, 0x44, 0xFE, 0x58, 0x3A, 0x0C, 0x10, 0x10,  // .D.X:...
                /* 1D08 */  0x9A, 0x1E, 0x44, 0x60, 0x56, 0xFB, 0xE0, 0xD1,  // ..D`V...
                /* 1D10 */  0x61, 0x80, 0x80, 0xD0, 0x44, 0x20, 0x02, 0xB3,  // a...D ..
                /* 1D18 */  0x92, 0xD7, 0x9F, 0x80, 0xAC, 0x0E, 0x84, 0x6A,  // .......j
                /* 1D20 */  0x07, 0x11, 0x98, 0x73, 0x02, 0xD1, 0xEC, 0x20,  // ...s... 
                /* 1D28 */  0x54, 0xCB, 0x3F, 0x29, 0x18, 0xD1, 0xF2, 0xD6,  // T.?)....
                /* 1D30 */  0x7C, 0x50, 0x60, 0x20, 0x54, 0xEF, 0x9B, 0x59,  // |P` T..Y
                /* 1D38 */  0x87, 0x02, 0xA2, 0xFE, 0x58, 0x43, 0x3F, 0x57,  // ....XC?W
                /* 1D40 */  0x02, 0x76, 0x04, 0x10, 0x1A, 0x0B, 0x44, 0x07,  // .v....D.
                /* 1D48 */  0x14, 0x02, 0xA2, 0xC3, 0x0E, 0xD1, 0x0F, 0xC6,  // ........
                /* 1D50 */  0xA4, 0x81, 0x50, 0xB9, 0x20, 0x02, 0xB4, 0x76,  // ..P. ..v
                /* 1D58 */  0x10, 0x1D, 0x01, 0x08, 0x18, 0x4D, 0x0D, 0x42,  // .....M.B
                /* 1D60 */  0x95, 0xF8, 0x07, 0x64, 0xB2, 0x40, 0x74, 0x1C,  // ...d.@t.
                /* 1D68 */  0x21, 0x20, 0x02, 0xB3, 0x84, 0xD7, 0xBE, 0x40,  // ! .....@
                /* 1D70 */  0x2C, 0x15, 0x84, 0x2A, 0x2B, 0x00, 0xCA, 0x74,  // ,..*+..t
                /* 1D78 */  0x82, 0x68, 0x80, 0x04, 0x44, 0x03, 0x26, 0x20,  // .h..D.& 
                /* 1D80 */  0x54, 0x53, 0x82, 0x83, 0x07, 0x05, 0xA1, 0xE1,  // TS......
                /* 1D88 */  0x41, 0xA8, 0x90, 0x06, 0x20, 0x4C, 0x1C, 0x88,  // A... L..
                /* 1D90 */  0x06, 0x60, 0xA5, 0x20, 0x1A, 0x80, 0x75, 0x44,  // .`. ..uD
                /* 1D98 */  0x00, 0x63, 0xAA, 0x40, 0xA8, 0x7A, 0x10, 0x2A,  // .c.@.z.*
                /* 1DA0 */  0xB6, 0x02, 0x28, 0x93, 0x0E, 0x22, 0x50, 0x47,  // ..(.."PG
                /* 1DA8 */  0x07, 0x11, 0x98, 0x05, 0x65, 0x00, 0x61, 0x32,  // ....e.a2
                /* 1DB0 */  0x41, 0xA8, 0x6C, 0x10, 0xAA, 0xA3, 0xC3, 0x80,  // A.l.....
                /* 1DB8 */  0x28, 0x08, 0xD5, 0x09, 0xA2, 0x01, 0x58, 0x34,  // (.....X4
                /* 1DC0 */  0x88, 0x06, 0x60, 0x49, 0x9F, 0x5B, 0x81, 0x59,  // ..`I.[.Y
                /* 1DC8 */  0x20, 0x08, 0x95, 0x0F, 0x42, 0x03, 0x83, 0x08,  //  ...B...
                /* 1DD0 */  0xD4, 0xF1, 0x41, 0x04, 0x6A, 0xF9, 0x25, 0xFE,  // ..A.j.%.
                /* 1DD8 */  0xFF, 0x60, 0x2C, 0x14, 0x08, 0x8D, 0x0A, 0x42,  // .`,....B
                /* 1DE0 */  0xA3, 0x83, 0xD0, 0x58, 0x2D, 0x8E, 0x55, 0x34,  // ...X-.U4
                /* 1DE8 */  0x06, 0x08, 0x93, 0x95, 0x63, 0xE0, 0x14, 0x84,  // ....c...
                /* 1DF0 */  0x4A, 0x07, 0xD1, 0xA1, 0x89, 0x00, 0x51, 0x01,  // J.....Q.
                /* 1DF8 */  0x3D, 0x86, 0x47, 0x41, 0xA8, 0x74, 0x10, 0x01,  // =.GA.t..
                /* 1E00 */  0x12, 0x20, 0x2A, 0x20, 0x08, 0x20, 0x05, 0xA1,  // . * . ..
                /* 1E08 */  0xCA, 0x41, 0xA8, 0x92, 0x22, 0x87, 0x13, 0x0A,  // .A.."...
                /* 1E10 */  0x22, 0x20, 0x67, 0x02, 0xA1, 0x19, 0xC1, 0xA8,  // " g.....
                /* 1E18 */  0xB6, 0x24, 0x87, 0x10, 0x0A, 0x42, 0xF5, 0x83,  // .$...B..
                /* 1E20 */  0xD0, 0xB0, 0x20, 0x34, 0x4B, 0x13, 0x50, 0x96,  // .. 4K.P.
                /* 1E28 */  0x1F, 0x44, 0xC3, 0x26, 0x51, 0x8E, 0x05, 0x14,  // .D.&Q...
                /* 1E30 */  0x44, 0x07, 0x0C, 0x02, 0x44, 0xD3, 0x82, 0x50,  // D...D..P
                /* 1E38 */  0x2D, 0x55, 0xC0, 0x98, 0xEE, 0x32, 0xC7, 0x12,  // -U...2..
                /* 1E40 */  0x0A, 0x42, 0xD3, 0xA5, 0x39, 0x34, 0xD1, 0x38,  // .B..94.8
                /* 1E48 */  0xA0, 0x2C, 0x1B, 0x08, 0xCD, 0x0A, 0x42, 0xD5,  // .,....B.
                /* 1E50 */  0xD4, 0x19, 0x1E, 0x05, 0xD1, 0xB1, 0x84, 0x00,  // ........
                /* 1E58 */  0x51, 0x05, 0x79, 0x8E, 0x2D, 0x14, 0x44, 0x03,  // Q.y.-.D.
                /* 1E60 */  0x20, 0x40, 0x34, 0x1B, 0x08, 0xCD, 0x0A, 0x46,  //  @4....F
                /* 1E68 */  0x55, 0x25, 0x02, 0x61, 0x99, 0x40, 0xA8, 0xF6,  // U%.a.@..
                /* 1E70 */  0x46, 0x20, 0x2C, 0x41, 0xA5, 0x03, 0x14, 0x05,  // F ,A....
                /* 1E78 */  0xA1, 0xF9, 0x40, 0x74, 0xEC, 0x20, 0x99, 0x80,  // ..@t. ..
                /* 1E80 */  0x98, 0x3E, 0x10, 0xAA, 0x17, 0x44, 0x60, 0x4E,  // .>...D`N
                /* 1E88 */  0x08, 0x44, 0x53, 0x83, 0x50, 0x15, 0x9D, 0x06,  // .DS.P...
                /* 1E90 */  0x41, 0x41, 0x34, 0x04, 0x02, 0x42, 0xF3, 0x81,  // AA4..B..
                /* 1E98 */  0x51, 0x45, 0xA1, 0x80, 0x98, 0x4A, 0x10, 0xAA,  // QE...J..
                /* 1EA0 */  0x1A, 0x44, 0x47, 0x24, 0x12, 0xEA, 0xFF, 0x7F,  // .DG$....
                /* 1EA8 */  0x44, 0xA2, 0x20, 0x54, 0x54, 0xAA, 0x63, 0x1C,  // D. TT.c.
                /* 1EB0 */  0x05, 0x11, 0x90, 0x03, 0x82, 0x50, 0x99, 0x3F,  // .....P.?
                /* 1EB8 */  0x6F, 0x1D, 0xCD, 0x08, 0x88, 0x8E, 0x10, 0x04,  // o.......
                /* 1EC0 */  0x84, 0x26, 0xEC, 0x05, 0xC6, 0xFE, 0xFF         // .&.....
            })
        }
    }

    OperationRegion (TCOB, SystemIO, 0xF860, 0x20)
    Field (TCOB, WordAcc, NoLock, Preserve)
    {
        Offset (0x04), 
            ,   9, 
        DMIS,   1
    }

    OperationRegion (DVMT, SystemMemory, GOPB, 0x2000)
    Field (DVMT, AnyAcc, NoLock, Preserve)
    {
        SIGN,   128, 
        OPSZ,   32, 
        OPVR,   32, 
        SBVR,   256, 
        VBVR,   128, 
        GDVR,   128, 
        SMBX,   32, 
        Offset (0x200), 
        SCIE,   1, 
        GEFC,   4, 
        GXFC,   3, 
        GESF,   8, 
        Offset (0x204), 
        DPRM,   32
    }

    Field (DVMT, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
        SCIC,   16
    }

    Scope (\_SB.PCI0)
    {
        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            OperationRegion (VGAC, PCI_Config, 0x40, 0xC0)
            Field (VGAC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                VGAD,   1, 
                    ,   2, 
                UMAS,   3, 
                Offset (0x14), 
                F1EN,   1, 
                Offset (0xA8), 
                GSEP,   1, 
                GSPD,   14, 
                GESL,   1, 
                Offset (0xBC), 
                ASLS,   32
            }

            Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
            {
                OperationRegion (OROM, SystemMemory, (GROM + Arg0), 0x1000)
                Field (OROM, AnyAcc, NoLock, Preserve)
                {
                    R4KB,   32768
                }

                If ((Arg1 == 0x1000))
                {
                    Return (R4KB) /* \_SB_.PCI0.GFX0._ROM.R4KB */
                }
                Else
                {
                    Name (RL4K, Buffer (Arg1){})
                    RL4K = R4KB /* \_SB_.PCI0.GFX0._ROM.R4KB */
                    Return (RL4K) /* \_SB_.PCI0.GFX0._ROM.RL4K */
                }
            }

            Method (GBDA, 0, NotSerialized)
            {
                If ((SCIC == 0x09))
                {
                    DPRM = 0x40
                    GXFC = One
                }
                ElseIf ((SCIC == 0x0709))
                {
                    DPRM = GIGD /* \GIGD */
                    GXFC = One
                }
                Else
                {
                    GXFC = 0x02
                }

                SCIE = Zero
            }

            Method (GSCI, 0, NotSerialized)
            {
                GBDA ()
                DMIS = One
                GSEP = Zero
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.GFX0.GSCI ()
        }
    }

    Scope (\_SB.PCI0.LPC)
    {
        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (CRES, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y16)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0.LPC.HPET._Y16._BAS, BASE)  // _BAS: Base Address
                CreateDWordField (CRES, \_SB.PCI0.LPC.HPET._Y16._LEN, LNTH)  // _LEN: Length
                BASE = HPTB /* \HPTB */
                LNTH = 0x0400
                Return (CRES) /* \_SB_.PCI0.LPC_.HPET.CRES */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    OperationRegion (ECOB, SystemIO, 0xF842, 0x01)
    Field (ECOB, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPE,   1
    }

    Scope (\_SB.PCI0)
    {
        Device (IEIT)
        {
            Name (_HID, EisaId ("INT5400"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (_UID, 0x00)  // _UID: Unique ID
            OperationRegion (EITO, SystemMemory, EOPB, 0xA0)
            Field (EITO, DWordAcc, NoLock, Preserve)
            {
                ESGN,   64, 
                EOSZ,   32, 
                EOVR,   32, 
                EMSK,   32, 
                EINS,   32, 
                EOFF,   32, 
                EVER,   32, 
                EATR,   32, 
                ESYS,   32, 
                Offset (0x40), 
                EITC,   32, 
                EDT0,   32, 
                EDT1,   32, 
                ESP0,   32, 
                ESP1,   32, 
                Offset (0x80), 
                VSGN,   32, 
                VFCN,   32, 
                VSXC,   32, 
                VSZE,   32, 
                VPM1,   32, 
                VPM2,   32, 
                VPM3,   32, 
                VPM4,   32
            }

            Field (EITO, DWordAcc, NoLock, Preserve)
            {
                Offset (0x20), 
                V3BT,   1, 
                VCFL,   1
            }

            Field (EITO, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                SEMA,   1, 
                ESFC,   7, 
                ESXC,   8
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (ADDR, 0, NotSerialized)
            {
                Return (EOPB) /* \EOPB */
            }

            Method (SCIT, 0, NotSerialized)
            {
                Return (0xF842)
            }

            Method (SCIB, 0, NotSerialized)
            {
                Return (0x01)
            }

            Method (EITB, 0, NotSerialized)
            {
                If ((VSGN == 0x24454954))
                {
                    If ((VCFL == 0x01))
                    {
                        VSXC = 0x07
                    }
                    ElseIf ((VFCN == 0x00))
                    {
                        VPM1 = ECAP /* \ECAP */
                        VSXC = Zero
                    }
                    ElseIf ((VFCN == 0x02))
                    {
                        If ((VSZE >= 0x18))
                        {
                            ELB0 = VPM1 /* \_SB_.PCI0.IEIT.VPM1 */
                            ELB1 = VPM2 /* \_SB_.PCI0.IEIT.VPM2 */
                            SSMI = ESLB /* \ESLB */
                            VSXC = Zero
                        }
                        Else
                        {
                            VSXC = 0x01
                        }
                    }
                    ElseIf (((VFCN == 0x03) || (VFCN == 0x04)))
                    {
                        If ((VSZE >= 0x20))
                        {
                            If ((V3BT == 0x01))
                            {
                                VSXC = 0x07
                            }
                            Else
                            {
                                SSMI = EV3F /* \EV3F */
                            }
                        }
                        Else
                        {
                            VSXC = 0x01
                        }
                    }
                    Else
                    {
                        VSXC = 0x0A
                    }

                    VSGN = 0x54494524
                }
                Else
                {
                    If ((ESFC == 0x00))
                    {
                        EDT0 = ECAP /* \ECAP */
                        EDT1 = Zero
                        ESXC = Zero
                    }
                    ElseIf ((ESFC == 0x02))
                    {
                        ELB0 = EDT0 /* \_SB_.PCI0.IEIT.EDT0 */
                        ELB1 = EDT1 /* \_SB_.PCI0.IEIT.EDT1 */
                        SSMI = ESLB /* \ESLB */
                        ESXC = Zero
                    }
                    Else
                    {
                        ESXC = 0x01
                    }

                    SEMA = Zero
                }

                SGPE = Zero
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.IEIT.EITB ()
        }
    }

    Scope (\_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            \MSCI ()
            \OSFG ()
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (!OSFS)
            {
                \MSCI ()
                \OSFG ()
            }
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \MSCW (Arg0)
        If ((Arg0 == 0x04))
        {
            \OSFG ()
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]                 FACS Address : DEFC1E00
[028h 0040   4]                 DSDT Address : DEFC2427
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : 02
[035h 0053   1]           ACPI Disable Value : 03
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 0000F800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 0000F804
[044h 0068   4]   PM1B Control Block Address : 00000460
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 0000F808
[050h 0080   4]           GPE0 Block Address : 0000F820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0032
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0020
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 E2 43 4F 4D 50 41 51  // FACPt.....COMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 00 1E FC DE 27 24 FC DE 01 00 09 00  // ........'$......
    0030: B2 00 00 00 02 03 00 00 00 F8 00 00 00 00 00 00  // ................
    0040: 04 F8 00 00 60 04 00 00 00 00 00 00 08 F8 00 00  // ....`...........
    0050: 20 F8 00 00 00 00 00 00 04 02 00 04 10 00 00 00  //  ...............
    0060: 32 00 E9 03 00 00 20 00 01 03 0D 00 32 00 00 00  // 2..... .....2...
    0070: AD 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 01
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 01 43 4F 4D 50 41 51  // HPET8.....COMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7A
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F4000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7A 43 4F 4D 50 41 51  // MCFG<....zCOMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 05
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 5B AB 60 56 \
    BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD 1D A9 8C 94 \
    B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 31 B9 95 74 \
    10 DA 3B A4 5B B5 19 82 7C 39 D7 0D 7C 22 AC 1C \
    2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 96 E1 2E 68 \
    9A BF 44 45 3E 3C 8E 99 90 DE 37 38 57 0B 92 15 \
    BC DE FF F2 07 7E B5 40 8C 51 3A C3 02 48 F6 13 \
    12 72 FB 42 78 E6 47 88 54 C7 B0 F0 93 9E FB 04 \
    B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 01 00 00 00 \
    B6 00 00 00 00 00 02 00 48 50 51 4F 45 4D 53 4C \
    49 43 2D 42 50 43 57 49 4E 44 4F 57 53 20 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 65 62 B1 4D BA 71 7D 7A 56 95 A3 1F 74 A2 \
    4C 90 92 71 57 10 27 86 BA D5 EA E7 9E 79 CF A0 \
    C5 50 6D 75 D6 EA 7F DF 3D 6F AA 7D 27 EC 52 6F \
    87 35 5C CB 79 90 C3 40 6D F6 6F BC BD 31 D1 1C \
    0E AA 17 BA B1 B6 BD 1B 5B 17 02 0F 1F 1F 55 F1 \
    2D 1D D8 66 CC 0F 12 72 2D 34 86 9F 7A 6F 7F 23 \
    E9 7F 75 F2 E3 3F AA 1D E8 34 95 7F 25 E3 92 D1 \
    B6 FD 80 7B 60 13 3F 83 5E D1 C4 C4 82 D1 0C 07 \
    33 44 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 05 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 00 00 00 00  // SLIC-BPC........
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57  // EMSLIC-BPCWINDOW
    00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 65 62 B1 4D BA 71 7D 7A 56 95  // ......eb.M.q}zV.
    0100: A3 1F 74 A2 4C 90 92 71 57 10 27 86 BA D5 EA E7  // ..t.L..qW.'.....
    0110: 9E 79 CF A0 C5 50 6D 75 D6 EA 7F DF 3D 6F AA 7D  // .y...Pmu....=o.}
    0120: 27 EC 52 6F 87 35 5C CB 79 90 C3 40 6D F6 6F BC  // '.Ro.5\.y..@m.o.
    0130: BD 31 D1 1C 0E AA 17 BA B1 B6 BD 1B 5B 17 02 0F  // .1..........[...
    0140: 1F 1F 55 F1 2D 1D D8 66 CC 0F 12 72 2D 34 86 9F  // ..U.-..f...r-4..
    0150: 7A 6F 7F 23 E9 7F 75 F2 E3 3F AA 1D E8 34 95 7F  // zo.#..u..?...4..
    0160: 25 E3 92 D1 B6 FD 80 7B 60 13 3F 83 5E D1 C4 C4  // %......{`.?.^...
    0170: 82 D1 0C 07 33 44                                // ....3D


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "COMPAQ", "CPU_TM2", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (GDBF, IntObj)
    External (GWBF, IntObj)
    External (HTTE, IntObj)
    External (NPST, UnknownObj)
    External (SDBF, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SPSI, UnknownObj)
    External (SSMI, UnknownObj)
    External (TRPE, UnknownObj)

    Name (\CPSS, 0xFFFFFFFF)
    Name (\PSS, Package (0x03)
    {
        Package (0x02)
        {
            Package (0x06)
            {
                0x00, 
                0x00020F58, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00013C68, 
                0x0A, 
                0x0A, 
                0x01, 
                0x01
            }
        }, 

        Package (0x03)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }
        }, 

        Package (0x04)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }, 

            Package (0x06)
            {
                0x00, 
                0x00, 
                0x0A, 
                0x0A, 
                0x00, 
                0x00
            }
        }
    })
    Name (\PCTF, Package (0x02)
    {
        ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x40,               // Bit Width
                0x00,               // Bit Offset
                0x0000000000000199, // Address
                ,)
        }, 

        ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x10,               // Bit Width
                0x00,               // Bit Offset
                0x0000000000000198, // Address
                ,)
        }
    })
    Name (\PCTH, Package (0x02)
    {
        ResourceTemplate ()
        {
            Register (SystemIO, 
                0x08,               // Bit Width
                0x00,               // Bit Offset
                0x000000000000F880, // Address
                0x08,               // Access Size
                )
        }, 

        ResourceTemplate ()
        {
            Register (SystemIO, 
                0x08,               // Bit Width
                0x00,               // Bit Offset
                0x000000000000F880, // Address
                0x08,               // Access Size
                )
        }
    })
    Method (\GPCT, 1, Serialized)
    {
        If (HTTE)
        {
            Local0 = (Arg0 * 0x04)
            Local0 += 0xF880
            \SDBF ()
            DerefOf (\PCTH [0x00])
            0x07
            Local0
            \SDBF ()
            DerefOf (\PCTH [0x01])
            0x07
            Local0
            Return (\PCTH)
        }
        Else
        {
            Return (\PCTF)
        }
    }

    Method (\GPSS, 0, Serialized)
    {
        If ((\CPSS != 0xFFFFFFFF))
        {
            Return (DerefOf (\PSS [\CPSS]))
        }
        Else
        {
            Local0 = (NPST - 0x02)
            Local1 = Zero
            Local2 = Zero
            While ((Local1 < NPST))
            {
                SPSI = \GWBF /* External reference */
                Local2
                DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x00]
                Local2 += 0x02
                SPSI = \GDBF /* External reference */
                Local2
                DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x01]
                Local2 += 0x04
                If (HTTE)
                {
                    DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x02]
                         = 0xA0
                    DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x04]
                         = Local1
                    DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x05]
                         = Local1
                    Local2 += 0x02
                }
                Else
                {
                    SPSI = \GWBF /* External reference */
                    Local2
                    Local3
                    DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x04]
                         = Local3
                    DerefOf (DerefOf (\PSS [Local0]) [Local1]) [0x05]
                         = Local3
                    Local2 += 0x02
                }

                Local1++
            }

            \CPSS = Local0
            Return (DerefOf (\PSS [Local0]))
        }
    }

    Scope (\_PR.CPU0)
    {
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\GPCT (0x00))
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!TRPE && HTTE))
            {
                SSMI = 0x21
            }

            Return (\GPSS ())
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }
    }

    Scope (\_PR.CPU1)
    {
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\GPCT (0x01))
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!TRPE && HTTE))
            {
                SSMI = 0x21
            }

            Return (\GPSS ())
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\GPCT (0x00))
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!TRPE && HTTE))
            {
                SSMI = 0x21
            }

            Return (\GPSS ())
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\GPCT (0x00))
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!TRPE && HTTE))
            {
                SSMI = 0x21
            }

            Return (\GPSS ())
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "COMPAQ", "CST", 0x00000001)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\_PR.CPU0)
    {
        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x14, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F814, // Address
                        ,)
                }, 

                0x02, 
                0x28, 
                0x02EE
            }
        })
    }

    Scope (\_PR.CPU1)
    {
        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x14, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F814, // Address
                        ,)
                }, 

                0x02, 
                0x28, 
                0x02EE
            }
        })
    }

    Scope (\_PR.CPU2)
    {
        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x14, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F814, // Address
                        ,)
                }, 

                0x02, 
                0x28, 
                0x02EE
            }
        })
    }

    Scope (\_PR.CPU3)
    {
        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x14, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000F814, // Address
                        ,)
                }, 

                0x02, 
                0x28, 
                0x02EE
            }
        })
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F8
[00Ah 0010   6]                       Oem ID : "COMPAQ"
[010h 0016   8]                 Oem Table ID : "BEARLAKE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 00000000DEFDD800

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 01 F8 43 4F 4D 50 41 51  // TCPA2.....COMPAQ
    0010: 42 45 41 52 4C 41 4B 45 01 00 00 00 00 00 00 00  // BEARLAKE........
    0020: 00 00 00 00 00 00 00 00 01 00 00 D8 FD DE 00 00  // ................
    0030: 00 00                                            // ..


