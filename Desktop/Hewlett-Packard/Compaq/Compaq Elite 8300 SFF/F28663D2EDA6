
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190509
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000A92  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20051117
 02)  MCFG  0x0000003C  0x01  "HPQOEM"  "SLIC-BPC"  0x01072009  "MSFT"   0x00000097
 03)  ASF!  0x000000A5  0x20  "INTEL "  " HCG    "  0x00000001  "TFSM"   0x000F4240
 04)  APIC  0x00000072  0x03  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI "   0x00010013
 05)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "    "   0x00000000
 06)  SSDT  0x0000668F  0x01  "COMPAQ"  "WMI     "  0x00000001  "MSFT"   0x03000001
 07)  DSDT  0x0000A485  0x02  "HPQOEM"  "SLIC-BPC"  0x00000017  "INTL"   0x20051117
 08)  SSDT  0x000009AA  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20051117
 09)  DMAR  0x000000B8  0x01  "INTEL "  "SNB     "  0x00000001  "INTL"   0x00000001
 10)  FACP  0x0000010C  0x05  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI "   0x00010013
 11)  FPDT  0x00000044  0x01  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI "   0x00010013
 12)  SSDT  0x0000036D  0x01  "SataRe"  "SataTabl"  0x00001000  "INTL"   0x20091112
 13)  TCPA  0x00000032  0x02  "APTIO4"  "NAPAASF "  0x00000001  "MSFT"   0x01000013
 14)  HPET  0x00000038  0x01  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI."   0x00000005
 15)  FACS  0x00000040  0x02
 16)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20051117
 17)  SSDT  0x0000083B  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20051117
 18)  SSDT  0x00000303  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20051117

Found 18 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000072
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 02
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : FF
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

Raw Table Data: Length 114 (0x72)

    0000: 41 50 49 43 72 00 00 00 03 0D 48 50 51 4F 45 4D  // APICr.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 20  // SLIC-BPC. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  // ................
    0040: 01 00 00 00 00 08 04 06 01 00 00 00 01 0C 02 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 FF 05  // ................
    0070: 00 01                                            // ..


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 2D
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : " HCG"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "TFSM"
[020h 0032   4]        Asl Compiler Revision : 000F4240

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 13 F0
[083h 0131   1]              Completion Code : 01
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0100
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0016
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 10
[095h 0149   1]                    Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 2D 49 4E 54 45 4C 20  // ASF!.... -INTEL 
    0010: 20 48 43 47 00 00 00 00 01 00 00 00 54 46 53 4D  //  HCG........TFSM
    0020: 40 42 0F 00 00 00 10 00 FF FF 01 00 00 00 01 57  // @B.............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 21 F8 00 00  // ............!...
    0080: 00 13 F0 01 00 00 01 57 00 00 00 00 01 00 00 84  // .......W........
    0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........
    00A0: 00 00 00 00 00                                   // .....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 000000B8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 68
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "SNB "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 23
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0020

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : F0

[05Eh 0094   2]                     PCI Path : 1F,00


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : F0

[066h 0102   2]                     PCI Path : 0F,00


[068h 0104   2]                Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106   2]                       Length : 0030

[06Ch 0108   2]                     Reserved : 0000
[06Eh 0110   2]           PCI Segment Number : 0000
[070h 0112   8]                 Base Address : 00000000D89EA000
[078h 0120   8]          End Address (limit) : 00000000D8A06FFF

[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 1D,00


[088h 0136   1]            Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 00
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1A,00


[090h 0144   1]            Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 00

[096h 0150   2]                     PCI Path : 14,00


[098h 0152   2]                Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   2]                     Reserved : 0000
[09Eh 0158   2]           PCI Segment Number : 0000
[0A0h 0160   8]                 Base Address : 00000000DB000000
[0A8h 0168   8]          End Address (limit) : 00000000DF1FFFFF

[0B0h 0176   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : 00

[0B6h 0182   2]                     PCI Path : 02,00


Raw Table Data: Length 184 (0xB8)

    0000: 44 4D 41 52 B8 00 00 00 01 68 49 4E 54 45 4C 20  // DMAR.....hINTEL 
    0010: 53 4E 42 20 00 00 00 00 01 00 00 00 49 4E 54 4C  // SNB ........INTL
    0020: 01 00 00 00 23 01 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 F0 1F 00  // ................
    0060: 04 08 00 00 00 F0 0F 00 01 00 30 00 00 00 00 00  // ..........0.....
    0070: 00 A0 9E D8 00 00 00 00 FF 6F A0 D8 00 00 00 00  // .........o......
    0080: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1A 00  // ................
    0090: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  // .......... .....
    00A0: 00 00 00 DB 00 00 00 00 FF FF 1F DF 00 00 00 00  // ................
    00B0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "SLIC-BPC", 0x00000017)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.AAC0, UnknownObj)
    External (_PR_.ACRT, UnknownObj)
    External (_PR_.APSV, UnknownObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.WMID.WMBB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CFGD, UnknownObj)
    External (ECST, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (TNOT, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Name (SP1O, 0x2E)
    Name (IO1B, 0x0A20)
    Name (IO1L, 0x20)
    Name (IO2B, 0x0800)
    Name (IO2L, 0x0100)
    Name (IO3B, 0x0A00)
    Name (IO3L, 0x10)
    Name (IO4B, 0x0A10)
    Name (IO4L, 0x10)
    Name (IO5B, 0x0A80)
    Name (IO5L, 0x10)
    Name (IO6B, 0x0A90)
    Name (IO6L, 0x10)
    Name (IO7B, 0x0A40)
    Name (IO7L, 0x20)
    Name (SSCI, 0x0A46)
    Name (IO8B, 0x0A60)
    Name (IO8L, 0x20)
    Name (IOES, Zero)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SMCR, 0x0430)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (FLSZ, 0x01000000)
    Name (SRCB, 0xFED1C000)
    Name (RCLN, 0x4000)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (LAPB, 0xFEE00000)
    Name (EGPB, 0xFED19000)
    Name (MCHB, 0xFED10000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, Zero)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FUWS, 0x04)
    Name (BSH, Zero)
    Name (BEL, One)
    Name (BEH, 0x02)
    Name (BRH, 0x03)
    Name (BTF, 0x04)
    Name (BHC, 0x05)
    Name (BYB, 0x06)
    Name (BPH, 0x07)
    Name (BSHS, 0x08)
    Name (BELC, 0x09)
    Name (BRHP, 0x0A)
    Name (BTFC, 0x0B)
    Name (BEHP, 0x0C)
    Name (BPHS, 0x0D)
    Name (BELP, 0x0E)
    Name (BTL, 0x10)
    Name (BTFP, 0x11)
    Name (BSR, 0x14)
    Name (BOF, 0x20)
    Name (BEF, 0x21)
    Name (BLLE, 0x22)
    Name (BLLC, 0x23)
    Name (BLCA, 0x24)
    Name (BLLS, 0x25)
    Name (BLLP, 0x26)
    Name (BLLD, 0x27)
    Name (BHBE, 0x30)
    Name (BHBC, 0x31)
    Name (BHBN, 0x32)
    Name (BHBM, 0x33)
    Name (TRTP, One)
    Name (WDTE, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIT, 0xB2)
    Name (OFST, 0x35)
    Name (TCMF, Zero)
    Name (OTPM, One)
    Name (HESD, One)
    Name (OCED, One)
    Name (TPMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (BRTS, 0xE0)
    Name (ORIE, 0xE1)
    Name (TRST, 0x02)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (GNVS, SystemMemory, 0xD8BBCE18, 0x01CE)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        RES3,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        PLID,   8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        DSEL,   8, 
        ESEL,   8, 
        PSEL,   8, 
        PWEN,   8, 
        PRST,   8, 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        GBAS,   16, 
        SGGP,   8, 
        PXFX,   8, 
        PXDY,   8, 
        PXFD,   8, 
        Offset (0x19D), 
        ALFP,   8, 
        IMON,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        Offset (0x1B2), 
        XHCI,   8, 
        XHPM,   8, 
        Offset (0x1B7), 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        Offset (0x1C4), 
        LPMV,   8, 
        Offset (0x1C6), 
        DDRF,   8, 
        MM64,   8, 
        AOAC,   8, 
        SLDR,   32, 
        AIOP,   8
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                If (((MM64 == Zero) || (OSYS <= 0x07D3)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = 0x0000000400000000
                    If ((TUUD >= 0x1000))
                    {
                        M2MN = (TUUD << 0x14)
                    }
                    Else
                    {
                        M2MN = 0x0000000100000000
                    }

                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf (_OSI ("Windows 2012"))
                {
                    If ((XCNT == Zero))
                    {
                        ^XHC.XSEL ()
                        XCNT++
                    }
                }

                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((NEXP == Zero))
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If (NEXP)
                    {
                        If (~(CDW1 & One))
                        {
                            If ((CTRL & One))
                            {
                                NHPG ()
                            }

                            If ((CTRL & 0x04))
                            {
                                NPME ()
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PR00, 0, NotSerialized)
                {
                    Return (^^PR00) /* \_SB_.PR00 */
                }

                Method (AR01, 0, NotSerialized)
                {
                    Return (^^AR01) /* \_SB_.AR01 */
                }

                Method (PR01, 0, NotSerialized)
                {
                    Return (^^PR01) /* \_SB_.PR01 */
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (^^AR02) /* \_SB_.AR02 */
                }

                Method (PR02, 0, NotSerialized)
                {
                    Return (^^PR02) /* \_SB_.PR02 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PR04, 0, NotSerialized)
                {
                    Return (^^PR04) /* \_SB_.PR04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PR05, 0, NotSerialized)
                {
                    Return (^^PR05) /* \_SB_.PR05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PR06, 0, NotSerialized)
                {
                    Return (^^PR06) /* \_SB_.PR06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PR07, 0, NotSerialized)
                {
                    Return (^^PR07) /* \_SB_.PR07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PR08, 0, NotSerialized)
                {
                    Return (^^PR08) /* \_SB_.PR08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PR09, 0, NotSerialized)
                {
                    Return (^^PR09) /* \_SB_.PR09 */
                }

                Method (AR0E, 0, NotSerialized)
                {
                    Return (^^AR0E) /* \_SB_.AR0E */
                }

                Method (PR0E, 0, NotSerialized)
                {
                    Return (^^PR0E) /* \_SB_.PR0E */
                }

                Method (AR0F, 0, NotSerialized)
                {
                    Return (^^AR0F) /* \_SB_.AR0F */
                }

                Method (PR0F, 0, NotSerialized)
                {
                    Return (^^PR0F) /* \_SB_.PR0F */
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (^^AR0A) /* \_SB_.AR0A */
                }

                Method (PR0A, 0, NotSerialized)
                {
                    Return (^^PR0A) /* \_SB_.PR0A */
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (^^AR0B) /* \_SB_.AR0B */
                }

                Method (PR0B, 0, NotSerialized)
                {
                    Return (^^PR0B) /* \_SB_.PR0B */
                }

                Method (AR0C, 0, NotSerialized)
                {
                    Return (^^AR0C) /* \_SB_.AR0C */
                }

                Method (PR0C, 0, NotSerialized)
                {
                    Return (^^PR0C) /* \_SB_.PR0C */
                }
            }

            Device (TPMX)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (CRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS) /* \_SB_.PCI0.TPMX.CRS_ */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (TPMF)
                    {
                        Return (Zero)
                    }

                    Return (0x0F)
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0x6C), 
                        Offset (0x6D), 
                        Offset (0x6E), 
                        XUSB,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y10)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y10._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0200,             // Range Minimum
                            0x0200,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0458,             // Range Minimum
                            0x0458,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0454,             // Range Minimum
                            0x0454,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((WDTE == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x0111)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y12)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y13)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y14)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y11._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y11._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPCB.SIO1._Y11._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y12._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y12._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPCB.SIO1._Y12._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y13._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y13._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPCB.SIO1._Y13._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y14._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPCB.SIO1._Y14._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPCB.SIO1._Y14._LEN, GPL3)  // _LEN: Length
                            GP30 = IO4B /* \IO4B */
                            GP31 = IO4B /* \IO4B */
                            GPL3 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.LPCB.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x03, 
                        0x02, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x16, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x80)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO4B, IO4L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        GPES,   8, 
                        GPEE,   8, 
                        Offset (0x08), 
                        GPS0,   8, 
                        GPS1,   8, 
                        GPS2,   8, 
                        GPS3,   8, 
                        GPE0,   8, 
                        GPE1,   8, 
                        GPE2,   8, 
                        GPE3,   8
                    }

                    OperationRegion (SWCR, SystemIO, IO3B, IO3L)
                    Field (SWCR, ByteAcc, NoLock, Preserve)
                    {
                        LEDC,   8, 
                        SWCC,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.LPCB.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 >= 0x10))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }
                        Else
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If ((Arg0 >= 0x10))
                            {
                                Local0 = IOES /* \IOES */
                            }
                            Else
                            {
                                Local0 = IOST /* \IOST */
                            }

                            Local1 = (Arg0 & 0x0F)
                            If (((One << Local1) & Local0))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IRQNoFlags (_Y15)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y16)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.LPCB.SIO1._Y15._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.LPCB.SIO1._Y16._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.LPCB.SIO1._Y17._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.LPCB.SIO1._Y17._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.LPCB.SIO1._Y17._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IRQNoFlags (_Y18)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y19)
                            {2}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.LPCB.SIO1._Y18._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.LPCB.SIO1._Y19._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1A._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1A._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1A._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1B._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1B._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPCB.SIO1._Y1B._LEN, LEN3)  // _LEN: Length
                    Name (CRS4, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQ (Edge, ActiveLow, Shared, _Y1C)
                            {}
                    })
                    CreateWordField (CRS4, \_SB.PCI0.LPCB.SIO1._Y1C._INT, IRQL)  // _INT: Interrupts
                    CreateWordField (CRS4, \_SB.PCI0.LPCB.SIO1._Y1D._MIN, IOHL)  // _MIN: Minimum Base Address
                    CreateWordField (CRS4, \_SB.PCI0.LPCB.SIO1._Y1D._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (CRS4, \_SB.PCI0.LPCB.SIO1._Y1D._ALN, ALMN)  // _ALN: Alignment
                    CreateByteField (CRS4, \_SB.PCI0.LPCB.SIO1._Y1D._LEN, LENG)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.LPCB.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.LPCB.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.LPCB.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.LPCB.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.LPCB.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.LPCB.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.LPCB.SIO1.IO31 */
                        IO32 = IO21 /* \_SB_.PCI0.LPCB.SIO1.IO21 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.LPCB.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.LPCB.SIO1.CRS2 */
                    }

                    Method (DCR4, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IOHL = (IOAH << 0x08)
                        IOHL |= IOAL /* \_SB_.PCI0.LPCB.SIO1.IOHL */
                        IORL = IOHL /* \_SB_.PCI0.LPCB.SIO1.IOHL */
                        LENG = 0x08
                        If (INTR)
                        {
                            INTR &= 0x0F
                            IRQL = (One << INTR) /* \_SB_.PCI0.LPCB.SIO1.INTR */
                        }
                        Else
                        {
                            IRQL = Zero
                        }

                        EXFG ()
                        Return (CRS4) /* \_SB_.PCI0.LPCB.SIO1.CRS4 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x02))
                        {
                            If (LPTM (CGLD (Arg1)))
                            {
                                DSR2 (Arg0, Arg1)
                            }
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQT)
                        CreateByteField (Arg0, 0x14, DMAT)
                        CreateWordField (Arg0, 0x02, IOT1)
                        CreateWordField (Arg0, 0x0A, IOT2)
                        ENFG (CGLD (Arg1))
                        IOAL = (IOT1 & 0xFF)
                        IOAH = (IOT1 >> 0x08)
                        IOL2 = (IOT2 & 0xFF)
                        IOH2 = (IOT2 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR4, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IOHL)
                        CreateWordField (Arg0, 0x09, IRQL)
                        ENFG (CGLD (Arg1))
                        IOAL = (IOHL & 0xFF)
                        IOAH = (IOHL >> 0x08)
                        If (IRQL)
                        {
                            FindSetRightBit (IRQL, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }
                }

                Name (PMFG, Zero)
                OperationRegion (KPS2, SystemIO, 0x60, 0x05)
                Field (KPS2, ByteAcc, NoLock, Preserve)
                {
                    KBDD,   8, 
                    Offset (0x02), 
                    Offset (0x03), 
                    Offset (0x04), 
                    KBDS,   1, 
                    Offset (0x05)
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    ^SIO1.ENFG (0x04)
                    If ((0x05 != Arg0))
                    {
                        If (KBFG)
                        {
                            ^SIO1.GPE2 |= 0xE8
                        }
                        Else
                        {
                            ^SIO1.GPE2 &= 0x17
                        }

                        If (MSFG)
                        {
                            ^SIO1.GPE2 |= 0x10
                        }
                        Else
                        {
                            ^SIO1.GPE2 &= 0xEF
                        }

                        ^SIO1.GPS2 = ^SIO1.GPS2 /* \_SB_.PCI0.LPCB.SIO1.GPS2 */
                        ^SIO1.GPES = ^SIO1.GPES /* \_SB_.PCI0.LPCB.SIO1.GPES */
                        ^SIO1.GPEE = One
                        If ((0x03 == Arg0))
                        {
                            Local1 = ^SIO1.LEDC /* \_SB_.PCI0.LPCB.SIO1.LEDC */
                            Local1 &= 0xE0
                            ^SIO1.LEDC = (Local1 | 0x1C)
                            Local1 = ^SIO1.SWCC /* \_SB_.PCI0.LPCB.SIO1.SWCC */
                            Local1 &= 0xBF
                            ^SIO1.SWCC = (Local1 | 0x40)
                        }
                    }

                    AIOB = Zero
                    If (KBDS)
                    {
                        Local0 = 0xC8
                        While ((Local0 != Zero))
                        {
                            If (KBDS)
                            {
                                Local1 = KBDD /* \_SB_.PCI0.LPCB.KBDD */
                            }
                            Else
                            {
                                Local0 = One
                            }

                            Sleep (One)
                            Local0--
                        }
                    }

                    ^SIO1.GPS0 = ^SIO1.GPS0 /* \_SB_.PCI0.LPCB.SIO1.GPS0 */
                    ^SIO1.GPS1 = ^SIO1.GPS1 /* \_SB_.PCI0.LPCB.SIO1.GPS1 */
                    ^SIO1.GPE0 = 0x10
                    ^SIO1.GPE1 = 0x20
                    ^SIO1.EXFG ()
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    ^SIO1.ENFG (0x04)
                    PMFG = ^SIO1.GPS2 /* \_SB_.PCI0.LPCB.SIO1.GPS2 */
                    ^SIO1.GPS0 = ^SIO1.GPS0 /* \_SB_.PCI0.LPCB.SIO1.GPS0 */
                    ^SIO1.GPS1 = ^SIO1.GPS1 /* \_SB_.PCI0.LPCB.SIO1.GPS1 */
                    ^SIO1.GPS2 = ^SIO1.GPS2 /* \_SB_.PCI0.LPCB.SIO1.GPS2 */
                    ^SIO1.GPES = ^SIO1.GPES /* \_SB_.PCI0.LPCB.SIO1.GPES */
                    ^SIO1.GPEE = Zero
                    ^SIO1.GPE0 = Zero
                    ^SIO1.GPE1 = Zero
                    Local1 = ^SIO1.LEDC /* \_SB_.PCI0.LPCB.SIO1.LEDC */
                    Local1 &= 0xE0
                    ^SIO1.LEDC = (Local1 | 0x1E)
                    Local1 = ^SIO1.SWCC /* \_SB_.PCI0.LPCB.SIO1.SWCC */
                    ^SIO1.SWCC = (Local1 & 0xBF)
                    AIOB = One
                    ^SIO1.EXFG ()
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (KBFG, One)
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x03))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPCB.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPCB.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (MSFG, One)
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x03))
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPCB.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPCB.RMSC.CRS2 */
                        }
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (UAR2)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (One))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (One, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (One, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, One)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {10}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (LPTE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (^^SIO1.LPTM (0x02))
                        {
                            Return (0x0104D041)
                        }
                        Else
                        {
                            Return (0x0004D041)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x02))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x02, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        ^^SIO1.DCRS (0x02, One)
                        If (^^SIO1.LPTM (0x02))
                        {
                            ^^SIO1.IRQE = ^^SIO1.IRQM /* \_SB_.PCI0.LPCB.SIO1.IRQM */
                            ^^SIO1.DMAE = ^^SIO1.DMAM /* \_SB_.PCI0.LPCB.SIO1.DMAM */
                            ^^SIO1.IO21 = ^^SIO1.IO11 /* \_SB_.PCI0.LPCB.SIO1.IO11 */
                            ^^SIO1.IO22 = ^^SIO1.IO12 /* \_SB_.PCI0.LPCB.SIO1.IO12 */
                            ^^SIO1.LEN2 = ^^SIO1.LEN1 /* \_SB_.PCI0.LPCB.SIO1.LEN1 */
                            ^^SIO1.IO31 = (^^SIO1.IO21 + 0x0400)
                            ^^SIO1.IO32 = ^^SIO1.IO31 /* \_SB_.PCI0.LPCB.SIO1.IO31 */
                            ^^SIO1.LEN3 = ^^SIO1.LEN2 /* \_SB_.PCI0.LPCB.SIO1.LEN2 */
                            Return (^^SIO1.CRS2) /* \_SB_.PCI0.LPCB.SIO1.CRS2 */
                        }
                        Else
                        {
                            Return (^^SIO1.CRS1) /* \_SB_.PCI0.LPCB.SIO1.CRS1 */
                        }
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x02)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        If (^^SIO1.LPTM (0x02))
                        {
                            Return (EPPR) /* \_SB_.PCI0.LPCB.LPTE.EPPR */
                        }
                        Else
                        {
                            Return (LPPR) /* \_SB_.PCI0.LPCB.LPTE.LPPR */
                        }
                    }

                    Name (LPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        EndDependentFn ()
                    })
                    Name (EPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01 ())
                    }

                    Return (PR01 ())
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x03))
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x03))
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0C, 0x03))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x03))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x03))
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x20, 0x03))
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x001A0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x25, 0x03))
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }

                    Return (PR04 ())
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }

                    Return (PR05 ())
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }

                    Return (PR06 ())
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }

                    Return (PR07 ())
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08 ())
                    }

                    Return (PR08 ())
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09 ())
                    }

                    Return (PR09 ())
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E ())
                    }

                    Return (PR0E ())
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    One, 
                    Zero
                })
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x14), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x94), 
                        ,   1, 
                    EIFD,   1, 
                    Offset (0x95), 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F ())
                    }

                    Return (PR0F ())
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02 ())
                    }

                    Return (PR02 ())
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A ())
                    }

                    Return (PR0A ())
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B ())
                    }

                    Return (PR0B ())
                }
            }

            Device (PEG3)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C ())
                    }

                    Return (PR0C ())
                }
            }

            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }
        }

        Scope (\_GPE)
        {
            Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.LPCB.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            }

            Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            }

            Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            }

            Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
            }

            Method (_L25, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x08, 0x03))
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x0200, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x28), 
            Offset (0x2A), 
                ,   3, 
            GPE3,   1, 
            Offset (0x3C), 
                ,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   3, 
            GPS3,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GLAN)
        {
            Name (_ADR, 0x00190000)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }
        }

        Device (EHC1)
        {
            Name (_ADR, 0x001D0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                PWUC,   8
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xA9, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x21, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // !.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x21, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // !.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x29, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ).......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR17)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD.PLDP */
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR18)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._PLD.PLDP */
                        }
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }
        }

        Device (EHC2)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                PWUC,   6
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x29, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ).......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x21, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // !.......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x61, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // a.......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                            }
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x61, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // a.......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == Zero))
                                {
                                    If ((Arg1 == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }
                                ElseIf ((_T_0 == One))
                                {
                                    If ((SDGV == 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf ((_T_0 == 0x02))
                                {
                                    Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.SDGV */
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xA1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Device (WCAM)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDA, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x21, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // !.......
                                    }
                                })
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14.WCAM._PLD.PLDA */
                            }
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x29, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ).......
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                            }
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDA, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xA9, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                }
                            })
                            If (AIOP)
                            {
                                Return (PLDA) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDA */
                            }
                            Else
                            {
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }
        }

        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, 0xD0, 0x10)
            Field (XPRT, DWordAcc, NoLock, Preserve)
            {
                PR2,    32, 
                PR2M,   32, 
                PR3,    32, 
                PR3M,   32
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (POSC, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, CDW1)
                CreateDWordField (Arg2, 0x08, CDW3)
                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((XHCI == Zero))
                {
                    CDW1 |= 0x02
                }

                If (!(CDW1 & One))
                {
                    If ((CDW3 & One))
                    {
                        ESEL ()
                    }
                    Else
                    {
                        XSEL ()
                    }
                }

                Return (Arg2)
            }

            Method (XSEL, 0, Serialized)
            {
                If (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    Local0 = Zero
                    Local0 = (PR3 & 0xFFFFFFF0)
                    Local0 |= XHPM /* \XHPM */
                    PR3 = (Local0 & PR3M) /* \_SB_.PCI0.XHC_.PR3M */
                    Local0 = Zero
                    Local0 = (PR2 & 0xFFFFFFF0)
                    Local0 |= XHPM /* \XHPM */
                    PR2 = (Local0 & PR2M) /* \_SB_.PCI0.XHC_.PR2M */
                    XUSB = One
                }
            }

            Method (ESEL, 0, Serialized)
            {
                If (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    PR3 &= 0xFFFFFFF0
                    PR2 &= 0xFFFFFFF0
                    XUSB = Zero
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (HSP1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP1._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & One))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP1._PLD.PLDP */
                    }
                }

                Device (HSP2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x02))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP2._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x1D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x02))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP2._PLD.PLDP */
                    }
                }

                Device (HSP3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x04))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP3._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x1D, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x04))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP3._PLD.PLDP */
                    }
                }

                Device (HSP4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2 & 0x08))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0xA9, 0x1D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2 & 0x08))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HSP4._PLD.PLDP */
                    }
                }

                Device (SSP1)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & One))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._PLD.PLDP */
                    }
                }

                Device (SSP2)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x02))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x02))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._PLD.PLDP */
                    }
                }

                Device (SSP3)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x04))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x04))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._PLD.PLDP */
                    }
                }

                Device (SSP4)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x08))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x08))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._PLD.PLDP */
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }
        }

        Device (HDEF)
        {
            Name (_ADR, 0x001B0000)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                DCKA,   1, 
                Offset (0x01), 
                DCKM,   1, 
                    ,   6, 
                DCKS,   1, 
                Offset (0x08), 
                    ,   15, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        OperationRegion (CPSB, SystemMemory, 0xD8A80F98, 0x10)
        Field (CPSB, AnyAcc, NoLock, Preserve)
        {
            RTCX,   1, 
            SBB0,   7, 
            SBB1,   8, 
            SBB2,   8, 
            SBB3,   8, 
            SBB4,   8, 
            SBB5,   8, 
            SBB6,   8, 
            SBB7,   8, 
            SBB8,   8, 
            SBB9,   8, 
            SBBA,   8, 
            SBBB,   8, 
            SBBC,   8, 
            SBBD,   8, 
            SBBE,   8, 
            SBBF,   8
        }

        Method (SPTS, 1, NotSerialized)
        {
            SLPX = One
            SLPE = One
        }

        Method (SWAK, 1, NotSerialized)
        {
            SLPE = Zero
            If (RTCX){}
            Else
            {
                Notify (PWRB, 0x02) // Device Wake
            }
        }

        OperationRegion (SMIE, SystemIO, PMBS, 0x04)
        Field (SMIE, ByteAcc, NoLock, Preserve)
        {
                ,   10, 
            RTCS,   1, 
                ,   3, 
            PEXS,   1, 
            WAKS,   1, 
            Offset (0x03), 
            PWBT,   1, 
            Offset (0x04)
        }

        OperationRegion (SLPR, SystemIO, SMCR, 0x08)
        Field (SLPR, ByteAcc, NoLock, Preserve)
        {
                ,   4, 
            SLPE,   1, 
                ,   31, 
            SLPX,   1, 
            Offset (0x08)
        }
    }

    Scope (_SB.PCI0.RP01)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP02)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP03)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP04)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP06)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP07)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.RP08)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    OperationRegion (_SB.PCI0.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PCI0.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CADR,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, NotSerialized)
    {
        Local0 = 0xFF
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
        _T_0 = (Arg0 + Zero)
        If ((_T_0 == 0x03F8))
        {
            Local0 = Zero
        }
        ElseIf ((_T_0 == 0x02F8))
        {
            Local0 = One
        }
        ElseIf ((_T_0 == 0x0220))
        {
            Local0 = 0x02
        }
        ElseIf ((_T_0 == 0x0228))
        {
            Local0 = 0x03
        }
        ElseIf ((_T_0 == 0x0238))
        {
            Local0 = 0x04
        }
        ElseIf ((_T_0 == 0x02E8))
        {
            Local0 = 0x05
        }
        ElseIf ((_T_0 == 0x0338))
        {
            Local0 = 0x06
        }
        ElseIf ((_T_0 == 0x03E8))
        {
            Local0 = 0x07
        }

        Return (Local0)
    }

    Method (RRIO, 4, NotSerialized)
    {
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
        _T_0 = (Arg0 + Zero)
        If ((_T_0 == Zero))
        {
            CALE = Zero
            Local0 = UXDV (Arg2)
            If ((Local0 != 0xFF))
            {
                CADR = Local0
            }

            If (Arg1)
            {
                CALE = One
            }
        }
        ElseIf ((_T_0 == One))
        {
            CBLE = Zero
            Local0 = UXDV (Arg2)
            If ((Local0 != 0xFF))
            {
                CBDR = Local0
            }

            If (Arg1)
            {
                CBLE = One
            }
        }
        ElseIf ((_T_0 == 0x02))
        {
            LTLE = Zero
            If ((Arg2 == 0x0378))
            {
                LTDR = Zero
            }

            If ((Arg2 == 0x0278))
            {
                LTDR = One
            }

            If ((Arg2 == 0x03BC))
            {
                LTDR = 0x02
            }

            If (Arg1)
            {
                LTLE = One
            }
        }
        ElseIf ((_T_0 == 0x03))
        {
            FDLE = Zero
            If ((Arg2 == 0x03F0))
            {
                FDDR = Zero
            }

            If ((Arg2 == 0x0370))
            {
                FDDR = One
            }

            If (Arg1)
            {
                FDLE = One
            }
        }
        ElseIf ((_T_0 == 0x08))
        {
            If ((Arg2 == 0x0200))
            {
                If (Arg1)
                {
                    GLLE = One
                }
                Else
                {
                    GLLE = Zero
                }
            }

            If ((Arg2 == 0x0208))
            {
                If (Arg1)
                {
                    GHLE = One
                }
                Else
                {
                    GHLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x09))
        {
            If ((Arg2 == 0x0200))
            {
                If (Arg1)
                {
                    GLLE = One
                }
                Else
                {
                    GLLE = Zero
                }
            }

            If ((Arg2 == 0x0208))
            {
                If (Arg1)
                {
                    GHLE = One
                }
                Else
                {
                    GHLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0A))
        {
            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
            {
                If (Arg1)
                {
                    KCLE = One
                }
                Else
                {
                    KCLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0B))
        {
            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
            {
                If (Arg1)
                {
                    MCLE = One
                }
                Else
                {
                    MCLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0C))
        {
            If ((Arg2 == 0x2E))
            {
                If (Arg1)
                {
                    C1LE = One
                }
                Else
                {
                    C1LE = Zero
                }
            }

            If ((Arg2 == 0x4E))
            {
                If (Arg1)
                {
                    C2LE = One
                }
                Else
                {
                    C2LE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0D))
        {
            If ((Arg2 == 0x2E))
            {
                If (Arg1)
                {
                    C1LE = One
                }
                Else
                {
                    C1LE = Zero
                }
            }

            If ((Arg2 == 0x4E))
            {
                If (Arg1)
                {
                    C2LE = One
                }
                Else
                {
                    C2LE = Zero
                }
            }
        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_SB.PCI0)
    {
        Method (NPTS, 1, NotSerialized)
        {
        }

        Method (NWAK, 1, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.PEG0)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.PEG0.PEGP)
    {
        OperationRegion (DGFX, PCI_Config, Zero, 0xF0)
        Field (DGFX, DWordAcc, Lock, Preserve)
        {
            Offset (0x0B), 
            LNKV,   8
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.PEG1)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.PEG2)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0.PEG3)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x09, 0x04))
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Method (PCPC, 0, NotSerialized)
            {
                If (ECON)
                {
                    ^^LPCB.H_EC.SLPC = 0x02
                }

                ECST (0x6F)
            }

            Method (PAPR, 0, NotSerialized)
            {
                If (ECON)
                {
                    Return ((^^LPCB.H_EC.MCAP / 0x64))
                }
                Else
                {
                    Return (Zero)
                }
            }

            Device (DD01)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID1 == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID1))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID1))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD1) /* \NXD1 */
                    }

                    Return (NDDS (DID1))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD02)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID2 == Zero))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID2))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((LIDS == Zero))
                    {
                        Return (Zero)
                    }

                    Return (CDDS (DID2))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD2) /* \NXD2 */
                    }

                    Return (NDDS (DID2))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }

                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                {
                    Return (Package (0x67)
                    {
                        0x32, 
                        Zero, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }

                Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                {
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        AINT (One, Arg0)
                        BRTL = Arg0
                    }
                }

                Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                {
                    Return (BRTL) /* \BRTL */
                }
            }

            Device (DD03)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID3))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID3))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD3) /* \NXD3 */
                    }

                    Return (NDDS (DID3))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD04)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID4))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID4))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD4) /* \NXD4 */
                    }

                    Return (NDDS (DID4))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD05)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID5))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID5))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD5) /* \NXD5 */
                    }

                    Return (NDDS (DID5))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD06)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x06)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID6))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID6))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD6) /* \NXD6 */
                    }

                    Return (NDDS (DID6))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD07)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x07)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID7))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID7))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD7) /* \NXD7 */
                    }

                    Return (NDDS (DID7))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD08)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID8))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID8))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DID8))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Method (SDDL, 1, NotSerialized)
            {
                NDID++
                Local0 = (Arg0 & 0x0F0F)
                Local1 = (0x80000000 | Local0)
                If ((DIDL == Local0))
                {
                    Return (Local1)
                }

                If ((DDL2 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL3 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL4 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL5 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL6 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL7 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL8 == Local0))
                {
                    Return (Local1)
                }

                Return (Zero)
            }

            Method (CDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (0x1D)
                }

                If ((CADL == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL2 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL3 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL4 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL5 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL6 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL7 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL8 == Local0))
                {
                    Return (0x1F)
                }

                Return (0x1D)
            }

            Method (NDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (Zero)
                }

                If ((NADL == Local0))
                {
                    Return (One)
                }

                If ((NDL2 == Local0))
                {
                    Return (One)
                }

                If ((NDL3 == Local0))
                {
                    Return (One)
                }

                If ((NDL4 == Local0))
                {
                    Return (One)
                }

                If ((NDL5 == Local0))
                {
                    Return (One)
                }

                If ((NDL6 == Local0))
                {
                    Return (One)
                }

                If ((NDL7 == Local0))
                {
                    Return (One)
                }

                If ((NDL8 == Local0))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Scope (^^PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    TASM,   10, 
                    Offset (0x62)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0xA4), 
                ASLE,   8, 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xB5), 
                LBPC,   8, 
                Offset (0xBC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                DMOD,   32, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                PLUT,   592, 
                PFMB,   32, 
                CCDV,   32, 
                PCFT,   32, 
                Offset (0x400), 
                GVD1,   49152, 
                PHED,   32, 
                BDDC,   2048
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x05)
            {
                Package (0x02)
                {
                    0xE4, 
                    0x0140
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    Zero, 
                    Zero
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (GSCI, 0, Serialized)
            {
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = 0x0679
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        PARM = 0x0240
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        PARM &= 0xEFFF0000
                        PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                        PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        PARM = IPSC /* \IPSC */
                        PARM |= (IPAT << 0x08)
                        PARM += 0x0100
                        PARM |= (LIDS << 0x10)
                        PARM += 0x00010000
                        PARM |= (IBIA << 0x14)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x06))
                    {
                        PARM = ITVF /* \ITVF */
                        PARM |= (ITVM << 0x04)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                        PARM ^= One
                        PARM |= (GMFN << One)
                        PARM |= 0x1800
                        PARM |= (IDMS << 0x11)
                        PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                            0x15) /* \_SB_.PCI0.GFX0.PARM */
                        GESF = One
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        PARM = Zero
                        If (ISSC)
                        {
                            PARM |= 0x03
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        PARM = KSV0 /* \KSV0 */
                        GESF = KSV1 /* \KSV1 */
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = Zero
                        PARM = 0x000F87FD
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x03))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x06))
                    {
                        ITVF = (PARM & 0x0F)
                        ITVM = ((PARM & 0xF0) >> 0x04)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        If ((PARM == Zero))
                        {
                            Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                            If ((0x80000000 & Local0))
                            {
                                CLID &= 0x0F
                                GLID (CLID)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x08))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x09))
                    {
                        IBTT = (PARM & 0xFF)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        IPSC = (PARM & 0xFF)
                        If (((PARM >> 0x08) & 0xFF))
                        {
                            IPAT = ((PARM >> 0x08) & 0xFF)
                            IPAT--
                        }

                        IBIA = ((PARM >> 0x14) & 0x07)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        IF1E = ((PARM >> One) & One)
                        If ((PARM & 0x0001E000))
                        {
                            IDMS = ((PARM >> 0x0D) & 0x0F)
                        }
                        Else
                        {
                            IDMS = ((PARM >> 0x11) & 0x0F)
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x10))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x11))
                    {
                        PARM = (LIDS << 0x08)
                        PARM += 0x0100
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x12))
                    {
                        If ((PARM & One))
                        {
                            If (((PARM >> One) == One))
                            {
                                ISSC = One
                            }
                            Else
                            {
                                GESF = Zero
                                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                            }
                        }
                        Else
                        {
                            ISSC = Zero
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x13))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x14))
                    {
                        PAVP = (PARM & 0x0F)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GEFC == 0x04))
                {
                    GXFC = GBDA ()
                }

                If ((GEFC == 0x06))
                {
                    GXFC = SBCB ()
                }

                GEFC = Zero
                SCIS = One
                GSSE = Zero
                SCIE = Zero
                Return (Zero)
            }

            Method (PDRD, 0, NotSerialized)
            {
                If (!DRDY)
                {
                    Sleep (ASLP)
                }

                Return (!DRDY)
            }

            Method (PSTS, 0, NotSerialized)
            {
                If ((CSTS > 0x02))
                {
                    Sleep (ASLP)
                }

                Return ((CSTS == 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                CEVT = Arg0
                CSTS = 0x03
                If (((CHPD == Zero) && (Arg1 == Zero)))
                {
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (PCI0, Arg1)
                    }
                    Else
                    {
                        Notify (GFX0, Arg1)
                    }
                }

                If (CondRefOf (HNOT))
                {
                    HNOT (Arg0)
                }
                Else
                {
                    Notify (GFX0, 0x80) // Status Change
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                TIDX = Arg0
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    CLID = 0x03
                }
                Else
                {
                    CLID = Arg0
                }

                Return (GNOT (0x02, Zero))
            }

            Method (GDCK, 1, NotSerialized)
            {
                CDCK = Arg0
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (!ARDY)
                {
                    Sleep (ASLP)
                }

                Return (!ARDY)
            }

            Method (AINT, 2, NotSerialized)
            {
                If (!(TCHE & (One << Arg0)))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    If (CPFM)
                    {
                        Local0 = (CPFM & 0x0F)
                        Local1 = (EPFM & 0x0F)
                        If ((Local0 == One))
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            ElseIf ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                PFIT = One
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            ElseIf ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                PFIT = 0x06
                            }
                        }

                        If ((Local0 == 0x08))
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            ElseIf ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                PFIT = 0x08
                            }
                        }
                    }
                    Else
                    {
                        PFIT ^= 0x07
                    }

                    PFIT |= 0x80000000
                    ASLC = 0x04
                }
                ElseIf ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }
                ElseIf ((Arg0 == Zero))
                {
                    ALSI = Arg1
                    ASLC = One
                }
                Else
                {
                    Return (One)
                }

                ASLE = One
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If ((OVER != Zero))
                {
                    Return (!GSMI)
                }

                Return (Zero)
            }

            Device (^^MEM2)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRS1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                })
                Name (CRS2, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40004000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((((PNHM & 0x0FFF0FF0) == 0x000206A0) || ((PNHM & 0x0FFF0FFF
                        ) == 0x000306A0)))
                    {
                        Return (CRS1) /* \_SB_.MEM2.CRS1 */
                    }

                    Return (CRS2) /* \_SB_.MEM2.CRS2 */
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (DRET, Buffer (0x04)
                {
                     0x00                                             // .
                })
                If ((Arg0 == ToUUID ("6f3975e1-7a82-4f67-8b97-15bee060bedf")))
                {
                    If ((Arg2 == Zero))
                    {
                        CreateWordField (DRET, Zero, F0SS)
                        F0SS = 0x02
                        Return (DRET) /* \_SB_.PCI0.GFX0._DSM.DRET */
                    }

                    If ((Arg2 == One))
                    {
                        If ((^^PEG0.PEGP.LNKV == 0x03))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }
                }
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
        Processor (CPU4, 0x05, 0x00000410, 0x06){}
        Processor (CPU5, 0x06, 0x00000410, 0x06){}
        Processor (CPU6, 0x07, 0x00000410, 0x06){}
        Processor (CPU7, 0x08, 0x00000410, 0x06){}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0)
        PTS (Arg0)
        If ((Arg0 == 0x03))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == FDTP))
            {
                GP27 = One
            }
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P8XH (One, 0xAB)
        WAK (Arg0)
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT))
            {
                If ((ECON == One))
                {
                    \_SB.PCI0.LPCB.H_EC.CFAN = Zero
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((OSYS == 0x07D2))
            {
                If ((CFGD & One))
                {
                    If ((\_PR.CPU0._PPC > Zero))
                    {
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                        \_PR.CPU0._PPC += One
                        PNOT ()
                    }
                    Else
                    {
                        \_PR.CPU0._PPC += One
                        PNOT ()
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                    }
                }
            }

            If ((ECON == One))
            {
                If ((LIDS != \_SB.PCI0.LPCB.H_EC.LSTE))
                {
                    LIDS = \_SB.PCI0.LPCB.H_EC.LSTE
                    If (IGDS)
                    {
                        If (\_SB.PCI0.GFX0.GLID (LIDS))
                        {
                            \_SB.PCI0.GFX0.CLID |= 0x80000000
                        }
                    }

                    Notify (\_SB.LID0, 0x80) // Status Change
                }

                If ((\_SB.PCI0.LPCB.H_EC.DOCK != DSTS))
                {
                    DSTS = \_SB.PCI0.LPCB.H_EC.DOCK
                    If ((\_SB.PCI0.HDEF.DCKS && One))
                    {
                        \_SB.PCI0.HDEF.DCKA = DSTS /* \DSTS */
                    }

                    If ((DSTS == One))
                    {
                        If ((Arg0 == 0x03))
                        {
                            Sleep (0x03E8)
                            SSMP = PDBR /* \PDBR */
                            Sleep (0x03E8)
                        }

                        Notify (\_SB.PCI0.DOCK, Zero) // Bus Check
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.DOCK, One) // Device Check
                    }
                }

                If ((BNUM == Zero))
                {
                    If ((\_SB.PCI0.LPCB.H_EC.VPWR != PWRS))
                    {
                        PWRS = \_SB.PCI0.LPCB.H_EC.VPWR
                        PNOT ()
                    }
                }
                ElseIf ((\_SB.PCI0.LPCB.H_EC.RPWR != PWRS))
                {
                    PWRS = \_SB.PCI0.LPCB.H_EC.RPWR
                    PNOT ()
                }
            }

            If ((RP1D == Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((RP2D == Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((RP6D == Zero))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((RP7D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((RP8D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }

        If ((ECON == One))
        {
            B1SC = \_SB.PCI0.LPCB.H_EC.B1CC
            B1SS = \_SB.PCI0.LPCB.H_EC.B1ST
            B2SC = \_SB.PCI0.LPCB.H_EC.B2CC
            B2SS = \_SB.PCI0.LPCB.H_EC.B2ST
            If ((OSYS >= 0x07D6))
            {
                Notify (\_SB.PCI0.LPCB.H_EC.BAT0, 0x81) // Information Change
                Notify (\_SB.PCI0.LPCB.H_EC.BAT1, 0x81) // Information Change
                Notify (\_SB.PCI0.LPCB.H_EC.BAT2, 0x81) // Information Change
            }
            Else
            {
                Notify (\_SB.PCI0.LPCB.H_EC.BAT0, 0x80) // Status Change
                Notify (\_SB.PCI0.LPCB.H_EC.BAT1, 0x80) // Status Change
                Notify (\_SB.PCI0.LPCB.H_EC.BAT2, 0x80) // Status Change
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTP))
        {
            TRP0 = Zero
        }

        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP06.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP06.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y1E)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y20)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y21)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y22)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y23)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1F)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1E._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1F._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1F._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y20._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y21._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y22._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y23._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y23._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DID1 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD01, Arg0)
        }

        If (((DID2 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD02, Arg0)
        }

        If (((DID3 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD03, Arg0)
        }

        If (((DID4 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD04, Arg0)
        }

        If (((DID5 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD05, Arg0)
        }

        If (((DID6 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD06, Arg0)
        }

        If (((DID7 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD07, Arg0)
        }

        If (((DID8 & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD08, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RP1D == Zero))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((RP2D == Zero))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((RP3D == Zero))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((RP4D == Zero))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((RP5D == Zero))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((RP6D == Zero))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((RP7D == Zero))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((RP8D == Zero))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG3, 0x02) // Device Wake
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }

                    If (ECON)
                    {
                        If ((\_SB.PCI0.LPCB.H_EC.DOCK == Zero))
                        {
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }

                    If (ECON)
                    {
                        If ((\_SB.PCI0.LPCB.H_EC.DOCK == Zero))
                        {
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            If (CondRefOf (TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (OL1E, 0, NotSerialized)
        {
            If ((ECON == Zero))
            {
                Return (Zero)
            }

            If ((LIDS != \_SB.PCI0.LPCB.H_EC.LSTE))
            {
                LIDS = \_SB.PCI0.LPCB.H_EC.LSTE
                If (IGDS)
                {
                    If (\_SB.PCI0.GFX0.GLID (LIDS))
                    {
                        \_SB.PCI0.GFX0.CLID |= 0x80000000
                    }
                }

                Notify (\_SB.LID0, 0x80) // Status Change
            }
            Else
            {
                If ((BNUM == Zero))
                {
                    If ((PWRS != \_SB.PCI0.LPCB.H_EC.VPWR))
                    {
                        PWRS = \_SB.PCI0.LPCB.H_EC.VPWR
                        PNOT ()
                    }
                }

                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Return (Zero)
        }
    }

    Scope (_TZ)
    {
        Name (ETMD, One)
        Name (THLD, 0x78)
        PowerResource (FN00, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (VFN0) /* \VFN0 */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                VFN0 = One
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = AC0F /* \AC0F */
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                VFN0 = Zero
                If ((ECON && ETMD))
                {
                    If ((VFN1 == Zero))
                    {
                        \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.H_EC.PENV = AC1F /* \AC1F */
                    }

                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }
        }

        Device (FAN0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN00
            })
        }

        PowerResource (FN01, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (VFN1) /* \VFN1 */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                VFN1 = One
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = AC1F /* \AC1F */
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                VFN1 = Zero
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }
        }

        Device (FAN1)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN01
            })
        }

        PowerResource (FN02, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (VFN2) /* \VFN2 */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                VFN2 = One
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                VFN2 = Zero
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }
        }

        Device (FAN2)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN02
            })
        }

        PowerResource (FN03, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (VFN3) /* \VFN3 */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                VFN3 = One
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                VFN3 = Zero
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }
        }

        Device (FAN3)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN03
            })
        }

        PowerResource (FN04, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (VFN4) /* \VFN4 */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                VFN4 = One
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                VFN4 = Zero
                If ((ECON && ETMD))
                {
                    \_SB.PCI0.LPCB.H_EC.PENV = Zero
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
                }
            }
        }

        Device (FAN4)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN04
            })
        }

        ThermalZone (TZ00)
        {
            Name (PTMP, 0x0BB8)
            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If (CondRefOf (\_PR.ACRT))
                {
                    If ((\_PR.ACRT != Zero))
                    {
                        Return ((0x0AAC + (\_PR.ACRT * 0x0A)))
                    }
                }

                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CondRefOf (\_PR.AAC0))
                {
                    If ((\_PR.AAC0 != Zero))
                    {
                        Return ((0x0AAC + (\_PR.AAC0 * 0x0A)))
                    }
                }

                Return ((0x0AAC + (ACTT * 0x0A)))
            }

            Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return ((0x0AAC + (ACT1 * 0x0A)))
            }

            Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (0x0AAC)
            }

            Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (0x0AAC)
            }

            Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (0x0AAC)
            }

            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN0
            })
            Name (_AL1, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN1
            })
            Name (_AL2, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN2
            })
            Name (_AL3, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN3
            })
            Name (_AL4, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN4
            })
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (!ETMD)
                {
                    Return (0x0BB8)
                }

                If ((DTSE == 0x03))
                {
                    Return ((0x0B10 + (CRTT * 0x0A)))
                }

                If ((DTSE == One))
                {
                    If ((PKGA == One))
                    {
                        Local0 = PDTS /* \PDTS */
                        Return ((0x0AAC + (Local0 * 0x0A)))
                    }

                    Local0 = DTS1 /* \DTS1 */
                    If ((DTS2 > Local0))
                    {
                        Local0 = DTS2 /* \DTS2 */
                    }

                    If ((DTS3 > Local0))
                    {
                        Local0 = DTS3 /* \DTS3 */
                    }

                    If ((DTS4 > Local0))
                    {
                        Local0 = DTS4 /* \DTS4 */
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }

                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.PLMX
                    Local0 = (0x0AAC + (Local0 * 0x0A))
                    PTMP = Local0
                    Return (Local0)
                }

                Return (0x0BC2)
            }
        }

        ThermalZone (TZ01)
        {
            Name (PTMP, 0x0BB8)
            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If (CondRefOf (\_PR.ACRT))
                {
                    If ((\_PR.ACRT != Zero))
                    {
                        Return ((0x0AAC + (\_PR.ACRT * 0x0A)))
                    }
                }

                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (!ETMD)
                {
                    Return (0x0BCC)
                }

                If ((DTSE == 0x03))
                {
                    Return ((0x0B10 + (CRTT * 0x0A)))
                }

                If ((DTSE == One))
                {
                    If ((PKGA == One))
                    {
                        Local0 = PDTS /* \PDTS */
                        Return ((0x0AAC + (Local0 * 0x0A)))
                    }

                    Local0 = DTS1 /* \DTS1 */
                    If ((DTS2 > Local0))
                    {
                        Local0 = DTS2 /* \DTS2 */
                    }

                    If ((DTS3 > Local0))
                    {
                        Local0 = DTS3 /* \DTS3 */
                    }

                    If ((DTS4 > Local0))
                    {
                        Local0 = DTS4 /* \DTS4 */
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }

                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.PECH
                    Local0 *= 0x0A
                    Local1 = \_SB.PCI0.LPCB.H_EC.PECL
                    Local1 >>= 0x02
                    Local1 = ((Local1 * 0x0A) / 0x40)
                    Local0 += Local1
                    Local0 += 0x0AAC
                    PTMP = Local0
                    Return (Local0)
                }

                Return (0x0BD6)
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                If ((TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If ((TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((TCNT == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CondRefOf (\_PR.APSV))
                {
                    If ((\_PR.APSV != Zero))
                    {
                        Return ((0x0AAC + (\_PR.APSV * 0x0A)))
                    }
                }

                Return ((0x0AAC + (PSVT * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1V) /* \TC1V */
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2V) /* \TC2V */
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPV) /* \TSPV */
            }
        }
    }

    OperationRegion (FSCR, SystemIO, SSCI, One)
    Field (FSCR, ByteAcc, NoLock, Preserve)
    {
        FPME,   1
    }

    Scope (_SB.PCI0.LPCB)
    {
        Method (SIOH, 0, NotSerialized)
        {
            If (FPME)
            {
                FPME = Zero
                If (WMIT)
                {
                    ^^^WMID.WMBB (One)
                }

                If (WMIF)
                {
                    ^^^WMID.WMBB (0x02)
                }

                If (WMIH)
                {
                    ^^^WMID.WMBB (0x03)
                }

                If (WMIO)
                {
                    ^^^WMID.WMBB (0x04)
                }

                If (ACBU)
                {
                    ^^GFX0.LCD.BRIU ()
                    ^^PEG0.VGA.LCD.BRIU ()
                    ACBU = Zero
                }

                If (ACBD)
                {
                    ^^GFX0.LCD.BRID ()
                    ^^PEG0.VGA.LCD.BRID ()
                    ACBD = Zero
                }
            }

            If ((PMFG & 0xE8))
            {
                Notify (PS2K, 0x02) // Device Wake
            }

            If ((PMFG & 0x10))
            {
                Notify (PS2M, 0x02) // Device Wake
            }
        }
    }

    Device (HTAM)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x05)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HESD == Zero))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.LPCB.TPM)
    {
        Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACCS,   8, 
            Offset (0x18), 
            TSTA,   8, 
            TBCA,   8, 
            Offset (0xF00), 
            TVID,   16, 
            TDID,   16
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((VIDT == 0x8086))
            {
                Return (Zero)
            }
            Else
            {
                If ((HESD == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (0x02)
                    {
                         0xFF, 0x01                                       // ..
                    })
                }
                ElseIf ((_T_0 == One))
                {
                    Return ("1.2")
                }
                ElseIf ((_T_0 == 0x02))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    TMF1 = 0x12
                    If (CondRefOf (_OSI, Local0))
                    {
                        If (_OSI ("Windows 2012"))
                        {
                            TMF1 = 0x82
                        }
                    }

                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xF1))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
                ElseIf ((_T_0 == 0x03))
                {
                    Name (PPI1, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    DAT = 0x11
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (One)
                    }

                    PPI1 [One] = DAT /* \_SB_.PCI0.LPCB.TPM_.DAT_ */
                    Return (PPI1) /* \_SB_.PCI0.LPCB.TPM_._DSM.PPI1 */
                }
                ElseIf ((_T_0 == 0x04))
                {
                    Return (TRST) /* \TRST */
                }
                ElseIf ((_T_0 == 0x05))
                {
                    Name (PPI2, Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    })
                    DAT = 0x21
                    INQ = OFST /* \OFST */
                    PPI2 [One] = DAT /* \_SB_.PCI0.LPCB.TPM_.DAT_ */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = 0x31
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xF0))
                    {
                        DAT = 0x51
                        INQ = OFST /* \OFST */
                        If ((DAT == 0xFF))
                        {
                            PPI2 [0x02] = 0xFFFFFFF0
                            Return (PPI2) /* \_SB_.PCI0.LPCB.TPM_._DSM.PPI2 */
                        }
                    }
                    ElseIf ((DAT == 0xF1))
                    {
                        DAT = 0x51
                        INQ = OFST /* \OFST */
                        If ((DAT == 0xFF))
                        {
                            PPI2 [0x02] = 0xFFFFFFF1
                            Return (PPI2) /* \_SB_.PCI0.LPCB.TPM_._DSM.PPI2 */
                        }
                    }
                    Else
                    {
                        PPI2 [0x02] = DAT /* \_SB_.PCI0.LPCB.TPM_.DAT_ */
                    }

                    Return (PPI2) /* \_SB_.PCI0.LPCB.TPM_._DSM.PPI2 */
                }
                ElseIf ((_T_0 == 0x06))
                {
                    Return (0x03)
                }
                ElseIf ((_T_0 == 0x07))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    TMF1 = 0x12
                    If (CondRefOf (_OSI, Local0))
                    {
                        If (_OSI ("Windows 2012"))
                        {
                            TMF1 = 0x82
                        }
                    }

                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xF1))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
                ElseIf ((_T_0 == 0x08))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    TMF1 = 0x43
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    Return (DAT) /* \_SB_.PCI0.LPCB.TPM_.DAT_ */
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_1 = ToInteger (Arg2)
                If ((_T_1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((_T_1 == One))
                {
                    TMF1 = 0x22
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (ITPD, PCI_Config, 0xE8, 0x04)
        Field (ITPD, DWordAcc, NoLock, Preserve)
        {
                ,   15, 
            TPDI,   1
        }

        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
        Field (TPMR, AnyAcc, NoLock, Preserve)
        {
            ACC0,   8
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((ACC0 != 0xFF))
            {
                If ((VIDT == 0x8086))
                {
                    If (TPMF)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((_T_0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((_T_0 == 0x02))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    TMF1 = 0x12
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                ElseIf ((_T_0 == 0x03))
                {
                    Name (PPI1, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    DAT = 0x11
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (One)
                    }

                    PPI1 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    Return (PPI1) /* \_SB_.PCI0.ITPM._DSM.PPI1 */
                }
                ElseIf ((_T_0 == 0x04))
                {
                    Return (One)
                }
                ElseIf ((_T_0 == 0x05))
                {
                    Name (PPI2, Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    })
                    DAT = 0x21
                    INQ = OFST /* \OFST */
                    PPI2 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    PPI2 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    DAT = 0x31
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((DAT == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    }

                    Return (PPI2) /* \_SB_.PCI0.ITPM._DSM.PPI2 */
                }
                ElseIf ((_T_0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_1 = ToInteger (Arg2)
                If ((_T_1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((_T_1 == One))
                {
                    TMF1 = 0x22
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    OperationRegion (SSCR, SystemIO, 0xB2, One)
    Field (SSCR, ByteAcc, NoLock, Preserve)
    {
        SSMI,   8
    }

    OperationRegion (SSSR, SystemIO, 0xB3, One)
    Field (SSSR, ByteAcc, NoLock, Preserve)
    {
        DSMI,   8
    }

    OperationRegion (VECT, SystemMemory, 0xD8ECC018, 0x1500)
    Field (VECT, AnyAcc, NoLock, Preserve)
    {
        WMIF,   1, 
        WMIT,   1, 
        WMIH,   1, 
        WMIP,   1, 
        WMIS,   1, 
        TEVT,   1, 
        HTHE,   1, 
        SSMC,   1, 
        AIOS,   1, 
        ACBU,   1, 
        ACBD,   1, 
        WMIO,   1, 
        AIOB,   1, 
        Offset (0x04), 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        EDI,    32, 
        WMPI,   8, 
        WMBH,   8, 
        WM10,   8, 
        WMBT,   8, 
        WMIB,   33536
    }

    Method (WBTM, 1, Serialized)
    {
        Local0 = Arg0
        If ((Arg0 > 0x1050))
        {
            Local0 = 0x1050
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Scope (GFX0)
            {
                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x01)
                    {
                        0x0110
                    })
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    Noop
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Mutex (MPWM, 0x00)
                    Name (_DCS, 0x1F)  // _DCS: Display Current Status
                    Name (_DGS, One)  // _DGS: Display Graphics State
                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Noop
                    }

                    Name (PBCL, Package (0x67)
                    {
                        0x32, 
                        Zero, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (PBCL) /* \_SB_.PCI0.GFX0.LCD_.PBCL */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Acquire (MPWM, 0xFFFF)
                        SSMC = Zero
                        EAX = Arg0
                        EBX = One
                        SSMI = BRTS /* \BRTS */
                        Release (MPWM)
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Acquire (MPWM, 0xFFFF)
                        SSMC = Zero
                        EBX = Zero
                        SSMI = BRTS /* \BRTS */
                        While ((SSMC == Zero))
                        {
                            Sleep (One)
                        }

                        Release (MPWM)
                        Return (EAX) /* \EAX_ */
                    }

                    Method (BRIU, 0, NotSerialized)
                    {
                        Notify (LCD, 0x86) // Device-Specific
                    }

                    Method (BRID, 0, NotSerialized)
                    {
                        Notify (LCD, 0x87) // Device-Specific
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Scope (PEG0)
            {
                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x01)
                    {
                        0x0110
                    })
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    Noop
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DSMD, One)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        Noop
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x01)
                        {
                            0x0110
                        })
                    }

                    Name (M30S, Buffer (0x2D)
                    {
                        /* 0000 */  0x4D, 0x58, 0x4D, 0x5F, 0x03, 0x00, 0x19, 0x00,  // MXM_....
                        /* 0008 */  0x30, 0x11, 0xB8, 0xF7, 0xF9, 0x3E, 0x20, 0x00,  // 0....> .
                        /* 0010 */  0x60, 0x6B, 0x62, 0xF7, 0xF9, 0x3E, 0x00, 0x00,  // `kb..>..
                        /* 0018 */  0x01, 0xF4, 0x01, 0x00, 0x03, 0x00, 0xF4, 0x01,  // ........
                        /* 0020 */  0x03                                             // .
                    })
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("4004a400-917d-4cf2-b89c-79b62fd55665")))
                        {
                            Name (TTT0, Zero)
                            TTT0 = Arg2
                            If ((TTT0 == Zero))
                            {
                                Return (Buffer (0x04)
                                {
                                     0x01, 0x00, 0x01, 0x01                           // ....
                                })
                            }
                            ElseIf ((TTT0 == 0x18))
                            {
                                Return (0x30)
                            }
                            ElseIf ((TTT0 == 0x10))
                            {
                                Return (M30S) /* \_SB_.PCI0.PEG0.VGA_.M30S */
                            }
                        }
                    }

                    Name (LCDA, One)
                    Name (HDMA, One)
                    Name (CRTA, One)
                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Mutex (MPWM, 0x00)
                        Name (_DCS, 0x1F)  // _DCS: Display Current Status
                        Name (_DGS, One)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Noop
                        }

                        Name (PBCL, Package (0x67)
                        {
                            0x32, 
                            Zero, 
                            Zero, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12, 
                            0x13, 
                            0x14, 
                            0x15, 
                            0x16, 
                            0x17, 
                            0x18, 
                            0x19, 
                            0x1A, 
                            0x1B, 
                            0x1C, 
                            0x1D, 
                            0x1E, 
                            0x1F, 
                            0x20, 
                            0x21, 
                            0x22, 
                            0x23, 
                            0x24, 
                            0x25, 
                            0x26, 
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2A, 
                            0x2B, 
                            0x2C, 
                            0x2D, 
                            0x2E, 
                            0x2F, 
                            0x30, 
                            0x31, 
                            0x32, 
                            0x33, 
                            0x34, 
                            0x35, 
                            0x36, 
                            0x37, 
                            0x38, 
                            0x39, 
                            0x3A, 
                            0x3B, 
                            0x3C, 
                            0x3D, 
                            0x3E, 
                            0x3F, 
                            0x40, 
                            0x41, 
                            0x42, 
                            0x43, 
                            0x44, 
                            0x45, 
                            0x46, 
                            0x47, 
                            0x48, 
                            0x49, 
                            0x4A, 
                            0x4B, 
                            0x4C, 
                            0x4D, 
                            0x4E, 
                            0x4F, 
                            0x50, 
                            0x51, 
                            0x52, 
                            0x53, 
                            0x54, 
                            0x55, 
                            0x56, 
                            0x57, 
                            0x58, 
                            0x59, 
                            0x5A, 
                            0x5B, 
                            0x5C, 
                            0x5D, 
                            0x5E, 
                            0x5F, 
                            0x60, 
                            0x61, 
                            0x62, 
                            0x63, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (PBCL) /* \_SB_.PCI0.PEG0.VGA_.LCD_.PBCL */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Acquire (MPWM, 0xFFFF)
                            SSMC = Zero
                            EAX = Arg0
                            EBX = One
                            SSMI = BRTS /* \BRTS */
                            Release (MPWM)
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Acquire (MPWM, 0xFFFF)
                            SSMC = Zero
                            EBX = Zero
                            SSMI = BRTS /* \BRTS */
                            While ((SSMC == Zero))
                            {
                                Sleep (One)
                            }

                            Release (MPWM)
                            Return (EAX) /* \EAX_ */
                        }

                        Method (BRIU, 0, NotSerialized)
                        {
                            Notify (LCD, 0x86) // Device-Specific
                        }

                        Method (BRID, 0, NotSerialized)
                        {
                            Notify (LCD, 0x87) // Device-Specific
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (H_EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ^^^GFX0.CLID = 0x03
                Return (Zero)
            }

            Name (B1CC, Zero)
            Name (B1ST, Zero)
            Name (B2CC, Zero)
            Name (B2ST, Zero)
            Name (CFAN, Zero)
            Name (CMDR, Zero)
            Name (DOCK, Zero)
            Name (EJET, Zero)
            Name (MCAP, Zero)
            Name (PLMX, Zero)
            Name (PECH, Zero)
            Name (PECL, Zero)
            Name (PENV, Zero)
            Name (PINV, Zero)
            Name (PPSH, Zero)
            Name (PPSL, Zero)
            Name (PSTP, Zero)
            Name (RPWR, Zero)
            Name (LSTE, Zero)
            Name (SLPC, Zero)
            Name (VPWR, Zero)
            Method (ECMD, 1, Serialized)
            {
                If (ECON)
                {
                    While (CMDR)
                    {
                        Stall (0x14)
                    }

                    CMDR = Arg0
                }
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Scope (\)
            {
                Field (GNVS, AnyAcc, Lock, Preserve)
                {
                    Offset (0x1E), 
                    BNUM,   8, 
                    Offset (0x20), 
                    B1SC,   8, 
                    Offset (0x23), 
                    B1SS,   8
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Scope (\)
            {
                Field (GNVS, AnyAcc, Lock, Preserve)
                {
                    Offset (0x21), 
                    B2SC,   8, 
                    Offset (0x24), 
                    B2SS,   8
                }
            }

            Device (BAT2)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }
        }
    }

    Device (_SB.PCI0.DOCK)
    {
        Name (_HID, "ABCDEFGH")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C15") /* Docking Station */)  // _CID: Compatible ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.LPCB.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.LPCB.SIOS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.LPCB.SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.LPCB.SIOW (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 96
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : D8BBD080
[028h 0040   4]                 DSDT Address : D89D71A0
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0011
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000D89D71A0
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000450

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 96 48 50 51 4F 45 4D  // FACP......HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 20  // SLIC-BPC. ..AMI 
    0020: 13 00 01 00 80 D0 BB D8 A0 71 9D D8 01 01 09 00  // .........q......
    0030: B2 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 00 00 0D 00 32 11 00 00  // e...........2...
    0070: A5 84 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 A0 71 9D D8  // .............q..
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 80 00 01  // . ..............
    00E0: 20 04 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DB
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000D8EE4018

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000D8EE4038

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 DB 48 50 51 4F 45 4D  // FPDTD.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 20  // SLIC-BPC. ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 18 40 EE D8  // .............@..
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 38 40 EE D8  // ............8@..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 83
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 83 48 50 51 4F 45 4D  // HPET8.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 2E  // SLIC-BPC. ..AMI.
    0020: 05 00 00 00 01 A7 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 76
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 76 48 50 51 4F 45 4D  // MCFG<....vHPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 4D 53 46 54  // SLIC-BPC. ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C8
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 5B AB 60 56 \
    BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD 1D A9 8C 94 \
    B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 31 B9 95 74 \
    10 DA 3B A4 5B B5 19 82 7C 39 D7 0D 7C 22 AC 1C \
    2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 96 E1 2E 68 \
    9A BF 44 45 3E 3C 8E 99 90 DE 37 38 57 0B 92 15 \
    BC DE FF F2 07 7E B5 40 8C 51 3A C3 02 48 F6 13 \
    12 72 FB 42 78 E6 47 88 54 C7 B0 F0 93 9E FB 04 \
    B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 01 00 00 00 \
    B6 00 00 00 00 00 02 00 48 50 51 4F 45 4D 53 4C \
    49 43 2D 42 50 43 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 33 06 D7 20 8A 0A 63 95 08 94 A9 60 30 37 \
    CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4 0C 88 79 3C \
    E8 46 01 E8 8B E0 60 F3 63 18 DE 7B 5C BB A9 53 \
    FE B1 C1 D4 82 67 5B 6C 13 45 9E 66 49 23 CC 33 \
    09 92 76 FA 31 70 35 F1 57 F8 BA A9 56 6F 3F 41 \
    84 A5 3A E9 CD 6C 67 43 9B 70 91 7F B4 06 F8 26 \
    E2 FC 19 46 E5 F6 D7 66 0C 2D 73 99 BA 94 38 64 \
    D7 24 98 EB DA 39 64 C8 D3 8C 36 87 FD E5 47 BB \
    A6 B8 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 C8 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 00 00 00 00  // SLIC-BPC........
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57  // EMSLIC-BPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94  // ......3.. ..c...
    0100: A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4  // .`07....{...r...
    0110: 0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B  // ..y<.F....`.c..{
    0120: 5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66  // \..S.....g[l.E.f
    0130: 49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9  // I#.3..v.1p5.W...
    0140: 56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F  // Vo?A..:..lgC.p..
    0150: B4 06 F8 26 E2 FC 19 46 E5 F6 D7 66 0C 2D 73 99  // ...&...F...f.-s.
    0160: BA 94 38 64 D7 24 98 EB DA 39 64 C8 D3 8C 36 87  // ..8d.$...9d...6.
    0170: FD E5 47 BB A6 B8                                // ..G...


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xD48D2018, 
            0x000009AA, 
            "APIST   ", 
            0xD8A21A98, 
            0x00000303, 
            "CPU0CST ", 
            0xD8A20018, 
            0x0000083B, 
            "APCST   ", 
            0xD8A22C18, 
            0x00000119
        })
        Name (CFGD, 0x0066F6DF)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0xD8BBEF18, 0x0029)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            \_PR.CPU0._PPC = CPPC /* \_PR_.CPPC */
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x3E))
            {
                If ((((CFGD & 0x0400) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x2E) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "COMPAQ", "WMI", 0x00000001)
{
    External (AIOS, IntObj)
    External (DSMI, UnknownObj)
    External (EAX_, IntObj)
    External (EBX_, IntObj)
    External (ECX_, IntObj)
    External (EDI_, IntObj)
    External (EDX_, IntObj)
    External (ORIE, IntObj)
    External (SSMI, UnknownObj)
    External (TEVT, IntObj)
    External (WBTM, IntObj)
    External (WM10, IntObj)
    External (WMBH, IntObj)
    External (WMBT, IntObj)
    External (WMIB, IntObj)
    External (WMIF, IntObj)
    External (WMIH, IntObj)
    External (WMIO, IntObj)
    External (WMIP, IntObj)
    External (WMIS, IntObj)
    External (WMIT, IntObj)
    External (WMPI, IntObj)

    Scope (\_SB)
    {
        Device (WMID)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x012C)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x34, 0xF0, 0xB7, 0x6F,  // AA..4..o
                /* 0018 */  0x63, 0x2C, 0xE9, 0x45, 0xBE, 0x91, 0x3D, 0x44,  // c,.E..=D
                /* 0020 */  0xE2, 0xC7, 0x07, 0xE4, 0x41, 0x43, 0x02, 0x00,  // ....AC..
                /* 0028 */  0x3F, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // ?.2.=f'C
                /* 0030 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0038 */  0x41, 0x49, 0x06, 0x00, 0xD8, 0x90, 0xB5, 0xC9,  // AI......
                /* 0040 */  0xE4, 0xE7, 0xC5, 0x4D, 0xBB, 0x0F, 0xCB, 0x8A,  // ...M....
                /* 0048 */  0x35, 0x22, 0x02, 0x7E, 0x41, 0x44, 0x01, 0x02,  // 5".~AD..
                /* 0050 */  0x35, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 5d..B..B
                /* 0058 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 0060 */  0x41, 0x45, 0x07, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // AE..6d..
                /* 0068 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
                /* 0070 */  0x24, 0xF2, 0x0C, 0x9A, 0x42, 0x45, 0x0E, 0x00,  // $...BE..
                /* 0078 */  0x3C, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // <.2.=f'C
                /* 0080 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0088 */  0x41, 0x46, 0x1E, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // AF..=.2.
                /* 0090 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
                /* 0098 */  0xAD, 0xB9, 0xBF, 0x05, 0x41, 0x47, 0x19, 0x00,  // ....AG..
                /* 00A0 */  0x3E, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // >.2.=f'C
                /* 00A8 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 00B0 */  0x41, 0x48, 0xAA, 0x01, 0x79, 0x42, 0xF2, 0x95,  // AH..yB..
                /* 00B8 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 00C0 */  0xC6, 0x7E, 0xF6, 0x1C, 0xA0, 0x00, 0x01, 0x08,  // .~......
                /* 00C8 */  0x5B, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // [.......
                /* 00D0 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 00D8 */  0x42, 0x42, 0x02, 0x02, 0x2D, 0x7C, 0x22, 0x41,  // BB..-|"A
                /* 00E0 */  0xE1, 0x80, 0x3F, 0x42, 0x8B, 0x8E, 0x87, 0xE3,  // ..?B....
                /* 00E8 */  0x27, 0x55, 0xA0, 0xEB, 0x42, 0x43, 0x0A, 0x00,  // 'U..BC..
                /* 00F0 */  0xE0, 0x3C, 0xAA, 0x35, 0xEF, 0x7E, 0xCA, 0x4C,  // .<.5.~.L
                /* 00F8 */  0xA8, 0x8E, 0xA6, 0x53, 0xA8, 0x19, 0x10, 0xDA,  // ...S....
                /* 0100 */  0x42, 0x46, 0x06, 0x00, 0x90, 0x49, 0xC5, 0x82,  // BF...I..
                /* 0108 */  0x9F, 0xDB, 0xEF, 0x4A, 0x91, 0xBE, 0x17, 0x5D,  // ...J...]
                /* 0110 */  0x84, 0x38, 0x6A, 0xC4, 0x42, 0x47, 0x01, 0x02,  // .8j.BG..
                /* 0118 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0120 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0128 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
            })
            Name (ZBUF, Buffer (0x1040){})
            Name (GETN, Buffer (0x0400){})
            Name (GETV, Buffer (0x0400){})
            Name (GETP, Buffer (0x0400){})
            Name (GETZ, Buffer (0x0400){})
            Name (STPW, Buffer (0x22)
            {
                /* 0000 */  0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x75, 0x00,  // S.e.t.u.
                /* 0008 */  0x70, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00,  // p. .P.a.
                /* 0010 */  0x73, 0x00, 0x73, 0x00, 0x77, 0x00, 0x6F, 0x00,  // s.s.w.o.
                /* 0018 */  0x72, 0x00, 0x64, 0x00, 0x20, 0x00, 0x33, 0x00,  // r.d. .3.
                /* 0020 */  0x32, 0x00                                       // 2.
            })
            Name (POPW, Buffer (0x28)
            {
                /* 0000 */  0x50, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00,  // P.o.w.e.
                /* 0008 */  0x72, 0x00, 0x2D, 0x00, 0x4F, 0x00, 0x6E, 0x00,  // r.-.O.n.
                /* 0010 */  0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x73, 0x00,  //  .P.a.s.
                /* 0018 */  0x73, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00,  // s.w.o.r.
                /* 0020 */  0x64, 0x00, 0x20, 0x00, 0x33, 0x00, 0x32, 0x00   // d. .3.2.
            })
            Method (WMAD, 3, Serialized)
            {
                \_SB.WMID.REGZ ()
                EBX = 0x01
                Local0 = 0x00
                Local1 = 0x00
                Local3 = 0x00
                Local4 = 0x00
                Local5 = 0x00
                GETN = GETZ /* \_SB_.WMID.GETZ */
                GETV = GETZ /* \_SB_.WMID.GETZ */
                GETP = GETZ /* \_SB_.WMID.GETZ */
                If ((Arg1 == 0x03))
                {
                    Local3 = Arg2
                    While ((Local1 != 0x07))
                    {
                        Local0 = 0x00
                        Local2 = 0x02
                        GETN = DerefOf (DerefOf (EVNT [Local1]) [0x00])
                        GETV = Local3
                        Local4 = DerefOf (GETV [0x00])
                        Local4 = (Local4 / 0x02)
                        While (((Local0 != Local4) && (DerefOf (GETV [Local2]) == 
                            DerefOf (GETN [Local0]))))
                        {
                            Local0++
                            Local2++
                            Local2++
                        }

                        If ((Local0 == Local4))
                        {
                            TEVT = 0x01
                            EBX = Local1
                            Notify (WMID, 0xA0) // Device-Specific
                            Return (0x00)
                        }

                        Local1++
                    }

                    Return (0x05)
                }

                If ((Arg1 == 0x02))
                {
                    EBX = 0x02
                }

                If ((Arg1 == 0x01))
                {
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETN [Local3] = DerefOf (Arg2 [Local0])
                        If ((Local4 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (STPW [Local3])))
                            {
                                Local4 = 0x00
                                ECX = 0x01
                            }
                            Else
                            {
                                Local4 = 0x01
                                ECX = 0x00
                            }
                        }

                        If ((Local5 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (POPW [Local3])))
                            {
                                Local5 = 0x00
                                ECX = 0x02
                            }
                            Else
                            {
                                Local5 = 0x01
                                ECX = 0x00
                            }
                        }

                        Local0++
                        Local3++
                    }

                    Local3 = 0x00
                    Local4 = 0x00
                    Local5 = 0x00
                    Local1 = 0x00
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETV [Local3] = DerefOf (Arg2 [Local0])
                        Local0++
                        Local3++
                    }
                }

                Local3 = 0x00
                Local0++
                Local1 = DerefOf (Arg2 [Local0])
                Local1 <<= 0x08
                Local0--
                Local1 += DerefOf (Arg2 [Local0])
                Local0 += 0x02
                Local1 += Local0
                While ((Local0 < Local1))
                {
                    GETP [Local3] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local3++
                }

                If ((Arg1 == 0x01))
                {
                    If ((0x00 != ECX))
                    {
                        EAX = 0x00
                        Local0 = 0x00
                        If ((DerefOf (GETP [Local0]) == 0x00))
                        {
                            EAX = 0x02
                            If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                            {
                                EAX = 0x01
                            }
                        }

                        If ((0x00 == EAX))
                        {
                            Local0 = 0x00
                            While ((((DerefOf (GETP [Local0]) != 0x00) && 
                                (DerefOf (GETV [Local0]) != 0x00)) && (EAX != 0x02)))
                            {
                                If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }

                                Local0 += 0x02
                            }

                            If ((0x01 == EAX))
                            {
                                If (((DerefOf (GETV [Local0]) == 0x00) && (DerefOf (
                                    GETP [Local0]) == 0x00)))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }
                            }
                        }
                    }
                }

                Return (WMIE (GETN, GETV, GETP, Arg1))
            }

            Method (WMIE, 4, Serialized)
            {
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local2 = WMIB /* External reference */
                Local0 = 0x00
                Local1 = 0x01
                Local3 = 0x00
                If ((Arg3 != 0x02))
                {
                    If ((0x00 == EAX))
                    {
                        While (((DerefOf (Arg0 [Local0]) != 0x00) || (
                            DerefOf (Arg0 [Local1]) != 0x00)))
                        {
                            Local2 [Local3] = DerefOf (Arg0 [Local0])
                            Local0++
                            Local1++
                            Local3++
                        }

                        Local2 [Local3] = 0x00
                        Local3++
                        Local2 [Local3] = 0x00
                        Local3++
                        Local2 [Local3] = 0x00
                        Local3++
                        Local0 = 0x00
                        Local1 = 0x01
                    }

                    While (((DerefOf (Arg1 [Local0]) != 0x00) || (
                        DerefOf (Arg1 [Local1]) != 0x00)))
                    {
                        Local2 [Local3] = DerefOf (Arg1 [Local0])
                        Local0++
                        Local1++
                        Local3++
                    }

                    Local2 [Local3] = 0x00
                    Local3++
                    Local2 [Local3] = 0x00
                    Local3++
                    Local2 [Local3] = 0x00
                    Local3++
                    Local0 = 0x00
                    Local1 = 0x01
                }

                While (((DerefOf (Arg2 [Local0]) != 0x00) || (
                    DerefOf (Arg2 [Local1]) != 0x00)))
                {
                    Local2 [Local3] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local1++
                    Local3++
                }

                Local2 [Local3] = 0x00
                Local3++
                Local2 [Local3] = 0x00
                Local3++
                Local2 [Local3] = 0x00
                WMIB = Local2
                SSMI = WM10 /* External reference */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local7 = EAX /* External reference */
                If ((Arg3 != 0x02))
                {
                    Notify (WMID, 0xA0) // Device-Specific
                }

                Return (Local7)
            }

            Name (SEN1, Package (0x07)
            {
                Package (0x0C)
                {
                    "CPU Fan Speed", 
                    "Reports CPU fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Front Chassis Fan Speed", 
                    "Reports front chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Rear Chassis Fan Speed", 
                    "Reports rear chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Power Supply Fan Speed", 
                    "Reports power supply fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "CPU Thermal Index", 
                    "Reports CPU Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Caution", 
                    "Critical", 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Chassis Thermal Index", 
                    "Reports chassis\' Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Sensor Not Present ", 
                    " ", 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Screen Orientation", 
                    "Reports Screen Orientation", 
                    0x01, 
                    "Orientation", 
                    0x02, 
                    "", 
                    "Landscape", 
                    "Portrait (flipped)", 
                    "", 
                    0x01, 
                    0x00, 
                    0x01
                }
            })
            Method (WQAE, 1, Serialized)
            {
                If ((Arg0 == 0x00))
                {
                    ECX = 0x00
                    EBX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    ECX = 0x01
                    EBX = 0x03
                }

                If ((Arg0 == 0x02))
                {
                    ECX = 0x02
                    EBX = 0x02
                }

                If ((Arg0 == 0x03))
                {
                    ECX = 0x03
                    EBX = 0x01
                }

                If ((Arg0 < 0x04))
                {
                    EAX = 0x00
                    SSMI = WMBH /* External reference */
                    If ((EAX == 0xFFFF0000))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Not Present"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x0C
                    }
                    Else
                    {
                        DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                        If ((EAX <= 0xC8))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Stalled"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x0A
                            DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                        }
                        Else
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                        }
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x04))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x04
                    SSMI = WMBH /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                    If ((EDX == 0x00))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    }

                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Caution"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                    }

                    If ((EDX == 0x02))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Critical"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x05
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x05))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x05
                    SSMI = WMBH /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Sensor Not Present"
                        DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x06))
                {
                    If (AIOS)
                    {
                        EAX = 0x00
                        SSMI = ORIE /* External reference */
                        DerefOf (SEN1 [Arg0]) [0x0B] = EBX /* External reference */
                        If ((EAX == 0x01))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Landscape"
                        }
                        ElseIf ((EAX == 0x02))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Portrait"
                        }
                        ElseIf ((EAX == 0x03))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Landscape (flipped)"
                        }
                        ElseIf ((EAX == 0x04))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Portrait (flipped)"
                        }
                        Else
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Invalid"
                        }
                    }
                    Else
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Sensor Not Present"
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }
            }

            Name (SBLK, " ")
            Name (SEN2, Package (0x09)
            {
                " ", 
                " ", 
                0x01, 
                " ", 
                0x00, 
                " ", 
                " ", 
                " ", 
                ""
            })
            Method (WQBE, 1, Serialized)
            {
                SEN2 [0x00] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x01] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x03] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x06] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x07] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x04] = 0x00
                SEN2 [0x05] = SBLK /* \_SB_.WMID.SBLK */
                ECX = 0x06
                EAX = Arg0
                SSMI = WMBH /* External reference */
                If ((EAX == 0x01))
                {
                    SEN2 [0x00] = "BIOS Post Error"
                    SEN2 [0x03] = "BIOS Post Error"
                    SEN2 [0x06] = "Post Error Occurred"
                    SEN2 [0x07] = "No Error Reported"
                    SEN2 [0x05] = "Post Error Occurred"
                    If ((Arg0 == 0x00))
                    {
                        SEN2 [0x01] = "Out of memory space for option ROMs"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        SEN2 [0x01] = "Memory Size Error"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x02))
                    {
                        SEN2 [0x01] = "DIMM Configuration Warning"
                        SEN2 [0x04] = 0x03
                    }

                    If ((Arg0 == 0x03))
                    {
                        SEN2 [0x01] = "CPU fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x04))
                    {
                        SEN2 [0x01] = "Chassis fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x05))
                    {
                        SEN2 [0x01] = "Power supply fan failed"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x06))
                    {
                        SEN2 [0x01] = "The computer cover has been removed"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x07))
                    {
                        SEN2 [0x01] = "Front Audio Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x08))
                    {
                        SEN2 [0x01] = "Front USB Not Connected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x09))
                    {
                        SEN2 [0x01] = "Multi-Bay Riser Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x0A))
                    {
                        SEN2 [0x01] = "SMART Hard Drive detects imminent failure"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x0B))
                    {
                        SEN2 [0x01] = "Microcode Update Error"
                        SEN2 [0x04] = 0x06
                    }

                    If ((Arg0 == 0x0C))
                    {
                        SEN2 [0x01] = "System Time Not Set"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x0D))
                    {
                        SEN2 [0x01] = "Memory not configured correctly for proper MEBx execution"
                        SEN2 [0x04] = 0x03
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (SEN2) /* \_SB_.WMID.SEN2 */
            }

            Name (SETN, "                                                                                                                                                                                                                                                               ")
            Name (SETV, "                                                                                                                                                                                                                                                               ")
            Name (SETP, "                                                                                                                                                                                                                                                               ")
            Name (SETB, Buffer (0x0300){})
            Name (SETZ, Buffer (0x0300){})
            Name (STRP, Package (0x0B)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAF, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                Local4 = 0x00
                Local5 = 0x00
                STRP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x03] = 0x01
                STRP [0x04] = 0x00
                STRP [0x05] = 0x00
                STRP [0x06] = 0x00
                STRP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x08] = 0x00
                STRP [0x09] = 0x00
                STRP [0x0A] = 0x00
                If ((Arg0 <= 0x19))
                {
                    EDX = 0x01
                    ECX = Arg0
                }
                Else
                {
                    EDX = 0x07
                    ECX = (Arg0 - 0x1A)
                }

                EAX = 0x01
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    STRP [0x06] = ECX /* External reference */
                    STRP [0x03] = EAX /* External reference */
                    STRP [0x04] = EBX /* External reference */
                    Local4 = EDX /* External reference */
                    STRP [0x08] = EDI /* External reference */
                    STRP [0x05] = (Local4 & 0xFF)
                    STRP [0x0A] = (EDX >> 0x10)
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    STRP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETV = SETB /* \_SB_.WMID.SETB */
                    STRP [0x01] = SETV /* \_SB_.WMID.SETV */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    STRP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (STRP) /* \_SB_.WMID.STRP */
            }

            Name (PASP, Package (0x0E)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                0x00, 
                "utf-16", 
                " ", 
                0x00
            })
            Method (WQAC, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                PASP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x03] = 0x01
                PASP [0x04] = 0x00
                PASP [0x05] = 0x00
                PASP [0x06] = 0x00
                PASP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x08] = 0x00
                PASP [0x09] = 0x00
                PASP [0x0A] = 0x00
                PASP [0x0D] = 0x00
                If ((Arg0 == 0x00))
                {
                    EAX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    EAX = 0x01
                }

                DSMI = 0x0B
                SSMI = WMPI /* External reference */
                PASP [0x0D] = ECX /* External reference */
                ECX = Arg0
                EDX = 0x04
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    PASP [0x06] = ECX /* External reference */
                    PASP [0x03] = EAX /* External reference */
                    PASP [0x04] = EBX /* External reference */
                    PASP [0x08] = EDI /* External reference */
                    Local4 = EDX /* External reference */
                    PASP [0x05] = (Local4 & 0xFF)
                    PASP [0x0A] = (EDX >> 0x10)
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    PASP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        Local0++
                        Local3++
                    }

                    Local0++
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    PASP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (PASP) /* \_SB_.WMID.PASP */
            }

            Name (INTP, Package (0x0C)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAG, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                INTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x03] = 0x01
                INTP [0x04] = 0x00
                INTP [0x05] = 0x00
                INTP [0x06] = 0x00
                INTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x08] = 0x00
                INTP [0x09] = 0x00
                INTP [0x0A] = 0x00
                INTP [0x0B] = 0x00
                If ((Arg0 <= 0x02))
                {
                    ECX = Arg0
                    EDX = 0x03
                }
                Else
                {
                    ECX = (Arg0 - 0x03)
                    EDX = 0x0A
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x03
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    INTP [0x06] = ECX /* External reference */
                    INTP [0x03] = EAX /* External reference */
                    INTP [0x04] = EBX /* External reference */
                    INTP [0x05] = EDX /* External reference */
                    INTP [0x08] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    INTP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETV = SETB /* \_SB_.WMID.SETB */
                    INTP [0x01] = SETV /* \_SB_.WMID.SETV */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    INTP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (INTP) /* \_SB_.WMID.INTP */
            }

            Name (STR1, "                                               ")
            Name (STR2, "                                               ")
            Name (STR3, "                                               ")
            Name (STR4, "                                               ")
            Name (STR5, "                                               ")
            Name (STR6, "                                               ")
            Name (STR7, "                                               ")
            Name (STR8, "                                               ")
            Name (STR9, "                                               ")
            Name (STRA, "                                               ")
            Name (STRB, "                                               ")
            Name (STRC, "                                               ")
            Name (STRD, "                                               ")
            Name (STRE, "                                               ")
            Name (STRF, "                                               ")
            Name (STRG, "                                               ")
            Name (STRH, "                                               ")
            Name (STRI, "                                                                                                              ")
            Name (STRJ, "                                                                                                              ")
            Name (STRS, "                                               ")
            Name (ENUP, Package (0x21)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                " ", 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAH, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                ENUP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x03] = 0x01
                ENUP [0x04] = 0x00
                ENUP [0x05] = 0x00
                ENUP [0x06] = 0x00
                ENUP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x08] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x09] = 0x00
                ENUP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0B] = 0x00
                ENUP [0x0C] = 0x00
                ENUP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x19] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1A] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1B] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1C] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1D] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1E] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1F] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x20] = SBLK /* \_SB_.WMID.SBLK */
                If ((Arg0 <= 0x90))
                {
                    EDX = 0x00
                    ECX = Arg0
                }

                If ((Arg0 >= 0x91))
                {
                    EDX = 0x09
                    ECX = (Arg0 - 0x91)
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    ENUP [0x06] = ECX /* External reference */
                    ENUP [0x03] = EAX /* External reference */
                    ENUP [0x04] = EBX /* External reference */
                    ENUP [0x05] = EDX /* External reference */
                    ENUP [0x09] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 = Local0
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETV = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x01] = SETV /* \_SB_.WMID.SETV */
                    Local5 = 0x00
                    Local6 = 0x2C
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        Local0 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        While (((Local6 != DerefOf (Local2 [Local4])) && (
                            Local1 != DerefOf (Local2 [Local4]))))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local0] = DerefOf (Local2 [Local4])
                                Local0++
                                If ((DerefOf (Local2 [Local4]) == 0x2A))
                                {
                                    Local7 = Local5
                                    Local3 = 0x01
                                    Local0--
                                }
                            }

                            Local4++
                        }

                        If ((Local3 != 0x00))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            ENUP [0x0A] = STRD /* \_SB_.WMID.STRD */
                            ENUP [0x0B] = Local7
                            Local3 = 0x00
                        }

                        If ((Local5 == 0x00))
                        {
                            STR1 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR1 /* \_SB_.WMID.STR1 */
                        }

                        If ((Local5 == 0x01))
                        {
                            STR2 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR2 /* \_SB_.WMID.STR2 */
                        }

                        If ((Local5 == 0x02))
                        {
                            STR3 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR3 /* \_SB_.WMID.STR3 */
                        }

                        If ((Local5 == 0x03))
                        {
                            STR4 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR4 /* \_SB_.WMID.STR4 */
                        }

                        If ((Local5 == 0x04))
                        {
                            STR5 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR5 /* \_SB_.WMID.STR5 */
                        }

                        If ((Local5 == 0x05))
                        {
                            STR6 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR6 /* \_SB_.WMID.STR6 */
                        }

                        If ((Local5 == 0x06))
                        {
                            STR7 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR7 /* \_SB_.WMID.STR7 */
                        }

                        If ((Local5 == 0x07))
                        {
                            STR8 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR8 /* \_SB_.WMID.STR8 */
                        }

                        If ((Local5 == 0x08))
                        {
                            STR9 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR9 /* \_SB_.WMID.STR9 */
                        }

                        If ((Local5 == 0x09))
                        {
                            STRA = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRA /* \_SB_.WMID.STRA */
                        }

                        If ((Local5 == 0x0A))
                        {
                            STRB = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRB /* \_SB_.WMID.STRB */
                        }

                        If ((Local5 == 0x0B))
                        {
                            STRC = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRC /* \_SB_.WMID.STRC */
                        }

                        If ((Local5 == 0x0C))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRD /* \_SB_.WMID.STRD */
                        }

                        If ((Local5 == 0x0D))
                        {
                            STRE = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRE /* \_SB_.WMID.STRE */
                        }

                        If ((Local5 == 0x0E))
                        {
                            STRF = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRF /* \_SB_.WMID.STRF */
                        }

                        If ((Local5 == 0x0F))
                        {
                            STRG = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRG /* \_SB_.WMID.STRG */
                        }

                        If ((Local5 == 0x10))
                        {
                            STRH = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRH /* \_SB_.WMID.STRH */
                        }

                        If ((Local5 == 0x11))
                        {
                            STRI = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRI /* \_SB_.WMID.STRI */
                        }

                        If ((Local5 == 0x12))
                        {
                            STRJ = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRJ /* \_SB_.WMID.STRJ */
                        }

                        If ((Local5 == 0x13))
                        {
                            STRS = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRS /* \_SB_.WMID.STRS */
                        }

                        If ((DerefOf (Local2 [Local4]) != Local1))
                        {
                            Local4++
                        }

                        Local5++
                    }

                    ENUP [0x0C] = Local5
                    Local4++
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0x3B
                    Local6 = 0xFF
                    Local5 = 0x00
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        While ((Local6 != DerefOf (Local2 [Local4])))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local3] = DerefOf (Local2 [Local4])
                                Local3++
                            }

                            Local4++
                            If ((DerefOf (Local2 [Local4]) == Local1))
                            {
                                Local4--
                                Local6 = DerefOf (Local2 [Local4])
                                Local3 = 0x00
                            }
                        }

                        If ((Local3 != 0x00))
                        {
                            SETB [Local3] = 0x00
                            If ((Local5 == 0x00))
                            {
                                STRI = SETB /* \_SB_.WMID.SETB */
                                ENUP [0x07] = STRI /* \_SB_.WMID.STRI */
                            }

                            If ((Local5 == 0x01))
                            {
                                STRJ = SETB /* \_SB_.WMID.SETB */
                                ENUP [0x08] = STRJ /* \_SB_.WMID.STRJ */
                            }
                        }

                        Local3 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        Local4++
                        Local5++
                    }

                    Local4++
                    Local3 = 0x00
                    Local1 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local4])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local4])
                            Local3++
                        }

                        Local4++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x02] = SETP /* \_SB_.WMID.SETP */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (ENUP) /* \_SB_.WMID.ENUP */
            }

            Name (LSTP, Package (0x1A)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAI, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                LSTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x03] = 0x01
                LSTP [0x04] = 0x00
                LSTP [0x05] = 0x00
                LSTP [0x06] = 0x00
                LSTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x08] = 0x00
                LSTP [0x09] = 0x00
                LSTP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0B] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0C] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x19] = SBLK /* \_SB_.WMID.SBLK */
                ECX = Arg0
                EDX = 0x08
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    LSTP [0x06] = ECX /* External reference */
                    LSTP [0x03] = EAX /* External reference */
                    LSTP [0x04] = EBX /* External reference */
                    LSTP [0x05] = EDX /* External reference */
                    LSTP [0x08] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 = Local0
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETV = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x01] = SETV /* \_SB_.WMID.SETV */
                    Local5 = 0x00
                    Local6 = 0x2C
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        Local0 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        While (((Local6 != DerefOf (Local2 [Local4])) && (
                            Local1 != DerefOf (Local2 [Local4]))))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local0] = DerefOf (Local2 [Local4])
                                Local0++
                            }

                            Local4++
                        }

                        If ((Local5 == 0x00))
                        {
                            STR1 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR1 /* \_SB_.WMID.STR1 */
                        }

                        If ((Local5 == 0x01))
                        {
                            STR2 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR2 /* \_SB_.WMID.STR2 */
                        }

                        If ((Local5 == 0x02))
                        {
                            STR3 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR3 /* \_SB_.WMID.STR3 */
                        }

                        If ((Local5 == 0x03))
                        {
                            STR4 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR4 /* \_SB_.WMID.STR4 */
                        }

                        If ((Local5 == 0x04))
                        {
                            STR5 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR5 /* \_SB_.WMID.STR5 */
                        }

                        If ((Local5 == 0x05))
                        {
                            STR6 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR6 /* \_SB_.WMID.STR6 */
                        }

                        If ((Local5 == 0x06))
                        {
                            STR7 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR7 /* \_SB_.WMID.STR7 */
                        }

                        If ((Local5 == 0x07))
                        {
                            STR8 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR8 /* \_SB_.WMID.STR8 */
                        }

                        If ((Local5 == 0x08))
                        {
                            STR9 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR9 /* \_SB_.WMID.STR9 */
                        }

                        If ((Local5 == 0x09))
                        {
                            STRA = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRA /* \_SB_.WMID.STRA */
                        }

                        If ((Local5 == 0x0A))
                        {
                            STRB = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRB /* \_SB_.WMID.STRB */
                        }

                        If ((Local5 == 0x0B))
                        {
                            STRC = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRC /* \_SB_.WMID.STRC */
                        }

                        If ((Local5 == 0x0C))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRD /* \_SB_.WMID.STRD */
                        }

                        If ((Local5 == 0x0D))
                        {
                            STRE = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRE /* \_SB_.WMID.STRE */
                        }

                        If ((Local5 == 0x0E))
                        {
                            STRF = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRF /* \_SB_.WMID.STRF */
                        }

                        If ((Local5 == 0x0F))
                        {
                            STRG = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRG /* \_SB_.WMID.STRG */
                        }

                        If ((Local5 == 0x10))
                        {
                            STRH = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRH /* \_SB_.WMID.STRH */
                        }

                        If ((DerefOf (Local2 [Local4]) != Local1))
                        {
                            Local4++
                        }

                        Local5++
                    }

                    LSTP [0x09] = Local5
                    Local4++
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local4])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local4])
                            Local3++
                        }

                        Local4++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (LSTP) /* \_SB_.WMID.LSTP */
            }

            Method (WMSC, 0, Serialized)
            {
                EAX = 0x00
                SSMI = WMPI /* External reference */
            }

            Method (WMAA, 3, Serialized)
            {
                CreateDWordField (Arg2, 0x00, SSIG)
                CreateDWordField (Arg2, 0x04, COMM)
                CreateDWordField (Arg2, 0x08, CTYP)
                CreateDWordField (Arg2, 0x0C, DSIN)
                If ((Arg1 == 0x01))
                {
                    Local0 = 0x00
                }

                If ((Arg1 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg1 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg1 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg1 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)){}
                CreateDWordField (Local1, 0x00, SOUT)
                CreateDWordField (Local1, 0x04, RCOD)
                DSIN = WBTM /* External reference */
                Local5
                CreateField (Arg2, 0x00, ((Local5 + 0x10) * 0x08), DTIN)
                WMIB = DTIN /* \_SB_.WMID.WMAA.DTIN */
                SOUT = 0x4C494146
                RCOD = 0x02
                DSMI = 0x00
                \_SB.WMID.WMSC ()
                If ((EAX == 0x00))
                {
                    SOUT = 0x53534150
                    RCOD = 0x04
                    If ((0x00010000 == COMM))
                    {
                        If ((0x01 == CTYP))
                        {
                            DSMI = 0x0F
                        }

                        If ((0x02 == CTYP))
                        {
                            DSMI = 0x10
                        }

                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020000 == COMM))
                    {
                        If ((0x01 == CTYP))
                        {
                            DSMI = 0x01
                        }

                        If ((0x02 == CTYP))
                        {
                            DSMI = 0x02
                        }

                        If ((0x03 == CTYP))
                        {
                            DSMI = 0x03
                        }

                        If ((0x04 == CTYP))
                        {
                            DSMI = 0x04
                        }

                        If ((0x05 == CTYP))
                        {
                            DSMI = 0x05
                        }

                        If ((0x06 == CTYP))
                        {
                            DSMI = 0x06
                        }

                        If ((0x07 == CTYP))
                        {
                            DSMI = 0x07
                        }

                        If ((0x08 == CTYP))
                        {
                            DSMI = 0x08
                        }

                        If ((0x09 == CTYP))
                        {
                            DSMI = 0x09
                        }

                        If ((0x0A == CTYP))
                        {
                            DSMI = 0x0A
                        }

                        If ((0x1E == CTYP))
                        {
                            DSMI = 0x0E
                        }

                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020001 == COMM))
                    {
                        If ((0x02 != CTYP))
                        {
                            EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                            DSMI = 0x0C
                            EAX = 0x00
                            SSMI = WMPI /* External reference */
                            Local2 = WMRD ()
                            RCOD = 0x00
                        }

                        If ((0x02 == CTYP))
                        {
                            EAX = 0x01
                            While ((EAX == 0x01))
                            {
                                EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                                DSMI = 0x0C
                                EAX = 0x00
                                SSMI = WMPI /* External reference */
                                Local2 = WMRD ()
                                RCOD = 0x00
                            }
                        }
                    }

                    If ((0x00020002 == COMM))
                    {
                        EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                        DSMI = 0x0D
                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }
                }

                If ((0x00 == RCOD))
                {
                    RCOD = DerefOf (Local2 [0x00])
                    If ((0x00 == RCOD))
                    {
                        If ((DerefOf (Local2 [0x01]) <= Local0))
                        {
                            Local0 = 0x00
                            While ((Local0 < DerefOf (Local2 [0x01])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            SOUT = 0x53534150
                        }
                        Else
                        {
                            RCOD = 0x05
                        }
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (Local1)
            }

            Method (WMRD, 0, Serialized)
            {
                If ((ECX == 0x00))
                {
                    Local0 = Package (0x02)
                        {
                            0x00, 
                            0x00
                        }
                }
                Else
                {
                    Local1 = ECX /* External reference */
                    Local0 = Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            Buffer (Local1){}
                        }
                }

                Local0 [0x00] = EAX /* External reference */
                Local0 [0x01] = ECX /* External reference */
                If ((EAX == 0x00))
                {
                    If ((ECX != 0x00))
                    {
                        Local1 = WMIB /* External reference */
                        Local2 = 0x00
                        While ((Local2 < ECX))
                        {
                            DerefOf (Local0 [0x02]) [Local2] = DerefOf (Local1 [
                                Local2])
                            Local2++
                        }
                    }
                }

                Return (Local0)
            }

            Name (EVNT, Package (0x0A)
            {
                Package (0x05)
                {
                    "CPU Fan Stall", 
                    "CPU Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Front Chassis Fan Stall", 
                    " Front Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Rear Chassis Fan Stall", 
                    "Rear Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Power Supply Fan Stall", 
                    "Power Supply Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Thermal Caution", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x0A, 
                    0x04
                }, 

                Package (0x05)
                {
                    "Thermal Critical", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Security", 
                    "An attempt has been made to Access BIOS features unsuccessfully", 
                    0x04, 
                    0x0A, 
                    0x06
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Change", 
                    " ", 
                    0x04, 
                    0x05, 
                    0x02
                }, 

                Package (0x05)
                {
                    "Hood Intrusion", 
                    "The computer cover has been removed", 
                    0x03, 
                    0x00, 
                    0x01
                }, 

                Package (0x05)
                {
                    "Screen Orientation", 
                    "Screen Orientation has changed", 
                    0x03, 
                    0x05, 
                    0x02
                }
            })
            Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (TEVT)
                {
                    DerefOf (EVNT [EBX]) [0x01] = "TEST EVENT"
                    Return (DerefOf (EVNT [EBX]))
                }

                If (WMIT)
                {
                    WMIT = Zero
                    If ((EBX == 0x01))
                    {
                        Return (DerefOf (EVNT [0x04]))
                    }

                    If ((EBX == 0x02))
                    {
                        Return (DerefOf (EVNT [0x05]))
                    }
                }

                If (WMIF)
                {
                    WMIF = Zero
                    Return (DerefOf (EVNT [EAX]))
                }

                If (WMIP)
                {
                    WMIP = Zero
                    Return (DerefOf (EVNT [0x06]))
                }

                If (WMIH)
                {
                    WMIH = Zero
                    Return (DerefOf (EVNT [0x08]))
                }

                If (WMIO)
                {
                    WMIO = Zero
                    Return (DerefOf (EVNT [0x09]))
                }

                If (WMIS)
                {
                    WMIS = Zero
                    Local0 = 0x00
                    Local1 = 0x00
                    Local3 = ZBUF /* \_SB_.WMID.ZBUF */
                    While ((DerefOf (GETN [Local0]) != 0x00))
                    {
                        Local3 [Local1] = DerefOf (GETN [Local0])
                        Local0 += 0x02
                        Local1++
                    }

                    SETN = Local3
                    DerefOf (EVNT [0x07]) [0x01] = SETN /* \_SB_.WMID.SETN */
                    Return (DerefOf (EVNT [0x07]))
                }

                \_SB.WMID.REGZ ()
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
            }

            Method (WMBB, 1, Serialized)
            {
                Notify (WMID, 0xA0) // Device-Specific
            }

            Method (REGZ, 0, Serialized)
            {
                EAX = 0x00
                ECX = 0x00
                EDX = 0x00
                EBX = 0x00
            }

            Name (PEVT, Package (0x07)
            {
                "", 
                "", 
                "root\\wmi", 
                "HPBIOS_BIOSEvent", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQBC, 1, Serialized)
            {
                PEVT [0x00] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x00])
                PEVT [0x01] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x01])
                PEVT [0x04] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x02])
                PEVT [0x05] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x03])
                PEVT [0x06] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x04])
                Return (PEVT) /* \_SB_.WMID.PEVT */
            }

            Name (BTNS, Package (0x06)
            {
                Package (0x0A)
                {
                    "VolumeMuteButton", 
                    "Mute the sound volume", 
                    0x01, 
                    0x00, 
                    0x1F, 
                    0x00, 
                    0x03, 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0A)
                {
                    "VolumeUpButton", 
                    "Increase the sound volume", 
                    0x01, 
                    0x00, 
                    0x1F, 
                    0x00, 
                    0x03, 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0A)
                {
                    "VolumeDownButton", 
                    "Decrease the sound volume", 
                    0x01, 
                    0x00, 
                    0x1F, 
                    0x00, 
                    0x03, 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0A)
                {
                    "BrightnessUpButton", 
                    "Increase the brightness of the display", 
                    0x01, 
                    0x00, 
                    0x1F, 
                    0x00, 
                    0x03, 
                    0x01, 
                    0x00, 
                    0x01
                }, 

                Package (0x0A)
                {
                    "BrightnessDownButton", 
                    "Decrease the brightness of the display", 
                    0x01, 
                    0x00, 
                    0x1F, 
                    0x00, 
                    0x03, 
                    0x01, 
                    0x00, 
                    0x01
                }, 

                Package (0x0A)
                {
                    "MicrophoneMuteButton", 
                    "Mute the microphone", 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x01
                }
            })
            Name (PBTN, Package (0x14)
            {
                "", 
                "", 
                0x00, 
                "", 
                "", 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Name (SCBF, Buffer (0x14){})
            Name (SCBK, Buffer (0x14){})
            Name (SCST, "                    ")
            Name (BTNC, "B u t t o n   C o n f i g u r a t i o n ")
            Name (BTNN, Buffer (0x28){})
            Method (WQBF, 1, Serialized)
            {
                PBTN [0x00] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x00])
                PBTN [0x01] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x01])
                PBTN [0x05] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x02])
                PBTN [0x08] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x03])
                PBTN [0x09] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x04])
                PBTN [0x0C] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x05])
                PBTN [0x0D] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x06])
                PBTN [0x10] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x07])
                PBTN [0x11] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x08])
                PBTN [0x12] = DerefOf (DerefOf (BTNS [Arg0]) [
                    0x09])
                \_SB.WMID.REGZ ()
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local0 = ZBUF /* \_SB_.WMID.ZBUF */
                BTNN = DerefOf (DerefOf (BTNS [Arg0]) [0x00])
                Local2 = 0x00
                Local3 = 0x00
                While ((DerefOf (BTNN [Local2]) != 0x00))
                {
                    Local0 [Local3] = DerefOf (BTNN [Local2])
                    Local2++
                    Local3++
                    Local3++
                }

                WMIB = Local0
                SCBF = SCBK /* \_SB_.WMID.SCBK */
                EBX = Arg0
                SSMI = WMBT /* External reference */
                Local1 = 0xFF
                Local2 = 0x00
                Local3 = 0x00
                Local4 = WMIB /* External reference */
                Local0 = (EDX >> 0x10)
                PBTN [0x06] = (Local0 & Local1)
                Local0 = (EDX >> 0x08)
                PBTN [0x0A] = (Local0 & Local1)
                Local0 = EDX /* External reference */
                PBTN [0x0E] = (Local0 & Local1)
                While ((DerefOf (Local4 [Local2]) != 0x00))
                {
                    SCBF [Local3] = DerefOf (Local4 [Local2])
                    Local2 += 0x02
                    Local3++
                }

                SCST = SCBF /* \_SB_.WMID.SCBF */
                PBTN [0x03] = SCST /* \_SB_.WMID.SCST */
                Local2 += 0x02
                Local3 = 0x00
                SCBF = SCBK /* \_SB_.WMID.SCBK */
                While ((DerefOf (Local4 [Local2]) != 0x00))
                {
                    SCBF [Local3] = DerefOf (Local4 [Local2])
                    Local2 += 0x02
                    Local3++
                }

                SCST = SCBF /* \_SB_.WMID.SCBF */
                PBTN [0x04] = SCST /* \_SB_.WMID.SCST */
                Local0 = (ECX >> 0x18)
                PBTN [0x02] = (Local0 & Local1)
                Local0 = (ECX >> 0x10)
                PBTN [0x07] = (Local0 & Local1)
                Local0 = (ECX >> 0x08)
                PBTN [0x0B] = (Local0 & Local1)
                Local0 = ECX /* External reference */
                PBTN [0x0F] = (Local0 & Local1)
                PBTN [0x13] = EAX /* External reference */
                Return (PBTN) /* \_SB_.WMID.PBTN */
            }

            Method (WMBG, 3, Serialized)
            {
                \_SB.WMID.REGZ ()
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local0 = 0x00
                Local1 = 0x00
                Local4 = WMIB /* External reference */
                EAX = Arg1
                If ((Arg1 == 0x02))
                {
                    CreateDWordField (Arg2, Local0, BTEN)
                    Local0 += 0x04
                    EBX = BTEN /* \_SB_.WMID.WMBG.BTEN */
                }

                If ((Arg1 == 0x04))
                {
                    CreateDWordField (Arg2, Local0, BFCN)
                    Local0 += 0x04
                    EBX = BFCN /* \_SB_.WMID.WMBG.BFCN */
                }

                CreateWordField (Arg2, Local0, NSTR)
                Local2 = NSTR /* \_SB_.WMID.WMBG.NSTR */
                Local0 += 0x02
                If ((Local2 > 0x50))
                {
                    Return (0x05)
                }

                Local3 = 0x00
                While ((Local3 < Local2))
                {
                    Local4 [Local1] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local1++
                    Local3++
                }

                Local1++
                Local4 [Local1] = 0x00
                Local1++
                Local4 [Local1] = 0x00
                If ((Arg1 == 0x01))
                {
                    CreateWordField (Arg2, Local0, VSTR)
                    Local2 = VSTR /* \_SB_.WMID.WMBG.VSTR */
                    Local0 += 0x02
                    If ((Local2 > 0x28))
                    {
                        Return (0x05)
                    }

                    Local3 = 0x00
                    While ((Local3 < Local2))
                    {
                        Local4 [Local1] = DerefOf (Arg2 [Local0])
                        Local0++
                        Local1++
                        Local3++
                    }

                    Local1++
                    Local4 [Local1] = 0x00
                    Local1++
                    Local4 [Local1] = 0x00
                    CreateDWordField (Arg2, Local0, RPEN)
                    Local0 += 0x04
                    CreateDWordField (Arg2, Local0, RPRT)
                    Local0 += 0x04
                    CreateDWordField (Arg2, Local0, RPDL)
                    Local0 += 0x04
                    EBX = RPEN /* \_SB_.WMID.WMBG.RPEN */
                    ECX = RPRT /* \_SB_.WMID.WMBG.RPRT */
                    EDX = RPDL /* \_SB_.WMID.WMBG.RPDL */
                }

                If ((Arg1 < 0x04))
                {
                    CreateWordField (Arg2, Local0, PSTR)
                    Local2 = PSTR /* \_SB_.WMID.WMBG.PSTR */
                    Local0 += 0x02
                    If ((Local2 <= 0x52))
                    {
                        Local3 = 0x00
                        While ((Local3 < Local2))
                        {
                            Local4 [Local1] = DerefOf (Arg2 [Local0])
                            Local0++
                            Local1++
                            Local3++
                        }
                    }

                    Local1++
                    Local4 [Local1] = 0x00
                    Local1++
                    Local4 [Local1] = 0x00
                }

                WMIB = Local4
                SSMI = WMBT /* External reference */
                If ((EAX == 0x00))
                {
                    GETN = BTNC /* \_SB_.WMID.BTNC */
                    Notify (WMID, 0xA0) // Device-Specific
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (EAX) /* External reference */
            }

            Name (WQZZ, Buffer (0x2A63)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x53, 0x2A, 0x00, 0x00, 0x14, 0x04, 0x01, 0x00,  // S*......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x2C, 0xBB, 0x00, 0x01, 0x06, 0x18, 0x42,  // (,.....B
                /* 0020 */  0x10, 0x4F, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // .O......
                /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
                /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
                /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
                /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
                /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
                /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
                /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
                /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
                /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
                /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
                /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
                /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
                /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
                /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
                /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0xE2, 0xA0,  // X...!...
                /* 00A0 */  0x84, 0x54, 0x19, 0x8A, 0x2C, 0xA2, 0x48, 0xA1,  // .T..,.H.
                /* 00A8 */  0x00, 0x67, 0x02, 0x84, 0xE1, 0x4A, 0x23, 0xA8,  // .g...J#.
                /* 00B0 */  0x10, 0x62, 0x45, 0x8A, 0xD5, 0xFE, 0x20, 0x48,  // .bE... H
                /* 00B8 */  0x7C, 0x0B, 0x10, 0x55, 0x80, 0x28, 0xD2, 0x68,  // |..U.(.h
                /* 00C0 */  0x50, 0xC3, 0x4B, 0x70, 0xB8, 0x1E, 0xEA, 0x39,  // P.Kp...9
                /* 00C8 */  0x76, 0x2E, 0x40, 0xFA, 0x24, 0x05, 0x72, 0x90,  // v.@.$.r.
                /* 00D0 */  0x67, 0x51, 0xE7, 0x38, 0x09, 0x48, 0x02, 0x63,  // gQ.8.H.c
                /* 00D8 */  0x25, 0xE8, 0x60, 0xE0, 0x50, 0x5C, 0x03, 0x6A,  // %.`.P\.j
                /* 00E0 */  0xC6, 0xC7, 0xCB, 0x04, 0xC1, 0xA1, 0x86, 0xE8,  // ........
                /* 00E8 */  0x81, 0x86, 0x3B, 0x81, 0x43, 0x64, 0x80, 0x9E,  // ..;.Cd..
                /* 00F0 */  0xD4, 0xD1, 0x60, 0x0E, 0x00, 0x1E, 0xDC, 0xC9,  // ..`.....
                /* 00F8 */  0xBC, 0x07, 0x94, 0x2A, 0xC0, 0xEC, 0x98, 0x35,  // ...*...5
                /* 0100 */  0xB0, 0x04, 0xC7, 0x63, 0xE8, 0xD3, 0x3D, 0x9F,  // ...c..=.
                /* 0108 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x8D, 0xCC,  // .N`..@..
                /* 0110 */  0xD0, 0x1E, 0xE5, 0x69, 0xC5, 0x0C, 0x79, 0xF8,  // ...i..y.
                /* 0118 */  0x87, 0xC5, 0xC4, 0x42, 0x48, 0x01, 0x84, 0xC6,  // ...BH...
                /* 0120 */  0x03, 0xEF, 0xFF, 0x3F, 0x1E, 0xF0, 0xDC, 0x00,  // ...?....
                /* 0128 */  0x9E, 0x09, 0x22, 0xBC, 0x12, 0xC4, 0xF6, 0x80,  // ..".....
                /* 0130 */  0x12, 0x0C, 0x0B, 0x21, 0x23, 0xAB, 0xF0, 0x78,  // ...!#..x
                /* 0138 */  0xE8, 0x28, 0xEC, 0x74, 0x38, 0x9A, 0x56, 0x3C,  // .(.t8.V<
                /* 0140 */  0x13, 0x0C, 0x07, 0xA1, 0x2F, 0x80, 0x04, 0x88,  // ..../...
                /* 0148 */  0x1A, 0x36, 0x3D, 0x2C, 0xF0, 0x73, 0x02, 0xBB,  // .6=,.s..
                /* 0150 */  0x19, 0x9C, 0xC1, 0x23, 0x80, 0x47, 0x72, 0x42,  // ...#.GrB
                /* 0158 */  0x3E, 0x4E, 0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE,  // >Nx`....
                /* 0160 */  0xA7, 0x4C, 0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71,  // .LFp...q
                /* 0168 */  0xC0, 0x43, 0xE1, 0x43, 0xF4, 0xF8, 0x4E, 0xF9,  // .C.C..N.
                /* 0170 */  0x78, 0x7D, 0xBA, 0xB0, 0xAC, 0x71, 0x42, 0xBF,  // x}...qB.
                /* 0178 */  0x43, 0x78, 0x76, 0xC7, 0xF0, 0xE4, 0x90, 0x60,  // Cxv....`
                /* 0180 */  0x44, 0x08, 0x39, 0x39, 0x05, 0xA0, 0x81, 0x4F,  // D.99...O
                /* 0188 */  0xF7, 0xEC, 0x22, 0x9C, 0xAE, 0x27, 0xE5, 0x40,  // .."..'.@
                /* 0190 */  0xC3, 0xA0, 0xE3, 0x04, 0xC7, 0x79, 0x00, 0x1C,  // .....y..
                /* 0198 */  0xE3, 0x84, 0x7F, 0x2E, 0x80, 0x3F, 0x40, 0x7E,  // .....?@~
                /* 01A0 */  0xCA, 0x78, 0xC5, 0x48, 0xE0, 0x98, 0x23, 0x44,  // .x.H..#D
                /* 01A8 */  0x8B, 0x19, 0x21, 0x04, 0xF8, 0xA7, 0x8A, 0xC2,  // ..!.....
                /* 01B0 */  0x07, 0x42, 0xFE, 0xFF, 0x63, 0x04, 0x17, 0xA0,  // .B..c...
                /* 01B8 */  0xC7, 0x08, 0x7C, 0x03, 0x8E, 0x11, 0x7D, 0x94,  // ..|...}.
                /* 01C0 */  0xE0, 0xEA, 0x0F, 0x1A, 0x74, 0x80, 0xE0, 0x02,  // ....t...
                /* 01C8 */  0xF5, 0x00, 0x81, 0x6F, 0xF4, 0xA3, 0x07, 0x7A,  // ...o...z
                /* 01D0 */  0x5C, 0x16, 0x7D, 0x1E, 0x90, 0xF1, 0x13, 0x8D,  // \.}.....
                /* 01D8 */  0xE6, 0xC5, 0x4F, 0x07, 0xFC, 0xF0, 0x01, 0x1E,  // ..O.....
                /* 01E0 */  0x50, 0x0F, 0x09, 0x07, 0x8A, 0x99, 0x36, 0x07,  // P.....6.
                /* 01E8 */  0x7D, 0x76, 0x39, 0x74, 0xEC, 0x70, 0xE1, 0xFD,  // }v9t.p..
                /* 01F0 */  0xFF, 0x87, 0x0B, 0x9E, 0x13, 0x08, 0xB8, 0xE4,  // ........
                /* 01F8 */  0xC1, 0xA2, 0x87, 0x6B, 0xBF, 0x02, 0x10, 0x42,  // ...k...B
                /* 0200 */  0x97, 0x79, 0x2B, 0xD1, 0xAC, 0x22, 0x1C, 0x31,  // .y+..".1
                /* 0208 */  0x8C, 0x73, 0x90, 0x09, 0x2C, 0x12, 0x1E, 0x75,  // .s..,..u
                /* 0210 */  0xBC, 0x30, 0x3C, 0x3F, 0x0B, 0x45, 0x3F, 0x98,  // .0<?.E?.
                /* 0218 */  0x53, 0x09, 0x7F, 0x30, 0x51, 0x4E, 0xE1, 0x68,  // S..0QN.h
                /* 0220 */  0x2C, 0x17, 0x41, 0xBA, 0x20, 0x74, 0x74, 0x32,  // ,.A. tt2
                /* 0228 */  0xC2, 0x19, 0x44, 0x39, 0xBB, 0x33, 0x36, 0x81,  // ..D9.36.
                /* 0230 */  0x8F, 0x52, 0x3E, 0x02, 0xF0, 0x73, 0x8B, 0x47,  // .R>..s.G
                /* 0238 */  0x04, 0xE3, 0xBC, 0x14, 0xC5, 0x1E, 0xE7, 0x44,  // .......D
                /* 0240 */  0x08, 0x0A, 0x1C, 0x0E, 0x2A, 0xC8, 0xD3, 0xC1,  // ....*...
                /* 0248 */  0xA7, 0x2D, 0x2A, 0x1D, 0x06, 0x75, 0xE0, 0x02,  // .-*..u..
                /* 0250 */  0xAC, 0x4C, 0x22, 0xC2, 0xB3, 0x44, 0x6D, 0x10,  // .L"..Dm.
                /* 0258 */  0x3A, 0x35, 0xBC, 0x4D, 0xBC, 0x6D, 0xF9, 0x16,  // :5.M.m..
                /* 0260 */  0x10, 0xE7, 0x34, 0x7B, 0x3B, 0x70, 0x11, 0x8C,  // ..4{;p..
                /* 0268 */  0x08, 0x35, 0x43, 0x91, 0x93, 0x56, 0xC4, 0x18,  // .5C..V..
                /* 0270 */  0x51, 0x1E, 0xB7, 0x8C, 0xF2, 0xB6, 0xF5, 0x02,  // Q.......
                /* 0278 */  0x10, 0xEF, 0xC4, 0xFE, 0xFF, 0xCF, 0x5B, 0xC6,  // ......[.
                /* 0280 */  0x08, 0x1E, 0xF9, 0x81, 0x8B, 0xC5, 0x58, 0xBD,  // ......X.
                /* 0288 */  0xFE, 0x6B, 0x3E, 0x70, 0x01, 0x3C, 0xFF, 0xFF,  // .k>p.<..
                /* 0290 */  0x9F, 0x4F, 0xF0, 0x41, 0x0F, 0x43, 0xE8, 0x61,  // .O.A.C.a
                /* 0298 */  0x78, 0x2A, 0xE7, 0x52, 0xE9, 0x54, 0x84, 0x18,  // x*.R.T..
                /* 02A0 */  0x35, 0x4C, 0xD4, 0x67, 0x28, 0xDF, 0x2D, 0x7C,  // 5L.g(.-|
                /* 02A8 */  0x20, 0x02, 0xDF, 0x99, 0x0B, 0x38, 0x1F, 0x53,  //  ....8.S
                /* 02B0 */  0x70, 0x67, 0x1A, 0xF0, 0xF8, 0x9C, 0x81, 0x40,  // pg.....@
                /* 02B8 */  0x4E, 0xC5, 0x87, 0x1A, 0xC0, 0x82, 0xE8, 0x27,  // N......'
                /* 02C0 */  0x84, 0x4F, 0x34, 0x54, 0x26, 0x0C, 0xEA, 0x50,  // .O4T&..P
                /* 02C8 */  0x03, 0x1C, 0xFE, 0xFF, 0x87, 0x1A, 0x60, 0x74,  // ......`t
                /* 02D0 */  0x85, 0x79, 0x1A, 0x3D, 0xE7, 0x67, 0x19, 0x9F,  // .y.=.g..
                /* 02D8 */  0x6A, 0x7C, 0x28, 0x35, 0x8E, 0x21, 0x5E, 0x66,  // j|(5.!^f
                /* 02E0 */  0x1E, 0x6A, 0x7C, 0x2C, 0x78, 0x25, 0xF5, 0xA1,  // .j|,x%..
                /* 02E8 */  0xC6, 0x50, 0x71, 0x1E, 0x6A, 0x3C, 0xDC, 0x40,  // .Pq.j<.@
                /* 02F0 */  0x51, 0xDF, 0x6C, 0x9E, 0x6D, 0x8C, 0x1E, 0xDF,  // Q.l.m...
                /* 02F8 */  0x37, 0x54, 0x43, 0x3C, 0xD4, 0x30, 0xC9, 0x2B,  // 7TC<.0.+
                /* 0300 */  0xD5, 0x58, 0x7C, 0xA8, 0x01, 0x78, 0xF5, 0xFF,  // .X|..x..
                /* 0308 */  0x3F, 0xD4, 0x00, 0x7C, 0x3B, 0x1A, 0xC0, 0x39,  // ?..|;..9
                /* 0310 */  0x32, 0xE2, 0x8E, 0x06, 0xE0, 0x3A, 0x94, 0x02,  // 2....:..
                /* 0318 */  0x87, 0xFF, 0xFF, 0xD1, 0x00, 0x78, 0x1C, 0x85,  // .....x..
                /* 0320 */  0xC0, 0x7C, 0xA1, 0xF1, 0x51, 0x08, 0xB0, 0x20,  // .|..Q.. 
                /* 0328 */  0xFB, 0x1C, 0x84, 0x12, 0x7A, 0x14, 0x02, 0x04,  // ....z...
                /* 0330 */  0xDD, 0x7E, 0x9E, 0x22, 0x9E, 0x7D, 0x7C, 0xF9,  // .~.".}|.
                /* 0338 */  0x79, 0x20, 0x88, 0xF0, 0x9A, 0xEF, 0x53, 0x90,  // y ....S.
                /* 0340 */  0x0F, 0xF9, 0x3E, 0x0A, 0x31, 0x18, 0x43, 0xF9,  // ..>.1.C.
                /* 0348 */  0x1A, 0xE4, 0xA3, 0x10, 0x83, 0x7A, 0x0D, 0xF2,  // .....z..
                /* 0350 */  0x7D, 0xDF, 0x20, 0x8F, 0x17, 0x41, 0x62, 0x47,  // }. ..AbG
                /* 0358 */  0xF9, 0xFF, 0x07, 0x7A, 0x14, 0x62, 0xA2, 0x8F,  // ...z.b..
                /* 0360 */  0x42, 0x00, 0xED, 0xFF, 0xFF, 0x47, 0x21, 0x80,  // B....G!.
                /* 0368 */  0x7F, 0x01, 0x8E, 0x06, 0xA0, 0x9B, 0xD6, 0xA3,  // ........
                /* 0370 */  0x10, 0x78, 0xEF, 0x2C, 0xA7, 0x7D, 0x02, 0x3E,  // .x.,.}.>
                /* 0378 */  0x0B, 0x61, 0xFF, 0xFF, 0x67, 0x21, 0x80, 0x25,  // .a..g!.%
                /* 0380 */  0x47, 0xA1, 0xA3, 0x38, 0xCB, 0x57, 0xA1, 0x27,  // G..8.W.'
                /* 0388 */  0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81, 0x5E,  // ....a..^
                /* 0390 */  0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E, 0x67,  // 2.].8O.g
                /* 0398 */  0xF1, 0x24, 0xEE, 0x4B, 0x90, 0x0F, 0x14, 0xCF,  // .$.K....
                /* 03A0 */  0x42, 0x86, 0x3A, 0xDD, 0xA0, 0x6F, 0xE4, 0x1E,  // B.:..o..
                /* 03A8 */  0x58, 0xCC, 0xF8, 0x21, 0x9E, 0x87, 0x0C, 0xF1,  // X..!....
                /* 03B0 */  0x2C, 0x04, 0x18, 0xF9, 0xFF, 0x9F, 0x85, 0x00,  // ,.......
                /* 03B8 */  0xFE, 0xFF, 0xFF, 0xCF, 0x42, 0x80, 0xEB, 0x17,  // ....B...
                /* 03C0 */  0x80, 0xCF, 0x42, 0xC0, 0xF3, 0x04, 0xF0, 0xA0,  // ..B.....
                /* 03C8 */  0xED, 0xB3, 0x10, 0x60, 0xE8, 0xFF, 0x7F, 0x16,  // ...`....
                /* 03D0 */  0x02, 0x8C, 0x1C, 0x2E, 0xCF, 0xFF, 0x15, 0xE8,  // ........
                /* 03D8 */  0x58, 0xDE, 0x23, 0x3C, 0xEB, 0x93, 0x7C, 0xBD,  // X.#<..|.
                /* 03E0 */  0xF4, 0x4C, 0x1F, 0x0A, 0x9E, 0x85, 0x18, 0xD6,  // .L......
                /* 03E8 */  0x61, 0xF8, 0x2C, 0xC4, 0x20, 0x5E, 0x34, 0x0D,  // a.,. ^4.
                /* 03F0 */  0xF1, 0xC2, 0xE9, 0xC3, 0x00, 0x03, 0x7E, 0xE5,  // ......~.
                /* 03F8 */  0x34, 0x50, 0x90, 0x40, 0xCF, 0x42, 0x00, 0x4B,  // 4P.@.B.K
                /* 0400 */  0xFE, 0xFF, 0x67, 0x21, 0x80, 0xFF, 0xFF, 0xFF,  // ..g!....
                /* 0408 */  0xB3, 0x10, 0x10, 0x5B, 0xA3, 0xCE, 0x42, 0xC0,  // ...[..B.
                /* 0410 */  0xF2, 0xB6, 0xF2, 0x8C, 0xED, 0xD3, 0xCA, 0xB3,  // ........
                /* 0418 */  0x10, 0x60, 0x21, 0x97, 0x91, 0x83, 0x10, 0x26,  // .`!....&
                /* 0420 */  0xE2, 0xC3, 0xC1, 0xC7, 0x4C, 0x40, 0xCF, 0xFF,  // ....L@..
                /* 0428 */  0x7F, 0x8A, 0x2F, 0xEE, 0xC6, 0x78, 0x02, 0x78,  // ../..x.x
                /* 0430 */  0x91, 0x78, 0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C,  // .x.dGM.<
                /* 0438 */  0x0B, 0x19, 0xEF, 0x2C, 0x5E, 0x03, 0x9E, 0xE0,  // ...,^...
                /* 0440 */  0x3D, 0xF9, 0x67, 0x21, 0x06, 0x76, 0x58, 0xC1,  // =.g!.vX.
                /* 0448 */  0x1E, 0x85, 0x0C, 0x6A, 0xF0, 0xD8, 0x21, 0xC2,  // ...j..!.
                /* 0450 */  0x04, 0x7A, 0x16, 0x62, 0x71, 0x9F, 0x2B, 0x3A,  // .z.bq.+:
                /* 0458 */  0x4F, 0xF8, 0x2C, 0x04, 0x38, 0xB9, 0x1A, 0x3C,  // O.,.8..<
                /* 0460 */  0x0B, 0x01, 0x26, 0x0E, 0x1B, 0x3E, 0x6B, 0x80,  // ..&..>k.
                /* 0468 */  0x67, 0xF8, 0x1E, 0xD5, 0x39, 0x3C, 0x1E, 0x03,  // g...9<..
                /* 0470 */  0xAF, 0xFF, 0xFF, 0x41, 0x03, 0x3C, 0x59, 0x75,  // ...A.<Yu
                /* 0478 */  0x9C, 0x13, 0x58, 0xEE, 0x45, 0xCB, 0xC6, 0x81,  // ..X.E...
                /* 0480 */  0x86, 0x8E, 0xC8, 0xEA, 0x80, 0x34, 0x36, 0xCC,  // .....46.
                /* 0488 */  0xA5, 0x24, 0xF2, 0xC9, 0xB1, 0x51, 0x5B, 0x11,  // .$...Q[.
                /* 0490 */  0x9C, 0xCE, 0x4C, 0x3E, 0x01, 0x58, 0x0B, 0x85,  // ..L>.X..
                /* 0498 */  0x14, 0xD0, 0x68, 0x2C, 0x86, 0x77, 0xE6, 0xA3,  // ..h,.w..
                /* 04A0 */  0x13, 0x05, 0x31, 0xA0, 0x8F, 0x43, 0xB6, 0x71,  // ..1..C.q
                /* 04A8 */  0x28, 0x40, 0xED, 0x45, 0x53, 0x20, 0xE7, 0x1C,  // (@.ES ..
                /* 04B0 */  0x8C, 0xFE, 0xD9, 0xD1, 0xD9, 0xF8, 0x4E, 0xC0,  // ......N.
                /* 04B8 */  0x35, 0x40, 0xE8, 0x94, 0x60, 0x68, 0xAB, 0x99,  // 5@..`h..
                /* 04C0 */  0x25, 0x0A, 0xCC, 0xF8, 0x4F, 0x31, 0x26, 0xF0,  // %...O1&.
                /* 04C8 */  0x39, 0x06, 0x7F, 0x30, 0xC0, 0x0F, 0xFC, 0xC5,  // 9..0....
                /* 04D0 */  0xA0, 0xEA, 0x7B, 0x81, 0xEE, 0x0B, 0x56, 0x77,  // ..{...Vw
                /* 04D8 */  0x93, 0x81, 0x30, 0x23, 0x13, 0xD4, 0x77, 0x3A,  // ..0#..w:
                /* 04E0 */  0x00, 0x05, 0x90, 0x2F, 0x04, 0x3E, 0x47, 0x3D,  // .../.>G=
                /* 04E8 */  0x14, 0xB0, 0x89, 0x84, 0x08, 0x13, 0xCD, 0xE8,  // ........
                /* 04F0 */  0x88, 0x09, 0xA3, 0xA2, 0x4F, 0x98, 0x82, 0x78,  // ....O..x
                /* 04F8 */  0xC2, 0x8E, 0x35, 0x61, 0xF4, 0x4C, 0x7C, 0xD1,  // ..5a.L|.
                /* 0500 */  0x61, 0x23, 0xC6, 0x84, 0xB8, 0x7A, 0x40, 0x9B,  // a#...z@.
                /* 0508 */  0x60, 0x50, 0x5F, 0x8A, 0x60, 0x0D, 0x99, 0x8F,  // `P_.`...
                /* 0510 */  0xC5, 0x17, 0x08, 0xDC, 0x94, 0xD9, 0xFF, 0x7F,  // ........
                /* 0518 */  0xCA, 0xE0, 0x9A, 0x13, 0xBB, 0x26, 0xF8, 0xB2,  // .....&..
                /* 0520 */  0x83, 0x9B, 0x33, 0x18, 0xE1, 0x31, 0x77, 0x31,  // ..3..1w1
                /* 0528 */  0x7E, 0x75, 0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37,  // ~u...A.7
                /* 0530 */  0x1C, 0x86, 0xFD, 0x64, 0xE6, 0x19, 0xBD, 0x97,  // ...d....
                /* 0538 */  0xF9, 0x1A, 0x87, 0x81, 0xF5, 0x78, 0x39, 0xAC,  // .....x9.
                /* 0540 */  0xD1, 0xC2, 0x1E, 0xDA, 0x7B, 0x88, 0x0F, 0x31,  // ....{..1
                /* 0548 */  0x3E, 0x4F, 0x18, 0x23, 0xAC, 0x6F, 0x2F, 0xE0,  // >O.#.o/.
                /* 0550 */  0xB8, 0x67, 0xC1, 0xBF, 0x6B, 0x80, 0xE7, 0x12,  // .g..k...
                /* 0558 */  0xE2, 0xBB, 0x06, 0x60, 0xED, 0xFF, 0x7F, 0xD7,  // ...`....
                /* 0560 */  0x00, 0xF8, 0x71, 0x4D, 0xF0, 0x5D, 0x03, 0x78,  // ..qM.].x
                /* 0568 */  0x0F, 0xDD, 0x77, 0x0D, 0xE0, 0xF7, 0xFF, 0xBF,  // ..w.....
                /* 0570 */  0x6B, 0xE0, 0xB2, 0xDF, 0x35, 0x50, 0xC7, 0x00,  // k...5P..
                /* 0578 */  0x2B, 0xBC, 0x6B, 0x40, 0xBB, 0xB2, 0xBD, 0xAF,  // +.k@....
                /* 0580 */  0x3D, 0x61, 0x59, 0xD3, 0x65, 0x03, 0xA5, 0xE6,  // =aY.e...
                /* 0588 */  0xB2, 0x01, 0x90, 0x40, 0xCA, 0x84, 0x51, 0xE1,  // ...@..Q.
                /* 0590 */  0x27, 0x4C, 0x41, 0x3C, 0x61, 0x07, 0xBB, 0x6C,  // 'LA<a..l
                /* 0598 */  0x80, 0x22, 0xC6, 0x65, 0x03, 0xF4, 0x63, 0x3B,  // .".e..c;
                /* 05A0 */  0x65, 0xF0, 0xFD, 0xFF, 0xCF, 0xF7, 0x70, 0xEE,  // e.....p.
                /* 05A8 */  0x09, 0xEC, 0xB6, 0x01, 0xBC, 0x21, 0x7D, 0xDB,  // .....!}.
                /* 05B0 */  0x00, 0xAE, 0xF9, 0x6F, 0x1B, 0x28, 0x0E, 0xAB,  // ...o.(..
                /* 05B8 */  0xBC, 0x6D, 0x40, 0x3C, 0xC9, 0x33, 0x02, 0xAB,  // .m@<.3..
                /* 05C0 */  0xBA, 0x6E, 0xA0, 0xF4, 0x5C, 0x37, 0x00, 0x79,  // .n..\7.y
                /* 05C8 */  0xFF, 0xFF, 0xEB, 0x06, 0xF0, 0x10, 0x33, 0x61,  // ......3a
                /* 05D0 */  0x54, 0xFC, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xD1,  // T..S.O..
                /* 05D8 */  0xAE, 0x1B, 0xA0, 0x08, 0x72, 0xDD, 0x00, 0xFD,  // ....r...
                /* 05E0 */  0xBC, 0x5E, 0x37, 0x80, 0xC3, 0x45, 0x01, 0x73,  // .^7..E.s
                /* 05E8 */  0xDF, 0x00, 0xDE, 0xB0, 0xFC, 0xBE, 0x01, 0x3C,  // .......<
                /* 05F0 */  0xFF, 0xFF, 0xF7, 0x0D, 0xF0, 0xDC, 0xC4, 0x31,  // .......1
                /* 05F8 */  0xF7, 0x0D, 0x80, 0xCD, 0xFF, 0xFF, 0xAB, 0x1E,  // ........
                /* 0600 */  0xEE, 0xA2, 0x80, 0xB9, 0x6F, 0x00, 0xEF, 0x8B,  // ....o...
                /* 0608 */  0xB4, 0xEF, 0x1B, 0xC0, 0x55, 0xDA, 0xFA, 0x3D,  // ....U..=
                /* 0610 */  0x38, 0x7A, 0x42, 0xF0, 0xF8, 0x70, 0xF7, 0x4B,  // 8zB..p.K
                /* 0618 */  0x8F, 0xCF, 0x77, 0x73, 0x70, 0x0C, 0xF2, 0x18,  // ..wsp...
                /* 0620 */  0x0F, 0xED, 0x80, 0x5F, 0xDF, 0x3D, 0x31, 0xDF,  // ..._.=1.
                /* 0628 */  0xCD, 0x81, 0xFF, 0x99, 0xE0, 0x78, 0x30, 0xD0,  // .....x0.
                /* 0630 */  0x38, 0xC4, 0x56, 0x2F, 0x0D, 0xE4, 0x68, 0x10,  // 8.V/..h.
                /* 0638 */  0x9F, 0xFF, 0xFF, 0xA1, 0x19, 0x9C, 0xB1, 0x8A,  // ........
                /* 0640 */  0x3F, 0xF9, 0x23, 0x9C, 0x63, 0xE8, 0xEC, 0x70,  // ?.#.c..p
                /* 0648 */  0x90, 0xD8, 0x41, 0x70, 0x49, 0x26, 0x86, 0x8E,  // ..ApI&..
                /* 0650 */  0x11, 0x01, 0x83, 0x22, 0x20, 0x40, 0x3A, 0x0C,  // ..." @:.
                /* 0658 */  0x38, 0x12, 0x14, 0x6A, 0x3C, 0x1E, 0x91, 0x0F,  // 8..j<...
                /* 0660 */  0x23, 0x1E, 0xC6, 0xC3, 0x84, 0x41, 0x8E, 0xE3,  // #....A..
                /* 0668 */  0x30, 0x0E, 0x39, 0xCA, 0x4B, 0x82, 0x09, 0x3C,  // 0.9.K..<
                /* 0670 */  0x11, 0x1F, 0x38, 0xE0, 0xB8, 0x06, 0x94, 0xF9,  // ..8.....
                /* 0678 */  0xB3, 0x02, 0x68, 0x8E, 0xD5, 0x3E, 0x71, 0xC0,  // ..h..>q.
                /* 0680 */  0x1D, 0x8F, 0xE7, 0xC9, 0x3C, 0x43, 0x12, 0xF9,  // ....<C..
                /* 0688 */  0x83, 0x40, 0x1D, 0x4B, 0xF8, 0xA4, 0x5F, 0x3C,  // .@.K.._<
                /* 0690 */  0x0C, 0x79, 0xB8, 0x26, 0xB0, 0xD8, 0x13, 0x0A,  // .y.&....
                /* 0698 */  0x1D, 0x0F, 0xF8, 0xCF, 0x22, 0x8F, 0x09, 0x3E,  // ...."..>
                /* 06A0 */  0x61, 0x78, 0xBE, 0x3E, 0x76, 0xB0, 0x81, 0xE3,  // ax.>v...
                /* 06A8 */  0x46, 0xE1, 0x41, 0xE3, 0x02, 0x0C, 0x9A, 0x8A,  // F.A.....
                /* 06B0 */  0x3A, 0x2F, 0xA0, 0xA4, 0x1C, 0x3F, 0x10, 0x17,  // :/...?..
                /* 06B8 */  0x1C, 0xCC, 0x85, 0xC5, 0xBF, 0x0B, 0x0F, 0x0C,  // ........
                /* 06C0 */  0xCC, 0xFF, 0xFF, 0x71, 0xC3, 0x5A, 0x85, 0x07,  // ...q.Z..
                /* 06C8 */  0x86, 0x3B, 0x60, 0x78, 0x2C, 0x47, 0x11, 0xF4,  // .;`x,G..
                /* 06D0 */  0xC0, 0x83, 0xFA, 0x50, 0x72, 0xE6, 0x9E, 0xE4,  // ...Pr...
                /* 06D8 */  0x31, 0x3A, 0xEA, 0x49, 0x85, 0x9E, 0x26, 0x70,  // 1:.I..&p
                /* 06E0 */  0x92, 0x20, 0x74, 0x8D, 0x38, 0x0A, 0x0C, 0x5C,  // . t.8..\
                /* 06E8 */  0xF8, 0x30, 0xC7, 0x67, 0x9C, 0xE3, 0x33, 0x3C,  // .0.g..3<
                /* 06F0 */  0x1F, 0xED, 0xEB, 0xCC, 0x59, 0x47, 0x08, 0x88,  // ....YG..
                /* 06F8 */  0xBF, 0xA8, 0xB0, 0x01, 0x83, 0xE5, 0x60, 0x00,  // ......`.
                /* 0700 */  0x1C, 0x06, 0x8C, 0x4F, 0x34, 0x60, 0x39, 0x19,  // ...O4`9.
                /* 0708 */  0x30, 0x6A, 0x3C, 0x86, 0x3E, 0x2D, 0x86, 0x78,  // 0j<.>-.x
                /* 0710 */  0x7C, 0x61, 0xDF, 0x2A, 0x4C, 0x50, 0x3D, 0xA8,  // |a.*LP=.
                /* 0718 */  0x4E, 0x37, 0x1E, 0x1A, 0x38, 0x00, 0x3D, 0x34,  // N7..8.=4
                /* 0720 */  0xF8, 0xA7, 0x17, 0x72, 0x27, 0xA3, 0x43, 0xB0,  // ...r'.C.
                /* 0728 */  0x56, 0x3C, 0xCD, 0xFB, 0xC8, 0x63, 0x9E, 0x5B,  // V<...c.[
                /* 0730 */  0x94, 0xB7, 0x81, 0xE7, 0x00, 0x7E, 0x5A, 0xF0,  // .....~Z.
                /* 0738 */  0x70, 0x7C, 0x2C, 0xF0, 0x38, 0x7D, 0xBD, 0x4B,  // p|,.8}.K
                /* 0740 */  0xF0, 0x7A, 0x97, 0xA0, 0xB3, 0xC3, 0x0B, 0x4D,  // .z.....M
                /* 0748 */  0x36, 0x04, 0xD4, 0x60, 0x3D, 0x04, 0xCC, 0x54,  // 6..`=..T
                /* 0750 */  0x13, 0x38, 0xC9, 0x08, 0x10, 0xFF, 0x7F, 0x82,  // .8......
                /* 0758 */  0x19, 0x20, 0x74, 0x6B, 0x39, 0xDD, 0x67, 0x91,  // . tk9.g.
                /* 0760 */  0x10, 0xA7, 0xF9, 0x38, 0xF3, 0x58, 0xE0, 0xB1,  // ...8.X..
                /* 0768 */  0x3E, 0x18, 0x58, 0xF3, 0x08, 0x35, 0xD7, 0xD8,  // >.X..5..
                /* 0770 */  0x67, 0xF6, 0x74, 0x80, 0x59, 0x45, 0xB8, 0x97,  // g.t.YE..
                /* 0778 */  0xA3, 0x37, 0x0C, 0xA3, 0x3D, 0x5B, 0xF8, 0x9A,  // .7..=[..
                /* 0780 */  0xF1, 0xFC, 0x64, 0x84, 0x70, 0xEC, 0x0E, 0x70,  // ..d.p..p
                /* 0788 */  0x92, 0x1E, 0x49, 0x84, 0x17, 0x04, 0x76, 0x62,  // ..I...vb
                /* 0790 */  0x78, 0x80, 0x31, 0xCE, 0xC9, 0x1B, 0xD6, 0x97,  // x.1.....
                /* 0798 */  0x38, 0x06, 0x1A, 0xCC, 0xD8, 0xBE, 0x0C, 0xB0,  // 8.......
                /* 07A0 */  0x51, 0xF9, 0x62, 0x00, 0x7F, 0x26, 0x61, 0x8D,  // Q.b..&a.
                /* 07A8 */  0x7C, 0xA2, 0x87, 0x6A, 0x82, 0xC9, 0x2F, 0x06,  // |..j../.
                /* 07B0 */  0x50, 0x66, 0xE1, 0xEB, 0x89, 0x4F, 0x4A, 0xEC,  // Pf...OJ.
                /* 07B8 */  0x62, 0xC0, 0x52, 0x5E, 0x0C, 0x40, 0x75, 0xC3,  // b.R^.@u.
                /* 07C0 */  0xF0, 0xC5, 0x00, 0xFE, 0xB5, 0xE8, 0xC5, 0x00,  // ........
                /* 07C8 */  0x0C, 0x97, 0x27, 0xDF, 0x03, 0xEC, 0xE1, 0x8E,  // ..'.....
                /* 07D0 */  0x45, 0xC7, 0x69, 0x6B, 0x37, 0x03, 0x72, 0x36,  // E.ik7.r6
                /* 07D8 */  0x60, 0x30, 0x9E, 0x61, 0x18, 0x63, 0x84, 0xF1,  // `0.a.c..
                /* 07E0 */  0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB, 0x01, 0xF4,  // (..`....
                /* 07E8 */  0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D, 0x40, 0x39,  // ..@%..@9
                /* 07F0 */  0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7, 0x80, 0xA7,  // .ty4....
                /* 07F8 */  0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE, 0xC6, 0x2A,  // .......*
                /* 0800 */  0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8, 0xD4, 0xA2,  // .@..4...
                /* 0808 */  0xF8, 0x54, 0xE0, 0xB5, 0xFC, 0xFF, 0x9F, 0x9F,  // .T......
                /* 0810 */  0xC2, 0xC5, 0x39, 0x13, 0x4F, 0xD5, 0x70, 0x06,  // ..9.O.p.
                /* 0818 */  0x7A, 0x75, 0x0B, 0x07, 0xEB, 0x54, 0xF0, 0x1A,  // zu...T..
                /* 0820 */  0xC0, 0xCE, 0x4D, 0x9E, 0x96, 0x11, 0x61, 0x1C,  // ..M...a.
                /* 0828 */  0x52, 0x1E, 0x19, 0x6C, 0x0B, 0x87, 0x40, 0x86,  // R..l..@.
                /* 0830 */  0x79, 0x27, 0x60, 0x90, 0xEF, 0x73, 0xCF, 0x3B,  // y'`..s.;
                /* 0838 */  0x06, 0x7E, 0x45, 0x88, 0xF3, 0xA4, 0xE5, 0x3B,  // .~E....;
                /* 0840 */  0x83, 0x2F, 0x0B, 0xE0, 0x8B, 0x74, 0x59, 0x40,  // ./...tY@
                /* 0848 */  0x43, 0xFB, 0x24, 0xE3, 0x0B, 0x82, 0x61, 0x4F,  // C.$...aO
                /* 0850 */  0x9C, 0x05, 0xB8, 0x2B, 0x80, 0x0A, 0xD4, 0x77,  // ...+...w
                /* 0858 */  0x05, 0xF8, 0x17, 0x82, 0x77, 0x05, 0x30, 0xCC,  // ....w.0.
                /* 0860 */  0xCB, 0xB7, 0x02, 0xAE, 0xE9, 0x50, 0x82, 0x3E,  // .....P.>
                /* 0868 */  0x93, 0xF8, 0xBA, 0x80, 0x9B, 0x22, 0x4B, 0x75,  // ....."Ku
                /* 0870 */  0x54, 0x80, 0x9E, 0x62, 0x12, 0xA8, 0x7B, 0xA7,  // T..b..{.
                /* 0878 */  0x8F, 0x0A, 0x30, 0x6E, 0x7F, 0xBE, 0x06, 0xF8,  // ..0n....
                /* 0880 */  0xB4, 0xC0, 0xCF, 0x42, 0xEC, 0x3A, 0x82, 0xBB,  // ...B.:..
                /* 0888 */  0x92, 0x30, 0x94, 0x67, 0x03, 0x5F, 0xB2, 0xF8,  // .0.g._..
                /* 0890 */  0xE1, 0x00, 0x06, 0xF8, 0xFF, 0xFF, 0xF5, 0xC4,  // ........
                /* 0898 */  0x43, 0x8C, 0x10, 0x9B, 0x1D, 0xB8, 0x5E, 0x0D,  // C.....^.
                /* 08A0 */  0xDE, 0x0B, 0x7C, 0x21, 0xE2, 0x27, 0x03, 0xF0,  // ..|!.'..
                /* 08A8 */  0x1D, 0x1F, 0xC1, 0x71, 0xD2, 0x09, 0x1F, 0xE9,  // ...q....
                /* 08B0 */  0x99, 0x85, 0x9F, 0xFE, 0x00, 0x13, 0x77, 0x58,  // ......wX
                /* 08B8 */  0xDC, 0xE9, 0x0F, 0x1C, 0xA7, 0x45, 0x38, 0x03,  // .....E8.
                /* 08C0 */  0xE0, 0xF2, 0x5E, 0x55, 0x06, 0xF2, 0x0F, 0x41,  // ..^U...A
                /* 08C8 */  0x82, 0x60, 0x50, 0x17, 0x19, 0x9F, 0xF4, 0xF0,  // .`P.....
                /* 08D0 */  0x43, 0x60, 0x87, 0x09, 0x76, 0x4E, 0x32, 0x1C,  // C`..vN2.
                /* 08D8 */  0x3F, 0x00, 0x78, 0x54, 0x6F, 0x38, 0x2F, 0x5D,  // ?.xTo8/]
                /* 08E0 */  0x1E, 0xA6, 0x8F, 0x08, 0x21, 0xD9, 0x51, 0x0C,  // ....!.Q.
                /* 08E8 */  0x77, 0xAA, 0xF0, 0x55, 0xC1, 0x57, 0x11, 0x23,  // w..U.W.#
                /* 08F0 */  0x3E, 0xAC, 0xF8, 0xD4, 0x60, 0x28, 0x18, 0x87,  // >...`(..
                /* 08F8 */  0x01, 0xCC, 0x1D, 0x99, 0x41, 0xF9, 0x9E, 0x74,  // ....A..t
                /* 0900 */  0x18, 0x47, 0xF1, 0xFF, 0x7F, 0x98, 0x63, 0x97,  // .G....c.
                /* 0908 */  0x86, 0xA3, 0xC0, 0x1C, 0x39, 0x7C, 0x5B, 0x32,  // ....9|[2
                /* 0910 */  0xBC, 0x09, 0xEC, 0xFE, 0xD6, 0xAA, 0x13, 0xC6,  // ........
                /* 0918 */  0xC1, 0xBF, 0x76, 0x1B, 0xA2, 0x37, 0x1C, 0x1D,  // ..v..7..
                /* 0920 */  0x54, 0xA2, 0x9C, 0x56, 0x94, 0xA3, 0x88, 0xE2,  // T..V....
                /* 0928 */  0xF3, 0x42, 0x84, 0x18, 0x51, 0x82, 0x05, 0x79,  // .B..Q..y
                /* 0930 */  0xDD, 0x89, 0x15, 0xE5, 0xC5, 0xC0, 0x08, 0x11,  // ........
                /* 0938 */  0x43, 0xBC, 0xC3, 0x06, 0x3A, 0xF1, 0xF0, 0x41,  // C...:..A
                /* 0940 */  0x9E, 0x37, 0xE2, 0xB4, 0x7F, 0xF6, 0x45, 0x0C,  // .7....E.
                /* 0948 */  0xD9, 0x67, 0x05, 0xDC, 0xD9, 0x01, 0xEE, 0xF4,  // .g......
                /* 0950 */  0xF8, 0xE9, 0x01, 0x70, 0x02, 0xF4, 0xF4, 0x00,  // ...p....
                /* 0958 */  0xB6, 0xF3, 0x06, 0xDC, 0x03, 0x01, 0xE2, 0x48,  // .......H
                /* 0960 */  0x8B, 0x0A, 0x7E, 0x65, 0xA1, 0x70, 0x3C, 0xF4,  // ..~e.p<.
                /* 0968 */  0xCD, 0x8A, 0x1E, 0x4B, 0x70, 0x87, 0x03, 0x1F,  // ...Kp...
                /* 0970 */  0x19, 0x7C, 0x80, 0xC4, 0x0D, 0xC5, 0x87, 0x0A,  // .|......
                /* 0978 */  0xE4, 0x59, 0x00, 0xE2, 0xFF, 0xFF, 0x90, 0x8C,  // .Y......
                /* 0980 */  0x1D, 0x01, 0xBF, 0xC1, 0xBC, 0xB4, 0xBC, 0x37,  // .......7
                /* 0988 */  0xF0, 0x53, 0x0A, 0xEE, 0x20, 0x00, 0xBE, 0x63,  // .S.. ..c
                /* 0990 */  0x00, 0x78, 0x07, 0xC3, 0x65, 0x8D, 0x19, 0x75,  // .x..e..u
                /* 0998 */  0x28, 0xF6, 0x98, 0x71, 0x87, 0x10, 0x7E, 0x22,  // (..q..~"
                /* 09A0 */  0xC0, 0x8D, 0xD9, 0xE3, 0xF6, 0x98, 0x71, 0xC7,  // ......q.
                /* 09A8 */  0x59, 0x3E, 0xAA, 0xA7, 0x8C, 0x17, 0x68, 0xDC,  // Y>....h.
                /* 09B0 */  0x8D, 0x80, 0x0F, 0x1D, 0x78, 0x1C, 0x60, 0x70,  // ....x.`p
                /* 09B8 */  0x47, 0x0A, 0x30, 0x5E, 0x0E, 0xD8, 0xD8, 0xC1,  // G.0^....
                /* 09C0 */  0x1D, 0x84, 0x9C, 0x02, 0x59, 0x3A, 0x8C, 0xC6,  // ....Y:..
                /* 09C8 */  0x8E, 0x93, 0x0D, 0xA4, 0x63, 0x8C, 0x0F, 0xB9,  // ....c...
                /* 09D0 */  0x1E, 0x3B, 0x6E, 0xB0, 0xFF, 0xFF, 0x63, 0xC7,  // .;n...c.
                /* 09D8 */  0x1E, 0x5F, 0xC0, 0x37, 0x06, 0x7E, 0x7D, 0x3E,  // ._.7.~}>
                /* 09E0 */  0x0C, 0xEC, 0xCD, 0xCF, 0xA3, 0x33, 0xB8, 0x87,  // .....3..
                /* 09E8 */  0xED, 0x13, 0x4C, 0x8C, 0xE7, 0x97, 0x10, 0x8F,  // ..L.....
                /* 09F0 */  0x30, 0x2F, 0x2E, 0x11, 0x8E, 0x22, 0xC8, 0x9B,  // 0/..."..
                /* 09F8 */  0x4B, 0x9C, 0x57, 0x83, 0x30, 0x8F, 0x2D, 0x51,  // K.W.0.-Q
                /* 0A00 */  0x42, 0x44, 0x38, 0x98, 0x38, 0x4F, 0x30, 0x46,  // BD8.8O0F
                /* 0A08 */  0x38, 0xF0, 0x28, 0x86, 0x88, 0x70, 0x02, 0x21,  // 8.(..p.!
                /* 0A10 */  0x4E, 0xFA, 0x64, 0x83, 0x84, 0x8F, 0x11, 0x36,  // N.d....6
                /* 0A18 */  0xDA, 0x13, 0x0C, 0x1F, 0x0B, 0x3F, 0xAF, 0x78,  // .....?.x
                /* 0A20 */  0xF0, 0xFC, 0xB4, 0xE6, 0xBB, 0xA0, 0x0F, 0xEF,  // ........
                /* 0A28 */  0x6C, 0x6A, 0x3E, 0x4E, 0xFA, 0x30, 0x8B, 0x1B,  // lj>N.0..
                /* 0A30 */  0xD4, 0x83, 0x23, 0xBB, 0xEB, 0xF8, 0x78, 0x8D,  // ..#...x.
                /* 0A38 */  0x3D, 0x05, 0x79, 0x08, 0xFC, 0x44, 0xE0, 0x0B,  // =.y..D..
                /* 0A40 */  0xA2, 0x27, 0xEB, 0xBB, 0x1E, 0xBB, 0x97, 0x19,  // .'......
                /* 0A48 */  0xA3, 0xFA, 0x29, 0xA0, 0x8E, 0x29, 0x67, 0xF0,  // ..)..)g.
                /* 0A50 */  0x0A, 0xC1, 0xEE, 0x79, 0x3E, 0x64, 0xFB, 0x2E,  // ...y>d..
                /* 0A58 */  0xC9, 0x46, 0x81, 0x3B, 0x24, 0xF8, 0x8C, 0xC4,  // .F.;$...
                /* 0A60 */  0x4F, 0x15, 0x1E, 0x86, 0x47, 0x01, 0x63, 0x06,  // O...G.c.
                /* 0A68 */  0xEF, 0x08, 0x87, 0x16, 0xE2, 0x80, 0xDF, 0x77,  // .......w
                /* 0A70 */  0xD9, 0x50, 0x63, 0x9C, 0x9E, 0xCF, 0x1F, 0x6C,  // .Pc....l
                /* 0A78 */  0x10, 0xF0, 0xA1, 0x0E, 0xD5, 0xC3, 0x3C, 0xAA,  // ......<.
                /* 0A80 */  0x97, 0x42, 0x86, 0x73, 0x76, 0x70, 0x07, 0x81,  // .B.svp..
                /* 0A88 */  0x3D, 0x7E, 0x78, 0x10, 0xFF, 0xFF, 0x47, 0x11,  // =~x...G.
                /* 0A90 */  0x3A, 0x0A, 0x3A, 0x08, 0x76, 0xBE, 0x79, 0x83,  // :.:.v.y.
                /* 0A98 */  0x33, 0xC8, 0x31, 0xC0, 0x3E, 0x53, 0xF9, 0x68,  // 3.1.>S.h
                /* 0AA0 */  0x82, 0x38, 0x02, 0xA2, 0xCF, 0x1F, 0x1E, 0xC3,  // .8......
                /* 0AA8 */  0x9B, 0x1C, 0x1F, 0x0E, 0xF6, 0xE8, 0x81, 0x3B,  // .......;
                /* 0AB0 */  0x89, 0xC0, 0x3D, 0x76, 0x1D, 0xB4, 0xAF, 0x71,  // ..=v...q
                /* 0AB8 */  0xBE, 0x68, 0xC1, 0xB8, 0xEF, 0x3D, 0x8B, 0x80,  // .h...=..
                /* 0AC0 */  0x1F, 0xE3, 0xB1, 0x05, 0x1C, 0x87, 0x12, 0x70,  // .......p
                /* 0AC8 */  0x07, 0x3B, 0xAE, 0x71, 0x08, 0x45, 0x81, 0xD1,  // .;.q.E..
                /* 0AD0 */  0xA1, 0x04, 0x17, 0x03, 0x48, 0x30, 0x8E, 0x71,  // ....H0.q
                /* 0AD8 */  0x46, 0x43, 0x5F, 0x22, 0x7D, 0x48, 0x83, 0x33,  // FC_"}H.3
                /* 0AE0 */  0x68, 0xD8, 0xF3, 0x7C, 0x42, 0xE1, 0xF6, 0x04,  // h..|B...
                /* 0AE8 */  0x28, 0x3A, 0xA1, 0x80, 0x0C, 0xF7, 0xFF, 0xFF,  // (:......
                /* 0AF0 */  0x0C, 0x82, 0x3D, 0x21, 0xF0, 0x33, 0x08, 0x87,  // ..=!.3..
                /* 0AF8 */  0x3E, 0xEE, 0xF7, 0x46, 0x9F, 0x1A, 0xD9, 0xDC,  // >..F....
                /* 0B00 */  0x1F, 0x02, 0x4E, 0xE0, 0xDC, 0xD9, 0xA9, 0x19,  // ..N.....
                /* 0B08 */  0x77, 0x66, 0xC0, 0x9E, 0x3F, 0x3C, 0x04, 0x7E,  // wf..?<.~
                /* 0B10 */  0x2E, 0xF0, 0xF0, 0x3D, 0x04, 0xFC, 0xE0, 0x1F,  // ...=....
                /* 0B18 */  0x98, 0x0D, 0x0E, 0xC6, 0x53, 0x84, 0xAF, 0x1D,  // ....S...
                /* 0B20 */  0x1C, 0x9C, 0x9F, 0x06, 0x0C, 0xCE, 0x5F, 0xA1,  // ......_.
                /* 0B28 */  0x3E, 0xCF, 0x33, 0x70, 0xEC, 0xA9, 0xD7, 0xF7,  // >.3p....
                /* 0B30 */  0x0E, 0xCF, 0xD7, 0x87, 0x0A, 0xFC, 0x4D, 0xCF,  // ......M.
                /* 0B38 */  0x87, 0x0A, 0x70, 0x1C, 0x1E, 0xF8, 0x61, 0x85,  // ..p...a.
                /* 0B40 */  0x0D, 0xE1, 0x51, 0x00, 0x7F, 0x6A, 0xF1, 0xF1,  // ..Q..j..
                /* 0B48 */  0x2F, 0xCE, 0x53, 0x04, 0xBB, 0x8D, 0x60, 0x0F,  // /.S...`.
                /* 0B50 */  0x17, 0x80, 0x99, 0xFF, 0xFF, 0xB0, 0x30, 0xD1,  // ......0.
                /* 0B58 */  0xCE, 0x62, 0xA8, 0x30, 0x67, 0x31, 0x74, 0x90,  // .b.0g1t.
                /* 0B60 */  0xB3, 0x18, 0x3D, 0x5C, 0x00, 0x2E, 0x04, 0x1F,  // ..=\....
                /* 0B68 */  0x0F, 0x40, 0x73, 0x10, 0x78, 0x5C, 0xF0, 0x85,  // .@s.x\..
                /* 0B70 */  0xE0, 0x48, 0x0E, 0xE4, 0xE9, 0x00, 0xF0, 0x29,  // .H.....)
                /* 0B78 */  0xF6, 0xE3, 0xEC, 0xF3, 0x11, 0x95, 0x07, 0x83,  // ........
                /* 0B80 */  0x3A, 0x1F, 0xF8, 0x84, 0xE2, 0x63, 0x07, 0x3F,  // :....c.?
                /* 0B88 */  0x1B, 0xF8, 0x46, 0xEE, 0xA1, 0xF2, 0x53, 0xB3,  // ..F...S.
                /* 0B90 */  0x4F, 0xDA, 0xEC, 0xFF, 0x7F, 0x38, 0x12, 0xB8,  // O....8..
                /* 0B98 */  0x4E, 0x47, 0x0E, 0x34, 0x0C, 0xD4, 0x88, 0x0C,  // NG.4....
                /* 0BA0 */  0xE5, 0x73, 0x1B, 0x2E, 0xC0, 0xD0, 0xE8, 0x39,  // .s.....9
                /* 0BA8 */  0x1C, 0xC6, 0x01, 0xD7, 0xE7, 0x70, 0xEC, 0x80,  // .....p..
                /* 0BB0 */  0x7C, 0x0E, 0x87, 0x7F, 0x8E, 0x86, 0x3F, 0x36,  // |.....?6
                /* 0BB8 */  0x76, 0xBA, 0xE7, 0x03, 0x83, 0x75, 0xFD, 0xC6,  // v....u..
                /* 0BC0 */  0x0C, 0x0C, 0x6C, 0xDF, 0x22, 0x0F, 0x0C, 0x38,  // ..l."..8
                /* 0BC8 */  0xA2, 0x9E, 0x8D, 0xAF, 0x10, 0x1E, 0x18, 0xD8,  // ........
                /* 0BD0 */  0x00, 0x3D, 0x30, 0xE0, 0x13, 0x0B, 0x42, 0x4E,  // .=0...BN
                /* 0BD8 */  0x06, 0x86, 0x3A, 0x65, 0x18, 0xF9, 0xFF, 0x1F,  // ..:e....
                /* 0BE0 */  0xF3, 0x89, 0xC3, 0xC3, 0xF0, 0xA1, 0x22, 0xEA,  // ......".
                /* 0BE8 */  0x33, 0xC0, 0x23, 0x1E, 0x1B, 0x1B, 0xB8, 0x8E,  // 3.#.....
                /* 0BF0 */  0x2D, 0x1E, 0x1B, 0xF8, 0x8F, 0xF0, 0xF8, 0xB1,  // -.......
                /* 0BF8 */  0xC1, 0x19, 0xCB, 0xA3, 0x89, 0x2F, 0x33, 0x47,  // ...../3G
                /* 0C00 */  0x76, 0x1A, 0x67, 0xF6, 0x1A, 0xE2, 0xA3, 0xDD,  // v.g.....
                /* 0C08 */  0xE3, 0xB7, 0xC7, 0x06, 0x2E, 0x0B, 0x63, 0x03,  // ......c.
                /* 0C10 */  0x4A, 0x21, 0xC7, 0x86, 0x3E, 0xA4, 0xF8, 0x14,  // J!..>...
                /* 0C18 */  0x60, 0xE3, 0xA8, 0x64, 0x1E, 0x3E, 0x5E, 0xF9,  // `..d.>^.
                /* 0C20 */  0xC4, 0x70, 0x74, 0x41, 0xDE, 0xD0, 0x7D, 0xB9,  // .ptA..}.
                /* 0C28 */  0xF0, 0x91, 0xC6, 0x60, 0xBE, 0xB4, 0xF8, 0x0C,  // ...`....
                /* 0C30 */  0xCA, 0x87, 0x08, 0x2E, 0x0D, 0x43, 0x04, 0x22,  // .....C."
                /* 0C38 */  0xFF, 0xFF, 0x21, 0x62, 0x42, 0x0D, 0x11, 0x3D,  // ..!bB..=
                /* 0C40 */  0x1E, 0x5F, 0x66, 0x0E, 0x91, 0x0D, 0x0D, 0xBC,  // ._f.....
                /* 0C48 */  0x9F, 0x1A, 0x0F, 0x0D, 0xF8, 0xC4, 0x04, 0xF6,  // ........
                /* 0C50 */  0x2A, 0x3C, 0x34, 0x7A, 0xFA, 0xF1, 0x21, 0x80,  // *<4z..!.
                /* 0C58 */  0x41, 0xF8, 0x36, 0xC0, 0xAE, 0x02, 0xBE, 0x0A,  // A.6.....
                /* 0C60 */  0x19, 0x24, 0xC1, 0x38, 0x27, 0x0B, 0x3A, 0x38,  // .$.8'.:8
                /* 0C68 */  0x70, 0x0C, 0xC9, 0x83, 0x83, 0x3F, 0x18, 0x0F,  // p....?..
                /* 0C70 */  0x81, 0x03, 0x7B, 0x06, 0xCF, 0x45, 0x8F, 0xC1,  // ..{..E..
                /* 0C78 */  0x3E, 0xED, 0xF8, 0x54, 0x02, 0xBE, 0x60, 0xA7,  // >..T..`.
                /* 0C80 */  0x01, 0xF4, 0x69, 0x8F, 0x0D, 0xE6, 0x59, 0xE0,  // ..i...Y.
                /* 0C88 */  0xF9, 0xD3, 0x23, 0xF4, 0xED, 0xE1, 0xED, 0x16,  // ..#.....
                /* 0C90 */  0x77, 0x1E, 0x00, 0x97, 0x89, 0xF3, 0x00, 0x48,  // w......H
                /* 0C98 */  0xFE, 0xFF, 0xE7, 0x01, 0xB0, 0x9D, 0x4F, 0xC1,  // ......O.
                /* 0CA0 */  0x71, 0xD2, 0xC7, 0xCE, 0xD1, 0x03, 0x78, 0x0C,  // q.....x.
                /* 0CA8 */  0xF3, 0x68, 0xF9, 0x31, 0x0C, 0x70, 0x14, 0xF4,  // .h.1.p..
                /* 0CB0 */  0x7C, 0x4A, 0x07, 0xEE, 0x68, 0x30, 0xA8, 0x63,  // |J..h0.c
                /* 0CB8 */  0x18, 0xB8, 0x22, 0x80, 0xEB, 0x68, 0xE2, 0x63,  // .."..h.c
                /* 0CC0 */  0x08, 0x9C, 0xA1, 0x1E, 0xB4, 0xAF, 0x09, 0x9E,  // ........
                /* 0CC8 */  0xB5, 0x2F, 0x4E, 0xEC, 0x9C, 0x00, 0x2E, 0x15,  // ./N.....
                /* 0CD0 */  0xE7, 0x04, 0x20, 0xF2, 0xFF, 0x3F, 0xB0, 0xC0,  // .. ..?..
                /* 0CD8 */  0x06, 0x3E, 0x89, 0xE7, 0xF4, 0x43, 0x03, 0xF3,  // .>...C..
                /* 0CE0 */  0xC0, 0x3C, 0x34, 0xE0, 0x73, 0x34, 0xC0, 0x9D,  // .<4.s4..
                /* 0CE8 */  0x28, 0xC0, 0x73, 0x1B, 0xC1, 0x1D, 0x28, 0x00,  // (.s...(.
                /* 0CF0 */  0x37, 0x27, 0x75, 0x8F, 0x8B, 0x43, 0xE3, 0x10,  // 7'u..C..
                /* 0CF8 */  0x9F, 0xB5, 0xCE, 0xD9, 0xC7, 0xA8, 0x33, 0xC5,  // ......3.
                /* 0D00 */  0x9D, 0x45, 0xC0, 0x70, 0x4E, 0x46, 0x3C, 0x78,  // .E.pNF<x
                /* 0D08 */  0x0C, 0xE4, 0x07, 0x86, 0x64, 0xC1, 0xA0, 0x58,  // ....d..X
                /* 0D10 */  0xFE, 0xFF, 0x87, 0xC2, 0x0E, 0x06, 0x1C, 0xD8,  // ........
                /* 0D18 */  0x47, 0x04, 0x76, 0x2E, 0x60, 0x67, 0x60, 0xC3,  // G.v.`g`.
                /* 0D20 */  0xF1, 0xB3, 0x80, 0x4F, 0x09, 0x0F, 0x35, 0xC7,  // ...O..5.
                /* 0D28 */  0xF1, 0xD4, 0xE8, 0x2B, 0x96, 0x21, 0xD9, 0xF9,  // ...+.!..
                /* 0D30 */  0xDF, 0xA7, 0x56, 0xDC, 0xA1, 0x15, 0xCE, 0x49,  // ..V....I
                /* 0D38 */  0x15, 0x5C, 0x04, 0x3E, 0xEB, 0x78, 0x14, 0xFC,  // .\.>.x..
                /* 0D40 */  0xF4, 0xE0, 0x39, 0xBE, 0x31, 0xF8, 0xF4, 0xC0,  // ..9.1...
                /* 0D48 */  0xDC, 0x5F, 0x9D, 0x75, 0x65, 0x78, 0x67, 0xF0,  // ._.uexg.
                /* 0D50 */  0x9C, 0x4E, 0x3A, 0xC8, 0x49, 0xB7, 0x25, 0x40,  // .N:.I.%@
                /* 0D58 */  0x1B, 0x82, 0x50, 0x02, 0x45, 0x79, 0x1B, 0x88,  // ..P.Ey..
                /* 0D60 */  0x66, 0x6F, 0x28, 0x9A, 0x79, 0xD0, 0x17, 0x81,  // fo(.y...
                /* 0D68 */  0x40, 0x51, 0x62, 0x46, 0x6A, 0x0E, 0x4C, 0x48,  // @QbFj.LH
                /* 0D70 */  0x11, 0x0F, 0x27, 0x4A, 0x88, 0x60, 0x6F, 0x13,  // ..'J.`o.
                /* 0D78 */  0xAD, 0x09, 0xB0, 0x3F, 0x08, 0x22, 0xE9, 0x65,  // ...?.".e
                /* 0D80 */  0xA0, 0xA3, 0x95, 0x23, 0x1D, 0x10, 0xD1, 0xC3,  // ...#....
                /* 0D88 */  0xF6, 0x69, 0x19, 0x7F, 0xE8, 0xC4, 0x5D, 0x55,  // .i....]U
                /* 0D90 */  0x7C, 0x50, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // |P.....P
                /* 0D98 */  0x37, 0x40, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // 7@....._
                /* 0DA0 */  0x2F, 0xB0, 0x04, 0xE5, 0x0F, 0x02, 0x35, 0x32,  // /.....52
                /* 0DA8 */  0x43, 0x7B, 0x96, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
                /* 0DB0 */  0xF2, 0xA9, 0x95, 0x1C, 0x34, 0x41, 0xF6, 0xFF,  // ....4A..
                /* 0DB8 */  0x1F, 0x0F, 0xCC, 0x99, 0x3F, 0x6D, 0xF8, 0xF6,  // ....?m..
                /* 0DC0 */  0xED, 0xF9, 0xFA, 0x38, 0x06, 0xD8, 0x3C, 0xEB,  // ...8..<.
                /* 0DC8 */  0xFB, 0x04, 0x03, 0x8E, 0x9B, 0x05, 0x3F, 0xC3,  // ......?.
                /* 0DD0 */  0x00, 0xCE, 0x80, 0x9E, 0x61, 0xC0, 0xF1, 0xFF,  // ....a...
                /* 0DD8 */  0x3F, 0xC3, 0xC0, 0x1C, 0x2A, 0x6E, 0x08, 0x5C,  // ?...*n.\
                /* 0DE0 */  0xEE, 0x8A, 0x28, 0x90, 0x05, 0xC2, 0xA0, 0x08,  // ..(.....
                /* 0DE8 */  0x2C, 0xEE, 0x08, 0x42, 0xCF, 0xA7, 0x70, 0x86,  // ,..B..p.
                /* 0DF0 */  0x72, 0xB2, 0xBD, 0x5F, 0x1D, 0xC8, 0x2D, 0xC2,  // r.._..-.
                /* 0DF8 */  0x43, 0x3D, 0x8B, 0xC7, 0x04, 0x76, 0xDA, 0x02,  // C=...v..
                /* 0E00 */  0xFE, 0x63, 0x83, 0x33, 0xEF, 0x27, 0xD9, 0x08,  // .c.3.'..
                /* 0E08 */  0xC7, 0x06, 0xF6, 0xE3, 0x16, 0x70, 0x3A, 0x98,  // .....p:.
                /* 0E10 */  0xC1, 0xB9, 0xFF, 0xB0, 0x1B, 0x37, 0x6E, 0x68,  // .....7nh
                /* 0E18 */  0x60, 0x1B, 0xD6, 0xFF, 0xFF, 0xC9, 0x11, 0x70,  // `......p
                /* 0E20 */  0x70, 0x62, 0xE2, 0x57, 0x89, 0x87, 0x27, 0x7E,  // pb.W..'~
                /* 0E28 */  0x32, 0x03, 0x9C, 0x0B, 0x3D, 0x96, 0xA1, 0xA4,  // 2...=...
                /* 0E30 */  0x9D, 0xCC, 0x80, 0xE8, 0xFF, 0xFF, 0x64, 0x06,  // ......d.
                /* 0E38 */  0x2C, 0xAF, 0x65, 0x3E, 0x99, 0x81, 0x5B, 0xD6,  // ,.e>..[.
                /* 0E40 */  0xC9, 0x0C, 0xE8, 0xB8, 0x3E, 0x99, 0x01, 0x95,  // ....>...
                /* 0E48 */  0x73, 0x14, 0xFE, 0x64, 0x06, 0xD8, 0xFA, 0xFF,  // s..d....
                /* 0E50 */  0x9F, 0xCC, 0x00, 0x33, 0x07, 0x2C, 0xDC, 0xC9,  // ...3.,..
                /* 0E58 */  0x0C, 0x6C, 0x87, 0x18, 0xC0, 0xF5, 0x58, 0x61,  // .l....Xa
                /* 0E60 */  0x8C, 0x81, 0x8B, 0x3E, 0xC1, 0xF0, 0x33, 0x80,  // ...>..3.
                /* 0E68 */  0x61, 0x50, 0x27, 0x23, 0x02, 0x24, 0x18, 0x1F,  // aP'#.$..
                /* 0E70 */  0xE8, 0xFF, 0xFF, 0x0F, 0x21, 0x30, 0xE6, 0xF2,  // ....!0..
                /* 0E78 */  0x3C, 0xEF, 0x6B, 0x82, 0xCF, 0x51, 0x60, 0x3F,  // <.k..Q`?
                /* 0E80 */  0x9C, 0x01, 0x87, 0x53, 0x03, 0x3E, 0xDA, 0x89,  // ...S.>..
                /* 0E88 */  0x0B, 0x3D, 0x10, 0x5F, 0x82, 0x7C, 0xE1, 0xF0,  // .=._.|..
                /* 0E90 */  0x45, 0x84, 0x5D, 0x0E, 0xC2, 0x1E, 0xB5, 0x4F,  // E.]....O
                /* 0E98 */  0x38, 0xBE, 0x5E, 0x3F, 0x9E, 0x01, 0x0E, 0x02,  // 8.^?....
                /* 0EA0 */  0x8D, 0x0E, 0x3D, 0x0A, 0x8F, 0x2E, 0x64, 0xF5,  // ..=...d.
                /* 0EA8 */  0x87, 0x33, 0x40, 0xC2, 0xFF, 0xFF, 0x5D, 0xC2,  // .3@...].
                /* 0EB0 */  0x4E, 0x2F, 0x38, 0x16, 0xA3, 0x3E, 0x02, 0x3C,  // N/8..>.<
                /* 0EB8 */  0x0F, 0xBC, 0xBA, 0xF8, 0x9C, 0xFF, 0x1C, 0xE0,  // ........
                /* 0EC0 */  0x1B, 0x03, 0xE6, 0xF6, 0xE2, 0xA3, 0x0C, 0xB3,  // ........
                /* 0EC8 */  0x30, 0x3A, 0xD0, 0xD8, 0x18, 0x1D, 0xE8, 0x86,  // 0:......
                /* 0ED0 */  0xC0, 0xEE, 0x57, 0x9E, 0x39, 0x1F, 0xC2, 0xD9,  // ..W.9...
                /* 0ED8 */  0x78, 0xF4, 0xB8, 0xA3, 0x0C, 0x3C, 0x78, 0x1F,  // x....<x.
                /* 0EE0 */  0x65, 0x80, 0xD7, 0x69, 0x04, 0x33, 0x83, 0xF0,  // e..i.3..
                /* 0EE8 */  0x4F, 0x2C, 0x6C, 0x08, 0xA7, 0xEA, 0xDB, 0x04,  // O,l.....
                /* 0EF0 */  0x3B, 0xCA, 0x00, 0xD6, 0xFE, 0xFF, 0xC7, 0x3B,  // ;......;
                /* 0EF8 */  0x60, 0x20, 0xF8, 0xC9, 0xE0, 0xB3, 0x1D, 0x95,  // ` ......
                /* 0F00 */  0x08, 0x83, 0x3A, 0xDE, 0x01, 0x0E, 0x21, 0x1E,  // ..:...!.
                /* 0F08 */  0xEF, 0xC0, 0x2E, 0xEF, 0x28, 0x44, 0x8F, 0x77,  // ....(D.w
                /* 0F10 */  0x80, 0x99, 0xFF, 0xFF, 0xF1, 0x0E, 0x60, 0xC7,  // ......`.
                /* 0F18 */  0x58, 0x7D, 0x04, 0x00, 0xDF, 0x21, 0x08, 0xB0,  // X}...!..
                /* 0F20 */  0xF5, 0xFF, 0x3F, 0x04, 0x01, 0xA3, 0xD3, 0x09,  // ..?.....
                /* 0F28 */  0xEE, 0x78, 0x08, 0xB6, 0x63, 0x10, 0x60, 0x6D,  // .x..c.`m
                /* 0F30 */  0xE8, 0x3E, 0x06, 0x81, 0x79, 0xB4, 0x30, 0x47,  // .>..y.0G
                /* 0F38 */  0xC1, 0x85, 0x2D, 0x8A, 0x02, 0x59, 0x0A, 0x0C,  // ..-..Y..
                /* 0F40 */  0xEA, 0xBC, 0x40, 0x80, 0xA4, 0xE1, 0x24, 0x07,  // ..@...$.
                /* 0F48 */  0xF2, 0xFF, 0xFF, 0xF1, 0x10, 0x58, 0x9D, 0xE4,  // .....X..
                /* 0F50 */  0xF0, 0xB2, 0x4E, 0x1D, 0xE8, 0xF1, 0x18, 0xF4,  // ..N.....
                /* 0F58 */  0x95, 0xC3, 0x57, 0x02, 0x7E, 0xE4, 0x60, 0x12,  // ..W.~.`.
                /* 0F60 */  0x40, 0x35, 0x48, 0x9F, 0x0D, 0x81, 0xD3, 0x91,  // @5H.....
                /* 0F68 */  0x03, 0x1C, 0xB7, 0xA4, 0xC0, 0xD8, 0xDB, 0xC1,  // ........
                /* 0F70 */  0x2B, 0xA7, 0x27, 0xF1, 0x34, 0x74, 0x9C, 0x21,  // +.'.4t.!
                /* 0F78 */  0x0A, 0xC7, 0x24, 0x07, 0x83, 0x48, 0xAF, 0x52,  // ..$..H.R
                /* 0F80 */  0x6C, 0x80, 0x6F, 0x35, 0x3E, 0x1B, 0xF9, 0x00,  // l.o5>...
                /* 0F88 */  0x02, 0x6F, 0xDC, 0x3E, 0xD4, 0x01, 0x43, 0x88,  // .o.>..C.
                /* 0F90 */  0x93, 0xE2, 0x87, 0x0C, 0x63, 0x9E, 0x15, 0x3F,  // ....c..?
                /* 0F98 */  0x7E, 0x80, 0xE3, 0xFF, 0x7F, 0xA8, 0x03, 0x8C,  // ~.......
                /* 0FA0 */  0xC6, 0x38, 0xD1, 0xA1, 0x84, 0x1F, 0xEA, 0x00,  // .8......
                /* 0FA8 */  0x9D, 0x37, 0x80, 0x87, 0x3A, 0xB0, 0x9F, 0x9A,  // .7..:...
                /* 0FB0 */  0x7D, 0xA8, 0xC3, 0xFE, 0xFF, 0x0F, 0x75, 0x00,  // }.....u.
                /* 0FB8 */  0x5B, 0x7F, 0x18, 0x3A, 0x02, 0x80, 0xF0, 0x3C,  // [..:...<
                /* 0FC0 */  0x04, 0xFB, 0xFF, 0x7F, 0x1E, 0x02, 0xD8, 0x70,  // .......p
                /* 0FC8 */  0xBE, 0x03, 0xF3, 0x89, 0x08, 0xB0, 0x36, 0xF4,  // ......6.
                /* 0FD0 */  0xFF, 0xFF, 0x13, 0x11, 0xB8, 0x47, 0x0B, 0x73,  // .....G.s
                /* 0FD8 */  0x14, 0x5C, 0xD0, 0xAB, 0xC3, 0x40, 0x54, 0x02,  // .\...@T.
                /* 0FE0 */  0x0C, 0x8A, 0xC0, 0xF1, 0xD7, 0x26, 0x18, 0x87,  // .....&..
                /* 0FE8 */  0x3A, 0xDF, 0xA1, 0xCF, 0x0B, 0x1E, 0xF6, 0x53,  // :......S
                /* 0FF0 */  0x81, 0x27, 0x71, 0xAA, 0xBE, 0x16, 0x1C, 0xC5,  // .'q.....
                /* 0FF8 */  0x13, 0x80, 0x4F, 0x78, 0xC0, 0x7F, 0x68, 0xB0,  // ..Ox..h.
                /* 1000 */  0x26, 0x51, 0xFC, 0xD0, 0x40, 0x7D, 0x04, 0x01,  // &Q..@}..
                /* 1008 */  0xDF, 0xD0, 0xC0, 0x11, 0xF5, 0x7C, 0x83, 0x3E,  // .....|.>
                /* 1010 */  0x66, 0xF9, 0x6C, 0x10, 0xF3, 0x05, 0x24, 0xC2,  // f.l...$.
                /* 1018 */  0x03, 0x88, 0xAF, 0x0F, 0xEC, 0x38, 0xE9, 0x33,  // .....8.3
                /* 1020 */  0x50, 0xA0, 0xFF, 0x7F, 0x94, 0xF7, 0x0D, 0x7E,  // P......~
                /* 1028 */  0xC2, 0x01, 0xD7, 0xD0, 0x7C, 0x0A, 0x06, 0xAE,  // ....|...
                /* 1030 */  0x07, 0x4D, 0x38, 0x17, 0x18, 0xDF, 0xD8, 0xD8,  // .M8.....
                /* 1038 */  0x69, 0x00, 0x6C, 0x07, 0x60, 0xF0, 0x9D, 0x06,  // i.l.`...
                /* 1040 */  0xC0, 0x71, 0x4C, 0xE2, 0xA7, 0x43, 0x30, 0xC1,  // .qL..C0.
                /* 1048 */  0x1C, 0xCC, 0x4B, 0xB3, 0xBD, 0x9F, 0x72, 0xE8,  // ..K...r.
                /* 1050 */  0xD1, 0x05, 0x78, 0xFF, 0xFF, 0xCF, 0x86, 0xC0,  // ..x.....
                /* 1058 */  0x5E, 0xD2, 0xC1, 0x10, 0x25, 0xE2, 0x6C, 0x08,  // ^...%.l.
                /* 1060 */  0x08, 0x3C, 0x16, 0x9E, 0xFE, 0x01, 0x3C, 0x14,  // .<....<.
                /* 1068 */  0xBE, 0x0C, 0xFA, 0xDA, 0xF0, 0x4E, 0xE8, 0x7B,  // .....N.{
                /* 1070 */  0xC3, 0x61, 0xBF, 0x1B, 0xFA, 0x6C, 0xE8, 0x13,  // .a...l..
                /* 1078 */  0xE1, 0x11, 0x3C, 0x14, 0x46, 0x89, 0x78, 0xF0,  // ..<.F.x.
                /* 1080 */  0x41, 0x1A, 0x43, 0xD1, 0x0D, 0xD1, 0x60, 0x11,  // A.C...`.
                /* 1088 */  0x9E, 0x0E, 0x0D, 0x1A, 0x3C, 0x76, 0x88, 0x30,  // ....<v.0
                /* 1090 */  0x81, 0x9E, 0x0D, 0xD9, 0x8A, 0x7D, 0x36, 0x04,  // .....}6.
                /* 1098 */  0x86, 0xFF, 0xFF, 0xB3, 0x21, 0xC0, 0xC6, 0xF3,  // ....!...
                /* 10A0 */  0x11, 0x30, 0xFE, 0xFF, 0x9F, 0x8F, 0x80, 0xE1,  // .0......
                /* 10A8 */  0x21, 0x1B, 0x3C, 0xA7, 0x40, 0x18, 0x27, 0x1F,  // !.<.@.'.
                /* 10B0 */  0xC0, 0xF5, 0x58, 0x61, 0x8C, 0x81, 0x2B, 0xD7,  // ..Xa..+.
                /* 10B8 */  0x01, 0xC2, 0x8E, 0x03, 0x16, 0xF5, 0x8A, 0x30,  // .......0
                /* 10C0 */  0x0C, 0x65, 0xF1, 0x61, 0xC1, 0x47, 0x04, 0x7E,  // .e.a.G.~
                /* 10C8 */  0x58, 0xF0, 0x08, 0x2A, 0x1E, 0x27, 0x3D, 0xDD,  // X..*.'=.
                /* 10D0 */  0xF8, 0x4C, 0xC8, 0x0E, 0x09, 0x0E, 0x3F, 0x48,  // .L....?H
                /* 10D8 */  0x7A, 0xD0, 0x84, 0xF1, 0xFF, 0x3F, 0x5A, 0xC1,  // z....?Z.
                /* 10E0 */  0x3F, 0x1F, 0x61, 0x6F, 0x3D, 0x70, 0x4E, 0x05,  // ?.ao=pN.
                /* 10E8 */  0x80, 0x1B, 0x6D, 0x6F, 0x35, 0x41, 0x3B, 0xC0,  // ..mo5A;.
                /* 10F0 */  0x39, 0x4A, 0x36, 0x8E, 0x21, 0x94, 0xC3, 0x31,  // 9J6.!..1
                /* 10F8 */  0xDF, 0x1E, 0x9A, 0x26, 0x3B, 0x59, 0xC1, 0x8C,  // ...&;Y..
                /* 1100 */  0x05, 0xA9, 0x93, 0x80, 0x4F, 0x1B, 0x0E, 0x04,  // ....O...
                /* 1108 */  0x23, 0xED, 0x24, 0x1A, 0x8D, 0xE1, 0xAC, 0x16,  // #.$.....
                /* 1110 */  0x46, 0x70, 0x06, 0xF1, 0x71, 0xC4, 0xB9, 0x4E,  // Fp..q..N
                /* 1118 */  0x46, 0xE8, 0x03, 0xA5, 0x4F, 0x45, 0x98, 0x20,  // F...OE. 
                /* 1120 */  0xF7, 0x12, 0x3A, 0x6F, 0xDF, 0x0D, 0xF8, 0x55,  // ..:o...U
                /* 1128 */  0xD8, 0x63, 0x31, 0xB0, 0x6F, 0x27, 0xE0, 0x98,  // .c1.o'..
                /* 1130 */  0x8B, 0xD5, 0x80, 0xA2, 0x06, 0x60, 0x34, 0xCC,  // .....`4.
                /* 1138 */  0x29, 0xE0, 0xA9, 0x04, 0x5C, 0xC1, 0x70, 0x51,  // )...\.pQ
                /* 1140 */  0xFF, 0xFF, 0x3B, 0x20, 0xD7, 0x3A, 0x15, 0x9D,  // ..; .:..
                /* 1148 */  0x82, 0xDE, 0x07, 0x0E, 0x0E, 0x78, 0xCC, 0xDE,  // .....x..
                /* 1150 */  0x83, 0x83, 0x85, 0xE6, 0xC1, 0x81, 0x2D, 0xDB,  // ......-.
                /* 1158 */  0xE0, 0xD0, 0x4A, 0xEE, 0x22, 0xE4, 0xF0, 0x81,  // ..J."...
                /* 1160 */  0x9F, 0x1D, 0x70, 0x00, 0xF4, 0xEC, 0x60, 0x21,  // ..p...`!
                /* 1168 */  0x79, 0x76, 0x60, 0xD3, 0x77, 0x16, 0x01, 0x05,  // yv`.w...
                /* 1170 */  0x90, 0xEF, 0x1D, 0x3E, 0xB7, 0x3C, 0x7B, 0xB0,  // ...>.<{.
                /* 1178 */  0x31, 0x3C, 0xBA, 0x18, 0xCD, 0xE8, 0x5C, 0xD3,  // 1<....\.
                /* 1180 */  0x6D, 0x02, 0xA5, 0xE2, 0x36, 0x41, 0x41, 0x7C,  // m...6AA|
                /* 1188 */  0x03, 0x70, 0x42, 0x1A, 0xDD, 0x3A, 0x71, 0x33,  // .pB..:q3
                /* 1190 */  0x31, 0xFE, 0x23, 0x86, 0x8F, 0x08, 0x87, 0x74,  // 1.#....t
                /* 1198 */  0xB6, 0x26, 0x98, 0x07, 0x52, 0xCF, 0x40, 0xDF,  // .&..R.@.
                /* 11A0 */  0xD9, 0xF0, 0xB3, 0x0F, 0xF9, 0xE0, 0xE2, 0xFF,  // ........
                /* 11A8 */  0xFF, 0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A,  // .4|.!..:
                /* 11B0 */  0x6D, 0x9F, 0x19, 0x30, 0x07, 0x5D, 0x5F, 0xA7,  // m..0.]_.
                /* 11B8 */  0xDE, 0xE0, 0xC9, 0x55, 0x82, 0x7A, 0xB8, 0x80,  // ...U.z..
                /* 11C0 */  0xD0, 0x0B, 0x8D, 0x4F, 0x78, 0x09, 0x1E, 0x38,  // ...Ox..8
                /* 11C8 */  0x7D, 0xC4, 0x7B, 0x2F, 0x61, 0x17, 0xBD, 0x97,  // }.{/a...
                /* 11D0 */  0x11, 0x41, 0x28, 0xEF, 0x20, 0x50, 0xA3, 0xF2,  // .A(. P..
                /* 11D8 */  0x20, 0x30, 0x57, 0x79, 0x96, 0x6F, 0x0C, 0xA8,  //  0Wy.o..
                /* 11E0 */  0x64, 0x17, 0x2D, 0x7A, 0x86, 0x79, 0x87, 0xF1,  // d.-z.y..
                /* 11E8 */  0x25, 0xC1, 0xD7, 0x0F, 0x9F, 0x5B, 0xBC, 0x80,  // %....[..
                /* 11F0 */  0xD7, 0x2D, 0x18, 0x04, 0xCF, 0x40, 0xAF, 0x2E,  // .-...@..
                /* 11F8 */  0xBE, 0xB3, 0x1B, 0xF8, 0x55, 0xE0, 0x8D, 0x26,  // ....U..&
                /* 1200 */  0x44, 0x30, 0xC3, 0x1E, 0xFE, 0xBB, 0xBB, 0x51,  // D0.....Q
                /* 1208 */  0x7D, 0xD3, 0x31, 0xD6, 0xEB, 0x88, 0x47, 0xCA,  // }.1...G.
                /* 1210 */  0x8F, 0x2D, 0x07, 0x14, 0xE9, 0xE5, 0xCD, 0x13,  // .-......
                /* 1218 */  0xF0, 0x59, 0xC6, 0xA7, 0xBA, 0x93, 0xF2, 0xF5,  // .Y......
                /* 1220 */  0xD0, 0xE8, 0xAF, 0x10, 0x3E, 0xFC, 0x18, 0xD9,  // ....>...
                /* 1228 */  0xE7, 0x1C, 0x76, 0xBE, 0x63, 0x83, 0xE2, 0x88,  // ..v.c...
                /* 1230 */  0x0F, 0x0C, 0x2F, 0x35, 0x9E, 0x0A, 0x3B, 0x77,  // ../5..;w
                /* 1238 */  0xC1, 0x38, 0x38, 0xB0, 0x63, 0x11, 0xE6, 0xF8,  // .88.c...
                /* 1240 */  0x0A, 0xAE, 0x93, 0x8D, 0x4F, 0x0E, 0x60, 0x86,  // ....O.`.
                /* 1248 */  0xC7, 0x1C, 0x7C, 0x7D, 0xDE, 0xF0, 0xCD, 0xC0,  // ..|}....
                /* 1250 */  0xE3, 0xE2, 0x47, 0x0E, 0x9F, 0x34, 0x5E, 0x3A,  // ..G..4^:
                /* 1258 */  0x8D, 0x7D, 0x9A, 0x3E, 0x1A, 0xBD, 0xBC, 0xF9,  // .}.>....
                /* 1260 */  0xF4, 0x82, 0x81, 0xF5, 0xA5, 0xE1, 0xFF, 0x1F,  // ........
                /* 1268 */  0x16, 0x83, 0x16, 0xF6, 0x31, 0xE0, 0xCC, 0x7D,  // ....1..}
                /* 1270 */  0x21, 0xC2, 0x1D, 0x1E, 0xC1, 0x02, 0x88, 0xBF,  // !.......
                /* 1278 */  0x95, 0x3C, 0x72, 0x78, 0x02, 0x06, 0x64, 0x9A,  // .<rx..d.
                /* 1280 */  0xD6, 0xA5, 0x03, 0x11, 0x3F, 0xE5, 0x59, 0xF9,  // ....?.Y.
                /* 1288 */  0xCA, 0x74, 0x19, 0x62, 0x18, 0x4F, 0x95, 0x8F,  // .t.b.O..
                /* 1290 */  0x1F, 0x9E, 0x8D, 0x8F, 0x02, 0x3E, 0x46, 0x79,  // .....>Fy
                /* 1298 */  0xE6, 0x67, 0x14, 0xE9, 0x95, 0x81, 0x80, 0xEA,  // .g......
                /* 12A0 */  0x44, 0xC4, 0x15, 0xC2, 0x48, 0x0C, 0x8D, 0xEE,  // D...H...
                /* 12A8 */  0x1C, 0x3C, 0xFE, 0x10, 0x29, 0x88, 0x01, 0x7D,  // .<..)..}
                /* 12B0 */  0x73, 0x01, 0xA6, 0x67, 0x22, 0xE0, 0x72, 0x73,  // s..g".rs
                /* 12B8 */  0x01, 0xFE, 0xFF, 0xFF, 0x9B, 0x0B, 0xC0, 0xFF,  // ........
                /* 12C0 */  0xFF, 0xFF, 0xCD, 0x05, 0xEE, 0xFD, 0xC1, 0x37,  // .......7
                /* 12C8 */  0x17, 0xE0, 0x1A, 0x62, 0x55, 0xBA, 0xB9, 0xF0,  // ...bU...
                /* 12D0 */  0x03, 0x80, 0xA3, 0x2E, 0x48, 0xB7, 0x82, 0x88,  // ....H...
                /* 12D8 */  0x87, 0xE0, 0x41, 0x3E, 0x0A, 0x18, 0xF6, 0x2C,  // ..A>...,
                /* 12E0 */  0x1F, 0xA2, 0x3D, 0x1C, 0x13, 0x0C, 0x77, 0xD5,  // ..=...w.
                /* 12E8 */  0xA0, 0x43, 0x73, 0x2C, 0x0A, 0x09, 0xB9, 0xB7,  // .Cs,....
                /* 12F0 */  0xA0, 0xA2, 0xDF, 0x1F, 0x28, 0x88, 0x01, 0x7D,  // ....(..}
                /* 12F8 */  0x31, 0x04, 0x6C, 0xDD, 0x5A, 0x80, 0x45, 0x98,  // 1.l.Z.E.
                /* 1300 */  0x41, 0xA3, 0xE4, 0xC3, 0x68, 0x48, 0x06, 0xF1,  // A...hH..
                /* 1308 */  0xA0, 0x2D, 0xED, 0xD6, 0x42, 0xFF, 0xFF, 0xB7,  // .-..B...
                /* 1310 */  0x16, 0xB8, 0x87, 0x00, 0xDF, 0x5A, 0xE0, 0xCB,  // .....Z..
                /* 1318 */  0xBB, 0xB5, 0x80, 0xE2, 0x16, 0xE0, 0xA3, 0x01,  // ........
                /* 1320 */  0x3F, 0x2E, 0xF8, 0xC0, 0xE1, 0x1B, 0x8B, 0x6F,  // ?......o
                /* 1328 */  0xBA, 0xE4, 0xC2, 0x02, 0x75, 0xFC, 0x1C, 0xDC,  // ....u...
                /* 1330 */  0xE2, 0x2E, 0x2C, 0x50, 0x4E, 0x26, 0xE0, 0x38,  // ..,PN&.8
                /* 1338 */  0x92, 0x00, 0x0E, 0x21, 0x7D, 0x24, 0x01, 0x5E,  // ...!}$.^
                /* 1340 */  0xFF, 0xFF, 0x23, 0x09, 0x9C, 0x48, 0xAB, 0xA2,  // ..#..H..
                /* 1348 */  0x22, 0xDE, 0x03, 0x3A, 0x95, 0x18, 0x86, 0x8F,  // "..:....
                /* 1350 */  0xCE, 0x67, 0x06, 0xFC, 0x95, 0x83, 0x81, 0xB3,  // .g......
                /* 1358 */  0x6B, 0x9A, 0xE1, 0xF8, 0xC0, 0x3D, 0xBE, 0xE7,  // k....=..
                /* 1360 */  0xB4, 0xD3, 0x7A, 0x28, 0xF0, 0x3C, 0xDE, 0x0E,  // ..z(.<..
                /* 1368 */  0x42, 0xB2, 0x0B, 0x35, 0xEE, 0xF0, 0xE0, 0xB1,  // B..5....
                /* 1370 */  0x3F, 0x14, 0xF9, 0x86, 0xF0, 0x82, 0xE0, 0xCB,  // ?.......
                /* 1378 */  0x01, 0x83, 0x82, 0x71, 0xA7, 0xC6, 0x1C, 0xA8,  // ...q....
                /* 1380 */  0xE1, 0x10, 0x9C, 0xF1, 0x51, 0x60, 0x06, 0xE9,  // ....Q`..
                /* 1388 */  0x0B, 0xC8, 0xEB, 0x81, 0x07, 0xCB, 0xDC, 0xDF,  // ........
                /* 1390 */  0x0B, 0x64, 0x6E, 0x00, 0x3A, 0x4C, 0xC4, 0x78,  // .dn.:L.x
                /* 1398 */  0x58, 0x38, 0xA9, 0x47, 0x88, 0xB6, 0x2E, 0x05,  // X8.G....
                /* 13A0 */  0xF2, 0x06, 0xA1, 0x33, 0x55, 0x94, 0x10, 0x31,  // ...3U..1
                /* 13A8 */  0xCF, 0x20, 0x5C, 0x94, 0x88, 0x11, 0x02, 0xBE,  // . \.....
                /* 13B0 */  0xCB, 0x44, 0x09, 0x1C, 0x25, 0xE6, 0xFB, 0xC1,  // .D..%...
                /* 13B8 */  0xDB, 0x42, 0xB0, 0xC7, 0x85, 0x08, 0xB1, 0x42,  // .B.....B
                /* 13C0 */  0x04, 0xB6, 0xFD, 0x41, 0x90, 0x00, 0x6F, 0x0A,  // ...A..o.
                /* 13C8 */  0x5D, 0x53, 0x1C, 0xE9, 0x10, 0x83, 0x1E, 0xB6,  // ]S......
                /* 13D0 */  0x6F, 0xD8, 0x7C, 0x5A, 0x41, 0x8E, 0xCB, 0x07,  // o.|ZA...
                /* 13D8 */  0x19, 0x0C, 0xC1, 0xC3, 0x87, 0xBF, 0x00, 0x3E,  // .......>
                /* 13E0 */  0x00, 0xE0, 0x5D, 0x03, 0x6A, 0xE6, 0x8F, 0x07,  // ..].j...
                /* 13E8 */  0x60, 0x39, 0x5C, 0xC0, 0x3F, 0xC1, 0x60, 0xCF,  // `9\.?.`.
                /* 13F0 */  0x2A, 0x1A, 0x04, 0xEA, 0xA4, 0xC2, 0x4F, 0x57,  // *.....OW
                /* 13F8 */  0xBE, 0x69, 0xFB, 0x06, 0x64, 0x02, 0xFF, 0xFF,  // .i..d...
                /* 1400 */  0xC5, 0x1E, 0x44, 0xE8, 0x78, 0xC0, 0x3F, 0xFA,  // ..D.x.?.
                /* 1408 */  0x97, 0x74, 0x1F, 0x2A, 0x3C, 0x5F, 0x5F, 0xD5,  // .t.*<__.
                /* 1410 */  0x7D, 0x95, 0x07, 0xCB, 0x35, 0x81, 0x5F, 0xE6,  // }...5._.
                /* 1418 */  0x01, 0x8F, 0x82, 0xC7, 0x85, 0x82, 0xC6, 0x21,  // .......!
                /* 1420 */  0x3E, 0xD5, 0x9D, 0xBA, 0xCF, 0x2C, 0x27, 0x8C,  // >....,'.
                /* 1428 */  0x1B, 0x31, 0x1B, 0x2F, 0xB8, 0xC6, 0xC1, 0x95,  // .1./....
                /* 1430 */  0x93, 0xD0, 0x63, 0x81, 0xB5, 0xC2, 0xA0, 0x0E,  // ..c.....
                /* 1438 */  0x3F, 0xBE, 0x5B, 0xF9, 0x8C, 0xC0, 0x4F, 0x22,  // ?.[...O"
                /* 1440 */  0x86, 0xAF, 0x78, 0xAC, 0x74, 0x06, 0xBE, 0x52,  // ..x.t..R
                /* 1448 */  0xF8, 0x56, 0x4A, 0xC1, 0xF5, 0xFF, 0x3F, 0x72,  // .VJ...?r
                /* 1450 */  0xF9, 0x50, 0xE3, 0x43, 0x3B, 0xFE, 0x7C, 0x81,  // .P.C;.|.
                /* 1458 */  0x0B, 0x30, 0x64, 0x7A, 0xE3, 0x82, 0x71, 0x4D,  // .0dz..qM
                /* 1460 */  0xF1, 0x8D, 0x0B, 0x73, 0x77, 0xF0, 0x80, 0x7C,  // ...sw..|
                /* 1468 */  0xC4, 0x00, 0x3E, 0xAB, 0xF0, 0xC0, 0x70, 0xA7,  // ..>...p.
                /* 1470 */  0x05, 0xDF, 0x05, 0x0D, 0x7A, 0x8E, 0x41, 0x7D,  // ....z.A}
                /* 1478 */  0xE4, 0x39, 0x79, 0xDF, 0x13, 0x1E, 0x27, 0x1C,  // .9y...'.
                /* 1480 */  0xF5, 0x1C, 0x44, 0xC7, 0x06, 0x8E, 0xE3, 0x06,  // ..D.....
                /* 1488 */  0x38, 0x0E, 0x37, 0xB8, 0x83, 0x8E, 0x2F, 0x06,  // 8.7.../.
                /* 1490 */  0xC7, 0x85, 0x39, 0xD5, 0x19, 0xE6, 0x30, 0x7C,  // ..9...0|
                /* 1498 */  0xD3, 0xF1, 0x88, 0x30, 0xE3, 0x7F, 0xC1, 0x35,  // ...0...5
                /* 14A0 */  0x42, 0x40, 0xFC, 0xC5, 0x88, 0x0D, 0x18, 0x8C,  // B@......
                /* 14A8 */  0xF7, 0x52, 0x9F, 0xCD, 0x70, 0x03, 0xF6, 0xD5,  // .R..p...
                /* 14B0 */  0xC1, 0x17, 0x0C, 0x9F, 0x31, 0x8D, 0xFE, 0x02,  // ....1...
                /* 14B8 */  0xF3, 0xAC, 0xE9, 0x63, 0x03, 0x39, 0x9D, 0xD1,  // ...c.9..
                /* 14C0 */  0x01, 0x83, 0x03, 0xD0, 0xFF, 0xFF, 0x01, 0xC3,  // ........
                /* 14C8 */  0x3F, 0x5C, 0x3C, 0xA8, 0x81, 0xE1, 0x9C, 0xE7,  // ?\<.....
                /* 14D0 */  0xE3, 0x82, 0x8F, 0x3D, 0x56, 0x74, 0x5B, 0x45,  // ...=Vt[E
                /* 14D8 */  0x1F, 0xD5, 0x0C, 0x13, 0xC7, 0x10, 0x6F, 0x60,  // ......o`
                /* 14E0 */  0xEC, 0x2E, 0x41, 0x6E, 0x6B, 0x50, 0xEF, 0x12,  // ..AnkP..
                /* 14E8 */  0x9E, 0x03, 0x3F, 0x5B, 0xF8, 0x8C, 0xEA, 0x9B,  // ..?[....
                /* 14F0 */  0x4F, 0x88, 0x53, 0x7D, 0xB4, 0x7A, 0x0F, 0xF0,  // O.S}.z..
                /* 14F8 */  0xD1, 0xE3, 0xBD, 0xCB, 0x67, 0x27, 0x76, 0x11,  // ....g'v.
                /* 1500 */  0xF0, 0x91, 0xCB, 0x38, 0x9E, 0xA6, 0xCF, 0x77,  // ...8...w
                /* 1508 */  0x1E, 0xB2, 0xC1, 0x5E, 0x35, 0x7C, 0x02, 0xF3,  // ...^5|..
                /* 1510 */  0x99, 0x0D, 0x77, 0x8C, 0xF2, 0x4C, 0x3C, 0x7D,  // ..w..L<}
                /* 1518 */  0xDF, 0x41, 0xD8, 0x91, 0xE4, 0x3D, 0xD2, 0x6B,  // .A...=.k
                /* 1520 */  0x7A, 0x44, 0x39, 0xA1, 0x03, 0xF1, 0xAD, 0x0D,  // zD9.....
                /* 1528 */  0x9C, 0xD1, 0xEE, 0x1F, 0xE8, 0x6D, 0x7A, 0x64,  // .....mzd
                /* 1530 */  0x98, 0xA3, 0x01, 0xAC, 0x4B, 0x08, 0xB8, 0xEE,  // ....K...
                /* 1538 */  0x18, 0xBE, 0x84, 0x00, 0x9F, 0xA0, 0x97, 0x08,  // ........
                /* 1540 */  0xC4, 0xFF, 0x7F, 0x74, 0xEC, 0x9A, 0xE1, 0xD1,  // ...t....
                /* 1548 */  0x3D, 0x02, 0x60, 0xAE, 0x18, 0xEC, 0x58, 0xE0,  // =.`...X.
                /* 1550 */  0xC3, 0x86, 0xAF, 0x01, 0xEC, 0x5E, 0xE0, 0x4B,  // .....^.K
                /* 1558 */  0xA4, 0xEF, 0x11, 0xE0, 0x01, 0xF5, 0xF0, 0xE0,  // ........
                /* 1560 */  0xAB, 0xBD, 0x47, 0x80, 0xE2, 0xEC, 0xEC, 0x43,  // ..G....C
                /* 1568 */  0x83, 0x07, 0x6A, 0x55, 0xA7, 0x68, 0x28, 0x87,  // ..jU.h(.
                /* 1570 */  0x68, 0x0E, 0x15, 0x8D, 0xDD, 0x0A, 0xD8, 0xFD,  // h.......
                /* 1578 */  0xD9, 0x37, 0x09, 0xB8, 0x79, 0x66, 0x81, 0x4A,  // .7..yf.J
                /* 1580 */  0x72, 0x93, 0x80, 0x0E, 0xD3, 0xE5, 0x65, 0x86,  // r.....e.
                /* 1588 */  0xCE, 0xFF, 0xC0, 0x7D, 0xAB, 0xF3, 0x08, 0x7D,  // ...}...}
                /* 1590 */  0x88, 0x60, 0x28, 0xEF, 0x79, 0x3E, 0x85, 0xF1,  // .`(.y>..
                /* 1598 */  0x33, 0x84, 0x8F, 0xD0, 0xEC, 0x4C, 0xC1, 0x4F,  // 3....L.O
                /* 15A0 */  0xD3, 0xB8, 0x3B, 0x80, 0x51, 0xDE, 0xAD, 0x3D,  // ..;.Q..=
                /* 15A8 */  0x01, 0x76, 0xC2, 0x36, 0xF2, 0xBB, 0xC1, 0xBB,  // .v.6....
                /* 15B0 */  0x80, 0xA7, 0xEF, 0x7B, 0x11, 0x3F, 0x51, 0x80,  // ...{.?Q.
                /* 15B8 */  0x2F, 0xD8, 0x9D, 0x0E, 0x0A, 0xF4, 0x09, 0x79,  // /......y
                /* 15C0 */  0x44, 0x46, 0xF5, 0x11, 0x81, 0x5F, 0x92, 0xF0,  // DF..._..
                /* 15C8 */  0xFF, 0xFF, 0x23, 0x02, 0x18, 0x8E, 0x24, 0x3E,  // ..#...$>
                /* 15D0 */  0x50, 0x00, 0xA1, 0x7B, 0x01, 0xEA, 0xF4, 0xC1,  // P..{....
                /* 15D8 */  0x51, 0xCF, 0xF8, 0x31, 0xD5, 0x98, 0xEF, 0x56,  // Q..1...V
                /* 15E0 */  0x8F, 0x70, 0x9E, 0x1C, 0xE6, 0x72, 0xC0, 0xE2,  // .p...r..
                /* 15E8 */  0x5C, 0x93, 0x40, 0x75, 0xA0, 0xE7, 0xA3, 0x83,  // \.@u....
                /* 15F0 */  0x7B, 0x6D, 0xC5, 0x0F, 0xEE, 0x9D, 0xE5, 0x9D,  // {m......
                /* 15F8 */  0xCF, 0x50, 0x1E, 0x24, 0xF8, 0xAE, 0xAD, 0xE0,  // .P.$....
                /* 1600 */  0xB8, 0xAA, 0xC1, 0x38, 0xB6, 0xF0, 0x4B, 0x1E,  // ...8..K.
                /* 1608 */  0x70, 0xFF, 0xFF, 0x5F, 0xF2, 0xC0, 0x30, 0x2C,  // p.._..0,
                /* 1610 */  0x2E, 0xF8, 0xEF, 0x61, 0x20, 0x2A, 0x11, 0x06,  // ...a *..
                /* 1618 */  0x45, 0x60, 0x79, 0xF7, 0x56, 0x0A, 0x7F, 0xC8,  // E`y.V...
                /* 1620 */  0x60, 0xBC, 0x29, 0xF0, 0x49, 0x63, 0x47, 0x0D,  // `.).IcG.
                /* 1628 */  0xD8, 0x19, 0x2A, 0xEE, 0xA6, 0x08, 0xD6, 0xA9,  // ..*.....
                /* 1630 */  0x62, 0x86, 0xC0, 0x83, 0x3D, 0x00, 0x7C, 0xBE,  // b...=.|.
                /* 1638 */  0xF2, 0x19, 0x40, 0x51, 0x60, 0x50, 0x17, 0x72,  // ..@Q`P.r
                /* 1640 */  0x38, 0xB7, 0x61, 0x60, 0xF2, 0xFF, 0xBF, 0x0D,  // 8.a`....
                /* 1648 */  0x83, 0x79, 0xC4, 0xB8, 0x4B, 0x21, 0xDC, 0x29,  // .y..K!.)
                /* 1650 */  0xBF, 0xA3, 0xC4, 0x7E, 0x4D, 0xF1, 0xA5, 0xE4,  // ...~M...
                /* 1658 */  0x74, 0x71, 0x38, 0x4F, 0x27, 0xFC, 0x82, 0x0C,  // tq8O'...
                /* 1660 */  0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x6A, 0xCE, 0x2F,  // .,...j./
                /* 1668 */  0xC8, 0xEF, 0xC4, 0x2F, 0x04, 0x8F, 0x49, 0x21,  // .../..I!
                /* 1670 */  0xDE, 0x94, 0x9E, 0x0D, 0x5E, 0x76, 0x62, 0x3C,  // ....^vb<
                /* 1678 */  0x19, 0x3F, 0x23, 0xC7, 0x09, 0xF3, 0xBC, 0xF3,  // .?#.....
                /* 1680 */  0x82, 0x6C, 0x8C, 0xA3, 0x79, 0x4B, 0xF6, 0xDC,  // .l..yK..
                /* 1688 */  0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94, 0xF7, 0x93,  // ..".K...
                /* 1690 */  0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11, 0xF4, 0x05,  // ........
                /* 1698 */  0xD9, 0x27, 0x66, 0xE3, 0xBD, 0x20, 0x33, 0x81,  // .'f.. 3.
                /* 16A0 */  0x6F, 0x05, 0x1D, 0x5C, 0x7C, 0x41, 0x06, 0x58,  // o..\|A.X
                /* 16A8 */  0xF0, 0xFF, 0xBF, 0x20, 0xC3, 0x3C, 0x19, 0x01,  // ... .<..
                /* 16B0 */  0x3E, 0x4F, 0x1C, 0xB8, 0x4B, 0x35, 0xF8, 0x4E,  // >O..K5.N
                /* 16B8 */  0x36, 0x80, 0xB3, 0xA1, 0xFB, 0x64, 0x03, 0x86,  // 6....d..
                /* 16C0 */  0xFF, 0xFF, 0xC9, 0x06, 0xE6, 0x68, 0xE1, 0x1D,  // .....h..
                /* 16C8 */  0x4D, 0x10, 0x27, 0x1B, 0x0A, 0xE4, 0xE0, 0xEB,  // M.'.....
                /* 16D0 */  0xA2, 0x70, 0x3C, 0xF4, 0x49, 0x84, 0x1E, 0x9D,  // .p<.I...
                /* 16D8 */  0x7C, 0x94, 0xC4, 0x9D, 0x19, 0x3C, 0x91, 0x77,  // |....<.w
                /* 16E0 */  0x16, 0x8F, 0xE2, 0x65, 0xD0, 0xF7, 0x82, 0x13,  // ...e....
                /* 16E8 */  0x79, 0x7D, 0xB0, 0x9C, 0x63, 0x24, 0xA8, 0x46,  // y}..c$.F
                /* 16F0 */  0xE2, 0xE3, 0x03, 0xFC, 0xEB, 0x8B, 0x8F, 0x91,  // ........
                /* 16F8 */  0xF0, 0xF9, 0xFC, 0xC3, 0xF2, 0x60, 0x0C, 0xE9,  // .....`..
                /* 1700 */  0x53, 0x24, 0x07, 0x79, 0x76, 0x79, 0x0C, 0xE1,  // S$.yvy..
                /* 1708 */  0x17, 0x48, 0xB8, 0xA7, 0x99, 0x03, 0xC0, 0xC8,  // .H......
                /* 1710 */  0xBA, 0x3C, 0xA2, 0xCF, 0x8E, 0x1C, 0x23, 0xAE,  // .<....#.
                /* 1718 */  0x2F, 0x8A, 0xBE, 0x02, 0xFB, 0x20, 0x70, 0x3E,  // /.... p>
                /* 1720 */  0xCF, 0x89, 0x60, 0x1D, 0x35, 0x3F, 0xDA, 0xF0,  // ..`.5?..
                /* 1728 */  0xF1, 0x73, 0xF0, 0xB7, 0x82, 0x07, 0x4A, 0x1F,  // .s....J.
                /* 1730 */  0x8B, 0x42, 0x3C, 0x22, 0xF1, 0x73, 0x22, 0xB8,  // .B<".s".
                /* 1738 */  0x4C, 0x08, 0xF8, 0xFF, 0x9F, 0x6E, 0x80, 0xC3,  // L....n..
                /* 1740 */  0xA1, 0x17, 0xC6, 0x69, 0x01, 0x37, 0x10, 0x9F,  // ...i.7..
                /* 1748 */  0x29, 0xB1, 0x53, 0x3E, 0x11, 0x76, 0x2E, 0xC1,  // ).S>.v..
                /* 1750 */  0x8C, 0x0E, 0x5C, 0x97, 0x7B, 0x8F, 0x0E, 0xFC,  // ..\.{...
                /* 1758 */  0x27, 0x01, 0x3C, 0xD6, 0xE3, 0x1D, 0xF8, 0x4E,  // '.<....N
                /* 1760 */  0xEA, 0xBE, 0x9B, 0xF8, 0x22, 0xE3, 0x43, 0xD1,  // ....".C.
                /* 1768 */  0xF3, 0x1D, 0x60, 0xEE, 0xFF, 0x7F, 0xBE, 0x03,  // ..`.....
                /* 1770 */  0x16, 0xE1, 0x0E, 0x77, 0xA8, 0x38, 0xE7, 0x3B,  // ...w.8.;
                /* 1778 */  0x80, 0x1A, 0x67, 0xEB, 0xE7, 0x3B, 0xB0, 0x8B,  // ..g..;..
                /* 1780 */  0x3C, 0xDF, 0x01, 0xA1, 0xFF, 0xFF, 0xF9, 0x0E,  // <.......
                /* 1788 */  0x60, 0xE9, 0x19, 0x0D, 0x77, 0xBE, 0x03, 0xDB,  // `...w...
                /* 1790 */  0xD1, 0x06, 0xFE, 0xFF, 0xFF, 0x68, 0x03, 0x98,  // .....h..
                /* 1798 */  0x99, 0xC6, 0xA3, 0x0D, 0xB8, 0x87, 0x0B, 0x7B,  // .......{
                /* 17A0 */  0x18, 0x3C, 0xF0, 0x03, 0x81, 0x1E, 0x0A, 0x1C,  // .<......
                /* 17A8 */  0x11, 0x06, 0x75, 0x4C, 0xF3, 0x91, 0xC1, 0x07,  // ..uL....
                /* 17B0 */  0x05, 0x7E, 0x64, 0xF0, 0x39, 0xE1, 0xF1, 0xE1,  // .~d.9...
                /* 17B8 */  0x50, 0xD9, 0x11, 0xC6, 0x97, 0x10, 0x1F, 0x15,  // P.......
                /* 17C0 */  0x58, 0x14, 0x4A, 0x81, 0xFA, 0x54, 0x02, 0x38,  // X.J..T.8
                /* 17C8 */  0x0A, 0x34, 0x32, 0xF4, 0x28, 0xFE, 0xFF, 0x09,  // .42.(...
                /* 17D0 */  0x8E, 0x0A, 0x77, 0x24, 0x03, 0xCF, 0x3D, 0xC7,  // ..w$..=.
                /* 17D8 */  0x23, 0xF7, 0xC0, 0x80, 0x4F, 0xAC, 0x81, 0xA1,  // #...O...
                /* 17E0 */  0xCF, 0x45, 0x70, 0xC7, 0x06, 0xAE, 0x93, 0x0C,  // .Ep.....
                /* 17E8 */  0x70, 0x18, 0x1B, 0xFE, 0xA8, 0xE7, 0xB1, 0xE1,  // p.......
                /* 17F0 */  0x06, 0xE2, 0xA3, 0xC4, 0x71, 0xBD, 0xEA, 0xF9,  // ....q...
                /* 17F8 */  0xAC, 0x80, 0x03, 0x3F, 0xBB, 0xD7, 0x29, 0x3E,  // ...?..)>
                /* 1800 */  0x3A, 0x70, 0x01, 0xFA, 0x20, 0x00, 0x0C, 0xFF,  // :p.. ...
                /* 1808 */  0xFF, 0xA3, 0xC3, 0x1E, 0xB6, 0x30, 0x63, 0x03,  // .....0c.
                /* 1810 */  0xDB, 0xF1, 0xC7, 0x63, 0x03, 0x3E, 0xF9, 0xCE,  // ...c.>..
                /* 1818 */  0xAF, 0x50, 0xA0, 0x5F, 0x8E, 0x18, 0xE2, 0x2B,  // .P._...+
                /* 1820 */  0x8A, 0x6F, 0x1E, 0x26, 0x98, 0xE5, 0xFC, 0x0A,  // .o.&....
                /* 1828 */  0x9A, 0xA1, 0x19, 0xD4, 0x43, 0x83, 0x7F, 0x66,  // ....C..f
                /* 1830 */  0x24, 0xE7, 0x57, 0xE8, 0x87, 0x55, 0x1F, 0x38,  // $.W..U.8
                /* 1838 */  0xAC, 0x61, 0x10, 0x74, 0x9C, 0x3E, 0xC0, 0xF2,  // .a.t.>..
                /* 1840 */  0x9B, 0xDA, 0xC3, 0x0E, 0x3B, 0xFB, 0x44, 0x48,  // ....;.DH
                /* 1848 */  0xE0, 0x8C, 0x47, 0x58, 0xE8, 0x99, 0xC6, 0x80,  // ..GX....
                /* 1850 */  0x4A, 0x73, 0x4E, 0xA5, 0x27, 0x96, 0x10, 0x27,  // JsN.'..'
                /* 1858 */  0xDA, 0xFB, 0x89, 0x8E, 0x1E, 0x36, 0x7C, 0x51,  // .....6|Q
                /* 1860 */  0xF5, 0x6C, 0x1F, 0x0D, 0x3C, 0x48, 0x9F, 0x38,  // .l..<H.8
                /* 1868 */  0xD8, 0x31, 0xD6, 0x17, 0xA4, 0xE7, 0x18, 0xA3,  // .1......
                /* 1870 */  0xBD, 0x47, 0xF8, 0xBC, 0x13, 0x30, 0x5C, 0x84,  // .G...0\.
                /* 1878 */  0x70, 0xEC, 0xD4, 0xE7, 0x91, 0xF8, 0x2C, 0xEC,  // p.....,.
                /* 1880 */  0x79, 0xFA, 0xC4, 0x83, 0x3D, 0xFA, 0xF0, 0xFF,  // y...=...
                /* 1888 */  0xFF, 0x31, 0x8F, 0x61, 0xFB, 0x3A, 0xC0, 0x46,  // .1.a.:.F
                /* 1890 */  0xE5, 0x83, 0xA9, 0xB1, 0x0D, 0xFA, 0x68, 0xE6,  // ......h.
                /* 1898 */  0x69, 0xB3, 0x4B, 0x28, 0xF8, 0x24, 0x7D, 0x46,  // i.K(.$}F
                /* 18A0 */  0x74, 0x3F, 0xC0, 0x5D, 0x15, 0x7D, 0x21, 0x83,  // t?.].}!.
                /* 18A8 */  0x01, 0x71, 0x22, 0xBE, 0x2D, 0x18, 0xFD, 0x1D,  // .q".-...
                /* 18B0 */  0x81, 0xC5, 0xBE, 0x23, 0x80, 0xEA, 0x3E, 0xC0,  // ...#..>.
                /* 18B8 */  0xEF, 0x08, 0x70, 0xA7, 0xF2, 0x8E, 0x00, 0x06,  // ..p.....
                /* 18C0 */  0x7D, 0x17, 0x02, 0x3A, 0x50, 0xCF, 0xCF, 0x63,  // }..:P..c
                /* 18C8 */  0xF5, 0xD5, 0xF0, 0x25, 0xC1, 0xC7, 0x04, 0x06,  // ...%....
                /* 18D0 */  0xE3, 0x2B, 0xA1, 0x31, 0x0C, 0xE3, 0x91, 0x86,  // .+.1....
                /* 18D8 */  0xF1, 0x41, 0x81, 0xAB, 0x60, 0xD7, 0x41, 0x01,  // .A..`.A.
                /* 18E0 */  0x6E, 0xEA, 0x79, 0xA0, 0xF2, 0x1E, 0x14, 0xA0,  // n.y.....
                /* 18E8 */  0xDC, 0x08, 0xBA, 0xBC, 0x3C, 0xA3, 0xC6, 0xE7,  // ....<...
                /* 18F0 */  0xD3, 0x80, 0x7D, 0x4D, 0x56, 0x30, 0x81, 0x1E,  // ..}MV0..
                /* 18F8 */  0x95, 0x7D, 0xE9, 0x60, 0x83, 0x8B, 0xE2, 0xFB,  // .}.`....
                /* 1900 */  0x24, 0xBB, 0x7B, 0x85, 0x8B, 0x73, 0x26, 0x1E,  // $.{..s&.
                /* 1908 */  0xAC, 0xE1, 0x0C, 0x54, 0x35, 0x1C, 0xB4, 0xAB,  // ...T5...
                /* 1910 */  0xC1, 0x83, 0x00, 0x3B, 0x72, 0x79, 0x5A, 0x46,  // ...;ryZF
                /* 1918 */  0xC4, 0xFE, 0xFF, 0x11, 0x7D, 0xB5, 0x79, 0x79,  // ....}.yy
                /* 1920 */  0xF0, 0x79, 0x32, 0x8E, 0x21, 0x1F, 0x41, 0x7D,  // .y2.!.A}
                /* 1928 */  0x2A, 0xF0, 0x61, 0xCB, 0x37, 0x03, 0x03, 0x3F,  // *.a.7..?
                /* 1930 */  0x28, 0x3C, 0x1F, 0xFB, 0xF8, 0xC0, 0x86, 0xF6,  // (<......
                /* 1938 */  0xB6, 0xE0, 0x09, 0xC4, 0x7A, 0x73, 0x80, 0x71,  // ....zs.q
                /* 1940 */  0x72, 0x00, 0x9F, 0xF6, 0x87, 0x82, 0xAE, 0xCE,  // r.......
                /* 1948 */  0xF8, 0x9B, 0x21, 0x3C, 0xF8, 0x77, 0x00, 0xA6,  // ..!<.w..
                /* 1950 */  0x10, 0x5A, 0x07, 0x07, 0xF0, 0xDC, 0x0C, 0xC1,  // .Z......
                /* 1958 */  0x71, 0xE9, 0x21, 0x07, 0x07, 0xE8, 0x21, 0x2E,  // q.!...!.
                /* 1960 */  0x08, 0xD4, 0xCA, 0x2D, 0x93, 0xDE, 0x55, 0xE0,  // ...-..U.
                /* 1968 */  0x1C, 0x1B, 0x7C, 0x52, 0x4D, 0xD0, 0xDB, 0xB5,  // ..|RM...
                /* 1970 */  0x9D, 0x9E, 0xE0, 0x7D, 0x80, 0xE0, 0xB0, 0x86,  // ...}....
                /* 1978 */  0x78, 0x8E, 0x67, 0xC0, 0xC6, 0x88, 0xEC, 0x63,  // x.g....c
                /* 1980 */  0x04, 0xC3, 0x88, 0x6D, 0x8C, 0xE0, 0xC6, 0x88,  // ...m....
                /* 1988 */  0xEE, 0x63, 0x04, 0x43, 0x2F, 0x1E, 0x47, 0x18,  // .c.C/.G.
                /* 1990 */  0x11, 0x7C, 0x95, 0xE0, 0x5A, 0x4E, 0x21, 0xBA,  // .|..ZN!.
                /* 1998 */  0x4A, 0xC0, 0xCD, 0xBE, 0x32, 0x0D, 0x8D, 0xA7,  // J...2...
                /* 19A0 */  0x26, 0xD1, 0x55, 0x02, 0xC6, 0xC5, 0x1E, 0x73,  // &.U....s
                /* 19A8 */  0x9B, 0xE0, 0xFF, 0xFF, 0xDB, 0x04, 0xF6, 0xE6,  // ........
                /* 19B0 */  0xE2, 0x1B, 0x91, 0x8F, 0x2F, 0xB8, 0x23, 0x0C,  // ..../.#.
                /* 19B8 */  0xBB, 0x9B, 0xFB, 0x7C, 0x8A, 0x39, 0x41, 0xC0,  // ...|.9A.
                /* 19C0 */  0x38, 0x39, 0xE0, 0x0E, 0x11, 0xE0, 0x3A, 0x28,  // 89....:(
                /* 19C8 */  0x30, 0x94, 0x07, 0x1A, 0x8E, 0xC4, 0xE0, 0x5E,  // 0......^
                /* 19D0 */  0x07, 0x22, 0x44, 0x82, 0x31, 0x29, 0x76, 0x0B,  // ."D.1)v.
                /* 19D8 */  0xF4, 0xF1, 0x86, 0x9D, 0x27, 0x3C, 0x2C, 0xDF,  // ....'<,.
                /* 19E0 */  0x30, 0xF8, 0xA5, 0xC7, 0xE3, 0xF1, 0x28, 0x7C,  // 0.....(|
                /* 19E8 */  0x32, 0x64, 0x17, 0xC7, 0x87, 0x08, 0xA3, 0x44,  // 2d.....D
                /* 19F0 */  0x63, 0x27, 0x87, 0x08, 0x27, 0xF7, 0x14, 0xE2,  // c'..'...
                /* 19F8 */  0x33, 0x87, 0xCF, 0x70, 0x98, 0x1B, 0xE4, 0x71,  // 3..p...q
                /* 1A00 */  0x1D, 0x94, 0xAF, 0x97, 0x6C, 0xD8, 0xC6, 0x31,  // ....l..1
                /* 1A08 */  0xEC, 0x73, 0x90, 0x67, 0xE0, 0xB1, 0xC4, 0x3E,  // .s.g...>
                /* 1A10 */  0x20, 0x43, 0xB2, 0x61, 0xB1, 0x21, 0x1A, 0xCF,  //  C.a.!..
                /* 1A18 */  0xE7, 0x1B, 0x86, 0x13, 0xCB, 0xE3, 0xC4, 0x4E,  // .......N
                /* 1A20 */  0x86, 0x61, 0x9F, 0xAD, 0xA7, 0xC1, 0x0F, 0x1A,  // .a......
                /* 1A28 */  0xBE, 0x13, 0x9C, 0x9E, 0x61, 0x5F, 0x24, 0xC2,  // ....a_$.
                /* 1A30 */  0x3C, 0x0E, 0xF8, 0x16, 0x02, 0xFB, 0xA6, 0xF0,  // <.......
                /* 1A38 */  0x78, 0x64, 0x94, 0xF7, 0x14, 0x76, 0x1B, 0x01,  // xd...v..
                /* 1A40 */  0x06, 0x47, 0xCF, 0xC0, 0xB8, 0xFF, 0xFF, 0x59,  // .G.....Y
                /* 1A48 */  0x1F, 0x2E, 0xC4, 0x3B, 0x9B, 0xD1, 0x9F, 0xA7,  // ...;....
                /* 1A50 */  0xCE, 0x99, 0xCD, 0xE1, 0x68, 0x3C, 0x06, 0x1F,  // ....h<..
                /* 1A58 */  0x26, 0x7C, 0x7E, 0x05, 0xDC, 0x0C, 0x8B, 0xCB,  // &|~.....
                /* 1A60 */  0x7E, 0x2E, 0x1A, 0xC8, 0x77, 0x0E, 0x09, 0x85,  // ~...w...
                /* 1A68 */  0x41, 0x1D, 0xEE, 0x7C, 0xAC, 0x07, 0x9C, 0x9C,  // A..|....
                /* 1A70 */  0xE1, 0x61, 0x4F, 0xF9, 0x0D, 0xC6, 0x08, 0xCF,  // .aO.....
                /* 1A78 */  0x2E, 0x81, 0x63, 0x9C, 0xC4, 0x8B, 0xC8, 0x8B,  // ..c.....
                /* 1A80 */  0x8B, 0xD1, 0x63, 0x3D, 0xC3, 0xB3, 0x8B, 0xC2,  // ..c=....
                /* 1A88 */  0x31, 0x84, 0xF2, 0x19, 0x23, 0x44, 0xAC, 0x28,  // 1...#D.(
                /* 1A90 */  0x46, 0x0D, 0xF2, 0xB8, 0x60, 0x90, 0x67, 0x99,  // F...`.g.
                /* 1A98 */  0x08, 0x87, 0x12, 0xD7, 0x78, 0xCF, 0xF0, 0x74,  // ....x..t
                /* 1AA0 */  0xC8, 0xE4, 0xFF, 0x7F, 0xD8, 0xA3, 0xE7, 0x68,  // .......h
                /* 1AA8 */  0x90, 0x1D, 0x1B, 0x00, 0x73, 0xA7, 0x03, 0xDC,  // ....s...
                /* 1AB0 */  0x29, 0x1A, 0x4C, 0x83, 0x85, 0x3D, 0x08, 0x1E,  // ).L..=..
                /* 1AB8 */  0xE7, 0x5A, 0x44, 0x0F, 0x25, 0x0E, 0x00, 0x83,  // .ZD.%...
                /* 1AC0 */  0x3A, 0x43, 0x83, 0x4B, 0x28, 0xB8, 0x46, 0xEF,  // :C.K(.F.
                /* 1AC8 */  0x33, 0x34, 0x30, 0xFD, 0xFF, 0x9F, 0xA1, 0x01,  // 340.....
                /* 1AD0 */  0x16, 0x1E, 0x16, 0x7C, 0xE5, 0xC3, 0x41, 0xFB,  // ...|..A.
                /* 1AD8 */  0x1E, 0xE5, 0xD3, 0x17, 0x9F, 0x86, 0xCF, 0xCF,  // ........
                /* 1AE0 */  0xC0, 0xEA, 0xFF, 0x7F, 0x7C, 0x02, 0x53, 0xB0,  // ....|.S.
                /* 1AE8 */  0x53, 0x05, 0x94, 0x43, 0x80, 0x0F, 0x38, 0x86,  // S..C..8.
                /* 1AF0 */  0x3D, 0xB3, 0xA8, 0x8F, 0x1F, 0x2F, 0x6E, 0xEC,  // =..../n.
                /* 1AF8 */  0x14, 0x00, 0xC6, 0x03, 0x34, 0x70, 0x1A, 0x1C,  // ....4p..
                /* 1B00 */  0x1C, 0xE8, 0x87, 0x3B, 0x4F, 0xC3, 0xD3, 0xF4,  // ...;O...
                /* 1B08 */  0xE0, 0xC0, 0x7C, 0x84, 0x06, 0xC7, 0x21, 0x1E,  // ..|...!.
                /* 1B10 */  0x9C, 0x77, 0x4E, 0xFC, 0x5D, 0xCD, 0xB7, 0x3D,  // .wN.]..=
                /* 1B18 */  0x8F, 0xC7, 0x27, 0x3A, 0xEC, 0xA9, 0x01, 0x8C,  // ..':....
                /* 1B20 */  0x77, 0x5F, 0x58, 0xFF, 0xFF, 0x53, 0x03, 0xD8,  // w_X..S..
                /* 1B28 */  0x03, 0x8E, 0x0E, 0x7D, 0xEC, 0xF6, 0xA9, 0x01,  // ...}....
                /* 1B30 */  0x3B, 0x41, 0xDC, 0x25, 0x03, 0x3F, 0x40, 0xB0,  // ;A.%.?@.
                /* 1B38 */  0xDD, 0x51, 0xC1, 0x31, 0x40, 0xE0, 0x70, 0x72,  // .Q.1@.pr
                /* 1B40 */  0xC0, 0x0E, 0x10, 0x98, 0x0C, 0xCB, 0x03, 0x04,  // ........
                /* 1B48 */  0x3E, 0x2A, 0x9E, 0x1F, 0xBA, 0x89, 0xE3, 0x8F,  // >*......
                /* 1B50 */  0xCE, 0x6C, 0x78, 0xB8, 0xB3, 0x1C, 0xE6, 0x78,  // .lx....x
                /* 1B58 */  0xF5, 0xF2, 0x6A, 0x82, 0x49, 0x6F, 0xC0, 0x88,  // ..j.Io..
                /* 1B60 */  0xFF, 0xFF, 0xF0, 0xC0, 0x60, 0x62, 0x78, 0xA0,  // ....`bx.
                /* 1B68 */  0xC8, 0x7C, 0x03, 0x06, 0x45, 0xC2, 0xA3, 0x12,  // .|..E...
                /* 1B70 */  0x2A, 0xDB, 0x0D, 0x18, 0x08, 0x62, 0x84, 0xF7,  // *....b..
                /* 1B78 */  0xED, 0x9C, 0x0F, 0x85, 0xC1, 0xFB, 0xE6, 0x67,  // .......g
                /* 1B80 */  0x0C, 0xC3, 0xFB, 0x8E, 0xCE, 0x30, 0xC2, 0xFB,  // .....0..
                /* 1B88 */  0xE4, 0x67, 0x0C, 0xC3, 0x1B, 0x23, 0xFC, 0x93,  // .g...#..
                /* 1B90 */  0x3A, 0xC3, 0x88, 0xEE, 0x03, 0x31, 0xBF, 0x43,  // :....1.C
                /* 1B98 */  0xFA, 0x40, 0x0C, 0x57, 0x26, 0xA0, 0x26, 0x6A,  // .@.W&.&j
                /* 1BA0 */  0x43, 0x77, 0x39, 0xC3, 0x08, 0x3F, 0x42, 0xF4,  // Cw9..?B.
                /* 1BA8 */  0x10, 0x99, 0xDF, 0x02, 0x22, 0x1A, 0xE5, 0x48,  // ...."..H
                /* 1BB0 */  0x02, 0x1D, 0x4D, 0x20, 0x7E, 0x48, 0x34, 0x50,  // ..M ~H4P
                /* 1BB8 */  0xA8, 0x40, 0x18, 0xB8, 0x40, 0xC7, 0x13, 0x88,  // .@..@...
                /* 1BC0 */  0xE3, 0x3C, 0x2F, 0x1B, 0x22, 0x10, 0x06, 0x31,  // .</."..1
                /* 1BC8 */  0x50, 0xE8, 0x40, 0x98, 0xB9, 0x1D, 0x04, 0x6E,  // P.@....n
                /* 1BD0 */  0x88, 0xA7, 0x17, 0x08, 0x8B, 0x70, 0x20, 0xB8,  // .....p .
                /* 1BD8 */  0x1B, 0xA3, 0x81, 0x42, 0x06, 0xE2, 0xF8, 0x27,  // ...B...'
                /* 1BE0 */  0xF5, 0xFF, 0x3F, 0x30, 0xDC, 0x74, 0x0E, 0x0A,  // ..?0.t..
                /* 1BE8 */  0x7B, 0x1D, 0xF0, 0x84, 0xB0, 0x48, 0x1E, 0x8D,  // {....H..
                /* 1BF0 */  0x21, 0x71, 0xE7, 0x01, 0xCF, 0x00, 0x77, 0x32,  // !q....w2
                /* 1BF8 */  0xF0, 0x50, 0x8C, 0x8D, 0x9B, 0x32, 0xFE, 0x7C,  // .P...2.|
                /* 1C00 */  0xE0, 0xB9, 0x44, 0xC2, 0xCE, 0x0D, 0x7F, 0x44,  // ..D....D
                /* 1C08 */  0xF0, 0xA0, 0x8C, 0x11, 0x89, 0xDF, 0x11, 0x3C,  // .......<
                /* 1C10 */  0x28, 0xEC, 0x35, 0xC1, 0xA7, 0x00, 0xCF, 0x21,  // (.5....!
                /* 1C18 */  0x12, 0xE6, 0xDC, 0x61, 0xA4, 0x63, 0x88, 0x84,  // ...a.c..
                /* 1C20 */  0x39, 0x02, 0xE0, 0xCF, 0x0A, 0x46, 0xF2, 0xB5,  // 9....F..
                /* 1C28 */  0x00, 0x07, 0x74, 0x62, 0x86, 0xC4, 0x4C, 0xCE,  // ..tb..L.
                /* 1C30 */  0xF7, 0x03, 0x18, 0xD8, 0x1E, 0x0B, 0x06, 0xE5,  // ........
                /* 1C38 */  0xA0, 0xF0, 0x48, 0x31, 0x9F, 0x0C, 0x3C, 0x3A,  // ..H1..<:
                /* 1C40 */  0x0C, 0x4E, 0xEC, 0xC3, 0xF4, 0x6D, 0x00, 0x33,  // .N...m.3
                /* 1C48 */  0x27, 0x63, 0x63, 0x4F, 0xC9, 0x30, 0xAE, 0x2C,  // 'ccO.0.,
                /* 1C50 */  0xC0, 0xE3, 0x60, 0xF1, 0x06, 0xFF, 0xCA, 0x02,  // ..`.....
                /* 1C58 */  0xFB, 0xFF, 0x7F, 0x65, 0x01, 0x97, 0x8A, 0x2B,  // ...e...+
                /* 1C60 */  0x0B, 0x40, 0xE9, 0xFF, 0xFF, 0x95, 0x05, 0x60,  // .@.....`
                /* 1C68 */  0xB4, 0x92, 0x2B, 0x0B, 0xFA, 0x54, 0x08, 0xFB,  // ..+..T..
                /* 1C70 */  0xFF, 0x7F, 0x69, 0x01, 0xFB, 0x95, 0xC5, 0x97,  // ..i.....
                /* 1C78 */  0x16, 0x80, 0xBD, 0xFF, 0xFF, 0x4B, 0x0B, 0xC0,  // .....K..
                /* 1C80 */  0xFB, 0x9B, 0x2E, 0xFF, 0xFF, 0xDF, 0x74, 0x61,  // ......ta
                /* 1C88 */  0x5C, 0x5A, 0xC0, 0x7E, 0x61, 0xF1, 0xA5, 0x05,  // \Z.~a...
                /* 1C90 */  0xE0, 0xEA, 0xFF, 0xFF, 0xD2, 0x02, 0xB0, 0x5E,  // .......^
                /* 1C98 */  0xFF, 0x73, 0x42, 0x97, 0x16, 0xF6, 0xFF, 0xBF,  // .sB.....
                /* 1CA0 */  0xB4, 0xB0, 0x9F, 0x85, 0x8F, 0xEF, 0x30, 0x6E,  // ......0n
                /* 1CA8 */  0x6F, 0xBE, 0x5C, 0x44, 0x69, 0x1E, 0x94, 0xA8,  // o.\Di...
                /* 1CB0 */  0x84, 0xD6, 0x8D, 0x05, 0x3C, 0x36, 0x6E, 0x2C,  // ....<6n,
                /* 1CB8 */  0xA0, 0x90, 0x79, 0x63, 0x01, 0xC5, 0x58, 0x7C,  // ..yc..X|
                /* 1CC0 */  0xF2, 0xF0, 0x70, 0x2C, 0xE7, 0xC6, 0x02, 0xE5,  // ..p,....
                /* 1CC8 */  0x2C, 0xC2, 0xF5, 0x8F, 0x01, 0x75, 0x16, 0x81,  // ,....u..
                /* 1CD0 */  0xA3, 0x77, 0x08, 0xA8, 0x89, 0xBE, 0x29, 0xF0,  // .w....).
                /* 1CD8 */  0x93, 0x00, 0xF6, 0xB8, 0x81, 0x3B, 0x61, 0x60,  // .....;a`
                /* 1CE0 */  0xF1, 0x70, 0xF7, 0x01, 0x60, 0x76, 0x36, 0xC6,  // .p..`v6.
                /* 1CE8 */  0xDF, 0x07, 0xC0, 0xAC, 0xE3, 0x3E, 0x00, 0xAA,  // .....>..
                /* 1CF0 */  0xFF, 0xFF, 0x7D, 0x00, 0x30, 0x9E, 0xE1, 0x3E,  // ..}.0..>
                /* 1CF8 */  0x80, 0x9E, 0xA9, 0x0F, 0x9E, 0x30, 0x6F, 0x04,  // .....0o.
                /* 1D00 */  0x60, 0xF6, 0x71, 0x23, 0x00, 0x24, 0xFD, 0xFF,  // `.q#.$..
                /* 1D08 */  0x6F, 0x04, 0x80, 0x8B, 0x53, 0x1D, 0xCC, 0x1B,  // o...S...
                /* 1D10 */  0x01, 0x98, 0xC7, 0xE4, 0x1B, 0x01, 0xC0, 0x8C,  // ........
                /* 1D18 */  0x60, 0x02, 0xFE, 0xFF, 0x37, 0x02, 0xEC, 0x34,  // `...7..4
                /* 1D20 */  0x0D, 0x7D, 0x72, 0x21, 0x2B, 0x1C, 0x85, 0x26,  // .}r!+..&
                /* 1D28 */  0xE2, 0x2B, 0x80, 0x67, 0xD2, 0xF5, 0x44, 0x68,  // .+.g..Dh
                /* 1D30 */  0x80, 0xCB, 0x00, 0xBD, 0x0E, 0x80, 0xC3, 0xC8,  // ........
                /* 1D38 */  0x75, 0x00, 0x14, 0x83, 0x03, 0x5F, 0xC8, 0xC1,  // u...._..
                /* 1D40 */  0xA1, 0x8F, 0x85, 0x9E, 0x99, 0x15, 0x0B, 0xF0,  // ........
                /* 1D48 */  0x8D, 0xA0, 0xD3, 0x03, 0x33, 0x8E, 0x4D, 0xA6,  // ....3.M.
                /* 1D50 */  0xE2, 0xA1, 0x34, 0x78, 0x4B, 0xD1, 0x19, 0x93,  // ..4xK...
                /* 1D58 */  0x4D, 0xA3, 0xE8, 0x61, 0x12, 0xCF, 0x38, 0x1A,  // M..a..8.
                /* 1D60 */  0x22, 0xD8, 0x94, 0x0C, 0x11, 0x28, 0xC5, 0x1C,  // "....(..
                /* 1D68 */  0x22, 0xFA, 0x08, 0xE9, 0xCB, 0x40, 0xE8, 0x3E,  // "....@.>
                /* 1D70 */  0x05, 0x38, 0x3D, 0x10, 0x50, 0x91, 0x18, 0x64,  // .8=.P..d
                /* 1D78 */  0x22, 0xCF, 0x0F, 0xA7, 0xF2, 0x5E, 0x83, 0x1D,  // "....^..
                /* 1D80 */  0x65, 0xC7, 0x18, 0x1A, 0xC4, 0xC1, 0x06, 0x4C,  // e......L
                /* 1D88 */  0xE0, 0x31, 0x82, 0x6B, 0x34, 0x1E, 0x23, 0xF6,  // .1.k4.#.
                /* 1D90 */  0xFF, 0x7F, 0x2A, 0x00, 0x56, 0x63, 0xE4, 0xD8,  // ..*.Vc..
                /* 1D98 */  0x67, 0x76, 0x8A, 0xE0, 0x19, 0x22, 0xB8, 0xC0,  // gv..."..
                /* 1DA0 */  0x3C, 0x44, 0xE0, 0x73, 0x22, 0x30, 0x30, 0x6E,  // <D.s"00n
                /* 1DA8 */  0x8C, 0xF6, 0x2B, 0x00, 0x21, 0xF8, 0x83, 0xCB,  // ..+.!...
                /* 1DB0 */  0xA9, 0x1D, 0x63, 0x84, 0x04, 0xC7, 0x18, 0x3E,  // ..c....>
                /* 1DB8 */  0xD2, 0x79, 0x86, 0x0F, 0x1E, 0xE1, 0xF0, 0xD8,  // .y......
                /* 1DC0 */  0x31, 0x22, 0x38, 0x46, 0x0C, 0x38, 0x4A, 0x27,  // 1"8F.8J'
                /* 1DC8 */  0xB6, 0x06, 0x73, 0x2A, 0xC1, 0x43, 0x47, 0x39,  // ..s*.CG9
                /* 1DD0 */  0x83, 0xA3, 0xB1, 0x5C, 0x04, 0x1D, 0x5D, 0x42,  // ...\..]B
                /* 1DD8 */  0x1C, 0xDB, 0xC3, 0x05, 0x43, 0x39, 0x09, 0x63,  // ....C9.c
                /* 1DE0 */  0x3C, 0x0D, 0xFB, 0x26, 0x12, 0x28, 0xD8, 0x69,  // <..&.(.i
                /* 1DE8 */  0x9C, 0xEB, 0x03, 0x0F, 0x3B, 0x60, 0xF8, 0x08,  // ....;`..
                /* 1DF0 */  0xC0, 0x09, 0x7C, 0x0C, 0xF0, 0xB0, 0xF9, 0xD1,  // ..|.....
                /* 1DF8 */  0xC4, 0x03, 0x83, 0xA1, 0x11, 0x85, 0x78, 0x04,  // ......x.
                /* 1E00 */  0xA6, 0x02, 0x87, 0x85, 0x3A, 0xCB, 0x9A, 0xC0,  // ....:...
                /* 1E08 */  0x22, 0xBE, 0x33, 0x12, 0x06, 0x83, 0x7A, 0x36,  // ".3...z6
                /* 1E10 */  0xFF, 0xFF, 0x8F, 0x81, 0x1D, 0x01, 0x38, 0xB0,  // ......8.
                /* 1E18 */  0x0F, 0x03, 0x67, 0x77, 0x36, 0x4F, 0x00, 0x4C,  // ..gw6O.L
                /* 1E20 */  0x12, 0x1C, 0x6A, 0xD4, 0x3E, 0x0F, 0xBC, 0x10,  // ..j.>...
                /* 1E28 */  0x1D, 0xD7, 0x9B, 0xC0, 0x4B, 0x81, 0xCF, 0x07,  // ....K...
                /* 1E30 */  0x21, 0xD9, 0x25, 0xE0, 0x50, 0x30, 0xC7, 0x02,  // !.%.P0..
                /* 1E38 */  0x0F, 0xF2, 0x3C, 0x7D, 0xAA, 0x89, 0x78, 0x80,  // ..<}..x.
                /* 1E40 */  0xAF, 0x23, 0x26, 0x30, 0x14, 0xFE, 0x04, 0xE0,  // .#&0....
                /* 1E48 */  0x69, 0xB2, 0xBB, 0x34, 0xE6, 0xD8, 0xE0, 0x51,  // i..4...Q
                /* 1E50 */  0xBC, 0x97, 0xF8, 0xFC, 0xAB, 0x51, 0xA0, 0xCE,  // .....Q..
                /* 1E58 */  0x09, 0x1E, 0x65, 0xAB, 0xD7, 0x05, 0x4A, 0xD0,  // ..e...J.
                /* 1E60 */  0xFD, 0xE5, 0x40, 0xC7, 0x9E, 0x43, 0x8D, 0x10,  // ..@..C..
                /* 1E68 */  0xE4, 0x2D, 0xC0, 0x47, 0x85, 0xB6, 0xAE, 0x3E,  // .-.G...>
                /* 1E70 */  0x02, 0x89, 0x70, 0xC0, 0x51, 0xCE, 0xFC, 0x08,  // ..p.Q...
                /* 1E78 */  0x22, 0x9C, 0x42, 0x94, 0x80, 0x2F, 0x09, 0x11,  // ".B../..
                /* 1E80 */  0x62, 0x45, 0xF1, 0x29, 0x34, 0x72, 0xDC, 0x48,  // bE.)4r.H
                /* 1E88 */  0xBE, 0x2A, 0xFB, 0x0A, 0xE4, 0x31, 0xC4, 0x69,  // .*...1.i
                /* 1E90 */  0xFF, 0x9A, 0xC4, 0x86, 0x4C, 0x07, 0x8F, 0x3B,  // ....L..;
                /* 1E98 */  0x30, 0xC0, 0x9D, 0x1E, 0x3F, 0x32, 0x00, 0xAE,  // 0...?2..
                /* 1EA0 */  0xA6, 0xEF, 0x71, 0x71, 0x68, 0x1C, 0xE2, 0xFF,  // ..qqh...
                /* 1EA8 */  0xFF, 0x31, 0xE0, 0x9D, 0xC3, 0xC7, 0x9F, 0x33,  // .1.....3
                /* 1EB0 */  0xC5, 0x1D, 0x35, 0x60, 0x0D, 0x80, 0xAB, 0x5E,  // ..5`...^
                /* 1EB8 */  0x80, 0xCF, 0x52, 0x54, 0xD0, 0x17, 0xCB, 0x30,  // ..RT...0
                /* 1EC0 */  0x94, 0xC5, 0xE7, 0x13, 0x1F, 0x1E, 0xF8, 0x99,  // ........
                /* 1EC8 */  0xC1, 0x47, 0x82, 0xD7, 0xA2, 0x83, 0x64, 0xE7,  // .G....d.
                /* 1ED0 */  0x04, 0x83, 0x3C, 0x97, 0xF0, 0xE0, 0x23, 0xA4,  // ..<...#.
                /* 1ED8 */  0xD7, 0x31, 0x72, 0x1A, 0x01, 0xE1, 0xE9, 0x01,  // .1r.....
                /* 1EE0 */  0xD6, 0x81, 0x00, 0x70, 0xA3, 0xCD, 0xCD, 0x49,  // ...p...I
                /* 1EE8 */  0x82, 0x45, 0x5F, 0xB7, 0x6C, 0xDC, 0xDB, 0xE8,  // .E_.l...
                /* 1EF0 */  0x39, 0xC4, 0x02, 0x81, 0x84, 0xF9, 0x26, 0xE6,  // 9.....&.
                /* 1EF8 */  0xF3, 0x1E, 0xF6, 0xA4, 0x84, 0x97, 0x03, 0xAA,  // ........
                /* 1F00 */  0x83, 0x80, 0xBF, 0x27, 0x16, 0x02, 0xA3, 0xCC,  // ...'....
                /* 1F08 */  0x4B, 0xD5, 0x70, 0x0C, 0xE7, 0x94, 0x30, 0x82,  // K.p...0.
                /* 1F10 */  0x33, 0x88, 0x3D, 0x80, 0x28, 0xD7, 0x90, 0x51,  // 3.=.(..Q
                /* 1F18 */  0x90, 0x56, 0x01, 0xA2, 0x11, 0x3F, 0x9D, 0x78,  // .V...?.x
                /* 1F20 */  0xE8, 0x0E, 0x02, 0xA1, 0x29, 0x79, 0xE2, 0xBE,  // ....)y..
                /* 1F28 */  0x1A, 0xF8, 0xFF, 0x4F, 0x60, 0x0D, 0x10, 0x3A,  // ...O`..:
                /* 1F30 */  0xF3, 0x18, 0xD8, 0xF7, 0x21, 0x18, 0x77, 0x16,  // ....!.w.
                /* 1F38 */  0xDF, 0x87, 0xB0, 0x73, 0xB1, 0x1A, 0x50, 0xD4,  // ...s..P.
                /* 1F40 */  0x00, 0x8C, 0x86, 0x39, 0xF2, 0xF9, 0x38, 0x04,  // ...9..8.
                /* 1F48 */  0xF7, 0x20, 0xC0, 0x06, 0xE3, 0x33, 0xD9, 0x0B,  // . ...3..
                /* 1F50 */  0x1D, 0x9B, 0x1B, 0xEE, 0xAE, 0xE2, 0xD3, 0x1F,  // ........
                /* 1F58 */  0x66, 0x70, 0xC0, 0x62, 0xF6, 0x1E, 0x1C, 0x2C,  // fp.b...,
                /* 1F60 */  0x34, 0x0F, 0x0E, 0x6C, 0x01, 0x2F, 0x7F, 0x50,  // 4..l./.P
                /* 1F68 */  0xAE, 0x96, 0x38, 0xE4, 0x07, 0x1F, 0xDF, 0x36,  // ..8....6
                /* 1F70 */  0xDE, 0xB5, 0x7C, 0xA6, 0xF2, 0x00, 0x81, 0x03,  // ..|.....
                /* 1F78 */  0xA0, 0x07, 0x08, 0x0B, 0xC9, 0x03, 0x84, 0x7F,  // ........
                /* 1F80 */  0xD4, 0xC2, 0x6A, 0x59, 0x93, 0x06, 0x88, 0xFB,  // ..jY....
                /* 1F88 */  0xFF, 0xEB, 0x19, 0x20, 0xFA, 0x1C, 0x82, 0xB9,  // ... ....
                /* 1F90 */  0x1B, 0xBD, 0x11, 0x98, 0x60, 0xE4, 0x95, 0x68,  // ....`..h
                /* 1F98 */  0x32, 0x9E, 0x20, 0xB8, 0x27, 0xEC, 0xC8, 0xD7,  // 2. .'...
                /* 1FA0 */  0x4E, 0xD4, 0x29, 0xD0, 0x37, 0x51, 0x18, 0x09,  // N.).7Q..
                /* 1FA8 */  0x2F, 0x10, 0x94, 0xD2, 0xD9, 0x4E, 0xA2, 0x50,  // /....N.P
                /* 1FB0 */  0xAE, 0x23, 0x3E, 0x22, 0xBD, 0x83, 0xE8, 0xDC,  // .#>"....
                /* 1FB8 */  0x49, 0x2E, 0x67, 0xEC, 0x8E, 0xF4, 0xDA, 0xC9,  // I.g.....
                /* 1FC0 */  0x30, 0x0C, 0x6B, 0x88, 0xB8, 0xC6, 0x08, 0x6C,  // 0.k....l
                /* 1FC8 */  0x8C, 0xC8, 0xC6, 0x08, 0x6D, 0x8C, 0xD8, 0xC6,  // ....m...
                /* 1FD0 */  0x08, 0x6E, 0x8C, 0xE8, 0xBE, 0x32, 0x79, 0x1C,  // .n...2y.
                /* 1FD8 */  0x86, 0x37, 0xC6, 0xA1, 0x30, 0x78, 0x43, 0x84,  // .7..0xC.
                /* 1FE0 */  0x37, 0x46, 0x78, 0xDF, 0x4B, 0x8D, 0x61, 0x78,  // 7Fx.K.ax
                /* 1FE8 */  0x63, 0x84, 0x37, 0x46, 0x78, 0x63, 0x84, 0x8F,  // c.7Fxc..
                /* 1FF0 */  0x19, 0xDD, 0x18, 0xD1, 0x7D, 0x5F, 0xE5, 0xB2,  // ....}_..
                /* 1FF8 */  0x1F, 0x11, 0xBA, 0xAF, 0xC2, 0x3D, 0x92, 0x79,  // .....=.y
                /* 2000 */  0xA2, 0x36, 0x74, 0x5E, 0x31, 0x8C, 0xF0, 0x23,  // .6t^1..#
                /* 2008 */  0x44, 0x0F, 0xF1, 0x94, 0xCA, 0x51, 0x8E, 0x24,  // D....Q.$
                /* 2010 */  0xD0, 0xD1, 0x04, 0xE2, 0x23, 0x3A, 0x8F, 0x40,  // ....#:.@
                /* 2018 */  0xA1, 0x02, 0x61, 0xE0, 0x02, 0x1D, 0xCF, 0xC3,  // ..a.....
                /* 2020 */  0x2B, 0x0E, 0xE8, 0x01, 0x16, 0x87, 0x18, 0x28,  // +......(
                /* 2028 */  0x74, 0x20, 0xCC, 0xDC, 0x0E, 0x02, 0x37, 0xC4,  // t ....7.
                /* 2030 */  0xD3, 0x0B, 0x84, 0xFD, 0xFF, 0x23, 0x1C, 0x08,  // .....#..
                /* 2038 */  0xEE, 0x32, 0x6B, 0xA0, 0x90, 0x81, 0x38, 0xFE,  // .2k...8.
                /* 2040 */  0x81, 0x61, 0xCF, 0x5F, 0x06, 0xC6, 0x9D, 0x6A,  // .a._...j
                /* 2048 */  0xD9, 0x84, 0x70, 0x48, 0x1E, 0x8D, 0x21, 0x71,  // ..pH..!q
                /* 2050 */  0xE7, 0x01, 0xCF, 0x00, 0x77, 0x32, 0xF0, 0x50,  // ....w2.P
                /* 2058 */  0x8C, 0x8D, 0x9B, 0x32, 0xFE, 0x7C, 0xE0, 0xB9,  // ...2.|..
                /* 2060 */  0x44, 0xC2, 0xCE, 0x0D, 0x7F, 0x44, 0xF0, 0xA0,  // D....D..
                /* 2068 */  0x8C, 0x11, 0x89, 0xDF, 0x11, 0x3C, 0x28, 0xEC,  // .....<(.
                /* 2070 */  0x35, 0xC1, 0xA7, 0x00, 0xCF, 0x21, 0x12, 0xE6,  // 5....!..
                /* 2078 */  0xCA, 0x61, 0xA4, 0x63, 0x88, 0x84, 0x39, 0x02,  // .a.c..9.
                /* 2080 */  0xE0, 0xCF, 0x0A, 0x46, 0xF2, 0xB5, 0x00, 0x07,  // ...F....
                /* 2088 */  0x74, 0x62, 0x86, 0xC4, 0x4C, 0xCE, 0xF7, 0x03,  // tb..L...
                /* 2090 */  0x18, 0xD8, 0x1E, 0x0B, 0x06, 0xE5, 0xA0, 0xF0,  // ........
                /* 2098 */  0x48, 0x31, 0x9F, 0x0C, 0x3C, 0x3A, 0x0C, 0x4E,  // H1..<:.N
                /* 20A0 */  0xEC, 0xC3, 0xF4, 0x6D, 0x00, 0x73, 0x63, 0x66,  // ...m.scf
                /* 20A8 */  0xD8, 0xB8, 0xB3, 0x32, 0x9C, 0xEB, 0x8C, 0x8F,  // ...2....
                /* 20B0 */  0x23, 0xFC, 0xC0, 0xE2, 0x83, 0x1F, 0x3F, 0x8B,  // #.....?.
                /* 20B8 */  0xF8, 0xBC, 0x09, 0xA6, 0xFF, 0xFF, 0x79, 0x93,  // ......y.
                /* 20C0 */  0xE5, 0xB8, 0x93, 0xA3, 0xCF, 0x2A, 0x3E, 0x90,  // .....*>.
                /* 20C8 */  0xC3, 0x53, 0x0C, 0xAB, 0x03, 0x8B, 0x8F, 0x8F,  // .S......
                /* 20D0 */  0xF8, 0x43, 0x0B, 0x3B, 0xA8, 0xB1, 0x53, 0x0B,  // .C.;..S.
                /* 20D8 */  0x38, 0x2E, 0xDC, 0xBE, 0x8E, 0x03, 0x26, 0xEF,  // 8.....&.
                /* 20E0 */  0x04, 0xF0, 0xE6, 0xE2, 0x3B, 0x01, 0xF8, 0x4E,  // ....;..N
                /* 20E8 */  0x52, 0x3E, 0x75, 0xE1, 0x6E, 0xA1, 0xEC, 0x48,  // R>u.n..H
                /* 20F0 */  0x6E, 0x84, 0xDE, 0x4F, 0x6D, 0x1A, 0xCE, 0xD1,  // n..Om...
                /* 20F8 */  0xB0, 0x30, 0x77, 0x05, 0x7A, 0x25, 0x00, 0xF7,  // .0w.z%..
                /* 2100 */  0xFF, 0x7F, 0x66, 0xBE, 0x23, 0xF0, 0x01, 0xC2,  // ..f.#...
                /* 2108 */  0x81, 0xF3, 0x00, 0xE1, 0x5F, 0xBC, 0xB0, 0x57,  // ...._..W
                /* 2110 */  0x50, 0xB0, 0x00, 0xF9, 0x50, 0xE8, 0x33, 0xC0,  // P...P.3.
                /* 2118 */  0x7B, 0x21, 0x9B, 0xC3, 0x1B, 0xA5, 0x2F, 0x7F,  // {!..../.
                /* 2120 */  0x0C, 0x9E, 0x6B, 0xBA, 0xF8, 0xE8, 0xA6, 0xC7,  // ..k.....
                /* 2128 */  0x55, 0x5C, 0x7F, 0x28, 0x88, 0x6F, 0x67, 0x4E,  // U\.(.ogN
                /* 2130 */  0x78, 0xB9, 0x40, 0x0F, 0xC5, 0x87, 0x7B, 0x76,  // x.@...{v
                /* 2138 */  0x04, 0xF4, 0x80, 0x59, 0x1E, 0x48, 0xDD, 0x1E,  // ...Y.H..
                /* 2140 */  0xF8, 0xC0, 0x71, 0x17, 0x80, 0x67, 0x48, 0x0F,  // ..q..gH.
                /* 2148 */  0x9C, 0x8D, 0xE8, 0x85, 0x02, 0x0C, 0xB2, 0xAE,  // ........
                /* 2150 */  0x0F, 0xF4, 0x1E, 0x68, 0x56, 0x1F, 0xAB, 0xE0,  // ...hV...
                /* 2158 */  0xE6, 0xBD, 0x51, 0x40, 0xCF, 0x37, 0x06, 0x54,  // ..Q@.7.T
                /* 2160 */  0x32, 0x08, 0x4D, 0x36, 0xDC, 0xCB, 0xAD, 0x01,  // 2.M6....
                /* 2168 */  0x8D, 0xE8, 0xAB, 0xE1, 0x43, 0xA5, 0x17, 0x10,  // ....C...
                /* 2170 */  0xCC, 0xF3, 0x89, 0xF0, 0xAE, 0xE0, 0x13, 0x25,  // .......%
                /* 2178 */  0x23, 0x78, 0x36, 0x7D, 0xAF, 0xF4, 0xA9, 0xC4,  // #x6}....
                /* 2180 */  0xC0, 0xEF, 0x02, 0xCF, 0x9B, 0x21, 0x82, 0x19,  // .....!..
                /* 2188 */  0xF6, 0xF4, 0x5F, 0x1F, 0x8D, 0xEA, 0x3B, 0xB1,  // .._...;.
                /* 2190 */  0xB1, 0x5E, 0x15, 0x3D, 0x52, 0x7E, 0xA6, 0x3C,  // .^.=R~.<
                /* 2198 */  0xA0, 0x48, 0xEF, 0x74, 0xFC, 0x9E, 0xE6, 0x63,  // .H.t...c
                /* 21A0 */  0x1A, 0xBB, 0x12, 0x1B, 0xFD, 0x7C, 0xFF, 0xFF,  // .....|..
                /* 21A8 */  0x61, 0x9E, 0x4B, 0x8D, 0xEC, 0xDB, 0x1A, 0x23,  // a.K....#
                /* 21B0 */  0x78, 0x9E, 0xF4, 0xA0, 0x38, 0xE2, 0xEB, 0x8A,  // x...8...
                /* 21B8 */  0xA1, 0x4F, 0x85, 0xDD, 0x1C, 0x60, 0x9E, 0x58,  // .O...`.X
                /* 21C0 */  0xF9, 0x4D, 0x03, 0x5C, 0x37, 0x07, 0xE0, 0x11,  // .M.\7...
                /* 21C8 */  0xE8, 0xC6, 0x41, 0x6F, 0x06, 0x1E, 0x17, 0x3F,  // ..Ao...?
                /* 21D0 */  0xE0, 0xF8, 0xF8, 0xCE, 0xB0, 0x4F, 0xD3, 0xE7,  // .....O..
                /* 21D8 */  0xD6, 0x83, 0x3E, 0xC0, 0x27, 0x4B, 0x0C, 0xAC,  // ..>.'K..
                /* 21E0 */  0x2F, 0x0D, 0x1C, 0xD6, 0x68, 0x61, 0x1F, 0x03,  // /...ha..
                /* 21E8 */  0xCE, 0xDC, 0xB7, 0x55, 0xDC, 0xC5, 0x81, 0x1D,  // ...U....
                /* 21F0 */  0xE5, 0xE1, 0x03, 0xE2, 0x2F, 0x26, 0xCF, 0x1C,  // ..../&..
                /* 21F8 */  0x9E, 0x80, 0x01, 0x59, 0x80, 0x0F, 0x85, 0x4E,  // ...Y...N
                /* 2200 */  0xAB, 0x9C, 0xC3, 0x31, 0xD7, 0xA6, 0xD3, 0x2A,  // ...1...*
                /* 2208 */  0x3B, 0x3B, 0xE2, 0x90, 0x1E, 0x4A, 0x8C, 0xCD,  // ;;...J..
                /* 2210 */  0x08, 0xC6, 0x82, 0xD4, 0x61, 0x95, 0x07, 0x82,  // ....a...
                /* 2218 */  0x91, 0xF6, 0x2B, 0x07, 0x4A, 0xED, 0x95, 0x83,  // ..+.J...
                /* 2220 */  0x82, 0x78, 0xB8, 0xBE, 0x80, 0xFA, 0xCA, 0x81,  // .x......
                /* 2228 */  0xBB, 0x80, 0x82, 0xED, 0xFF, 0x7F, 0x59, 0x05,  // ......Y.
                /* 2230 */  0x8E, 0xD7, 0x05, 0xEC, 0xC1, 0x16, 0x18, 0x1E,  // ........
                /* 2238 */  0x56, 0x81, 0xCB, 0x91, 0xD2, 0x73, 0xC3, 0x5D,  // V....s.]
                /* 2240 */  0x2F, 0x7D, 0x26, 0x82, 0x71, 0x53, 0x05, 0x0C,  // /}&.qS..
                /* 2248 */  0xCC, 0x0E, 0xAB, 0xEF, 0x1C, 0x02, 0xA2, 0xFF,  // ........
                /* 2250 */  0xFF, 0x39, 0x04, 0xCE, 0x81, 0x08, 0xE0, 0xFA,  // .9......
                /* 2258 */  0xFF, 0xFF, 0x40, 0x04, 0x8C, 0xEF, 0x0F, 0x3E,  // ..@....>
                /* 2260 */  0x10, 0x01, 0xD7, 0xA8, 0xEB, 0xD2, 0x81, 0x88,  // ........
                /* 2268 */  0x4B, 0xBA, 0x40, 0xF8, 0x40, 0x84, 0x50, 0x78,  // K.@.@.Px
                /* 2270 */  0x32, 0x20, 0x08, 0xC7, 0x75, 0x32, 0x8F, 0x02,  // 2 ..u2..
                /* 2278 */  0xBE, 0x24, 0x1C, 0x46, 0xA4, 0x33, 0x8A, 0xF4,  // .$.F.3..
                /* 2280 */  0xCA, 0xE0, 0xF8, 0x6B, 0xD4, 0x89, 0x88, 0x07,  // ...k....
                /* 2288 */  0x87, 0x51, 0x46, 0x1A, 0xDD, 0x39, 0x78, 0x2A,  // .QF..9x*
                /* 2290 */  0x18, 0xC1, 0x19, 0xC4, 0xA3, 0xF5, 0x29, 0x07,  // ......).
                /* 2298 */  0x18, 0x5E, 0x88, 0xC0, 0x7E, 0xCA, 0x81, 0xF9,  // .^..~...
                /* 22A0 */  0xFF, 0x3F, 0xE5, 0x00, 0xBB, 0x2B, 0x11, 0x70,  // .?...+.p
                /* 22A8 */  0x39, 0xE5, 0x00, 0xAC, 0xFA, 0xFF, 0x9F, 0x72,  // 9......r
                /* 22B0 */  0x00, 0x16, 0x41, 0xFA, 0x94, 0x03, 0x5C, 0x33,  // ..A...\3
                /* 22B8 */  0x9F, 0x72, 0x50, 0xF2, 0x6E, 0x0F, 0x3E, 0xE5,  // .rP.n.>.
                /* 22C0 */  0xA0, 0x86, 0xD3, 0x27, 0x8C, 0x66, 0x79, 0x5E,  // ...'.fy^
                /* 22C8 */  0x45, 0x8E, 0x42, 0xC3, 0x39, 0x8B, 0x23, 0xF2,  // E.B.9.#.
                /* 22D0 */  0x41, 0x07, 0x7B, 0x28, 0x30, 0xC6, 0x49, 0x84,  // A.{(0.I.
                /* 22D8 */  0xFC, 0xFF, 0xBF, 0x65, 0xB0, 0xEC, 0x67, 0x1D,  // ...e..g.
                /* 22E0 */  0x54, 0x6A, 0x18, 0x05, 0x3C, 0xEB, 0xA0, 0x22,  // Tj..<.."
                /* 22E8 */  0x9D, 0x75, 0x28, 0x88, 0x87, 0xEA, 0xC3, 0x24,  // .u(....$
                /* 22F0 */  0xC0, 0xAE, 0x9B, 0x0E, 0xF0, 0xFD, 0xFF, 0xDF,  // ........
                /* 22F8 */  0x74, 0x00, 0xFE, 0xFF, 0xFF, 0x6F, 0x3A, 0xE0,  // t....o:.
                /* 2300 */  0x82, 0xE5, 0x37, 0x1D, 0xE0, 0x19, 0x65, 0x55,  // ..7...eU
                /* 2308 */  0x54, 0xC4, 0x6F, 0x41, 0xE2, 0x61, 0x50, 0x43,  // T.oA.aPC
                /* 2310 */  0xF2, 0xB5, 0x02, 0x7F, 0x2C, 0x61, 0xE0, 0xEC,  // ....,a..
                /* 2318 */  0xA6, 0x68, 0x38, 0x3E, 0x70, 0x8F, 0xAF, 0xF9,  // .h8>p...
                /* 2320 */  0xAB, 0x38, 0x99, 0xA5, 0x0F, 0x06, 0x21, 0xD9,  // .8....!.
                /* 2328 */  0xA0, 0x0F, 0x19, 0x73, 0xBF, 0xF0, 0xD8, 0x1F,  // ...s....
                /* 2330 */  0x19, 0x7C, 0x51, 0x78, 0x4F, 0xF0, 0x1D, 0x81,  // .|QxO...
                /* 2338 */  0x41, 0xC1, 0xB8, 0x04, 0xBC, 0x07, 0xF1, 0x3B,  // A......;
                /* 2340 */  0x83, 0x6F, 0x0B, 0xEC, 0x14, 0xE4, 0xD3, 0x82,  // .o......
                /* 2348 */  0x09, 0x3C, 0xE3, 0xA3, 0xC0, 0x0C, 0xD2, 0x1E,  // .<......
                /* 2350 */  0x8F, 0x13, 0x3A, 0x2A, 0x70, 0xF7, 0x02, 0xC4,  // ..:*p...
                /* 2358 */  0xDD, 0x0F, 0x74, 0x31, 0x78, 0xD7, 0x78, 0xDA,  // ..t1x.x.
                /* 2360 */  0x68, 0x0E, 0x41, 0xA7, 0x85, 0xB6, 0xD0, 0x34,  // h.A....4
                /* 2368 */  0x88, 0x28, 0x8F, 0x12, 0x51, 0x42, 0x9D, 0xC1,  // .(..QB..
                /* 2370 */  0x83, 0x91, 0x51, 0x02, 0x3D, 0x78, 0xC4, 0x7A,  // ..Q.=x.z
                /* 2378 */  0x36, 0x88, 0x12, 0xA4, 0x37, 0x5C, 0x41, 0x06,  // 6...7\A.
                /* 2380 */  0x8F, 0xF7, 0xBA, 0x10, 0xE3, 0xC9, 0xE3, 0x15,  // ........
                /* 2388 */  0xE1, 0x00, 0xC2, 0xB4, 0x3F, 0x08, 0x22, 0xFC,  // ....?.".
                /* 2390 */  0x8B, 0xA2, 0xA3, 0x8C, 0x23, 0xDD, 0x73, 0xD0,  // ....#.s.
                /* 2398 */  0xC3, 0xF6, 0xBC, 0x7C, 0x8B, 0xF1, 0x7D, 0xC9,  // ...|..}.
                /* 23A0 */  0xE3, 0xF2, 0x5D, 0x07, 0x43, 0xF0, 0x9A, 0xE1,  // ..].C...
                /* 23A8 */  0x2F, 0x80, 0x0F, 0x00, 0xFC, 0xFF, 0x7F, 0x00,  // /.......
                /* 23B0 */  0xE0, 0xAE, 0x01, 0x35, 0xF3, 0xC7, 0x03, 0xB0,  // ...5....
                /* 23B8 */  0x1C, 0x2E, 0xE0, 0x5F, 0x72, 0xB0, 0x04, 0xE5,  // ..._r...
                /* 23C0 */  0x0F, 0x02, 0x75, 0x99, 0xE1, 0x17, 0x2A, 0x7E,  // ..u...*~
                /* 23C8 */  0x0F, 0x38, 0x2C, 0x26, 0xF6, 0xEE, 0x43, 0xC7,  // .8,&..C.
                /* 23D0 */  0x03, 0xFE, 0xF1, 0xBF, 0x1C, 0x44, 0x78, 0xA8,  // .....Dx.
                /* 23D8 */  0xF0, 0x7C, 0x7D, 0x54, 0xC0, 0x9E, 0x3D, 0xE0,  // .|}T..=.
                /* 23E0 */  0x1D, 0xBD, 0xC2, 0xBF, 0x26, 0xF0, 0x93, 0x82,  // ....&...
                /* 23E8 */  0x6F, 0xAD, 0x98, 0xA3, 0x02, 0xAC, 0x53, 0xC7,  // o.....S.
                /* 23F0 */  0x51, 0x60, 0x4E, 0x1C, 0x1E, 0x05, 0x3F, 0x0A,  // Q`N...?.
                /* 23F8 */  0x3C, 0x8B, 0xB0, 0x19, 0xBC, 0x8E, 0x78, 0x22,  // <.....x"
                /* 2400 */  0x07, 0x65, 0xB9, 0x08, 0xBA, 0x30, 0x85, 0x78,  // .e...0.x
                /* 2408 */  0x85, 0xF0, 0xC1, 0xC6, 0x28, 0xE7, 0x62, 0x8C,  // ....(.b.
                /* 2410 */  0x27, 0x03, 0x0E, 0x76, 0x2E, 0xAF, 0x1F, 0xB8,  // '..v....
                /* 2418 */  0x21, 0x71, 0x02, 0xDF, 0x7B, 0x7C, 0x2C, 0xE1,  // !q..{|,.
                /* 2420 */  0x87, 0x03, 0x8F, 0x0F, 0xC6, 0xF9, 0x21, 0x8A,  // ......!.
                /* 2428 */  0x8F, 0x12, 0x81, 0xD9, 0xB1, 0xC5, 0x47, 0x00,  // ......G.
                /* 2430 */  0x8F, 0x8B, 0x43, 0xE3, 0x10, 0x9F, 0x29, 0x4E,  // ..C...)N
                /* 2438 */  0xDC, 0x27, 0x96, 0xD3, 0xC5, 0x11, 0xFC, 0xFF,  // .'......
                /* 2440 */  0xCF, 0xC9, 0xA3, 0x05, 0xC7, 0x28, 0xB8, 0x42,  // .....(.B
                /* 2448 */  0x9B, 0x3E, 0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6,  // .>5..jP.
                /* 2450 */  0x46, 0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC,  // F....Tj.
                /* 2458 */  0x58, 0xBA, 0x43, 0x89, 0x62, 0x5C, 0xDB, 0xA8,  // X.C.b\..
                /* 2460 */  0x88, 0x07, 0x82, 0x40, 0x1C, 0x19, 0x84, 0x46,  // ...@...F
                /* 2468 */  0xA2, 0x10, 0x88, 0x85, 0x3F, 0x4E, 0x04, 0x62,  // ....?N.b
                /* 2470 */  0x61, 0x9F, 0x28, 0x81, 0x58, 0xD4, 0xF3, 0x42,  // a.(.X..B
                /* 2478 */  0x20, 0x8E, 0xB1, 0x0A, 0x81, 0x13, 0x13, 0xE0,  //  .......
                /* 2480 */  0x14, 0x84, 0x06, 0xFB, 0x98, 0xE9, 0x64, 0x41,  // ......dA
                /* 2488 */  0x6C, 0x80, 0xB0, 0x30, 0x20, 0x54, 0xBA, 0x0E,  // l..0 T..
                /* 2490 */  0x10, 0x26, 0xD0, 0x07, 0x20, 0x7D, 0x24, 0x08,  // .&.. }$.
                /* 2498 */  0xC4, 0x11, 0x1E, 0xB8, 0x1A, 0x3A, 0xF9, 0x65,  // .....:.e
                /* 24A0 */  0x09, 0xC4, 0x71, 0x41, 0x68, 0xA8, 0x67, 0x8A,  // ..qAh.g.
                /* 24A8 */  0x00, 0x89, 0x15, 0x10, 0x16, 0xDC, 0x0B, 0x08,  // ........
                /* 24B0 */  0x93, 0xFD, 0x3A, 0x10, 0x88, 0x45, 0x9A, 0x01,  // ..:..E..
                /* 24B8 */  0x61, 0x52, 0xDE, 0x67, 0x02, 0x24, 0x20, 0x54,  // aR.g.$ T
                /* 24C0 */  0xAE, 0x1D, 0x10, 0x16, 0x16, 0x84, 0x46, 0xD3,  // ......F.
                /* 24C8 */  0x03, 0xC2, 0x02, 0xF8, 0x01, 0xA4, 0x2F, 0x0B,  // ....../.
                /* 24D0 */  0x81, 0x38, 0xA4, 0x22, 0x10, 0x26, 0xD1, 0x11,  // .8.".&..
                /* 24D8 */  0x08, 0x4B, 0xF9, 0x9C, 0x91, 0x91, 0x21, 0x1A,  // .K....!.
                /* 24E0 */  0x44, 0x40, 0x4E, 0x6A, 0x09, 0x88, 0xE5, 0x06,  // D@Nj....
                /* 24E8 */  0x11, 0x90, 0xC3, 0x79, 0x02, 0x62, 0x49, 0x41,  // ...y.bIA
                /* 24F0 */  0x04, 0xE4, 0x80, 0xEF, 0x38, 0x01, 0x39, 0x2E,  // ....8.9.
                /* 24F8 */  0x88, 0x80, 0x9C, 0x4A, 0x15, 0x10, 0x8B, 0x08,  // ...J....
                /* 2500 */  0x22, 0x20, 0x27, 0x73, 0x05, 0xC4, 0x72, 0x82,  // " 's..r.
                /* 2508 */  0xE8, 0x10, 0x40, 0x5E, 0x2D, 0x81, 0x48, 0x3E,  // ..@^-.H>
                /* 2510 */  0x10, 0x01, 0x39, 0xD6, 0x37, 0x4E, 0x40, 0x0E,  // ..9.7N@.
                /* 2518 */  0x09, 0x22, 0x20, 0x27, 0x7A, 0x77, 0x08, 0xC8,  // ." 'zw..
                /* 2520 */  0xF1, 0x40, 0x34, 0x08, 0xF2, 0x15, 0x13, 0x90,  // .@4.....
                /* 2528 */  0x33, 0x82, 0x08, 0xC8, 0x39, 0x1E, 0x11, 0x3A,  // 3...9..:
                /* 2530 */  0x89, 0x38, 0x15, 0x08, 0x4D, 0x09, 0xA2, 0xFF,  // .8..M...
                /* 2538 */  0x3F, 0x98, 0x35, 0x7D, 0xC8, 0x04, 0x64, 0x8D,  // ?.5}..d.
                /* 2540 */  0x20, 0x02, 0x72, 0x1E, 0x20, 0x9A, 0x11, 0x84,  //  .r. ...
                /* 2548 */  0x66, 0x06, 0xA3, 0x2A, 0x7F, 0x66, 0x02, 0x72,  // f..*.f.r
                /* 2550 */  0x1E, 0x10, 0x9A, 0x11, 0x84, 0x66, 0x06, 0x11,  // .....f..
                /* 2558 */  0xA0, 0x35, 0x3E, 0x6E, 0x02, 0x11, 0xDD, 0x20,  // .5>n... 
                /* 2560 */  0x34, 0x07, 0x08, 0xCD, 0x0A, 0x42, 0x43, 0xBC,  // 4....BC.
                /* 2568 */  0x70, 0x82, 0x92, 0xD0, 0x20, 0x02, 0xB2, 0x90,  // p... ...
                /* 2570 */  0xB7, 0x4E, 0x10, 0x12, 0x03, 0x84, 0xAA, 0x57,  // .N.....W
                /* 2578 */  0x07, 0xC8, 0xB2, 0x82, 0x08, 0xC8, 0xF9, 0x41,  // .......A
                /* 2580 */  0xA8, 0x1E, 0x77, 0x20, 0x4C, 0x3A, 0x08, 0xD5,  // ..w L:..
                /* 2588 */  0xF3, 0xD9, 0x14, 0xA8, 0x95, 0xA9, 0x04, 0x62,  // .......b
                /* 2590 */  0x6A, 0x41, 0xA8, 0x7A, 0x10, 0x1D, 0x07, 0x08,  // jA.z....
                /* 2598 */  0x10, 0x4D, 0x0F, 0x42, 0xD5, 0xB8, 0x04, 0x63,  // .M.B...c
                /* 25A0 */  0xCA, 0x41, 0x04, 0xE4, 0x34, 0x20, 0x34, 0x1D,  // .A..4 4.
                /* 25A8 */  0x18, 0xD5, 0xF3, 0xE8, 0x38, 0x60, 0x06, 0x42,  // ....8`.B
                /* 25B0 */  0x35, 0x83, 0xE8, 0x90, 0x40, 0x80, 0x68, 0x72,  // 5...@.hr
                /* 25B8 */  0x10, 0xAA, 0xE4, 0x9D, 0x12, 0x8C, 0x24, 0x01,  // ......$.
                /* 25C0 */  0xD1, 0x00, 0x08, 0x08, 0x4D, 0x0B, 0x46, 0xD5,  // ....M.F.
                /* 25C8 */  0x3D, 0x58, 0x02, 0x11, 0xC5, 0x20, 0x34, 0x01,  // =X... 4.
                /* 25D0 */  0x88, 0xC0, 0x9C, 0x1A, 0x88, 0x2A, 0x79, 0xA6,  // .....*y.
                /* 25D8 */  0x04, 0x21, 0x3A, 0x41, 0x04, 0xE6, 0x6C, 0x40,  // .!:A..l@
                /* 25E0 */  0x34, 0x2F, 0x08, 0xCD, 0x0F, 0x46, 0x93, 0x18,  // 4/...F..
                /* 25E8 */  0x1D, 0x08, 0x05, 0xA1, 0x69, 0x41, 0x34, 0x10,  // ....iA4.
                /* 25F0 */  0xF2, 0x3E, 0x39, 0x10, 0x06, 0x42, 0x13, 0x80,  // .>9..B..
                /* 25F8 */  0x08, 0xCC, 0xFA, 0xBF, 0x29, 0x41, 0x48, 0x7A,  // ....)AHz
                /* 2600 */  0x10, 0x9A, 0xF1, 0xFB, 0x17, 0x84, 0x64, 0x78,  // ......dx
                /* 2608 */  0xB3, 0x08, 0xD4, 0xB9, 0x40, 0x68, 0x4E, 0x10,  // ....@hN.
                /* 2610 */  0x0D, 0x9F, 0xBC, 0x7D, 0x0E, 0x9F, 0x81, 0xE8,  // ...}....
                /* 2618 */  0xFF, 0x3F, 0x7C, 0x02, 0x22, 0x30, 0xA7, 0x05,  // .?|."0..
                /* 2620 */  0xA2, 0x0A, 0xD4, 0x82, 0x30, 0x45, 0x20, 0x02,  // ....0E .
                /* 2628 */  0xB3, 0x22, 0xBB, 0xC7, 0x06, 0x0A, 0x42, 0x55,  // ."....BU
                /* 2630 */  0xEB, 0x05, 0x61, 0xDA, 0x04, 0x83, 0x32, 0xBD,  // ..a...2.
                /* 2638 */  0x20, 0x54, 0x3F, 0x88, 0x06, 0x4B, 0x80, 0xA8,  //  T?..K..
                /* 2640 */  0x92, 0xFF, 0x4B, 0x10, 0xA2, 0x0C, 0x44, 0x60,  // ..K...D`
                /* 2648 */  0x4E, 0x01, 0x44, 0x93, 0x81, 0xD0, 0xA4, 0x60,  // N.D....`
                /* 2650 */  0x34, 0xA9, 0xE2, 0x01, 0xD1, 0xAF, 0x8C, 0x40,  // 4......@
                /* 2658 */  0xAC, 0xF5, 0x39, 0x73, 0x38, 0xEC, 0xFF, 0x24,  // ..9s8..$
                /* 2660 */  0x10, 0xF2, 0x18, 0x12, 0x88, 0x73, 0xFF, 0x9D,  // .....s..
                /* 2668 */  0x82, 0x13, 0x2D, 0xAA, 0x41, 0x98, 0x36, 0x10,  // ..-.A.6.
                /* 2670 */  0x81, 0x39, 0x0B, 0x10, 0xCD, 0x07, 0x42, 0xF3,  // .9....B.
                /* 2678 */  0x82, 0x50, 0x1D, 0xAF, 0xAC, 0x83, 0x67, 0x20,  // .P....g 
                /* 2680 */  0x1A, 0x1E, 0x79, 0x34, 0x09, 0xC4, 0x99, 0x41,  // ..y4...A
                /* 2688 */  0x68, 0xB2, 0xBF, 0x4E, 0x10, 0x92, 0xF7, 0x6D,  // h..N...m
                /* 2690 */  0x29, 0x20, 0xF2, 0x5B, 0xD3, 0x61, 0x80, 0x80,  // ) .[.a..
                /* 2698 */  0xD0, 0xF4, 0x20, 0x02, 0xB3, 0xDA, 0x7F, 0xA4,  // .. .....
                /* 26A0 */  0x0E, 0x03, 0x04, 0x84, 0x26, 0x02, 0x11, 0x98,  // ....&...
                /* 26A8 */  0x95, 0xBC, 0xC1, 0x04, 0x64, 0x75, 0x20, 0x54,  // ....du T
                /* 26B0 */  0x3B, 0x88, 0xC0, 0x9C, 0x13, 0x88, 0x66, 0x07,  // ;.....f.
                /* 26B8 */  0xA1, 0x5A, 0xDE, 0x41, 0xC1, 0x88, 0x16, 0xF1,  // .Z.A....
                /* 26C0 */  0x07, 0x05, 0x0A, 0x42, 0xF5, 0x3E, 0xC6, 0x74,  // ...B.>.t
                /* 26C8 */  0x28, 0x20, 0xEA, 0x8F, 0x35, 0xF4, 0x9B, 0x26,  // ( ..5..&
                /* 26D0 */  0x60, 0x47, 0x00, 0xA1, 0xB1, 0x40, 0x74, 0x40,  // `G...@t@
                /* 26D8 */  0x21, 0x20, 0x3A, 0xEC, 0x10, 0xFD, 0x60, 0x4C,  // ! :...`L
                /* 26E0 */  0x1A, 0x08, 0x95, 0x0B, 0x22, 0x40, 0x6B, 0x07,  // ...."@k.
                /* 26E8 */  0xD1, 0x11, 0x80, 0x80, 0xD1, 0xD4, 0x20, 0x54,  // ...... T
                /* 26F0 */  0x89, 0x7F, 0x40, 0x26, 0x0B, 0x44, 0xC7, 0x11,  // ..@&.D..
                /* 26F8 */  0x02, 0x22, 0x30, 0x4B, 0x08, 0x00, 0xC2, 0xA4,  // ."0K....
                /* 2700 */  0x82, 0xE8, 0xFF, 0x7F, 0x30, 0x20, 0x05, 0x40,  // ....0 .@
                /* 2708 */  0x99, 0x4E, 0x10, 0x0D, 0x90, 0x80, 0x68, 0xC0,  // .N....h.
                /* 2710 */  0x04, 0x84, 0x6A, 0x4A, 0x70, 0xF0, 0xA0, 0x20,  // ..jJp.. 
                /* 2718 */  0x34, 0x3C, 0x08, 0x15, 0xD2, 0x00, 0x84, 0x89,  // 4<......
                /* 2720 */  0x03, 0xD1, 0x00, 0xAC, 0x14, 0x44, 0x03, 0xB0,  // .....D..
                /* 2728 */  0x8E, 0x08, 0x60, 0x4C, 0x15, 0x08, 0x55, 0x0F,  // ..`L..U.
                /* 2730 */  0x42, 0xC5, 0x56, 0x00, 0x65, 0xD2, 0x41, 0x04,  // B.V.e.A.
                /* 2738 */  0xEA, 0xE8, 0x20, 0x3A, 0xAD, 0x91, 0x0C, 0x20,  // .. :... 
                /* 2740 */  0x4C, 0x26, 0x08, 0x95, 0x0D, 0x42, 0x75, 0x74,  // L&...But
                /* 2748 */  0x18, 0x10, 0x05, 0xA1, 0x3A, 0x41, 0x34, 0x00,  // ....:A4.
                /* 2750 */  0x8B, 0x06, 0xD1, 0x00, 0x2C, 0x29, 0x04, 0x18,  // ....,)..
                /* 2758 */  0x13, 0x08, 0x42, 0xE5, 0x83, 0xD0, 0xC0, 0x20,  // ..B.... 
                /* 2760 */  0x02, 0x75, 0x7C, 0x10, 0x81, 0x5A, 0x7E, 0x09,  // .u|..Z~.
                /* 2768 */  0x30, 0x16, 0x0A, 0x84, 0x46, 0x05, 0xA1, 0xD1,  // 0...F...
                /* 2770 */  0x41, 0x68, 0xAC, 0x16, 0xC7, 0x2A, 0x1A, 0xE3,  // Ah...*..
                /* 2778 */  0x8A, 0x4E, 0x73, 0x0C, 0x9C, 0x82, 0x50, 0xE9,  // .Ns...P.
                /* 2780 */  0x20, 0x3A, 0x34, 0x11, 0x20, 0x2A, 0xA0, 0xC7,  //  :4. *..
                /* 2788 */  0xF0, 0x28, 0x08, 0x95, 0x0E, 0x22, 0x40, 0x02,  // .(..."@.
                /* 2790 */  0x44, 0x5F, 0xD1, 0x06, 0x24, 0x20, 0x54, 0x39,  // D_..$ T9
                /* 2798 */  0x08, 0x55, 0x52, 0xE4, 0x70, 0x42, 0x41, 0x04,  // .UR.pBA.
                /* 27A0 */  0xE4, 0x4C, 0x20, 0x34, 0x23, 0x18, 0xD5, 0x96,  // .L 4#...
                /* 27A8 */  0xE4, 0x10, 0x42, 0x41, 0xA8, 0x7E, 0x10, 0x1A,  // ..BA.~..
                /* 27B0 */  0x16, 0x84, 0x66, 0x69, 0x02, 0xCA, 0xF2, 0x83,  // ..fi....
                /* 27B8 */  0x68, 0xD8, 0x24, 0xCA, 0xB1, 0x80, 0x82, 0xE8,  // h.$.....
                /* 27C0 */  0x80, 0x41, 0x80, 0x68, 0x5A, 0x10, 0xAA, 0xA5,  // .A.hZ...
                /* 27C8 */  0x0A, 0x18, 0xD3, 0x5D, 0xE6, 0x58, 0x42, 0x41,  // ...].XBA
                /* 27D0 */  0x68, 0xBA, 0x34, 0x87, 0x26, 0x1A, 0x07, 0xE2,  // h.4.&...
                /* 27D8 */  0xFF, 0x1F, 0xD4, 0xD9, 0x40, 0x68, 0x56, 0x10,  // ....@hV.
                /* 27E0 */  0xAA, 0xA6, 0xCE, 0xF0, 0x28, 0x88, 0x8E, 0x25,  // ....(..%
                /* 27E8 */  0x04, 0x88, 0x2A, 0xC8, 0x73, 0x6C, 0xA1, 0x20,  // ..*.sl. 
                /* 27F0 */  0x1A, 0x00, 0x01, 0xA2, 0xD9, 0x40, 0x68, 0x56,  // .....@hV
                /* 27F8 */  0x30, 0xAA, 0x2A, 0x11, 0x08, 0xCB, 0x04, 0x42,  // 0.*....B
                /* 2800 */  0xB5, 0x37, 0x02, 0x61, 0x09, 0x2A, 0x1D, 0xA0,  // .7.a.*..
                /* 2808 */  0x28, 0x08, 0xCD, 0x07, 0xA2, 0x63, 0x07, 0xC9,  // (....c..
                /* 2810 */  0x04, 0xC4, 0xF4, 0x81, 0x50, 0xBD, 0x20, 0x02,  // ....P. .
                /* 2818 */  0x73, 0x42, 0x20, 0x9A, 0x1A, 0x84, 0xAA, 0xE8,  // sB .....
                /* 2820 */  0x34, 0x08, 0x0A, 0xA2, 0x21, 0x10, 0x10, 0x9A,  // 4...!...
                /* 2828 */  0x0F, 0x8C, 0x2A, 0x0A, 0x05, 0xC4, 0x54, 0x82,  // ..*...T.
                /* 2830 */  0x50, 0xD5, 0x20, 0x3A, 0x22, 0x11, 0x20, 0x9A,  // P. :". .
                /* 2838 */  0x1C, 0x84, 0x8A, 0x4A, 0x75, 0x8C, 0xA3, 0x20,  // ...Ju.. 
                /* 2840 */  0x02, 0x72, 0x40, 0x10, 0x2A, 0x33, 0xD6, 0xD1,  // .r@.*3..
                /* 2848 */  0x8C, 0x82, 0xE8, 0x08, 0x41, 0x40, 0x68, 0xC2,  // ....A@h.
                /* 2850 */  0x5E, 0xC7, 0x0E, 0xDA, 0x6C, 0x50, 0x14, 0x84,  // ^...lP..
                /* 2858 */  0xAA, 0x88, 0x06, 0xC6, 0x14, 0x83, 0x08, 0xC8,  // ........
                /* 2860 */  0x29, 0x40, 0x68, 0x2A, 0x30, 0xAA, 0xA3, 0xDA,  // )@h*0...
                /* 2868 */  0xD1, 0x86, 0x82, 0x50, 0xAD, 0x20, 0x3A, 0x1A,  // ...P. :.
                /* 2870 */  0x10, 0x20, 0x9A, 0x16, 0x84, 0xA6, 0x07, 0xA3,  // . ......
                /* 2878 */  0x8A, 0xB3, 0x0D, 0x81, 0x82, 0xD0, 0x54, 0x20,  // ......T 
                /* 2880 */  0x3A, 0xCA, 0x90, 0x6E, 0x47, 0x19, 0x0A, 0x42,  // :..nG..B
                /* 2888 */  0xD5, 0x82, 0xE8, 0xA8, 0x44, 0x80, 0x68, 0x6E,  // ....D.hn
                /* 2890 */  0x10, 0xAA, 0x23, 0xDC, 0x71, 0x89, 0x82, 0xE8,  // ..#.q...
                /* 2898 */  0xB8, 0x44, 0x40, 0x68, 0x4E, 0x30, 0xAA, 0xB1,  // .D@hN0..
                /* 28A0 */  0xDC, 0xC1, 0x8C, 0x82, 0xD0, 0x1C, 0x20, 0xFA,  // ...... .
                /* 28A8 */  0xFF, 0x1F, 0x22, 0x08, 0x10, 0xD5, 0x94, 0x0E,  // ..".....
                /* 28B0 */  0x84, 0x85, 0xA9, 0x77, 0x2C, 0xA4, 0x9F, 0x71,  // ...w,..q
                /* 28B8 */  0x01, 0x59, 0x18, 0x08, 0x4D, 0x54, 0x10, 0x8C,  // .Y..MT..
                /* 28C0 */  0xA9, 0x49, 0x08, 0xC4, 0x14, 0x82, 0xD0, 0x68,  // .I.....h
                /* 28C8 */  0x15, 0x8F, 0x1F, 0x34, 0xE3, 0xF1, 0x83, 0x82,  // ...4....
                /* 28D0 */  0xD0, 0x8C, 0x25, 0x0F, 0x3A, 0x34, 0xE5, 0xF0,  // ..%.:4..
                /* 28D8 */  0x28, 0x08, 0x95, 0xD8, 0xF2, 0xA8, 0x48, 0x41,  // (.....HA
                /* 28E0 */  0x74, 0xD0, 0x20, 0x20, 0x34, 0x61, 0xCC, 0x23,  // t.  4a.#
                /* 28E8 */  0x07, 0xAD, 0x79, 0x64, 0xA0, 0x20, 0x54, 0x64,  // ..yd. Td
                /* 28F0 */  0x4E, 0x30, 0x16, 0x0F, 0x44, 0x40, 0x8E, 0x0C,  // N0..D@..
                /* 28F8 */  0x42, 0x73, 0xF6, 0x04, 0xA6, 0x41, 0x81, 0x29,  // Bs...A.)
                /* 2900 */  0x08, 0xD5, 0x0F, 0xA2, 0x61, 0x12, 0x20, 0xAA,  // ....a. .
                /* 2908 */  0xA9, 0xE8, 0xD1, 0x83, 0x82, 0xE8, 0xD0, 0x40,  // .......@
                /* 2910 */  0x80, 0x68, 0x72, 0x10, 0xAA, 0x24, 0xE9, 0xB1,  // .hr..$..
                /* 2918 */  0x88, 0x82, 0xE8, 0x38, 0x46, 0x40, 0x68, 0x5A,  // ...8F@hZ
                /* 2920 */  0x30, 0x1A, 0xBE, 0xEB, 0x61, 0x87, 0x86, 0x3D,  // 0...a..=
                /* 2928 */  0xEC, 0x50, 0x10, 0x1D, 0x76, 0x08, 0x88, 0x8E,  // .P..v...
                /* 2930 */  0x92, 0x04, 0x8C, 0x06, 0x04, 0xA1, 0xA1, 0x01,  // ........
                /* 2938 */  0xA9, 0x82, 0xB2, 0x80, 0x4C, 0x34, 0x88, 0xC0,  // ....L4..
                /* 2940 */  0x1C, 0x00, 0x84, 0x86, 0x02, 0x11, 0xA0, 0x13,  // ........
                /* 2948 */  0x02, 0x52, 0x55, 0x69, 0x0F, 0x01, 0x14, 0x84,  // .RUi....
                /* 2950 */  0xAA, 0x06, 0xA1, 0x3A, 0xDB, 0x0E, 0x8A, 0xD6,  // ...:....
                /* 2958 */  0x05, 0x66, 0x59, 0x41, 0x74, 0x64, 0x23, 0x5F,  // .fYAtd#_
                /* 2960 */  0x7F, 0x1D, 0x22, 0x08, 0x08, 0xD5, 0x0F, 0x42,  // .."....B
                /* 2968 */  0x53, 0x82, 0x50, 0x91, 0x7D, 0x81, 0x99, 0x64,  // S.P.}..d
                /* 2970 */  0x10, 0x01, 0x3B, 0x22, 0x88, 0x0E, 0x19, 0x04,  // ..;"....
                /* 2978 */  0x84, 0x8A, 0x08, 0x0C, 0xC8, 0x24, 0x81, 0xE8,  // .....$..
                /* 2980 */  0xFF, 0x7F, 0x1C, 0x25, 0x20, 0x3A, 0xDE, 0x90,  // ...% :..
                /* 2988 */  0xC2, 0x20, 0x4C, 0x28, 0x08, 0xD5, 0x95, 0x18,  // . L(....
                /* 2990 */  0x94, 0xA9, 0x04, 0xD1, 0xF0, 0x09, 0x88, 0x8E,  // ........
                /* 2998 */  0x59, 0x04, 0x84, 0x2A, 0x6A, 0x3C, 0x3C, 0x0A,  // Y..*j<<.
                /* 29A0 */  0x42, 0x53, 0x83, 0x50, 0x05, 0x91, 0x0F, 0x4C,  // BS.P...L
                /* 29A8 */  0x14, 0x44, 0x03, 0xB0, 0x44, 0x10, 0x1D, 0x46,  // .D..D..F
                /* 29B0 */  0x08, 0x18, 0x0D, 0x06, 0x42, 0xC3, 0x02, 0xD2,  // ....B...
                /* 29B8 */  0xE4, 0x80, 0x54, 0x67, 0xE5, 0x03, 0x21, 0x05,  // ..Tg..!.
                /* 29C0 */  0xA1, 0x39, 0x40, 0x04, 0xE8, 0x50, 0x20, 0x02,  // .9@..P .
                /* 29C8 */  0xB4, 0xE4, 0xCC, 0x47, 0x00, 0x0A, 0x42, 0x83,  // ...G..B.
                /* 29D0 */  0x82, 0xD0, 0x5C, 0x9D, 0x41, 0x59, 0x4A, 0x10,  // ..\.AYJ.
                /* 29D8 */  0x1D, 0x2D, 0x49, 0xE8, 0x43, 0x19, 0x05, 0xA1,  // .-I.C...
                /* 29E0 */  0x89, 0x40, 0x68, 0x42, 0x10, 0x2A, 0xBB, 0xF4,  // .@hB.*..
                /* 29E8 */  0x51, 0x8C, 0x82, 0xD0, 0x58, 0x20, 0x3A, 0x8A,  // Q...X :.
                /* 29F0 */  0x11, 0x10, 0x1D, 0x61, 0x48, 0xEA, 0xC3, 0x08,  // ...aH...
                /* 29F8 */  0x05, 0xA1, 0x8A, 0x41, 0x04, 0x68, 0xF9, 0x20,  // ...A.h. 
                /* 2A00 */  0x02, 0xB4, 0xB8, 0xD6, 0x47, 0x0D, 0x0A, 0x42,  // ....G..B
                /* 2A08 */  0x23, 0x81, 0xD0, 0x04, 0xB1, 0x41, 0x59, 0x1E,  // #....AY.
                /* 2A10 */  0x10, 0x1D, 0x23, 0x49, 0xED, 0x43, 0x0D, 0x05,  // ..#I.C..
                /* 2A18 */  0xA1, 0xDA, 0x41, 0x68, 0x16, 0x10, 0xAA, 0x36,  // ..Ah...6
                /* 2A20 */  0xF7, 0x51, 0x88, 0x82, 0xD0, 0x34, 0x20, 0x1A,  // .Q...4 .
                /* 2A28 */  0x80, 0xA3, 0x81, 0xE8, 0x40, 0x42, 0x7A, 0x1F,  // ....@Bz.
                /* 2A30 */  0xA1, 0x28, 0x08, 0x15, 0x09, 0x22, 0x40, 0x2B,  // .(..."@+
                /* 2A38 */  0x06, 0xD1, 0x40, 0x48, 0xF0, 0xA1, 0x51, 0x10,  // ..@H..Q.
                /* 2A40 */  0x9A, 0x02, 0x84, 0x8A, 0x2E, 0x0E, 0xCA, 0x22,  // ......."
                /* 2A48 */  0x80, 0x08, 0xD4, 0x12, 0x92, 0x1F, 0x51, 0x28,  // ......Q(
                /* 2A50 */  0x08, 0x95, 0x0B, 0x42, 0xE5, 0x83, 0xE8, 0xFF,  // ...B....
                /* 2A58 */  0x7F, 0x88, 0x23, 0xD1, 0x0F, 0x25, 0x14, 0x84,  // ..#..%..
                /* 2A60 */  0xFE, 0xFF, 0x01                                 // ...
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPPC, IntObj)
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            \_PR.CPU0._PPC = \_PR.CPPC /* External reference */
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000200, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000D49, 
                0x00012CC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000D48, 
                0x00012CC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x00012070, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001086E, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0000FCC1, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x0000F14C, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0000E61B, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x0000D043, 
                0x0000006E, 
                0x0000000A, 
                0x00000783, 
                0x00000007
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x0000C5A9, 
                0x0000006E, 
                0x0000000A, 
                0x00000883, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000BB44, 
                0x0000006E, 
                0x0000000A, 
                0x00000983, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000A723, 
                0x0000006E, 
                0x0000000A, 
                0x00000A83, 
                0x0000000A
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009D5C, 
                0x0000006E, 
                0x0000000A, 
                0x00000B83, 
                0x0000000B
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x000093C9, 
                0x0000006E, 
                0x0000000A, 
                0x00000C83, 
                0x0000000C
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00008A69, 
                0x0000006E, 
                0x0000000A, 
                0x00000D83, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00007ABD, 
                0x0000006E, 
                0x0000000A, 
                0x00000E83, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000071EC, 
                0x0000006E, 
                0x0000000A, 
                0x00000F83, 
                0x0000000F
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (_PSS, Package (0x10)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D49, 
                0x00012CC8, 
                0x0000000A, 
                0x0000000A, 
                0x0000FF00, 
                0x0000FF00
            }, 

            Package (0x06)
            {
                0x00000D48, 
                0x00012CC8, 
                0x0000000A, 
                0x0000000A, 
                0x00002200, 
                0x00002200
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x00012070, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0001086E, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0000FCC1, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x0000F14C, 
                0x0000000A, 
                0x0000000A, 
                0x00001D00, 
                0x00001D00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0000E61B, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x0000D043, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x0000C5A9, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000BB44, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000A723, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009D5C, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x000093C9, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00008A69, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00007ABD, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000071EC, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "SataRe", "SataTabl", 0x00001000)
{
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (DSSP, UnknownObj)
    External (FHPP, UnknownObj)

    Scope (\)
    {
        Name (STFE, Buffer (0x07)
        {
             0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (STFD, Buffer (0x07)
        {
             0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (FZTF, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
        })
        Name (DCFL, Buffer (0x07)
        {
             0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1         // .......
        })
        Name (SCBF, Buffer (0x15){})
        Name (CMDC, Zero)
        Method (GTFB, 2, Serialized)
        {
            Local0 = (CMDC * 0x38)
            CreateField (SCBF, Local0, 0x38, CMDX)
            Local0 = (CMDC * 0x07)
            CreateByteField (SCBF, (Local0 + One), A001)
            CMDX = Arg0
            A001 = Arg1
            CMDC++
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Name (REGF, One)
        Method (_REG, 2, NotSerialized)  // _REG: Region Availability
        {
            If ((Arg0 == 0x02))
            {
                REGF = Arg1
            }
        }

        Name (TMD0, Buffer (0x14){})
        CreateDWordField (TMD0, Zero, PIO0)
        CreateDWordField (TMD0, 0x04, DMA0)
        CreateDWordField (TMD0, 0x08, PIO1)
        CreateDWordField (TMD0, 0x0C, DMA1)
        CreateDWordField (TMD0, 0x10, CHNF)
        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
        {
            PIO0 = 0x78
            DMA0 = 0x14
            PIO1 = 0x78
            DMA1 = 0x14
            CHNF |= 0x05
            Return (TMD0) /* \_SB_.PCI0.SAT0.TMD0 */
        }

        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
        {
        }

        Device (SPT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT1)
        {
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT2)
        {
            Name (_ADR, 0x0002FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT3)
        {
            Name (_ADR, 0x0003FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT4)
        {
            Name (_ADR, 0x0004FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT5)
        {
            Name (_ADR, 0x0005FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (CPID, UnknownObj)
    External (FMBL, UnknownObj)
    External (PDC0, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000000, // Address
                    0x01,               // Access Size
                    )
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C1LH, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000010, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x02, 
            0x94, 
            0x01F4
        })
        Name (C7SM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000031, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C7LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000030, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C6LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000020, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xA9, 
            0x015E
        })
        Name (C3LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            0x02, 
            0x94, 
            0x01F4
        })
        Name (C6LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000415, // Address
                    ,)
            }, 

            0x03, 
            0xA9, 
            0x015E
        })
        Name (C7LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000416, // Address
                    ,)
            }, 

            0x03, 
            0xC6, 
            0xC8
        })
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                If (((CPID & 0x0FFF0FF0) == 0x000306A0))
                {
                    If ((CFGD & 0x00400000))
                    {
                        C3LI [0x02] = 0x3B
                        C3LM [0x02] = 0x3B
                        C6LI [0x02] = 0x50
                        C6LM [0x02] = 0x50
                        C7LI [0x02] = 0x57
                        C7LM [0x02] = 0x57
                        C7SM [0x02] = 0x57
                    }
                    Else
                    {
                        C3LI [0x02] = 0x94
                        C3LM [0x02] = 0x94
                        C6LI [0x02] = 0xA9
                        C6LM [0x02] = 0xA9
                        C7LI [0x02] = 0xC6
                        C7LM [0x02] = 0xC6
                        C7SM [0x02] = 0xC6
                    }
                }
                ElseIf ((CFGD & 0x00400000))
                {
                    C3LI [0x02] = 0x50
                    C3LM [0x02] = 0x50
                    C6LI [0x02] = 0x68
                    C6LM [0x02] = 0x68
                    C7LI [0x02] = 0x6D
                    C7LM [0x02] = 0x6D
                    C7SM [0x02] = 0x6D
                }
                Else
                {
                    C3LI [0x02] = 0x9C
                    C3LM [0x02] = 0x9C
                    C6LI [0x02] = 0xB5
                    C6LM [0x02] = 0xB5
                    C7LI [0x02] = 0xC7
                    C7LM [0x02] = 0xC7
                    C7SM [0x02] = 0xC7
                }

                CSTF = Ones
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0200)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x00010000))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0100)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((!PWRS || (PFLV != FMBL)))
            {
                If ((CFGD & 0x20))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x08))
                {
                    C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((CFGD & 0x10))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf ((CFGD & 0x08))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 68
[00Ah 0010   6]                       Oem ID : "APTIO4"
[010h 0016   8]                 Oem Table ID : "NAPAASF"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 00000000D8B9A010

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 68 41 50 54 49 4F 34  // TCPA2....hAPTIO4
    0010: 4E 41 50 41 41 53 46 00 01 00 00 00 4D 53 46 54  // NAPAASF.....MSFT
    0020: 13 00 00 01 00 00 00 00 01 00 10 A0 B9 D8 00 00  // ................
    0030: 00 00                                            // ..


