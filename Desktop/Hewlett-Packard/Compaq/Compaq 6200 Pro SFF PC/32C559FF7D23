
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "HPQOEM"  "SLIC-BPC"  0x01072009  "MSFT"   0x00000097
 02)  ASF!  0x000000A0  0x20  "INTEL "  " HCG    "  0x00000001  "TFSM"   0x000F4240
 03)  APIC  0x00000072  0x03  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI "   0x00010013
 04)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "    "   0x00000000
 05)  SSDT  0x00005270  0x01  "COMPAQ"  "WMI     "  0x00000001  "MSFT"   0x03000001
 06)  DSDT  0x00007AD7  0x02  "HPQOEM"  "SLIC-BPC"  0x00000008  "INTL"   0x20051117
 07)  DMAR  0x000000E8  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x00000001
 08)  FACP  0x000000F4  0x04  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI "   0x00010013
 09)  SSDT  0x00000102  0x01  "AMICPU"  "PROC    "  0x00000001  "MSFT"   0x03000001
 10)  HPET  0x00000038  0x01  "HPQOEM"  "SLIC-BPC"  0x01072009  "AMI."   0x00000004
 11)  FACS  0x00000040  0x02
 12)  SSDT  0x00000084  0x01  "AMI   "  "CST     "  0x00000001  "MSFT"   0x03000001
 13)  SSDT  0x0000038C  0x01  "AMI   "  "IST     "  0x00000001  "MSFT"   0x03000001

Found 13 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000072
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 0F
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 01 [I/O APIC]
[04Dh 0077 001h]                      Length : 0C
[04Eh 0078 001h]                 I/O Apic ID : 00
[04Fh 0079 001h]                    Reserved : 00
[050h 0080 004h]                     Address : FEC00000
[054h 0084 004h]                   Interrupt : 00000000

[058h 0088 001h]               Subtable Type : 02 [Interrupt Source Override]
[059h 0089 001h]                      Length : 0A
[05Ah 0090 001h]                         Bus : 00
[05Bh 0091 001h]                      Source : 00
[05Ch 0092 004h]                   Interrupt : 00000002
[060h 0096 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098 001h]               Subtable Type : 02 [Interrupt Source Override]
[063h 0099 001h]                      Length : 0A
[064h 0100 001h]                         Bus : 00
[065h 0101 001h]                      Source : 09
[066h 0102 004h]                   Interrupt : 00000009
[06Ah 0106 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108 001h]               Subtable Type : 04 [Local APIC NMI]
[06Dh 0109 001h]                      Length : 06
[06Eh 0110 001h]                Processor ID : FF
[06Fh 0111 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 114 (0x72)

    0000: 41 50 49 43 72 00 00 00 03 0F 48 50 51 4F 45 4D  // APICr.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 20  // SLIC-BPC. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  // ................
    0040: 01 00 00 00 00 08 04 06 01 00 00 00 01 0C 00 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 FF 05  // ................
    0070: 00 01                                            // ..


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A0
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 37
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : " HCG"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "TFSM"
[020h 0032 004h]       Asl Compiler Revision : 000F4240

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 05
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 89
[03Dh 0061 001h]                     Command : 04
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 05
[041h 0065 001h]                        Type : 6F
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 68
[044h 0068 001h]                    Severity : 08
[045h 0069 001h]                SensorNumber : 88
[046h 0070 001h]                      Entity : 17
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 89
[049h 0073 001h]                     Command : 04
[04Ah 0074 001h]                        Mask : 04
[04Bh 0075 001h]                       Value : 04
[04Ch 0076 001h]                  SensorType : 07
[04Dh 0077 001h]                        Type : 6F
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 68
[050h 0080 001h]                    Severity : 20
[051h 0081 001h]                SensorNumber : 88
[052h 0082 001h]                      Entity : 03
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 89
[055h 0085 001h]                     Command : 05
[056h 0086 001h]                        Mask : 01
[057h 0087 001h]                       Value : 01
[058h 0088 001h]                  SensorType : 19
[059h 0089 001h]                        Type : 6F
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 68
[05Ch 0092 001h]                    Severity : 20
[05Dh 0093 001h]                SensorNumber : 88
[05Eh 0094 001h]                      Entity : 22
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : 88
[06Ah 0106 001h]                     Command : 00
[06Bh 0107 001h]                       Value : 03

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : 88
[06Eh 0110 001h]                     Command : 00
[06Fh 0111 001h]                       Value : 02

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : 88
[072h 0114 001h]                     Command : 00
[073h 0115 001h]                       Value : 01

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : 88
[076h 0118 001h]                     Command : 00
[077h 0119 001h]                       Value : 04

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 21 F8 00 00 00 13 F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 57010000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0100
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 84 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0011
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 0B
[095h 0149 001h]                   Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 


Raw Table Data: Length 160 (0xA0)

    0000: 41 53 46 21 A0 00 00 00 20 37 49 4E 54 45 4C 20  // ASF!.... 7INTEL 
    0010: 20 48 43 47 00 00 00 00 01 00 00 00 54 46 53 4D  //  HCG........TFSM
    0020: 40 42 0F 00 00 00 10 00 05 FF 01 00 00 00 01 57  // @B.............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 21 F8 00 00  // ............!...
    0080: 00 13 F0 00 00 00 01 57 00 00 00 00 01 00 00 84  // .......W........
    0090: 00 11 00 00 0B 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000E8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : EB
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 001h]          Host Address Width : 23
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0058

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 00
[05Dh 0093 001h]              PCI Bus Number : F0

[05Eh 0094 002h]                    PCI Path : 1F,00


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : F0

[066h 0102 002h]                    PCI Path : 0F,00


[068h 0104 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[069h 0105 001h]                Entry Length : 08
[06Ah 0106 002h]                    Reserved : 0000
[06Ch 0108 001h]              Enumeration ID : 00
[06Dh 0109 001h]              PCI Bus Number : F0

[06Eh 0110 002h]                    PCI Path : 0F,01


[070h 0112 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[071h 0113 001h]                Entry Length : 08
[072h 0114 002h]                    Reserved : 0000
[074h 0116 001h]              Enumeration ID : 00
[075h 0117 001h]              PCI Bus Number : F0

[076h 0118 002h]                    PCI Path : 0F,02


[078h 0120 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[079h 0121 001h]                Entry Length : 08
[07Ah 0122 002h]                    Reserved : 0000
[07Ch 0124 001h]              Enumeration ID : 00
[07Dh 0125 001h]              PCI Bus Number : F0

[07Eh 0126 002h]                    PCI Path : 0F,03


[080h 0128 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : F0

[086h 0134 002h]                    PCI Path : 0F,04


[088h 0136 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[089h 0137 001h]                Entry Length : 08
[08Ah 0138 002h]                    Reserved : 0000
[08Ch 0140 001h]              Enumeration ID : 00
[08Dh 0141 001h]              PCI Bus Number : F0

[08Eh 0142 002h]                    PCI Path : 0F,05


[090h 0144 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[091h 0145 001h]                Entry Length : 08
[092h 0146 002h]                    Reserved : 0000
[094h 0148 001h]              Enumeration ID : 00
[095h 0149 001h]              PCI Bus Number : F0

[096h 0150 002h]                    PCI Path : 0F,06


[098h 0152 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[099h 0153 001h]                Entry Length : 08
[09Ah 0154 002h]                    Reserved : 0000
[09Ch 0156 001h]              Enumeration ID : 00
[09Dh 0157 001h]              PCI Bus Number : F0

[09Eh 0158 002h]                    PCI Path : 0F,07


[0A0h 0160 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0A2h 0162 002h]                      Length : 0028

[0A4h 0164 002h]                    Reserved : 0000
[0A6h 0166 002h]          PCI Segment Number : 0000
[0A8h 0168 008h]                Base Address : 00000000CAC3F000
[0B0h 0176 008h]         End Address (limit) : 00000000CAC5BFFF

[0B8h 0184 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0B9h 0185 001h]                Entry Length : 08
[0BAh 0186 002h]                    Reserved : 0000
[0BCh 0188 001h]              Enumeration ID : 00
[0BDh 0189 001h]              PCI Bus Number : 00

[0BEh 0190 002h]                    PCI Path : 1D,00


[0C0h 0192 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0C1h 0193 001h]                Entry Length : 08
[0C2h 0194 002h]                    Reserved : 0000
[0C4h 0196 001h]              Enumeration ID : 00
[0C5h 0197 001h]              PCI Bus Number : 00

[0C6h 0198 002h]                    PCI Path : 1A,00


[0C8h 0200 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0CAh 0202 002h]                      Length : 0020

[0CCh 0204 002h]                    Reserved : 0000
[0CEh 0206 002h]          PCI Segment Number : 0000
[0D0h 0208 008h]                Base Address : 00000000CB800000
[0D8h 0216 008h]         End Address (limit) : 00000000CF9FFFFF

[0E0h 0224 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0E1h 0225 001h]                Entry Length : 08
[0E2h 0226 002h]                    Reserved : 0000
[0E4h 0228 001h]              Enumeration ID : 00
[0E5h 0229 001h]              PCI Bus Number : 00

[0E6h 0230 002h]                    PCI Path : 02,00


Raw Table Data: Length 232 (0xE8)

    0000: 44 4D 41 52 E8 00 00 00 01 EB 41 4C 41 53 4B 41  // DMAR......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 49 4E 54 4C  // A M I.......INTL
    0020: 01 00 00 00 23 01 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 58 00 01 00 00 00  // ..........X.....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 00 F0 1F 00  // ................
    0060: 04 08 00 00 00 F0 0F 00 04 08 00 00 00 F0 0F 01  // ................
    0070: 04 08 00 00 00 F0 0F 02 04 08 00 00 00 F0 0F 03  // ................
    0080: 04 08 00 00 00 F0 0F 04 04 08 00 00 00 F0 0F 05  // ................
    0090: 04 08 00 00 00 F0 0F 06 04 08 00 00 00 F0 0F 07  // ................
    00A0: 01 00 28 00 00 00 00 00 00 F0 C3 CA 00 00 00 00  // ..(.............
    00B0: FF BF C5 CA 00 00 00 00 01 08 00 00 00 00 1D 00  // ................
    00C0: 01 08 00 00 00 00 1A 00 01 00 20 00 00 00 00 00  // .......... .....
    00D0: 00 00 80 CB 00 00 00 00 FF FF 9F CF 00 00 00 00  // ................
    00E0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "SLIC-BPC", 0x00000008)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.WMID.WMBB, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (SP1O, 0x2E)
    Name (IO1B, 0x0620)
    Name (IO1L, 0x20)
    Name (IO2B, 0x0800)
    Name (IO2L, 0x0100)
    Name (IO3B, 0x0600)
    Name (IO3L, 0x0F)
    Name (IO4B, 0x0610)
    Name (IO4L, 0x10)
    Name (IO5B, 0x0680)
    Name (IO5L, 0x10)
    Name (IO6B, 0x0690)
    Name (IO6L, 0x10)
    Name (IO7B, 0x0640)
    Name (IO7L, 0x20)
    Name (IO8B, 0x0660)
    Name (IO8L, 0x20)
    Name (IOES, Zero)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0430)
    Name (SMBS, 0x1180)
    Name (SMBL, 0x20)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (LAPB, 0xFEE00000)
    Name (VTDS, 0xFED90000)
    Name (VTDL, 0x4000)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (TOBS, 0x0460)
    Name (SUCC, One)
    Name (NVLD, 0x02)
    Name (CRIT, 0x04)
    Name (NCRT, 0x06)
    Name (LDST, One)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIT, 0xB2)
    Name (OFST, 0x35)
    Name (OTPM, One)
    Name (HESD, Zero)
    Name (OCED, One)
    Name (TPMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = One
        If (CondRefOf (_OSI, Local0))
        {
            If (_OSI ("Linux"))
            {
                OSVR = 0x03
            }

            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, One)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x4401)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Scope (_SB)
    {
        Name (PR00, Package (0x17)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }
        })
        Name (AR00, Package (0x17)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }
        })
        Name (PR20, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR20, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (((OSFL () == One) || (OSFL () == 0x02)))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Device (MCH)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
                Name (MCHR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED10000,         // Address Base
                        0x0000A000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x1FE00000,         // Address Length
                        _Y00)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y01)
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00010000,         // Address Length
                        )
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MCHR, \_SB.PCI0.MCH._Y00._BAS, PCIB)  // _BAS: Base Address
                    CreateDWordField (MCHR, \_SB.PCI0.MCH._Y00._LEN, PCIL)  // _LEN: Length
                    If ((PEXB != Zero))
                    {
                        PCIB = PEXB /* \_SB_.PCI0.PEXB */
                        PCIL = PEXL /* \_SB_.PCI0.PEXL */
                    }
                    Else
                    {
                        PCIB = PEBS /* \PEBS */
                        PCIL = PELN /* \PELN */
                    }

                    CreateDWordField (MCHR, \_SB.PCI0.MCH._Y01._BAS, VTCB)  // _BAS: Base Address
                    CreateDWordField (MCHR, \_SB.PCI0.MCH._Y01._LEN, VTCL)  // _LEN: Length
                    If ((VTDB != Zero))
                    {
                        VTCB = VTDB /* \_SB_.PCI0.VTDB */
                        VTCL = VTLN /* \_SB_.PCI0.VTLN */
                    }
                    Else
                    {
                        VTCB = VTDS /* \VTDS */
                        VTCL = VTDL /* \VTDL */
                    }

                    Return (MCHR) /* \_SB_.PCI0.MCH_.MCHR */
                }
            }

            OperationRegion (NBNV, SystemMemory, 0xCAD16D98, 0x0100)
            Field (NBNV, AnyAcc, Lock, Preserve)
            {
                NBSG,   32, 
                Offset (0x10), 
                PEXB,   32, 
                PEXL,   32, 
                MCHB,   32, 
                MCHL,   32, 
                VTDB,   32, 
                VTLN,   32
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Name (CPRB, One)
            Name (LVGA, 0x55)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xCFA00000)
            Name (MBL, 0x30600000)
            Name (MABL, 0x00000000)
            Name (MABH, 0x00000000)
            Name (MALL, 0x00000000)
            Name (MALH, 0x00000000)
            Name (MAML, 0x00000000)
            Name (MAMH, 0x00000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y02)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y04, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDFC0000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                BreakPoint
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y04._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y04._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y04._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8L)  // _MIN: Minimum Base Address
                        Local0 = (0xB4 + 0x04)
                        CreateDWordField (CRS1, Local0, MN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8L)  // _MAX: Maximum Base Address
                        Local1 = (0xBC + 0x04)
                        CreateDWordField (CRS1, Local1, MX8H)
                        CreateDWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8L)  // _LEN: Length
                        Local2 = (0xCC + 0x04)
                        CreateDWordField (CRS1, Local2, LN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        LN8L = MALL /* \_SB_.PCI0.MALL */
                        LN8H = MALH /* \_SB_.PCI0.MALH */
                        MX8L = MAML /* \_SB_.PCI0.MAML */
                        MX8H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = MBL /* \_SB_.PCI0.MBL_ */
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MN9L)  // _MIN: Minimum Base Address
                        Local0 = (0x72 + 0x04)
                        CreateDWordField (CRS2, Local0, MN9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MX9L)  // _MAX: Maximum Base Address
                        Local1 = (0x7A + 0x04)
                        CreateDWordField (CRS2, Local1, MX9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LN9L)  // _LEN: Length
                        Local2 = (0x8A + 0x04)
                        CreateDWordField (CRS2, Local2, LN9H)
                        MN9L = MABL /* \_SB_.PCI0.MABL */
                        MN9H = MABH /* \_SB_.PCI0.MABH */
                        LN9L = MALL /* \_SB_.PCI0.MALL */
                        LN9H = MALH /* \_SB_.PCI0.MALH */
                        MX9L = MAML /* \_SB_.PCI0.MAML */
                        MX9H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Method (SPTS, 1, NotSerialized)
                {
                    PS1S = One
                    PS1E = One
                    SLPS = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPS = Zero
                    PS1E = Zero
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                OperationRegion (APMP, SystemIO, SMIP, 0x02)
                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    APMC,   8, 
                    APMS,   8
                }

                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   1, 
                    BRTC,   1
                }

                OperationRegion (SMIE, SystemIO, PM30, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    PS1E,   1, 
                        ,   31, 
                    PS1S,   1, 
                    Offset (0x08)
                }

                Scope (\_SB)
                {
                    Name (SLPS, Zero)
                    OperationRegion (PMS0, SystemIO, PMBS, 0x04)
                    Field (PMS0, ByteAcc, NoLock, Preserve)
                    {
                            ,   10, 
                        RTCS,   1, 
                            ,   3, 
                        PEXS,   1, 
                        WAKS,   1, 
                        Offset (0x03), 
                        PWBT,   1, 
                        Offset (0x04)
                    }

                    Device (SLPB)
                    {
                        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((SUSW != 0xFF))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If ((SUSW != 0xFF))
                            {
                                Return (Package (0x02)
                                {
                                    SUSW, 
                                    0x04
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                })
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (PCH)
                        {
                            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                            Name (_UID, 0x01C7)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (ICHR, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y0E)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y0F)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y12)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFF000000,         // Address Base
                                    0x01000000,         // Address Length
                                    )
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (ICHR, \_SB.PCI0.PCH._Y0E._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (ICHR, \_SB.PCI0.PCH._Y0E._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (ICHR, \_SB.PCI0.PCH._Y0E._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = 0x54
                                CreateWordField (ICHR, \_SB.PCI0.PCH._Y0F._MIN, P2B)  // _MIN: Minimum Base Address
                                CreateWordField (ICHR, \_SB.PCI0.PCH._Y0F._MAX, P2H)  // _MAX: Maximum Base Address
                                CreateByteField (ICHR, \_SB.PCI0.PCH._Y0F._LEN, P2L)  // _LEN: Length
                                P2B = (PMBS + 0x58)
                                P2H = (PMBS + 0x58)
                                P2L = 0x28
                                If (SMBS)
                                {
                                    CreateWordField (ICHR, \_SB.PCI0.PCH._Y10._MIN, SMB)  // _MIN: Minimum Base Address
                                    CreateWordField (ICHR, \_SB.PCI0.PCH._Y10._MAX, SMH)  // _MAX: Maximum Base Address
                                    CreateByteField (ICHR, \_SB.PCI0.PCH._Y10._LEN, SML)  // _LEN: Length
                                    SMB = SMBS /* \SMBS */
                                    SMH = SMBS /* \SMBS */
                                    SML = SMBL /* \SMBL */
                                }

                                If (GPBS)
                                {
                                    CreateWordField (ICHR, \_SB.PCI0.PCH._Y11._MIN, IGB)  // _MIN: Minimum Base Address
                                    CreateWordField (ICHR, \_SB.PCI0.PCH._Y11._MAX, IGH)  // _MAX: Maximum Base Address
                                    CreateByteField (ICHR, \_SB.PCI0.PCH._Y11._LEN, IGL)  // _LEN: Length
                                    IGB = GPBS /* \GPBS */
                                    IGH = GPBS /* \GPBS */
                                    IGL = GPLN /* \GPLN */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (ICHR, \_SB.PCI0.PCH._Y12._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (ICHR, \_SB.PCI0.PCH._Y12._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (ICHR, \_SB.PCI0.PCH._Y13._BAS, RCB)  // _BAS: Base Address
                                CreateDWordField (ICHR, \_SB.PCI0.PCH._Y13._LEN, RCL)  // _LEN: Length
                                RCB = SRCB /* \SRCB */
                                RCL = SRCL /* \SRCL */
                                If (TCBR)
                                {
                                    CreateDWordField (ICHR, \_SB.PCI0.PCH._Y14._BAS, TCB)  // _BAS: Base Address
                                    CreateDWordField (ICHR, \_SB.PCI0.PCH._Y14._LEN, TCL)  // _LEN: Length
                                    TCB = TCBR /* \TCBR */
                                    TCL = TCLT /* \TCLT */
                                }

                                Return (ICHR) /* \_SB_.PCI0.PCH_.ICHR */
                            }
                        }

                        Device (CWDT)
                        {
                            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0454,             // Range Minimum
                                    0x0454,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    _Y15)
                            })
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (BUF0, \_SB.PCI0.CWDT._Y15._MIN, WDB)  // _MIN: Minimum Base Address
                                CreateWordField (BUF0, \_SB.PCI0.CWDT._Y15._MAX, WDH)  // _MAX: Maximum Base Address
                                WDB = (PMBS + 0x54)
                                WDH = (PMBS + 0x54)
                                Return (BUF0) /* \_SB_.PCI0.CWDT.BUF0 */
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x0111)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y16)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y16._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y16._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y16._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL3)  // _LEN: Length
                            GP30 = IO4B /* \IO4B */
                            GP31 = IO4B /* \IO4B */
                            GPL3 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x03, 
                        0x02, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x16, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x80)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO4B, IO4L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        GPES,   8, 
                        GPEE,   8, 
                        Offset (0x08), 
                        GPS0,   8, 
                        GPS1,   8, 
                        GPS2,   8, 
                        GPS3,   8, 
                        GPE0,   8, 
                        GPE1,   8, 
                        GPE2,   8, 
                        GPE3,   8
                    }

                    OperationRegion (SWCR, SystemIO, IO3B, IO3L)
                    Field (SWCR, ByteAcc, NoLock, Preserve)
                    {
                        LEDC,   8, 
                        SWCC,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 >= 0x10))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }
                        Else
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If ((Arg0 >= 0x10))
                            {
                                Local0 = IOES /* \IOES */
                            }
                            Else
                            {
                                Local0 = IOST /* \IOST */
                            }

                            Local1 = (Arg0 & 0x0F)
                            If (((One << Local1) & Local0))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1C)
                        IRQNoFlags (_Y1A)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1B)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1A._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1F)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IRQNoFlags (_Y1D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                            {2}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1D._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN3)  // _LEN: Length
                    Name (CRS4, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQ (Edge, ActiveLow, Shared, _Y21)
                            {}
                    })
                    CreateWordField (CRS4, \_SB.PCI0.SBRG.SIO1._Y21._INT, IRQL)  // _INT: Interrupts
                    CreateWordField (CRS4, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IOHL)  // _MIN: Minimum Base Address
                    CreateWordField (CRS4, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (CRS4, \_SB.PCI0.SBRG.SIO1._Y22._ALN, ALMN)  // _ALN: Alignment
                    CreateByteField (CRS4, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LENG)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR4, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IOHL = (IOAH << 0x08)
                        IOHL |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IOHL */
                        IORL = IOHL /* \_SB_.PCI0.SBRG.SIO1.IOHL */
                        LENG = 0x08
                        If (INTR)
                        {
                            INTR &= 0x0F
                            IRQL = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQL = Zero
                        }

                        EXFG ()
                        Return (CRS4) /* \_SB_.PCI0.SBRG.SIO1.CRS4 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x02))
                        {
                            If (LPTM (CGLD (Arg1)))
                            {
                                DSR2 (Arg0, Arg1)
                            }
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQT)
                        CreateByteField (Arg0, 0x14, DMAT)
                        CreateWordField (Arg0, 0x02, IOT1)
                        CreateWordField (Arg0, 0x0A, IOT2)
                        ENFG (CGLD (Arg1))
                        IOAL = (IOT1 & 0xFF)
                        IOAH = (IOT1 >> 0x08)
                        IOL2 = (IOT2 & 0xFF)
                        IOH2 = (IOT2 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR4, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IOHL)
                        CreateWordField (Arg0, 0x09, IRQL)
                        ENFG (CGLD (Arg1))
                        IOAL = (IOHL & 0xFF)
                        IOAH = (IOHL >> 0x08)
                        If (IRQL)
                        {
                            FindSetRightBit (IRQL, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }
                }

                Name (PMFG, Zero)
                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    ^SIO1.ENFG (0x04)
                    If ((0x05 != Arg0))
                    {
                        If (KBFG)
                        {
                            ^SIO1.GPE2 |= 0xE8
                        }
                        Else
                        {
                            ^SIO1.GPE2 &= 0x17
                        }

                        If (MSFG)
                        {
                            ^SIO1.GPE2 |= 0x10
                        }
                        Else
                        {
                            ^SIO1.GPE2 &= 0xEF
                        }

                        ^SIO1.GPS2 = ^SIO1.GPS2 /* \_SB_.PCI0.SBRG.SIO1.GPS2 */
                        ^SIO1.GPES = ^SIO1.GPES /* \_SB_.PCI0.SBRG.SIO1.GPES */
                        ^SIO1.GPEE = One
                        If ((0x03 == Arg0))
                        {
                            Local1 = ^SIO1.LEDC /* \_SB_.PCI0.SBRG.SIO1.LEDC */
                            Local1 &= 0xE0
                            ^SIO1.LEDC = (Local1 | 0x1C)
                            Local1 = ^SIO1.SWCC /* \_SB_.PCI0.SBRG.SIO1.SWCC */
                            Local1 &= 0xBF
                            ^SIO1.SWCC = (Local1 | 0x40)
                        }
                    }

                    ^SIO1.GPS0 = ^SIO1.GPS0 /* \_SB_.PCI0.SBRG.SIO1.GPS0 */
                    ^SIO1.GPS1 = ^SIO1.GPS1 /* \_SB_.PCI0.SBRG.SIO1.GPS1 */
                    ^SIO1.GPE0 = 0x10
                    ^SIO1.GPE1 = 0x20
                    ^SIO1.EXFG ()
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    ^SIO1.ENFG (0x04)
                    PMFG = ^SIO1.GPS2 /* \_SB_.PCI0.SBRG.SIO1.GPS2 */
                    ^SIO1.GPS0 = ^SIO1.GPS0 /* \_SB_.PCI0.SBRG.SIO1.GPS0 */
                    ^SIO1.GPS1 = ^SIO1.GPS1 /* \_SB_.PCI0.SBRG.SIO1.GPS1 */
                    ^SIO1.GPS2 = ^SIO1.GPS2 /* \_SB_.PCI0.SBRG.SIO1.GPS2 */
                    ^SIO1.GPES = ^SIO1.GPES /* \_SB_.PCI0.SBRG.SIO1.GPES */
                    ^SIO1.GPEE = Zero
                    ^SIO1.GPE0 = Zero
                    ^SIO1.GPE1 = Zero
                    Local1 = ^SIO1.LEDC /* \_SB_.PCI0.SBRG.SIO1.LEDC */
                    Local1 &= 0xE0
                    ^SIO1.LEDC = (Local1 | 0x1E)
                    Local1 = ^SIO1.SWCC /* \_SB_.PCI0.SBRG.SIO1.SWCC */
                    ^SIO1.SWCC = (Local1 & 0xBF)
                    ^SIO1.EXFG ()
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (XPRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (KBFG, One)
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x03))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (XPRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (MSFG, One)
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x03))
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.RMSC.CRS2 */
                        }
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (XPRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (UAR2)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (One))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (One, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (One, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, One)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {5}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (LPTE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (^^SIO1.LPTM (0x02))
                        {
                            Return (0x0104D041)
                        }
                        Else
                        {
                            Return (0x0004D041)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x02))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x02, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        ^^SIO1.DCRS (0x02, One)
                        If (^^SIO1.LPTM (0x02))
                        {
                            ^^SIO1.IRQE = ^^SIO1.IRQM /* \_SB_.PCI0.SBRG.SIO1.IRQM */
                            ^^SIO1.DMAE = ^^SIO1.DMAM /* \_SB_.PCI0.SBRG.SIO1.DMAM */
                            ^^SIO1.IO21 = ^^SIO1.IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                            ^^SIO1.IO22 = ^^SIO1.IO12 /* \_SB_.PCI0.SBRG.SIO1.IO12 */
                            ^^SIO1.LEN2 = ^^SIO1.LEN1 /* \_SB_.PCI0.SBRG.SIO1.LEN1 */
                            ^^SIO1.IO31 = (^^SIO1.IO21 + 0x0400)
                            ^^SIO1.IO32 = ^^SIO1.IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                            ^^SIO1.LEN3 = ^^SIO1.LEN2 /* \_SB_.PCI0.SBRG.SIO1.LEN2 */
                            Return (^^SIO1.CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                        }
                        Else
                        {
                            Return (^^SIO1.CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                        }
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x02)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        If (^^SIO1.LPTM (0x02))
                        {
                            Return (EPPR) /* \_SB_.PCI0.SBRG.LPTE.EPPR */
                        }
                        Else
                        {
                            Return (LPPR) /* \_SB_.PCI0.SBRG.LPTE.LPPR */
                        }
                    }

                    Name (LPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        }
                        EndDependentFn ()
                    })
                    Name (EPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (BR20)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PR20) /* \_SB_.PR20 */
                }
            }

            Device (SAT0)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Name (^NATA, Package (0x01)
                {
                    0x001F0002
                })
                Name (\FZTF, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
                })
                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        0x78, 
                        0x5A, 
                        0x3C, 
                        0x28, 
                        0x1E, 
                        0x14
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        One, 
                        0x02, 
                        One
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        One, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }
                })
                Name (TMD0, Buffer (0x14){})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GMCR, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Name (GSCR, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << One)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.SAT0.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.SAT0.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.SAT0.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.SAT0.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.SAT0.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.SAT0.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.SAT0.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT0.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.SAT0.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.SAT0.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT0.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.SAT0.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.SAT0.GSCR */
                        If ((Local0 & One))
                        {
                            PM3E = One
                        }
                        Else
                        {
                            PM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            PM6E = One
                        }
                        Else
                        {
                            PM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            PMAE = One
                        }
                        Else
                        {
                            PMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            PS3E = One
                        }
                        Else
                        {
                            PS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            PS6E = One
                        }
                        Else
                        {
                            PS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            PSAE = One
                        }
                        Else
                        {
                            PSAE = Zero
                        }

                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << One)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.SAT0.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.SAT0.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.SAT0.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.SAT0.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.SAT0.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.SAT0.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.SAT0.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT0.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.SAT0.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.SAT0.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT0.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.SAT0.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.SAT0.GSCR */
                        If ((Local0 & One))
                        {
                            SM3E = One
                        }
                        Else
                        {
                            SM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            SM6E = One
                        }
                        Else
                        {
                            SM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            SMAE = One
                        }
                        Else
                        {
                            SMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            SS3E = One
                        }
                        Else
                        {
                            SS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            SS6E = One
                        }
                        Else
                        {
                            SS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            SSAE = One
                        }
                        Else
                        {
                            SSAE = Zero
                        }

                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.SAT0.TMD0 */
                    }

                    If ((Arg1 & 0x20))
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    If ((Arg4 & 0x20))
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (TIM0 [0x02]), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If ((Arg1 & 0x07))
                    {
                        Local5 = Arg2
                        If ((Arg1 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg1 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= One
                    }

                    If ((Arg4 & 0x07))
                    {
                        Local5 = Arg5
                        If ((Arg4 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg4 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.SAT0.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.SAT0.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF)
                    {
                        GMUE = Zero
                        GMUT = Zero
                        GSUE = Zero
                        GSUT = Zero
                        If ((CHNF & One))
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA0, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GMUE |= One
                            If ((Local0 > 0x02))
                            {
                                GMUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        ElseIf (((PIO0 == Ones) | (PIO0 == Zero)))
                        {
                            If (((DMA0 < Ones) & (DMA0 > Zero)))
                            {
                                PIO0 = DMA0 /* \_SB_.PCI0.SAT0.DMA0 */
                                GMUE |= 0x80
                            }
                        }

                        If ((CHNF & 0x04))
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA1, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GSUE |= One
                            If ((Local0 > 0x02))
                            {
                                GSUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        ElseIf (((PIO1 == Ones) | (PIO1 == Zero)))
                        {
                            If (((DMA1 < Ones) & (DMA1 > Zero)))
                            {
                                PIO1 = DMA1 /* \_SB_.PCI0.SAT0.DMA1 */
                                GSUE |= 0x80
                            }
                        }

                        If ((CHNF & 0x02))
                        {
                            GMUE |= 0x20
                        }

                        If ((CHNF & 0x08))
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO0, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                        GMPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO1, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [0x02]) [Local0])
                        GSPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         // .......
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         // .......
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         // .......
                })
                Name (ATA0, Buffer (0x1D){})
                Name (ATA1, Buffer (0x1D){})
                Name (ATA2, Buffer (0x1D){})
                Name (ATA3, Buffer (0x1D){})
                Name (ATAB, Buffer (0x1D){})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.SAT0.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.SAT0.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.SAT0.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.SAT0.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.SAT0.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If ((CHNF & 0x10))
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.SAT0.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.SAT0.PIO0 */
                        }

                        If ((CHNF & 0x04))
                        {
                            If ((CHNF & 0x10))
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.SAT0.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.SAT0.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.SAT0.PIO0 */
                        If ((CHNF & One))
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.SAT0.DMA0 */
                        }
                    }

                    If ((((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT))
                    {
                        Local1 = Match (DerefOf (TIM0 [0x03]), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If ((Local1 > 0x05))
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    ElseIf (((ID63 & 0xFF00) && PIOT))
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x03)
                        Local1 = (0x20 | DerefOf (DerefOf (TIM0 [0x07]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (DerefOf (TIM0 [0x06]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }
                    ElseIf ((ID49 & 0x0400))
                    {
                        GTFB (AT01, One, Local7)
                    }

                    If (((ID59 & 0x0100) && (ID59 & 0xFF)))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.SAT0.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.SAT0.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.SAT0.RATA.RETB */
                    Return (Concatenate (RETB, FZTF))
                }

                Device (PRT0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }

                Device (PRT1)
                {
                    Name (_ADR, 0x0001FFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x0002FFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x0003FFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x0004FFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x0005FFFF)  // _ADR: Address
                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (FZTF) /* \FZTF */
                    }
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        0x78, 
                        0x5A, 
                        0x3C, 
                        0x28, 
                        0x1E, 
                        0x14
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        One, 
                        0x02, 
                        One
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        One, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }
                })
                Name (TMD0, Buffer (0x14){})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GMCR, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Name (GSCR, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << One)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.SAT1.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.SAT1.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.SAT1.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.SAT1.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.SAT1.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.SAT1.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.SAT1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT1.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.SAT1.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.SAT1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT1.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.SAT1.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.SAT1.GSCR */
                        If ((Local0 & One))
                        {
                            PM3E = One
                        }
                        Else
                        {
                            PM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            PM6E = One
                        }
                        Else
                        {
                            PM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            PMAE = One
                        }
                        Else
                        {
                            PMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            PS3E = One
                        }
                        Else
                        {
                            PS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            PS6E = One
                        }
                        Else
                        {
                            PS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            PSAE = One
                        }
                        Else
                        {
                            PSAE = Zero
                        }

                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << One)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.SAT1.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.SAT1.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.SAT1.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.SAT1.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.SAT1.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.SAT1.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.SAT1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT1.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.SAT1.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.SAT1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT1.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.SAT1.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.SAT1.GSCR */
                        If ((Local0 & One))
                        {
                            SM3E = One
                        }
                        Else
                        {
                            SM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            SM6E = One
                        }
                        Else
                        {
                            SM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            SMAE = One
                        }
                        Else
                        {
                            SMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            SS3E = One
                        }
                        Else
                        {
                            SS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            SS6E = One
                        }
                        Else
                        {
                            SS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            SSAE = One
                        }
                        Else
                        {
                            SSAE = Zero
                        }

                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.SAT1.TMD0 */
                    }

                    If ((Arg1 & 0x20))
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    If ((Arg4 & 0x20))
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (TIM0 [0x02]), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If ((Arg1 & 0x07))
                    {
                        Local5 = Arg2
                        If ((Arg1 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg1 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= One
                    }

                    If ((Arg4 & 0x07))
                    {
                        Local5 = Arg5
                        If ((Arg4 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg4 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.SAT1.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.SAT1.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF)
                    {
                        GMUE = Zero
                        GMUT = Zero
                        GSUE = Zero
                        GSUT = Zero
                        If ((CHNF & One))
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA0, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GMUE |= One
                            If ((Local0 > 0x02))
                            {
                                GMUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        ElseIf (((PIO0 == Ones) | (PIO0 == Zero)))
                        {
                            If (((DMA0 < Ones) & (DMA0 > Zero)))
                            {
                                PIO0 = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                                GMUE |= 0x80
                            }
                        }

                        If ((CHNF & 0x04))
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA1, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GSUE |= One
                            If ((Local0 > 0x02))
                            {
                                GSUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        ElseIf (((PIO1 == Ones) | (PIO1 == Zero)))
                        {
                            If (((DMA1 < Ones) & (DMA1 > Zero)))
                            {
                                PIO1 = DMA1 /* \_SB_.PCI0.SAT1.DMA1 */
                                GSUE |= 0x80
                            }
                        }

                        If ((CHNF & 0x02))
                        {
                            GMUE |= 0x20
                        }

                        If ((CHNF & 0x08))
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO0, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                        GMPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO1, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [0x02]) [Local0])
                        GSPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         // .......
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         // .......
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         // .......
                })
                Name (ATA0, Buffer (0x1D){})
                Name (ATA1, Buffer (0x1D){})
                Name (ATA2, Buffer (0x1D){})
                Name (ATA3, Buffer (0x1D){})
                Name (ATAB, Buffer (0x1D){})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.SAT1.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.SAT1.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.SAT1.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.SAT1.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.SAT1.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If ((CHNF & 0x10))
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.SAT1.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.SAT1.PIO0 */
                        }

                        If ((CHNF & 0x04))
                        {
                            If ((CHNF & 0x10))
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.SAT1.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.SAT1.PIO0 */
                        If ((CHNF & One))
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                        }
                    }

                    If ((((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT))
                    {
                        Local1 = Match (DerefOf (TIM0 [0x03]), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If ((Local1 > 0x05))
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    ElseIf (((ID63 & 0xFF00) && PIOT))
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x03)
                        Local1 = (0x20 | DerefOf (DerefOf (TIM0 [0x07]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (DerefOf (TIM0 [0x06]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }
                    ElseIf ((ID49 & 0x0400))
                    {
                        GTFB (AT01, One, Local7)
                    }

                    If (((ID59 & 0x0100) && (ID59 & 0xFF)))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.SAT1.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.SAT1.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.SAT1.RATA.RETB */
                    Return (Concatenate (RETB, FZTF))
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMIO, SystemIO, SMBS, SMBL)
                Field (SMIO, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    HCNT,   8, 
                    HCMD,   8, 
                    TSAD,   8, 
                    HDT0,   8, 
                    HDT1,   8, 
                    HBDT,   8, 
                    RSAD,   8, 
                    RSDA,   16, 
                    AUST,   8, 
                    AUCT,   8, 
                    SMLP,   8, 
                    SMBP,   8, 
                    SSTS,   8, 
                    SCMD,   8, 
                    NDAD,   8, 
                    NDLB,   8, 
                    NDHB,   8
                }

                Method (SMCS, 0, NotSerialized)
                {
                    HSTS = 0x20
                }

                Scope (\_GPE)
                {
                    Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        \_SB.PCI0.SMB.HSTS = 0x20
                    }

                    Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        \_SB.PCI0.SMB.HSTS = 0x20
                    }
                }
            }

            Device (EUSB)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR10)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision           = 0x1,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x0,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "UNKNOWN",
                            PLD_VerticalPosition   = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x0,
                            PLD_GroupPosition      = 0x0,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x0,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        Device (PR30)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "LEFT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR31)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR32)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR33)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR34)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "UNKNOWN",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR35)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "UNKNOWN",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR36)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "UNKNOWN",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR37)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "UNKNOWN",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (USBE)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR10)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision           = 0x1,
                            PLD_IgnoreColor        = 0x1,
                            PLD_Red                = 0x0,
                            PLD_Green              = 0x0,
                            PLD_Blue               = 0x0,
                            PLD_Width              = 0x0,
                            PLD_Height             = 0x0,
                            PLD_UserVisible        = 0x0,
                            PLD_Dock               = 0x0,
                            PLD_Lid                = 0x0,
                            PLD_Panel              = "UNKNOWN",
                            PLD_VerticalPosition   = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape              = "UNKNOWN",
                            PLD_GroupOrientation   = 0x0,
                            PLD_GroupToken         = 0x0,
                            PLD_GroupPosition      = 0x0,
                            PLD_Bay                = 0x0,
                            PLD_Ejectable          = 0x0,
                            PLD_EjectRequired      = 0x0,
                            PLD_CabinetNumber      = 0x0,
                            PLD_CardCageNumber     = 0x0,
                            PLD_Reference          = 0x0,
                            PLD_Rotation           = 0x0,
                            PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        Device (PR30)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "LEFT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR31)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR32)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR33)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR34)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "UNKNOWN",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PR35)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x1,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (PEX0)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PR11) /* \_SB_.PR11 */
                }
            }

            Device (PEX1)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PR12) /* \_SB_.PR12 */
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PR13) /* \_SB_.PR13 */
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }
            }

            Device (PEX4)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }
            }

            Device (PEX5)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }
            }

            Device (PEX6)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PR17) /* \_SB_.PR17 */
                }
            }

            Device (PEX7)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXRC, PCI_Config, Zero, 0x0100)
                Field (PXRC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    Offset (0x62), 
                    PMS,    1, 
                    PMP,    1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPE,    1, 
                    PCE,    1, 
                        ,   30, 
                    HPS,    1, 
                    PCS,    1
                }

                Method (CSS, 0, NotSerialized)
                {
                    PMS = One
                    PCS = One
                    PMS = One
                }

                Method (SPRT, 1, NotSerialized)
                {
                    CSS ()
                    PCE = One
                    CSS ()
                }

                Method (WPRT, 1, NotSerialized)
                {
                    PCE = Zero
                    CSS ()
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PR18) /* \_SB_.PR18 */
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }
            }

            Device (P0P3)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }
            }

            Device (P0P4)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (GBE)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (GBE1)
            {
                Name (_ADR, 0x00190007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.BR20, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.EUSB, 0x02) // Device Wake
                Notify (\_SB.PCI0.USBE, 0x02) // Device Wake
                Notify (\_SB.PCI0.GBE, 0x02) // Device Wake
                Notify (\_SB.PCI0.GBE1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX4, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX5, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX6, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX7, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P3, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P4, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x08, 0x03))
            }
        }
    }

    OperationRegion (_SB.PCI0.SBRG.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.SBRG.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        CreateWordField (BUFA, One, IRA0)
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Method (SIOH, 0, NotSerialized)
        {
            If (WMIT)
            {
                ^^^WMID.WMBB (One)
            }

            If (WMIF)
            {
                ^^^WMID.WMBB (0x02)
            }

            If (WMIH)
            {
                ^^^WMID.WMBB (0x03)
            }

            If ((PMFG & 0xE8))
            {
                Notify (PS2K, 0x02) // Device Wake
            }

            If ((PMFG & 0x10))
            {
                Notify (PS2M, 0x02) // Device Wake
            }
        }
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xCAD17C18, 0x038C)
        OperationRegion (CSDT, SystemMemory, 0xCAD18E18, 0x0084)
        Name (NCST, 0x02)
        Name (NPSS, 0x0B)
        Name (HNDL, 0x80000000)
        Name (CHDL, 0x80000000)
        Name (TNLP, 0x0004)
        Name (CINT, Zero)
        Name (PDCV, 0xFFFFFFFF)
        Name (APSS, Package (0x0B)
        {
            Package (0x06)
            {
                0x0CE5, 
                0x00017318, 
                0x000A, 
                0x000A, 
                0x2500, 
                0x2500
            }, 

            Package (0x06)
            {
                0x0CE4, 
                0x00017318, 
                0x000A, 
                0x000A, 
                0x2100, 
                0x2100
            }, 

            Package (0x06)
            {
                0x0C1C, 
                0x000153D8, 
                0x000A, 
                0x000A, 
                0x1F00, 
                0x1F00
            }, 

            Package (0x06)
            {
                0x0B54, 
                0x00013880, 
                0x000A, 
                0x000A, 
                0x1D00, 
                0x1D00
            }, 

            Package (0x06)
            {
                0x0A8C, 
                0x00011940, 
                0x000A, 
                0x000A, 
                0x1B00, 
                0x1B00
            }, 

            Package (0x06)
            {
                0x09C4, 
                0x000101D0, 
                0x000A, 
                0x000A, 
                0x1900, 
                0x1900
            }, 

            Package (0x06)
            {
                0x08FC, 
                0x0000E678, 
                0x000A, 
                0x000A, 
                0x1700, 
                0x1700
            }, 

            Package (0x06)
            {
                0x0834, 
                0x0000CF08, 
                0x000A, 
                0x000A, 
                0x1500, 
                0x1500
            }, 

            Package (0x06)
            {
                0x076C, 
                0x0000B798, 
                0x000A, 
                0x000A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x0000A028, 
                0x000A, 
                0x000A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x00009470, 
                0x000A, 
                0x000A, 
                0x1000, 
                0x1000
            }
        })
        Name (PTCI, Package (0x02)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x04,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000410, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x04,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000410, // Address
                    ,)
            }
        })
        Name (\PSTE, Zero)
        Name (\TSTE, Zero)
        Name (TSSI, Package (0x01)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x1E, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x1C, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x1A, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x18, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x16, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x14, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x12, 
                Zero
            }
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }
        })
        Name (CMST, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x02, 
                0x50, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000020, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0x68, 
                0x015E
            }
        })
        Name (CIST, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        ,)
                }, 

                0x02, 
                0x50, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        ,)
                }, 

                0x03, 
                0x68, 
                0x015E
            }
        })
        Method (CST, 0, NotSerialized)
        {
            If (((PDCV & 0x0200) != 0x0200))
            {
                If ((NCST == 0x02))
                {
                    NCST = One
                }
            }

            If ((NCST == Zero))
            {
                Return (C1ST) /* \_PR_.C1ST */
            }

            If ((NCST == One))
            {
                Return (CIST) /* \_PR_.CIST */
            }

            If ((NCST == 0x02))
            {
                Return (CMST) /* \_PR_.CMST */
            }

            Return (C1ST) /* \_PR_.C1ST */
        }

        Method (PDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (OSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS)
            CreateDWordField (Arg3, 0x04, CAP)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS [Zero] = 0x06
                Return (Arg3)
            }

            PDCV &= CAP /* \_PR_.OSC_.CAP_ */
            If ((CINT == Zero))
            {
                CINT = One
                If (((PDCV & 0x09) == 0x09))
                {
                    If ((NPSS != Zero))
                    {
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }

                If (((PDCV & 0x10) == 0x10))
                {
                    If ((NCST != 0xFF))
                    {
                        Load (CSDT, CHDL) /* \_PR_.CHDL */
                    }
                }
            }

            Return (Arg3)
        }
    }

    OperationRegion (_SB.PCI0.SBRG.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PCI0.SBRG.LPCR, ByteAcc, NoLock, Preserve)
    {
        CADR,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, NotSerialized)
    {
        Local0 = 0xFF
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
        _T_0 = (Arg0 + Zero)
        If ((_T_0 == 0x03F8))
        {
            Local0 = Zero
        }
        ElseIf ((_T_0 == 0x02F8))
        {
            Local0 = One
        }
        ElseIf ((_T_0 == 0x0220))
        {
            Local0 = 0x02
        }
        ElseIf ((_T_0 == 0x0228))
        {
            Local0 = 0x03
        }
        ElseIf ((_T_0 == 0x0238))
        {
            Local0 = 0x04
        }
        ElseIf ((_T_0 == 0x02E8))
        {
            Local0 = 0x05
        }
        ElseIf ((_T_0 == 0x0338))
        {
            Local0 = 0x06
        }
        ElseIf ((_T_0 == 0x03E8))
        {
            Local0 = 0x07
        }

        Return (Local0)
    }

    Method (RRIO, 4, NotSerialized)
    {
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
        _T_0 = (Arg0 + Zero)
        If ((_T_0 == Zero))
        {
            CALE = Zero
            Local0 = UXDV (Arg2)
            If ((Local0 != 0xFF))
            {
                CADR = Local0
            }

            If (Arg1)
            {
                CALE = One
            }
        }
        ElseIf ((_T_0 == One))
        {
            CBLE = Zero
            Local0 = UXDV (Arg2)
            If ((Local0 != 0xFF))
            {
                CBDR = Local0
            }

            If (Arg1)
            {
                CBLE = One
            }
        }
        ElseIf ((_T_0 == 0x02))
        {
            LTLE = Zero
            If ((Arg2 == 0x0378))
            {
                LTDR = Zero
            }

            If ((Arg2 == 0x0278))
            {
                LTDR = One
            }

            If ((Arg2 == 0x03BC))
            {
                LTDR = 0x02
            }

            If (Arg1)
            {
                LTLE = One
            }
        }
        ElseIf ((_T_0 == 0x03))
        {
            FDLE = Zero
            If ((Arg2 == 0x03F0))
            {
                FDDR = Zero
            }

            If ((Arg2 == 0x0370))
            {
                FDDR = One
            }

            If (Arg1)
            {
                FDLE = One
            }
        }
        ElseIf ((_T_0 == 0x08))
        {
            If ((Arg2 == 0x0200))
            {
                If (Arg1)
                {
                    GLLE = One
                }
                Else
                {
                    GLLE = Zero
                }
            }

            If ((Arg2 == 0x0208))
            {
                If (Arg1)
                {
                    GHLE = One
                }
                Else
                {
                    GHLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x09))
        {
            If ((Arg2 == 0x0200))
            {
                If (Arg1)
                {
                    GLLE = One
                }
                Else
                {
                    GLLE = Zero
                }
            }

            If ((Arg2 == 0x0208))
            {
                If (Arg1)
                {
                    GHLE = One
                }
                Else
                {
                    GHLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0A))
        {
            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
            {
                If (Arg1)
                {
                    KCLE = One
                }
                Else
                {
                    KCLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0B))
        {
            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
            {
                If (Arg1)
                {
                    MCLE = One
                }
                Else
                {
                    MCLE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0C))
        {
            If ((Arg2 == 0x2E))
            {
                If (Arg1)
                {
                    C1LE = One
                }
                Else
                {
                    C1LE = Zero
                }
            }

            If ((Arg2 == 0x4E))
            {
                If (Arg1)
                {
                    C2LE = One
                }
                Else
                {
                    C2LE = Zero
                }
            }
        }
        ElseIf ((_T_0 == 0x0D))
        {
            If ((Arg2 == 0x2E))
            {
                If (Arg1)
                {
                    C1LE = One
                }
                Else
                {
                    C1LE = Zero
                }
            }

            If ((Arg2 == 0x4E))
            {
                If (Arg1)
                {
                    C2LE = One
                }
                Else
                {
                    C2LE = Zero
                }
            }
        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Name (CRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        _Y23)
                })
                OperationRegion (HCNT, SystemMemory, HPTC, 0x04)
                Field (HCNT, DWordAcc, NoLock, Preserve)
                {
                    HPTS,   2, 
                        ,   5, 
                    HPTE,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (HPTE)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (CRS, \_SB.PCI0.HPET._Y23._BAS, HTBS)  // _BAS: Base Address
                    Local0 = (HPTS * 0x1000)
                    HTBS = (Local0 + 0xFED00000)
                    Return (CRS) /* \_SB_.PCI0.HPET.CRS_ */
                }
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
        \_SB.SLPS = One
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Device (OMSC)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x0E11)  // _UID: Unique ID
    }

    Device (_SB.RMEM)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
    }

    Scope (_SB.PCI0)
    {
        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (OPBS, 0xFFFFFF00)
            Method (OPBA, 0, NotSerialized)
            {
                Local0 = ASLS /* \_SB_.PCI0.GFX0.ASLS */
                If ((Local0 == 0xFFFFFFFF))
                {
                    Local0 = 0xFF000000
                }

                Return (Local0)
            }

            Scope (^^PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                        ,   20, 
                    TASM,   12, 
                    TSMH,   7, 
                    Offset (0x68)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0x8C), 
                CDCT,   10, 
                Offset (0x8E), 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xBC), 
                ASLS,   32
            }

            Name (M512, 0x0200)
            Name (M1GB, 0x0400)
            Name (M1G5, 0x0600)
            Name (M2GB, 0x0800)
            OperationRegion (IGDM, SystemMemory, OPBA (), 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                Offset (0xE0), 
                KSV0,   32, 
                KSV1,   8, 
                Offset (0xF0), 
                IBTT,   8, 
                IPSC,   8, 
                IPAT,   8, 
                IBIA,   8, 
                IBLC,   8, 
                ITVF,   4, 
                ITVM,   4, 
                IDVM,   8, 
                IDVS,   8, 
                ISSC,   8, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                Offset (0x400), 
                GVD1,   57344
            }

            OperationRegion (TCOI, SystemIO, TOBS, 0x08)
            Field (TCOI, WordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                    ,   9, 
                SCIS,   1, 
                Offset (0x06)
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Method (GSCI, 0, NotSerialized)
            {
                If ((GEFC == 0x04))
                {
                    GXFC = GBDA ()
                }

                If ((GEFC == 0x06))
                {
                    GXFC = SBCB ()
                }

                SCIS = One
                GEFC = Zero
                GSSE = Zero
                SCIE = Zero
                Return (Zero)
            }

            Method (GBDA, 0, NotSerialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0679
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x0240
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* \_SB_.PCI0.GFX0.IPSC */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LDST << 0x10)
                    PARM ^= 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x06))
                {
                    PARM = ITVF /* \_SB_.PCI0.GFX0.ITVF */
                    PARM |= (ITVM << 0x04)
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x07))
                {
                    Name (MEMS, 0x0D)
                    PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (CDCT << 0x15) /* \_SB_.PCI0.GFX0.PARM */
                    If ((IDVM == One))
                    {
                        MEMS = 0x11
                    }

                    If ((TSMH != Zero))
                    {
                        PARM |= (0x08 << MEMS)
                    }
                    ElseIf ((TASM < M512))
                    {
                        PARM |= (One << MEMS)
                    }
                    ElseIf ((TASM < M1GB))
                    {
                        PARM |= (0x02 << MEMS)
                    }
                    ElseIf ((TASM < M1G5))
                    {
                        PARM |= (0x04 << MEMS)
                    }
                    ElseIf ((TASM < M2GB))
                    {
                        PARM |= (0x06 << MEMS)
                    }
                    Else
                    {
                        PARM |= (0x08 << MEMS)
                    }

                    GESF = One
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* \_SB_.PCI0.GFX0.KSV0 */
                    GESF = KSV1 /* \_SB_.PCI0.GFX0.KSV1 */
                    Return (SUCC) /* \SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \CRIT */
            }

            Method (SBCB, 0, NotSerialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x20
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x06))
                {
                    Local0 = (PARM >> 0x1C)
                    If ((Local0 == Zero))
                    {
                        ITVF = (PARM & 0x0F)
                        ITVM = (PARM & 0xF0)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x07))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x0A))
                {
                    Local0 = (PARM >> 0x1C)
                    If ((Local0 == Zero))
                    {
                        IPSC = (PARM & 0xFF)
                        IPAT = (((PARM >> 0x08) & 0xFF) - One)
                        IBLC = ((PARM >> 0x12) & 0x03)
                        IBIA = ((PARM >> 0x14) & 0x07)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x0B))
                {
                    If ((((PARM >> 0x0B) & 0x03) == 0x02))
                    {
                        Local0 = ((PARM >> 0x0D) & 0x0F)
                        Local1 = ((PARM >> 0x11) & 0x0F)
                        If (Local0)
                        {
                            IDVM = Zero
                            IDVS = Local0
                        }

                        If (Local1)
                        {
                            IDVM = One
                            IDVS = Local1
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LDST << 0x08)
                    PARM += 0x0100
                    NAnd (PARM, 0x0200, PARM) /* \_SB_.PCI0.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            Method (OPTS, 1, NotSerialized)
            {
                If ((Arg0 == 0x03))
                {
                    OPBS = ASLS /* \_SB_.PCI0.GFX0.ASLS */
                }
            }

            Method (OWAK, 1, NotSerialized)
            {
                If ((Arg0 == 0x03))
                {
                    ASLS = OPBS /* \_SB_.PCI0.GFX0.OPBS */
                    GSES = One
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.GFX0.GSCI ()
        }
    }

    Device (HTAM)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x05)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HESD == Zero))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACCS,   8, 
            Offset (0x18), 
            TSTA,   8, 
            TBCA,   8, 
            Offset (0xF00), 
            TVID,   16, 
            TDID,   16
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((VIDT == 0x8086))
            {
                Return (Zero)
            }
            Else
            {
                If ((HESD == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((_T_0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((_T_0 == 0x02))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    If ((OTPM == Zero))
                    {
                        Return (0x02)
                    }

                    If ((TMF2 == 0x05))
                    {
                        If ((OCED == Zero))
                        {
                            Return (0x02)
                        }
                    }
                    ElseIf ((TMF2 == 0x0E))
                    {
                        If ((OCED == Zero))
                        {
                            Return (0x02)
                        }
                    }

                    TMF1 = 0x12
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                ElseIf ((_T_0 == 0x03))
                {
                    Name (PPI1, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    DAT = 0x11
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (One)
                    }

                    PPI1 [One] = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                    Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_._DSM.PPI1 */
                }
                ElseIf ((_T_0 == 0x04))
                {
                    If ((OTPM == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                ElseIf ((_T_0 == 0x05))
                {
                    Name (PPI2, Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    })
                    DAT = 0x21
                    INQ = OFST /* \OFST */
                    PPI2 [One] = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    PPI2 [One] = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                    DAT = 0x31
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((DAT == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                    }

                    Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_._DSM.PPI2 */
                }
                ElseIf ((_T_0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_1 = ToInteger (Arg2)
                If ((_T_1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((_T_1 == One))
                {
                    TMF1 = 0x22
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (Buffer (One)
                        {
                             0x01                                             // .
                        })
                    }

                    ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (Buffer (One)
                        {
                             0x01                                             // .
                        })
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (ITPD, PCI_Config, 0xE8, 0x04)
        Field (ITPD, DWordAcc, NoLock, Preserve)
        {
                ,   15, 
            TPDI,   1
        }

        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
        Field (TPMR, AnyAcc, NoLock, Preserve)
        {
            ACC0,   8
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((ACC0 != 0xFF))
            {
                If ((VIDT == 0x8086))
                {
                    If (TPMF)
                    {
                        If ((HESD == Zero))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (0x03)
                }
            }

            Return (Zero)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((_T_0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((_T_0 == 0x02))
                {
                    ToInteger (DerefOf (Arg3 [Zero]), TMF2) /* \TMF2 */
                    If ((OTPM == Zero))
                    {
                        Return (0x02)
                    }

                    If ((TMF2 == 0x05))
                    {
                        If ((OCED == Zero))
                        {
                            Return (0x02)
                        }
                    }
                    ElseIf ((TMF2 == 0x0E))
                    {
                        If ((OCED == Zero))
                        {
                            Return (0x02)
                        }
                    }

                    TMF1 = 0x12
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    DAT = TMF2 /* \TMF2 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                ElseIf ((_T_0 == 0x03))
                {
                    Name (PPI1, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    DAT = 0x11
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (One)
                    }

                    PPI1 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    Return (PPI1) /* \_SB_.PCI0.ITPM._DSM.PPI1 */
                }
                ElseIf ((_T_0 == 0x04))
                {
                    If ((OTPM == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                ElseIf ((_T_0 == 0x05))
                {
                    Name (PPI2, Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    })
                    DAT = 0x21
                    INQ = OFST /* \OFST */
                    PPI2 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    PPI2 [One] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    DAT = 0x31
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    If ((DAT == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((DAT == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                    }

                    Return (PPI2) /* \_SB_.PCI0.ITPM._DSM.PPI2 */
                }
                ElseIf ((_T_0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_1 = ToInteger (Arg2)
                If ((_T_1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((_T_1 == One))
                {
                    TMF1 = 0x22
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    ToInteger (DerefOf (Arg3 [Zero]), TMF1) /* \TMF1 */
                    DAT = TMF1 /* \TMF1 */
                    INQ = OFST /* \OFST */
                    If ((DAT == 0xFF))
                    {
                        Return (0x02)
                    }

                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    OperationRegion (SSCR, SystemIO, 0xB2, One)
    Field (SSCR, ByteAcc, NoLock, Preserve)
    {
        SSMI,   8
    }

    OperationRegion (SSSR, SystemIO, 0xB3, One)
    Field (SSSR, ByteAcc, NoLock, Preserve)
    {
        DSMI,   8
    }

    OperationRegion (VECT, SystemMemory, 0xCAD01018, 0x1500)
    Field (VECT, AnyAcc, NoLock, Preserve)
    {
        WMIF,   1, 
        WMIT,   1, 
        WMIH,   1, 
        WMIP,   1, 
        WMIS,   1, 
        TEVT,   1, 
        HTHE,   1, 
        SSMC,   1, 
        ACBU,   1, 
        ACBD,   1, 
        Offset (0x04), 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        EDI,    32, 
        WMPI,   8, 
        WMBH,   8, 
        WM10,   8, 
        WMIB,   33536
    }

    Method (WBTM, 1, Serialized)
    {
        Local0 = Arg0
        If ((Arg0 > 0x1050))
        {
            Local0 = 0x1050
        }

        Return (Local0)
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SPTS (Arg0)
            \_SB.PCI0.PEX0.SPRT (Arg0)
            \_SB.PCI0.PEX1.SPRT (Arg0)
            \_SB.PCI0.PEX2.SPRT (Arg0)
            \_SB.PCI0.PEX3.SPRT (Arg0)
            \_SB.PCI0.PEX4.SPRT (Arg0)
            \_SB.PCI0.PEX5.SPRT (Arg0)
            \_SB.PCI0.PEX6.SPRT (Arg0)
            \_SB.PCI0.PEX7.SPRT (Arg0)
            \_SB.PCI0.GFX0.OPTS (Arg0)
            \_SB.PCI0.SBRG.SIOS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SWAK (Arg0)
        If (\_SB.PCI0.PEX0.PMS)
        {
            \_SB.PCI0.PEX0.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX0.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX1.PMS)
        {
            \_SB.PCI0.PEX1.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX1.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX2.PMS)
        {
            \_SB.PCI0.PEX2.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX2.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX3.PMS)
        {
            \_SB.PCI0.PEX3.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX3.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX4.PMS)
        {
            \_SB.PCI0.PEX4.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX4, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX4.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX5.PMS)
        {
            \_SB.PCI0.PEX5.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX5, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX5.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX6.PMS)
        {
            \_SB.PCI0.PEX6.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX6, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX6.WPRT (Arg0)
        }

        If (\_SB.PCI0.PEX7.PMS)
        {
            \_SB.PCI0.PEX7.WPRT (Arg0)
            Notify (\_SB.PCI0.PEX7, 0x02) // Device Wake
        }
        Else
        {
            \_SB.PCI0.PEX7.WPRT (Arg0)
        }

        \_SB.PCI0.GFX0.OWAK (Arg0)
        \_SB.PCI0.SBRG.SIOW (Arg0)
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 000000F4
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 8E
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : CAD18F80
[028h 0040 004h]                DSDT Address : CAC30170
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 03 [Workstation]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : C1
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000450
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : C0
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000CAC30170
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200 008h]                     Address : 0000000000000450

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 8E 48 50 51 4F 45 4D  // FACP......HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 20  // SLIC-BPC. ..AMI 
    0020: 13 00 01 00 80 8F D1 CA 70 01 C3 CA 01 03 09 00  // ........p.......
    0030: B2 00 00 00 A0 A1 00 C1 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 C0  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
    0070: A5 84 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 70 01 C3 CA  // ............p...
    0090: 00 00 00 00 01 20 00 00 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 04 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 84
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI."
[020h 0032 004h]       Asl Compiler Revision : 00000004

[024h 0036 004h]           Hardware Block ID : 8086A701

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 84 48 50 51 4F 45 4D  // HPET8.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 41 4D 49 2E  // SLIC-BPC. ..AMI.
    0020: 04 00 00 00 01 A7 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : CE
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00000097

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 CE 48 50 51 4F 45 4D  // MCFG<.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 09 20 07 01 4D 53 46 54  // SLIC-BPC. ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C8
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : ""
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 C8 48 50 51 4F 45 4D /* SLICv.....HPQOEM */\
/* 034h 0052  16 */                            53 4C 49 43 2D 42 50 43 01 00 00 00 00 00 00 00 /* SLIC-BPC........ */\
/* 044h 0068  16 */                            00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD /* [.`V.X.....\.O.. */\
/* 074h 0116  16 */                            1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 /* ..........Y...>. */\
/* 084h 0132  16 */                            31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D /* 1..t..;.[...|9.. */\
/* 094h 0148  16 */                            7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 /* |"..*....m.....! */\
/* 0A4h 0164  16 */                            96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38 /* ...h..DE><....78 */\
/* 0B4h 0180  16 */                            57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3 /* W........~.@.Q:. */\
/* 0C4h 0196  16 */                            02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0 /* .H...r.Bx.G.T... */\
/* 0D4h 0212  16 */                            93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 /* ...........2..T. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F /* ............HPQO */\
/* 0F4h 0244  16 */                            45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57 /* EMSLIC-BPCWINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94 /* ......3.. ..c... */\
/* 124h 0292  16 */                            A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4 /* .`07....{...r... */\
/* 134h 0308  16 */                            0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B /* ..y<.F....`.c..{ */\
/* 144h 0324  16 */                            5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66 /* \..S.....g[l.E.f */\
/* 154h 0340  16 */                            49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9 /* I#.3..v.1p5.W... */\
/* 164h 0356  16 */                            56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F /* Vo?A..:..lgC.p.. */\
/* 174h 0372   2 */                            B4 06                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 C8 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 00 00 00 00  // SLIC-BPC........
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57  // EMSLIC-BPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94  // ......3.. ..c...
    0100: A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4  // .`07....{...r...
    0110: 0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B  // ..y<.F....`.c..{
    0120: 5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66  // \..S.....g[l.E.f
    0130: 49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9  // I#.3..v.1p5.W...
    0140: 56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F  // Vo?A..:..lgC.p..
    0150: B4 06 F8 26 E2 FC 19 46 E5 F6 D7 66 0C 2D 73 99  // ...&...F...f.-s.
    0160: BA 94 38 64 D7 24 98 EB DA 39 64 C8 D3 8C 36 87  // ..8d.$...9d...6.
    0170: FD E5 47 BB A6 B8                                // ..G...


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "COMPAQ", "WMI", 0x00000001)
{
    External (DSMI, UnknownObj)
    External (EAX_, IntObj)
    External (EBX_, IntObj)
    External (ECX_, IntObj)
    External (EDI_, IntObj)
    External (EDX_, IntObj)
    External (SSMI, UnknownObj)
    External (TEVT, IntObj)
    External (WBTM, IntObj)
    External (WM10, IntObj)
    External (WMBH, IntObj)
    External (WMIB, IntObj)
    External (WMIF, IntObj)
    External (WMIH, IntObj)
    External (WMIP, IntObj)
    External (WMIS, IntObj)
    External (WMIT, IntObj)
    External (WMPI, IntObj)

    Scope (\_SB)
    {
        Device (WMID)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x0104)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x34, 0xF0, 0xB7, 0x6F,  // AA..4..o
                /* 0018 */  0x63, 0x2C, 0xE9, 0x45, 0xBE, 0x91, 0x3D, 0x44,  // c,.E..=D
                /* 0020 */  0xE2, 0xC7, 0x07, 0xE4, 0x41, 0x43, 0x02, 0x00,  // ....AC..
                /* 0028 */  0x3F, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // ?.2.=f'C
                /* 0030 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0038 */  0x41, 0x49, 0x06, 0x00, 0xD8, 0x90, 0xB5, 0xC9,  // AI......
                /* 0040 */  0xE4, 0xE7, 0xC5, 0x4D, 0xBB, 0x0F, 0xCB, 0x8A,  // ...M....
                /* 0048 */  0x35, 0x22, 0x02, 0x7E, 0x41, 0x44, 0x01, 0x02,  // 5".~AD..
                /* 0050 */  0x35, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 5d..B..B
                /* 0058 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 0060 */  0x41, 0x45, 0x06, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // AE..6d..
                /* 0068 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
                /* 0070 */  0x24, 0xF2, 0x0C, 0x9A, 0x42, 0x45, 0x0E, 0x00,  // $...BE..
                /* 0078 */  0x3C, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // <.2.=f'C
                /* 0080 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 0088 */  0x41, 0x46, 0x1E, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // AF..=.2.
                /* 0090 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
                /* 0098 */  0xAD, 0xB9, 0xBF, 0x05, 0x41, 0x47, 0x19, 0x00,  // ....AG..
                /* 00A0 */  0x3E, 0xDE, 0x32, 0x82, 0x3D, 0x66, 0x27, 0x43,  // >.2.=f'C
                /* 00A8 */  0xA8, 0xF4, 0xE2, 0x93, 0xAD, 0xB9, 0xBF, 0x05,  // ........
                /* 00B0 */  0x41, 0x48, 0xAA, 0x01, 0x79, 0x42, 0xF2, 0x95,  // AH..yB..
                /* 00B8 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 00C0 */  0xC6, 0x7E, 0xF6, 0x1C, 0xA0, 0x00, 0x01, 0x08,  // .~......
                /* 00C8 */  0x5B, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // [.......
                /* 00D0 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 00D8 */  0x42, 0x42, 0x02, 0x02, 0x2D, 0x7C, 0x22, 0x41,  // BB..-|"A
                /* 00E0 */  0xE1, 0x80, 0x3F, 0x42, 0x8B, 0x8E, 0x87, 0xE3,  // ..?B....
                /* 00E8 */  0x27, 0x55, 0xA0, 0xEB, 0x42, 0x43, 0x0A, 0x00,  // 'U..BC..
                /* 00F0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00F8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0100 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
            })
            Name (ZBUF, Buffer (0x1040){})
            Name (GETN, Buffer (0x0400){})
            Name (GETV, Buffer (0x0400){})
            Name (GETP, Buffer (0x0400){})
            Name (GETZ, Buffer (0x0400){})
            Name (STPW, Buffer (0x22)
            {
                /* 0000 */  0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x75, 0x00,  // S.e.t.u.
                /* 0008 */  0x70, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00,  // p. .P.a.
                /* 0010 */  0x73, 0x00, 0x73, 0x00, 0x77, 0x00, 0x6F, 0x00,  // s.s.w.o.
                /* 0018 */  0x72, 0x00, 0x64, 0x00, 0x20, 0x00, 0x33, 0x00,  // r.d. .3.
                /* 0020 */  0x32, 0x00                                       // 2.
            })
            Name (POPW, Buffer (0x28)
            {
                /* 0000 */  0x50, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00,  // P.o.w.e.
                /* 0008 */  0x72, 0x00, 0x2D, 0x00, 0x4F, 0x00, 0x6E, 0x00,  // r.-.O.n.
                /* 0010 */  0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x73, 0x00,  //  .P.a.s.
                /* 0018 */  0x73, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00,  // s.w.o.r.
                /* 0020 */  0x64, 0x00, 0x20, 0x00, 0x33, 0x00, 0x32, 0x00   // d. .3.2.
            })
            Method (WMAD, 3, Serialized)
            {
                \_SB.WMID.REGZ ()
                EBX = 0x01
                Local0 = 0x00
                Local1 = 0x00
                Local3 = 0x00
                Local4 = 0x00
                Local5 = 0x00
                GETN = GETZ /* \_SB_.WMID.GETZ */
                GETV = GETZ /* \_SB_.WMID.GETZ */
                GETP = GETZ /* \_SB_.WMID.GETZ */
                If ((Arg1 == 0x03))
                {
                    Local3 = Arg2
                    While ((Local1 != 0x07))
                    {
                        Local0 = 0x00
                        Local2 = 0x02
                        GETN = DerefOf (DerefOf (EVNT [Local1]) [0x00])
                        GETV = Local3
                        Local4 = DerefOf (GETV [0x00])
                        Local4 = (Local4 / 0x02)
                        While (((Local0 != Local4) && (DerefOf (GETV [Local2]) == 
                            DerefOf (GETN [Local0]))))
                        {
                            Local0++
                            Local2++
                            Local2++
                        }

                        If ((Local0 == Local4))
                        {
                            TEVT = 0x01
                            EBX = Local1
                            Notify (WMID, 0xA0) // Device-Specific
                            Return (0x00)
                        }

                        Local1++
                    }

                    Return (0x05)
                }

                If ((Arg1 == 0x02))
                {
                    EBX = 0x02
                }

                If ((Arg1 == 0x01))
                {
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETN [Local3] = DerefOf (Arg2 [Local0])
                        If ((Local4 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (STPW [Local3])))
                            {
                                Local4 = 0x00
                                ECX = 0x01
                            }
                            Else
                            {
                                Local4 = 0x01
                                ECX = 0x00
                            }
                        }

                        If ((Local5 == 0x00))
                        {
                            If ((DerefOf (Arg2 [Local0]) == DerefOf (POPW [Local3])))
                            {
                                Local5 = 0x00
                                ECX = 0x02
                            }
                            Else
                            {
                                Local5 = 0x01
                                ECX = 0x00
                            }
                        }

                        Local0++
                        Local3++
                    }

                    Local3 = 0x00
                    Local4 = 0x00
                    Local5 = 0x00
                    Local1 = 0x00
                    Local0++
                    Local1 = DerefOf (Arg2 [Local0])
                    Local1 <<= 0x08
                    Local0--
                    Local1 += DerefOf (Arg2 [Local0])
                    Local0 += 0x02
                    Local1 += Local0
                    While ((Local0 < Local1))
                    {
                        GETV [Local3] = DerefOf (Arg2 [Local0])
                        Local0++
                        Local3++
                    }
                }

                Local3 = 0x00
                Local0++
                Local1 = DerefOf (Arg2 [Local0])
                Local1 <<= 0x08
                Local0--
                Local1 += DerefOf (Arg2 [Local0])
                Local0 += 0x02
                Local1 += Local0
                While ((Local0 < Local1))
                {
                    GETP [Local3] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local3++
                }

                If ((Arg1 == 0x01))
                {
                    If ((0x00 != ECX))
                    {
                        EAX = 0x00
                        Local0 = 0x00
                        If ((DerefOf (GETP [Local0]) == 0x00))
                        {
                            EAX = 0x02
                            If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                            {
                                EAX = 0x01
                            }
                        }

                        If ((0x00 == EAX))
                        {
                            Local0 = 0x00
                            While ((((DerefOf (GETP [Local0]) != 0x00) && 
                                (DerefOf (GETV [Local0]) != 0x00)) && (EAX != 0x02)))
                            {
                                If ((DerefOf (GETP [Local0]) == DerefOf (GETV [Local0])))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }

                                Local0 += 0x02
                            }

                            If ((0x01 == EAX))
                            {
                                If (((DerefOf (GETV [Local0]) == 0x00) && (DerefOf (
                                    GETP [Local0]) == 0x00)))
                                {
                                    EAX = 0x01
                                }
                                Else
                                {
                                    EAX = 0x02
                                }
                            }
                        }
                    }
                }

                Return (WMIE (GETN, GETV, GETP, Arg1))
            }

            Method (WMIE, 4, Serialized)
            {
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local2 = WMIB /* External reference */
                Local0 = 0x00
                Local1 = 0x01
                Local3 = 0x00
                If ((Arg3 != 0x02))
                {
                    If ((0x00 == EAX))
                    {
                        While (((DerefOf (Arg0 [Local0]) != 0x00) || (
                            DerefOf (Arg0 [Local1]) != 0x00)))
                        {
                            Local2 [Local3] = DerefOf (Arg0 [Local0])
                            Local0++
                            Local1++
                            Local3++
                        }

                        Local2 [Local3] = 0x00
                        Local3++
                        Local2 [Local3] = 0x00
                        Local3++
                        Local2 [Local3] = 0x00
                        Local3++
                        Local0 = 0x00
                        Local1 = 0x01
                    }

                    While (((DerefOf (Arg1 [Local0]) != 0x00) || (
                        DerefOf (Arg1 [Local1]) != 0x00)))
                    {
                        Local2 [Local3] = DerefOf (Arg1 [Local0])
                        Local0++
                        Local1++
                        Local3++
                    }

                    Local2 [Local3] = 0x00
                    Local3++
                    Local2 [Local3] = 0x00
                    Local3++
                    Local2 [Local3] = 0x00
                    Local3++
                    Local0 = 0x00
                    Local1 = 0x01
                }

                While (((DerefOf (Arg2 [Local0]) != 0x00) || (
                    DerefOf (Arg2 [Local1]) != 0x00)))
                {
                    Local2 [Local3] = DerefOf (Arg2 [Local0])
                    Local0++
                    Local1++
                    Local3++
                }

                Local2 [Local3] = 0x00
                Local3++
                Local2 [Local3] = 0x00
                Local3++
                Local2 [Local3] = 0x00
                WMIB = Local2
                SSMI = WM10 /* External reference */
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Local7 = EAX /* External reference */
                If ((Arg3 != 0x02))
                {
                    Notify (WMID, 0xA0) // Device-Specific
                }

                Return (Local7)
            }

            Name (SEN1, Package (0x06)
            {
                Package (0x0C)
                {
                    "CPU Fan Speed", 
                    "Reports CPU fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Front Chassis Fan Speed", 
                    "Reports front chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Rear Chassis Fan Speed", 
                    "Reports rear chassis fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Power Supply Fan Speed", 
                    "Reports power supply fan speed", 
                    0x0C, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Stalled", 
                    "Not Present", 
                    0x13, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "CPU Thermal Index", 
                    "Reports CPU Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Caution", 
                    "Critical", 
                    0x01, 
                    0x00, 
                    0x00
                }, 

                Package (0x0C)
                {
                    "Chassis Thermal Index", 
                    "Reports chassis\' Thermal Index", 
                    0x02, 
                    " ", 
                    0x00, 
                    "", 
                    "Normal", 
                    "Sensor Not Present ", 
                    " ", 
                    0x01, 
                    0x00, 
                    0x00
                }
            })
            Method (WQAE, 1, Serialized)
            {
                If ((Arg0 == 0x00))
                {
                    ECX = 0x00
                    EBX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    ECX = 0x01
                    EBX = 0x03
                }

                If ((Arg0 == 0x02))
                {
                    ECX = 0x02
                    EBX = 0x02
                }

                If ((Arg0 == 0x03))
                {
                    ECX = 0x03
                    EBX = 0x01
                }

                If ((Arg0 < 0x04))
                {
                    EAX = 0x00
                    SSMI = WMBH /* External reference */
                    If ((EAX == 0xFFFF0000))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Not Present"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x0C
                    }
                    Else
                    {
                        DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                        If ((EAX <= 0xC8))
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Stalled"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x0A
                            DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                        }
                        Else
                        {
                            DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                        }
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x04))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x04
                    SSMI = WMBH /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                    If ((EDX == 0x00))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    }

                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Caution"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                    }

                    If ((EDX == 0x02))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Critical"
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x05
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }

                If ((Arg0 == 0x05))
                {
                    \_SB.WMID.REGZ ()
                    ECX = 0x05
                    SSMI = WMBH /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x0B] = EAX /* External reference */
                    DerefOf (SEN1 [Arg0]) [0x04] = 0x02
                    DerefOf (SEN1 [Arg0]) [0x05] = "Normal"
                    If ((EDX == 0x01))
                    {
                        DerefOf (SEN1 [Arg0]) [0x05] = "Sensor Not Present"
                        DerefOf (SEN1 [Arg0]) [0x0B] = 0x00
                    }

                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                    Return (DerefOf (SEN1 [Arg0]))
                }
            }

            Name (SBLK, " ")
            Name (SEN2, Package (0x09)
            {
                " ", 
                " ", 
                0x01, 
                " ", 
                0x00, 
                " ", 
                " ", 
                " ", 
                ""
            })
            Method (WQBE, 1, Serialized)
            {
                SEN2 [0x00] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x01] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x03] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x06] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x07] = SBLK /* \_SB_.WMID.SBLK */
                SEN2 [0x04] = 0x00
                SEN2 [0x05] = SBLK /* \_SB_.WMID.SBLK */
                ECX = 0x06
                EAX = Arg0
                SSMI = WMBH /* External reference */
                If ((EAX == 0x01))
                {
                    SEN2 [0x00] = "BIOS Post Error"
                    SEN2 [0x03] = "BIOS Post Error"
                    SEN2 [0x06] = "Post Error Occurred"
                    SEN2 [0x07] = "No Error Reported"
                    SEN2 [0x05] = "Post Error Occurred"
                    If ((Arg0 == 0x00))
                    {
                        SEN2 [0x01] = "Out of memory space for option ROMs"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        SEN2 [0x01] = "Memory Size Error"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x02))
                    {
                        SEN2 [0x01] = "DIMM Configuration Warning"
                        SEN2 [0x04] = 0x03
                    }

                    If ((Arg0 == 0x03))
                    {
                        SEN2 [0x01] = "CPU fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x04))
                    {
                        SEN2 [0x01] = "Chassis fan not detected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x05))
                    {
                        SEN2 [0x01] = "Power supply fan failed"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x06))
                    {
                        SEN2 [0x01] = "The computer cover has been removed"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x07))
                    {
                        SEN2 [0x01] = "Front Audio Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x08))
                    {
                        SEN2 [0x01] = "Front USB Not Connected"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x09))
                    {
                        SEN2 [0x01] = "Multi-Bay Riser Not Connected"
                        SEN2 [0x04] = 0x01
                    }

                    If ((Arg0 == 0x0A))
                    {
                        SEN2 [0x01] = "SMART Hard Drive detects imminent failure"
                        SEN2 [0x04] = 0x05
                    }

                    If ((Arg0 == 0x0B))
                    {
                        SEN2 [0x01] = "Microcode Update Error"
                        SEN2 [0x04] = 0x06
                    }

                    If ((Arg0 == 0x0C))
                    {
                        SEN2 [0x01] = "System Time Not Set"
                        SEN2 [0x04] = 0x02
                    }

                    If ((Arg0 == 0x0D))
                    {
                        SEN2 [0x01] = "Memory not configured correctly for proper MEBx execution"
                        SEN2 [0x04] = 0x03
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (SEN2) /* \_SB_.WMID.SEN2 */
            }

            Name (SETN, "                                                                                                                                                                                                                                                               ")
            Name (SETV, "                                                                                                                                                                                                                                                               ")
            Name (SETP, "                                                                                                                                                                                                                                                               ")
            Name (SETB, Buffer (0x0300){})
            Name (SETZ, Buffer (0x0300){})
            Name (STRP, Package (0x0B)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAF, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                Local4 = 0x00
                Local5 = 0x00
                STRP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x03] = 0x01
                STRP [0x04] = 0x00
                STRP [0x05] = 0x00
                STRP [0x06] = 0x00
                STRP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                STRP [0x08] = 0x00
                STRP [0x09] = 0x00
                STRP [0x0A] = 0x00
                If ((Arg0 <= 0x19))
                {
                    EDX = 0x01
                    ECX = Arg0
                }
                Else
                {
                    EDX = 0x07
                    ECX = (Arg0 - 0x1A)
                }

                EAX = 0x01
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    STRP [0x06] = ECX /* External reference */
                    STRP [0x03] = EAX /* External reference */
                    STRP [0x04] = EBX /* External reference */
                    Local4 = EDX /* External reference */
                    STRP [0x08] = EDI /* External reference */
                    STRP [0x05] = (Local4 & 0xFF)
                    STRP [0x0A] = (EDX >> 0x10)
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    STRP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETV = SETB /* \_SB_.WMID.SETB */
                    STRP [0x01] = SETV /* \_SB_.WMID.SETV */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    STRP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (STRP) /* \_SB_.WMID.STRP */
            }

            Name (PASP, Package (0x0E)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                0x00, 
                "utf-16", 
                " ", 
                0x00
            })
            Method (WQAC, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                PASP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x03] = 0x01
                PASP [0x04] = 0x00
                PASP [0x05] = 0x00
                PASP [0x06] = 0x00
                PASP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                PASP [0x08] = 0x00
                PASP [0x09] = 0x00
                PASP [0x0A] = 0x00
                PASP [0x0D] = 0x00
                If ((Arg0 == 0x00))
                {
                    EAX = 0x00
                }

                If ((Arg0 == 0x01))
                {
                    EAX = 0x01
                }

                DSMI = 0x0B
                SSMI = WMPI /* External reference */
                PASP [0x0D] = ECX /* External reference */
                ECX = Arg0
                EDX = 0x04
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    PASP [0x06] = ECX /* External reference */
                    PASP [0x03] = EAX /* External reference */
                    PASP [0x04] = EBX /* External reference */
                    PASP [0x08] = EDI /* External reference */
                    Local4 = EDX /* External reference */
                    PASP [0x05] = (Local4 & 0xFF)
                    PASP [0x0A] = (EDX >> 0x10)
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    PASP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        Local0++
                        Local3++
                    }

                    Local0++
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    PASP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (PASP) /* \_SB_.WMID.PASP */
            }

            Name (INTP, Package (0x0C)
            {
                "", 
                "", 
                "", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                "", 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQAG, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                INTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x03] = 0x01
                INTP [0x04] = 0x00
                INTP [0x05] = 0x00
                INTP [0x06] = 0x00
                INTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                INTP [0x08] = 0x00
                INTP [0x09] = 0x00
                INTP [0x0A] = 0x00
                INTP [0x0B] = 0x00
                If ((Arg0 <= 0x02))
                {
                    ECX = Arg0
                    EDX = 0x03
                }
                Else
                {
                    ECX = (Arg0 - 0x03)
                    EDX = 0x0A
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x03
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    INTP [0x06] = ECX /* External reference */
                    INTP [0x03] = EAX /* External reference */
                    INTP [0x04] = EBX /* External reference */
                    INTP [0x05] = EDX /* External reference */
                    INTP [0x08] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    INTP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETV = SETB /* \_SB_.WMID.SETB */
                    INTP [0x01] = SETV /* \_SB_.WMID.SETV */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local0 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    INTP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (INTP) /* \_SB_.WMID.INTP */
            }

            Name (STR1, "                                               ")
            Name (STR2, "                                               ")
            Name (STR3, "                                               ")
            Name (STR4, "                                               ")
            Name (STR5, "                                               ")
            Name (STR6, "                                               ")
            Name (STR7, "                                               ")
            Name (STR8, "                                               ")
            Name (STR9, "                                               ")
            Name (STRA, "                                               ")
            Name (STRB, "                                               ")
            Name (STRC, "                                               ")
            Name (STRD, "                                               ")
            Name (STRE, "                                               ")
            Name (STRF, "                                               ")
            Name (STRG, "                                               ")
            Name (STRH, "                                               ")
            Name (STRI, "                                                                                                              ")
            Name (STRJ, "                                                                                                              ")
            Name (STRS, "                                               ")
            Name (ENUP, Package (0x21)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                " ", 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAH, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                ENUP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x03] = 0x01
                ENUP [0x04] = 0x00
                ENUP [0x05] = 0x00
                ENUP [0x06] = 0x00
                ENUP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x08] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x09] = 0x00
                ENUP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0B] = 0x00
                ENUP [0x0C] = 0x00
                ENUP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x19] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1A] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1B] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1C] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1D] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1E] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x1F] = SBLK /* \_SB_.WMID.SBLK */
                ENUP [0x20] = SBLK /* \_SB_.WMID.SBLK */
                If ((Arg0 <= 0x7C))
                {
                    EDX = 0x00
                    ECX = Arg0
                }

                If ((Arg0 >= 0x7D))
                {
                    EDX = 0x09
                    ECX = (Arg0 - 0x7D)
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    ENUP [0x06] = ECX /* External reference */
                    ENUP [0x03] = EAX /* External reference */
                    ENUP [0x04] = EBX /* External reference */
                    ENUP [0x05] = EDX /* External reference */
                    ENUP [0x09] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 = Local0
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETV = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x01] = SETV /* \_SB_.WMID.SETV */
                    Local5 = 0x00
                    Local6 = 0x2C
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        Local0 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        While (((Local6 != DerefOf (Local2 [Local4])) && (
                            Local1 != DerefOf (Local2 [Local4]))))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local0] = DerefOf (Local2 [Local4])
                                Local0++
                                If ((DerefOf (Local2 [Local4]) == 0x2A))
                                {
                                    Local7 = Local5
                                    Local3 = 0x01
                                    Local0--
                                }
                            }

                            Local4++
                        }

                        If ((Local3 != 0x00))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            ENUP [0x0A] = STRD /* \_SB_.WMID.STRD */
                            ENUP [0x0B] = Local7
                            Local3 = 0x00
                        }

                        If ((Local5 == 0x00))
                        {
                            STR1 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR1 /* \_SB_.WMID.STR1 */
                        }

                        If ((Local5 == 0x01))
                        {
                            STR2 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR2 /* \_SB_.WMID.STR2 */
                        }

                        If ((Local5 == 0x02))
                        {
                            STR3 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR3 /* \_SB_.WMID.STR3 */
                        }

                        If ((Local5 == 0x03))
                        {
                            STR4 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR4 /* \_SB_.WMID.STR4 */
                        }

                        If ((Local5 == 0x04))
                        {
                            STR5 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR5 /* \_SB_.WMID.STR5 */
                        }

                        If ((Local5 == 0x05))
                        {
                            STR6 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR6 /* \_SB_.WMID.STR6 */
                        }

                        If ((Local5 == 0x06))
                        {
                            STR7 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR7 /* \_SB_.WMID.STR7 */
                        }

                        If ((Local5 == 0x07))
                        {
                            STR8 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR8 /* \_SB_.WMID.STR8 */
                        }

                        If ((Local5 == 0x08))
                        {
                            STR9 = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STR9 /* \_SB_.WMID.STR9 */
                        }

                        If ((Local5 == 0x09))
                        {
                            STRA = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRA /* \_SB_.WMID.STRA */
                        }

                        If ((Local5 == 0x0A))
                        {
                            STRB = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRB /* \_SB_.WMID.STRB */
                        }

                        If ((Local5 == 0x0B))
                        {
                            STRC = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRC /* \_SB_.WMID.STRC */
                        }

                        If ((Local5 == 0x0C))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRD /* \_SB_.WMID.STRD */
                        }

                        If ((Local5 == 0x0D))
                        {
                            STRE = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRE /* \_SB_.WMID.STRE */
                        }

                        If ((Local5 == 0x0E))
                        {
                            STRF = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRF /* \_SB_.WMID.STRF */
                        }

                        If ((Local5 == 0x0F))
                        {
                            STRG = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRG /* \_SB_.WMID.STRG */
                        }

                        If ((Local5 == 0x10))
                        {
                            STRH = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRH /* \_SB_.WMID.STRH */
                        }

                        If ((Local5 == 0x11))
                        {
                            STRI = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRI /* \_SB_.WMID.STRI */
                        }

                        If ((Local5 == 0x12))
                        {
                            STRJ = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRJ /* \_SB_.WMID.STRJ */
                        }

                        If ((Local5 == 0x13))
                        {
                            STRS = SETB /* \_SB_.WMID.SETB */
                            ENUP [(Local5 + 0x0D)] = STRS /* \_SB_.WMID.STRS */
                        }

                        If ((DerefOf (Local2 [Local4]) != Local1))
                        {
                            Local4++
                        }

                        Local5++
                    }

                    ENUP [0x0C] = Local5
                    Local4++
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0x3B
                    Local6 = 0xFF
                    Local5 = 0x00
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        While ((Local6 != DerefOf (Local2 [Local4])))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local3] = DerefOf (Local2 [Local4])
                                Local3++
                            }

                            Local4++
                            If ((DerefOf (Local2 [Local4]) == Local1))
                            {
                                Local4--
                                Local6 = DerefOf (Local2 [Local4])
                                Local3 = 0x00
                            }
                        }

                        If ((Local3 != 0x00))
                        {
                            SETB [Local3] = 0x00
                            If ((Local5 == 0x00))
                            {
                                STRI = SETB /* \_SB_.WMID.SETB */
                                ENUP [0x07] = STRI /* \_SB_.WMID.STRI */
                            }

                            If ((Local5 == 0x01))
                            {
                                STRJ = SETB /* \_SB_.WMID.SETB */
                                ENUP [0x08] = STRJ /* \_SB_.WMID.STRJ */
                            }
                        }

                        Local3 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        Local4++
                        Local5++
                    }

                    Local4++
                    Local3 = 0x00
                    Local1 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local4])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local4])
                            Local3++
                        }

                        Local4++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    ENUP [0x02] = SETP /* \_SB_.WMID.SETP */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (ENUP) /* \_SB_.WMID.ENUP */
            }

            Name (LSTP, Package (0x1A)
            {
                " ", 
                " ", 
                " ", 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                " ", 
                0x00, 
                0x00, 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " ", 
                " "
            })
            Method (WQAI, 1, Serialized)
            {
                \_SB.WMID.REGZ ()
                LSTP [0x00] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x01] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x02] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x03] = 0x01
                LSTP [0x04] = 0x00
                LSTP [0x05] = 0x00
                LSTP [0x06] = 0x00
                LSTP [0x07] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x08] = 0x00
                LSTP [0x09] = 0x00
                LSTP [0x0A] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0B] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0C] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0D] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0E] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x0F] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x10] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x11] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x12] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x13] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x14] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x15] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x16] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x17] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x18] = SBLK /* \_SB_.WMID.SBLK */
                LSTP [0x19] = SBLK /* \_SB_.WMID.SBLK */
                ECX = Arg0
                EDX = 0x08
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                SSMI = WM10 /* External reference */
                If ((ECX != 0xFFFF))
                {
                    Local0 = 0x00
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local2 = WMIB /* External reference */
                    LSTP [0x06] = ECX /* External reference */
                    LSTP [0x03] = EAX /* External reference */
                    LSTP [0x04] = EBX /* External reference */
                    LSTP [0x05] = EDX /* External reference */
                    LSTP [0x08] = EDI /* External reference */
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    SETB [Local3] = 0x00
                    Local0++
                    SETN = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x00] = SETN /* \_SB_.WMID.SETN */
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 = Local0
                    While ((Local1 != DerefOf (Local2 [Local0])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local0])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local0])
                            Local3++
                        }

                        Local0++
                    }

                    Local0++
                    SETB [Local3] = 0x00
                    SETV = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x01] = SETV /* \_SB_.WMID.SETV */
                    Local5 = 0x00
                    Local6 = 0x2C
                    Local3 = 0x00
                    Local1 = 0xEA
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        Local0 = 0x00
                        SETB = SETZ /* \_SB_.WMID.SETZ */
                        While (((Local6 != DerefOf (Local2 [Local4])) && (
                            Local1 != DerefOf (Local2 [Local4]))))
                        {
                            If ((0x00 != DerefOf (Local2 [Local4])))
                            {
                                SETB [Local0] = DerefOf (Local2 [Local4])
                                Local0++
                            }

                            Local4++
                        }

                        If ((Local5 == 0x00))
                        {
                            STR1 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR1 /* \_SB_.WMID.STR1 */
                        }

                        If ((Local5 == 0x01))
                        {
                            STR2 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR2 /* \_SB_.WMID.STR2 */
                        }

                        If ((Local5 == 0x02))
                        {
                            STR3 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR3 /* \_SB_.WMID.STR3 */
                        }

                        If ((Local5 == 0x03))
                        {
                            STR4 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR4 /* \_SB_.WMID.STR4 */
                        }

                        If ((Local5 == 0x04))
                        {
                            STR5 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR5 /* \_SB_.WMID.STR5 */
                        }

                        If ((Local5 == 0x05))
                        {
                            STR6 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR6 /* \_SB_.WMID.STR6 */
                        }

                        If ((Local5 == 0x06))
                        {
                            STR7 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR7 /* \_SB_.WMID.STR7 */
                        }

                        If ((Local5 == 0x07))
                        {
                            STR8 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR8 /* \_SB_.WMID.STR8 */
                        }

                        If ((Local5 == 0x08))
                        {
                            STR9 = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STR9 /* \_SB_.WMID.STR9 */
                        }

                        If ((Local5 == 0x09))
                        {
                            STRA = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRA /* \_SB_.WMID.STRA */
                        }

                        If ((Local5 == 0x0A))
                        {
                            STRB = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRB /* \_SB_.WMID.STRB */
                        }

                        If ((Local5 == 0x0B))
                        {
                            STRC = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRC /* \_SB_.WMID.STRC */
                        }

                        If ((Local5 == 0x0C))
                        {
                            STRD = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRD /* \_SB_.WMID.STRD */
                        }

                        If ((Local5 == 0x0D))
                        {
                            STRE = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRE /* \_SB_.WMID.STRE */
                        }

                        If ((Local5 == 0x0E))
                        {
                            STRF = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRF /* \_SB_.WMID.STRF */
                        }

                        If ((Local5 == 0x0F))
                        {
                            STRG = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRG /* \_SB_.WMID.STRG */
                        }

                        If ((Local5 == 0x10))
                        {
                            STRH = SETB /* \_SB_.WMID.SETB */
                            LSTP [(Local5 + 0x0A)] = STRH /* \_SB_.WMID.STRH */
                        }

                        If ((DerefOf (Local2 [Local4]) != Local1))
                        {
                            Local4++
                        }

                        Local5++
                    }

                    LSTP [0x09] = Local5
                    Local4++
                    SETB = SETZ /* \_SB_.WMID.SETZ */
                    Local3 = 0x00
                    Local1 = 0xEA
                    Local4 += 0x03
                    While ((Local1 != DerefOf (Local2 [Local4])))
                    {
                        If ((0x00 != DerefOf (Local2 [Local4])))
                        {
                            SETB [Local3] = DerefOf (Local2 [Local4])
                            Local3++
                        }

                        Local4++
                    }

                    SETB [Local3] = 0x00
                    SETP = SETB /* \_SB_.WMID.SETB */
                    LSTP [0x02] = SETP /* \_SB_.WMID.SETP */
                    WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                }

                Return (LSTP) /* \_SB_.WMID.LSTP */
            }

            Method (WMSC, 0, Serialized)
            {
                EAX = 0x00
                SSMI = WMPI /* External reference */
            }

            Method (WMAA, 3, Serialized)
            {
                CreateDWordField (Arg2, 0x00, SSIG)
                CreateDWordField (Arg2, 0x04, COMM)
                CreateDWordField (Arg2, 0x08, CTYP)
                CreateDWordField (Arg2, 0x0C, DSIN)
                If ((Arg1 == 0x01))
                {
                    Local0 = 0x00
                }

                If ((Arg1 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg1 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg1 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg1 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)){}
                CreateDWordField (Local1, 0x00, SOUT)
                CreateDWordField (Local1, 0x04, RCOD)
                DSIN = WBTM /* External reference */
                Local5
                CreateField (Arg2, 0x00, ((Local5 + 0x10) * 0x08), DTIN)
                WMIB = DTIN /* \_SB_.WMID.WMAA.DTIN */
                SOUT = 0x4C494146
                RCOD = 0x02
                DSMI = 0x00
                \_SB.WMID.WMSC ()
                If ((EAX == 0x00))
                {
                    SOUT = 0x53534150
                    RCOD = 0x04
                    If ((0x00010000 == COMM))
                    {
                        If ((0x01 == CTYP))
                        {
                            DSMI = 0x0F
                        }

                        If ((0x02 == CTYP))
                        {
                            DSMI = 0x10
                        }

                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020000 == COMM))
                    {
                        If ((0x01 == CTYP))
                        {
                            DSMI = 0x01
                        }

                        If ((0x02 == CTYP))
                        {
                            DSMI = 0x02
                        }

                        If ((0x03 == CTYP))
                        {
                            DSMI = 0x03
                        }

                        If ((0x04 == CTYP))
                        {
                            DSMI = 0x04
                        }

                        If ((0x05 == CTYP))
                        {
                            DSMI = 0x05
                        }

                        If ((0x06 == CTYP))
                        {
                            DSMI = 0x06
                        }

                        If ((0x07 == CTYP))
                        {
                            DSMI = 0x07
                        }

                        If ((0x08 == CTYP))
                        {
                            DSMI = 0x08
                        }

                        If ((0x09 == CTYP))
                        {
                            DSMI = 0x09
                        }

                        If ((0x0A == CTYP))
                        {
                            DSMI = 0x0A
                        }

                        If ((0x1E == CTYP))
                        {
                            DSMI = 0x0E
                        }

                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }

                    If ((0x00020001 == COMM))
                    {
                        If ((0x02 != CTYP))
                        {
                            EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                            DSMI = 0x0C
                            EAX = 0x00
                            SSMI = WMPI /* External reference */
                            Local2 = WMRD ()
                            RCOD = 0x00
                        }

                        If ((0x02 == CTYP))
                        {
                            EAX = 0x01
                            While ((EAX == 0x01))
                            {
                                EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                                DSMI = 0x0C
                                EAX = 0x00
                                SSMI = WMPI /* External reference */
                                Local2 = WMRD ()
                                RCOD = 0x00
                            }
                        }
                    }

                    If ((0x00020002 == COMM))
                    {
                        EDX = CTYP /* \_SB_.WMID.WMAA.CTYP */
                        DSMI = 0x0D
                        EAX = 0x00
                        SSMI = WMPI /* External reference */
                        Local2 = WMRD ()
                        RCOD = 0x00
                    }
                }

                If ((0x00 == RCOD))
                {
                    RCOD = DerefOf (Local2 [0x00])
                    If ((0x00 == RCOD))
                    {
                        If ((DerefOf (Local2 [0x01]) <= Local0))
                        {
                            Local0 = 0x00
                            While ((Local0 < DerefOf (Local2 [0x01])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            SOUT = 0x53534150
                        }
                        Else
                        {
                            RCOD = 0x05
                        }
                    }
                }

                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
                Return (Local1)
            }

            Method (WMRD, 0, Serialized)
            {
                If ((ECX == 0x00))
                {
                    Local0 = Package (0x02)
                        {
                            0x00, 
                            0x00
                        }
                }
                Else
                {
                    Local1 = ECX /* External reference */
                    Local0 = Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            Buffer (Local1){}
                        }
                }

                Local0 [0x00] = EAX /* External reference */
                Local0 [0x01] = ECX /* External reference */
                If ((EAX == 0x00))
                {
                    If ((ECX != 0x00))
                    {
                        Local1 = WMIB /* External reference */
                        Local2 = 0x00
                        While ((Local2 < ECX))
                        {
                            DerefOf (Local0 [0x02]) [Local2] = DerefOf (Local1 [
                                Local2])
                            Local2++
                        }
                    }
                }

                Return (Local0)
            }

            Name (EVNT, Package (0x09)
            {
                Package (0x05)
                {
                    "CPU Fan Stall", 
                    "CPU Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Front Chassis Fan Stall", 
                    " Front Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Rear Chassis Fan Stall", 
                    "Rear Chassis Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Power Supply Fan Stall", 
                    "Power Supply Fan Speed", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "Thermal Caution", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x0A, 
                    0x04
                }, 

                Package (0x05)
                {
                    "Thermal Critical", 
                    "CPU Thermal Index", 
                    0x03, 
                    0x19, 
                    0x05
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Security", 
                    "An attempt has been made to Access BIOS features unsuccessfully", 
                    0x04, 
                    0x0A, 
                    0x06
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Change", 
                    " ", 
                    0x04, 
                    0x05, 
                    0x02
                }, 

                Package (0x05)
                {
                    "Hood Intrusion", 
                    "The computer cover has been removed", 
                    0x03, 
                    0x00, 
                    0x01
                }
            })
            Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (TEVT)
                {
                    DerefOf (EVNT [EBX]) [0x01] = "TEST EVENT"
                    Return (DerefOf (EVNT [EBX]))
                }

                If (WMIT)
                {
                    WMIT = Zero
                    If ((EBX == 0x01))
                    {
                        Return (DerefOf (EVNT [0x04]))
                    }

                    If ((EBX == 0x02))
                    {
                        Return (DerefOf (EVNT [0x05]))
                    }
                }

                If (WMIF)
                {
                    WMIF = Zero
                    Return (DerefOf (EVNT [EAX]))
                }

                If (WMIP)
                {
                    WMIP = Zero
                    Return (DerefOf (EVNT [0x06]))
                }

                If (WMIH)
                {
                    WMIH = Zero
                    Return (DerefOf (EVNT [0x08]))
                }

                If (WMIS)
                {
                    WMIS = Zero
                    Local0 = 0x00
                    Local1 = 0x00
                    Local3 = ZBUF /* \_SB_.WMID.ZBUF */
                    While ((DerefOf (GETN [Local0]) != 0x00))
                    {
                        Local3 [Local1] = DerefOf (GETN [Local0])
                        Local0 += 0x02
                        Local1++
                    }

                    SETN = Local3
                    DerefOf (EVNT [0x07]) [0x01] = SETN /* \_SB_.WMID.SETN */
                    Return (DerefOf (EVNT [0x07]))
                }

                \_SB.WMID.REGZ ()
                WMIB = ZBUF /* \_SB_.WMID.ZBUF */
            }

            Method (WMBB, 1, Serialized)
            {
                Notify (WMID, 0xA0) // Device-Specific
            }

            Method (REGZ, 0, Serialized)
            {
                EAX = 0x00
                ECX = 0x00
                EDX = 0x00
                EBX = 0x00
            }

            Name (PEVT, Package (0x07)
            {
                "", 
                "", 
                "root\\wmi", 
                "HPBIOS_BIOSEvent", 
                0x00, 
                0x00, 
                0x00
            })
            Method (WQBC, 1, Serialized)
            {
                PEVT [0x00] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x00])
                PEVT [0x01] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x01])
                PEVT [0x04] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x02])
                PEVT [0x05] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x03])
                PEVT [0x06] = DerefOf (DerefOf (EVNT [Arg0]) [
                    0x04])
                Return (PEVT) /* \_SB_.WMID.PEVT */
            }

            Name (WQZZ, Buffer (0x1EC7)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xB7, 0x1E, 0x00, 0x00, 0x46, 0xBC, 0x00, 0x00,  // ....F...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xB2, 0x99, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x47, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // .G......
                /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
                /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
                /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
                /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
                /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
                /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
                /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
                /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
                /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
                /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
                /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
                /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
                /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
                /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
                /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0xE2, 0xA0,  // X...!...
                /* 00A0 */  0x84, 0x54, 0x19, 0x8A, 0x2C, 0xA2, 0x48, 0xA1,  // .T..,.H.
                /* 00A8 */  0x00, 0x67, 0x02, 0x84, 0xE1, 0x4A, 0x23, 0xA8,  // .g...J#.
                /* 00B0 */  0x10, 0x62, 0x45, 0x8A, 0xD5, 0xFE, 0x20, 0x48,  // .bE... H
                /* 00B8 */  0x7C, 0x0B, 0x10, 0x55, 0x80, 0x28, 0xD2, 0x68,  // |..U.(.h
                /* 00C0 */  0x50, 0xC3, 0x4B, 0x70, 0xB8, 0x1E, 0xEA, 0x39,  // P.Kp...9
                /* 00C8 */  0x76, 0x2E, 0x40, 0xFA, 0x24, 0x05, 0x72, 0x90,  // v.@.$.r.
                /* 00D0 */  0x67, 0x51, 0xE7, 0x38, 0x09, 0x48, 0x02, 0x63,  // gQ.8.H.c
                /* 00D8 */  0x25, 0xE8, 0x60, 0xE0, 0x50, 0x5C, 0x03, 0x6A,  // %.`.P\.j
                /* 00E0 */  0xC6, 0xC7, 0xCB, 0x04, 0xC1, 0xA1, 0x86, 0xE8,  // ........
                /* 00E8 */  0x81, 0x86, 0x3B, 0x81, 0x43, 0x64, 0x80, 0x9E,  // ..;.Cd..
                /* 00F0 */  0xD4, 0xD1, 0x60, 0x0E, 0x00, 0x1E, 0xDC, 0xC9,  // ..`.....
                /* 00F8 */  0xBC, 0x07, 0x94, 0x2A, 0xC0, 0xEC, 0x98, 0x35,  // ...*...5
                /* 0100 */  0xB0, 0x04, 0xC7, 0x63, 0xE8, 0xD3, 0x3D, 0x9F,  // ...c..=.
                /* 0108 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x8D, 0xCC,  // .N`..@..
                /* 0110 */  0xD0, 0x1E, 0xE5, 0x69, 0xC5, 0x0C, 0x79, 0xF8,  // ...i..y.
                /* 0118 */  0x87, 0xC5, 0xC4, 0x42, 0x48, 0x01, 0x84, 0xC6,  // ...BH...
                /* 0120 */  0x03, 0xEF, 0xFF, 0x3F, 0x1E, 0xF0, 0xDC, 0x00,  // ...?....
                /* 0128 */  0x9E, 0x09, 0x22, 0xBC, 0x12, 0xC4, 0xF6, 0x80,  // ..".....
                /* 0130 */  0x12, 0x0C, 0x0B, 0x21, 0x23, 0xAB, 0xF0, 0x78,  // ...!#..x
                /* 0138 */  0xE8, 0x28, 0xEC, 0x74, 0x38, 0x9A, 0x56, 0x3C,  // .(.t8.V<
                /* 0140 */  0x13, 0x0C, 0x07, 0xA1, 0x2F, 0x80, 0x04, 0x88,  // ..../...
                /* 0148 */  0x1A, 0x36, 0x3D, 0x2C, 0xF0, 0x73, 0x02, 0xBB,  // .6=,.s..
                /* 0150 */  0x19, 0x9C, 0xC1, 0x23, 0x80, 0x47, 0x72, 0x42,  // ...#.GrB
                /* 0158 */  0x3E, 0x4E, 0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE,  // >Nx`....
                /* 0160 */  0xA7, 0x4C, 0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71,  // .LFp...q
                /* 0168 */  0xC0, 0x43, 0xE1, 0x43, 0xF4, 0xF8, 0x4E, 0xF9,  // .C.C..N.
                /* 0170 */  0x78, 0x7D, 0xBA, 0xB0, 0xAC, 0x71, 0x42, 0xBF,  // x}...qB.
                /* 0178 */  0x43, 0x78, 0x76, 0xC7, 0xF0, 0xE4, 0x90, 0x60,  // Cxv....`
                /* 0180 */  0x44, 0x08, 0x39, 0x39, 0x05, 0xA0, 0x81, 0x4F,  // D.99...O
                /* 0188 */  0xF7, 0xEC, 0x22, 0x9C, 0xAE, 0x27, 0xE5, 0x40,  // .."..'.@
                /* 0190 */  0xC3, 0xA0, 0xE3, 0x04, 0xC7, 0x79, 0x00, 0x1C,  // .....y..
                /* 0198 */  0xE3, 0x84, 0x7F, 0x2E, 0x80, 0x3F, 0x40, 0x7E,  // .....?@~
                /* 01A0 */  0xCA, 0x78, 0xC5, 0x48, 0xE0, 0x98, 0x23, 0x44,  // .x.H..#D
                /* 01A8 */  0x8B, 0x19, 0x21, 0x04, 0xF8, 0xA7, 0x8A, 0xC2,  // ..!.....
                /* 01B0 */  0x07, 0x42, 0xFE, 0xFF, 0x63, 0x04, 0x17, 0xA0,  // .B..c...
                /* 01B8 */  0xC7, 0x08, 0x7C, 0x03, 0x8E, 0x11, 0x7D, 0x94,  // ..|...}.
                /* 01C0 */  0xE0, 0xEA, 0x0F, 0x1A, 0x74, 0x80, 0xE0, 0x02,  // ....t...
                /* 01C8 */  0xF5, 0x00, 0x81, 0x6F, 0xF4, 0xA3, 0x07, 0x7A,  // ...o...z
                /* 01D0 */  0x5C, 0x16, 0x7D, 0x1E, 0x90, 0xF1, 0x13, 0x8D,  // \.}.....
                /* 01D8 */  0xE6, 0xC5, 0x4F, 0x07, 0xFC, 0xF0, 0x01, 0x1E,  // ..O.....
                /* 01E0 */  0x50, 0x0F, 0x09, 0x07, 0x8A, 0x99, 0x36, 0x07,  // P.....6.
                /* 01E8 */  0x7D, 0x76, 0x39, 0x74, 0xEC, 0x70, 0xE1, 0xFD,  // }v9t.p..
                /* 01F0 */  0xFF, 0x87, 0x0B, 0x9E, 0x13, 0x08, 0xB8, 0xE4,  // ........
                /* 01F8 */  0xC1, 0xA2, 0x87, 0x6B, 0xBF, 0x02, 0x10, 0x42,  // ...k...B
                /* 0200 */  0x97, 0x79, 0x2B, 0xD1, 0xAC, 0x22, 0x1C, 0x31,  // .y+..".1
                /* 0208 */  0x8C, 0x73, 0x90, 0x09, 0x2C, 0x12, 0x1E, 0x75,  // .s..,..u
                /* 0210 */  0xBC, 0x30, 0x3C, 0x3F, 0x0B, 0x45, 0x3F, 0x98,  // .0<?.E?.
                /* 0218 */  0x53, 0x09, 0x7F, 0x30, 0x51, 0x4E, 0xE1, 0x68,  // S..0QN.h
                /* 0220 */  0x2C, 0x17, 0x41, 0xBA, 0x20, 0x74, 0x74, 0x32,  // ,.A. tt2
                /* 0228 */  0xC2, 0x19, 0x44, 0x39, 0xBB, 0x33, 0x36, 0x81,  // ..D9.36.
                /* 0230 */  0x8F, 0x52, 0x3E, 0x02, 0xF0, 0x73, 0x8B, 0x47,  // .R>..s.G
                /* 0238 */  0x04, 0xE3, 0xBC, 0x14, 0xC5, 0x1E, 0xE7, 0x44,  // .......D
                /* 0240 */  0x08, 0x0A, 0x1C, 0x0E, 0x2A, 0xC8, 0xD3, 0xC1,  // ....*...
                /* 0248 */  0xA7, 0x2D, 0x2A, 0x1D, 0x06, 0x75, 0xE0, 0x02,  // .-*..u..
                /* 0250 */  0xAC, 0x4C, 0x22, 0xC2, 0xB3, 0x44, 0x6D, 0x10,  // .L"..Dm.
                /* 0258 */  0x3A, 0x35, 0xBC, 0x4D, 0xBC, 0x6D, 0xF9, 0x16,  // :5.M.m..
                /* 0260 */  0x10, 0xE7, 0x34, 0x7B, 0x3B, 0x70, 0x11, 0x8C,  // ..4{;p..
                /* 0268 */  0x08, 0x35, 0x43, 0x91, 0x93, 0x56, 0xC4, 0x18,  // .5C..V..
                /* 0270 */  0x51, 0x1E, 0xB7, 0x8C, 0xF2, 0xB6, 0xF5, 0x02,  // Q.......
                /* 0278 */  0x10, 0xEF, 0xC4, 0xFE, 0xFF, 0xCF, 0x5B, 0xC6,  // ......[.
                /* 0280 */  0x08, 0x1E, 0xF9, 0x81, 0x8B, 0xC5, 0x58, 0xBD,  // ......X.
                /* 0288 */  0xFE, 0x6B, 0x3E, 0x70, 0x01, 0x3C, 0xFF, 0xFF,  // .k>p.<..
                /* 0290 */  0x9F, 0x4F, 0xF0, 0x41, 0x0F, 0x43, 0xE8, 0x61,  // .O.A.C.a
                /* 0298 */  0x78, 0x2A, 0xE7, 0x52, 0xE9, 0x54, 0x84, 0x18,  // x*.R.T..
                /* 02A0 */  0x35, 0x4C, 0xD4, 0x67, 0x28, 0xDF, 0x2D, 0x7C,  // 5L.g(.-|
                /* 02A8 */  0x20, 0x02, 0xDF, 0x99, 0x0B, 0x38, 0x1F, 0x53,  //  ....8.S
                /* 02B0 */  0x70, 0x67, 0x1A, 0xF0, 0xF8, 0x9C, 0x81, 0x40,  // pg.....@
                /* 02B8 */  0x4E, 0xC5, 0x87, 0x1A, 0xC0, 0x82, 0xE8, 0x27,  // N......'
                /* 02C0 */  0x84, 0x4F, 0x34, 0x54, 0x26, 0x0C, 0xEA, 0x50,  // .O4T&..P
                /* 02C8 */  0x03, 0x1C, 0xFE, 0xFF, 0x87, 0x1A, 0x60, 0x74,  // ......`t
                /* 02D0 */  0x85, 0x79, 0x1A, 0x3D, 0xE7, 0x67, 0x19, 0x9F,  // .y.=.g..
                /* 02D8 */  0x6A, 0x7C, 0x28, 0x35, 0x8E, 0x21, 0x5E, 0x66,  // j|(5.!^f
                /* 02E0 */  0x1E, 0x6A, 0x7C, 0x2C, 0x78, 0x25, 0xF5, 0xA1,  // .j|,x%..
                /* 02E8 */  0xC6, 0x50, 0x71, 0x1E, 0x6A, 0x3C, 0xDC, 0x40,  // .Pq.j<.@
                /* 02F0 */  0x51, 0xDF, 0x6C, 0x9E, 0x6D, 0x8C, 0x1E, 0xDF,  // Q.l.m...
                /* 02F8 */  0x37, 0x54, 0x43, 0x3C, 0xD4, 0x30, 0xC9, 0x2B,  // 7TC<.0.+
                /* 0300 */  0xD5, 0x58, 0x7C, 0xA8, 0x01, 0x78, 0xF5, 0xFF,  // .X|..x..
                /* 0308 */  0x3F, 0xD4, 0x00, 0x7C, 0x3B, 0x1A, 0xC0, 0x39,  // ?..|;..9
                /* 0310 */  0x32, 0xE2, 0x8E, 0x06, 0xE0, 0x3A, 0x94, 0x02,  // 2....:..
                /* 0318 */  0x87, 0xFF, 0xFF, 0xD1, 0x00, 0x78, 0x1C, 0x85,  // .....x..
                /* 0320 */  0xC0, 0x7C, 0xA1, 0xF1, 0x51, 0x08, 0xB0, 0x20,  // .|..Q.. 
                /* 0328 */  0xFB, 0x1C, 0x84, 0x12, 0x7A, 0x14, 0x02, 0x04,  // ....z...
                /* 0330 */  0xDD, 0x7E, 0x9E, 0x22, 0x9E, 0x7D, 0x7C, 0xF9,  // .~.".}|.
                /* 0338 */  0x79, 0x20, 0x88, 0xF0, 0x9A, 0xEF, 0x53, 0x90,  // y ....S.
                /* 0340 */  0x0F, 0xF9, 0x3E, 0x0A, 0x31, 0x18, 0x43, 0xF9,  // ..>.1.C.
                /* 0348 */  0x1A, 0xE4, 0xA3, 0x10, 0x83, 0x7A, 0x0D, 0xF2,  // .....z..
                /* 0350 */  0x7D, 0xDF, 0x20, 0x8F, 0x17, 0x41, 0x62, 0x47,  // }. ..AbG
                /* 0358 */  0xF9, 0xFF, 0x07, 0x7A, 0x14, 0x62, 0xA2, 0x8F,  // ...z.b..
                /* 0360 */  0x42, 0x00, 0xED, 0xFF, 0xFF, 0x47, 0x21, 0x80,  // B....G!.
                /* 0368 */  0x7F, 0x01, 0x8E, 0x06, 0xA0, 0x9B, 0xD6, 0xA3,  // ........
                /* 0370 */  0x10, 0x78, 0xEF, 0x2C, 0xA7, 0x7D, 0x02, 0x3E,  // .x.,.}.>
                /* 0378 */  0x0B, 0x61, 0xFF, 0xFF, 0x67, 0x21, 0x80, 0x25,  // .a..g!.%
                /* 0380 */  0x47, 0xA1, 0xA3, 0x38, 0xCB, 0x57, 0xA1, 0x27,  // G..8.W.'
                /* 0388 */  0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81, 0x5E,  // ....a..^
                /* 0390 */  0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E, 0x67,  // 2.].8O.g
                /* 0398 */  0xF1, 0x24, 0xEE, 0x4B, 0x90, 0x0F, 0x14, 0xCF,  // .$.K....
                /* 03A0 */  0x42, 0x86, 0x3A, 0xDD, 0xA0, 0x6F, 0xE4, 0x1E,  // B.:..o..
                /* 03A8 */  0x58, 0xCC, 0xF8, 0x21, 0x9E, 0x87, 0x0C, 0xF1,  // X..!....
                /* 03B0 */  0x2C, 0x04, 0x18, 0xF9, 0xFF, 0x9F, 0x85, 0x00,  // ,.......
                /* 03B8 */  0xFE, 0xFF, 0xFF, 0xCF, 0x42, 0x80, 0xEB, 0x17,  // ....B...
                /* 03C0 */  0x80, 0xCF, 0x42, 0xC0, 0xF3, 0x04, 0xF0, 0xA0,  // ..B.....
                /* 03C8 */  0xED, 0xB3, 0x10, 0x60, 0xE8, 0xFF, 0x7F, 0x16,  // ...`....
                /* 03D0 */  0x02, 0x8C, 0x1C, 0x2E, 0xCF, 0xFF, 0x15, 0xE8,  // ........
                /* 03D8 */  0x58, 0xDE, 0x23, 0x3C, 0xEB, 0x93, 0x7C, 0xBD,  // X.#<..|.
                /* 03E0 */  0xF4, 0x4C, 0x1F, 0x0A, 0x9E, 0x85, 0x18, 0xD6,  // .L......
                /* 03E8 */  0x61, 0xF8, 0x2C, 0xC4, 0x20, 0x5E, 0x34, 0x0D,  // a.,. ^4.
                /* 03F0 */  0xF1, 0xC2, 0xE9, 0xC3, 0x00, 0x03, 0x7E, 0xE5,  // ......~.
                /* 03F8 */  0x34, 0x50, 0x90, 0x40, 0xCF, 0x42, 0x00, 0x4B,  // 4P.@.B.K
                /* 0400 */  0xFE, 0xFF, 0x67, 0x21, 0x80, 0xFF, 0xFF, 0xFF,  // ..g!....
                /* 0408 */  0xB3, 0x10, 0x10, 0x5B, 0xA3, 0xCE, 0x42, 0xC0,  // ...[..B.
                /* 0410 */  0xF2, 0xB6, 0xF2, 0x8C, 0xED, 0xD3, 0xCA, 0xB3,  // ........
                /* 0418 */  0x10, 0x60, 0x21, 0x97, 0x91, 0x83, 0x10, 0x26,  // .`!....&
                /* 0420 */  0xE2, 0xC3, 0xC1, 0xC7, 0x4C, 0x40, 0xCF, 0xFF,  // ....L@..
                /* 0428 */  0x7F, 0x8A, 0x2F, 0xEE, 0xC6, 0x78, 0x02, 0x78,  // ../..x.x
                /* 0430 */  0x91, 0x78, 0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C,  // .x.dGM.<
                /* 0438 */  0x0B, 0x19, 0xEF, 0x2C, 0x5E, 0x03, 0x9E, 0xE0,  // ...,^...
                /* 0440 */  0x3D, 0xF9, 0x67, 0x21, 0x06, 0x76, 0x58, 0xC1,  // =.g!.vX.
                /* 0448 */  0x1E, 0x85, 0x0C, 0x6A, 0xF0, 0xD8, 0x21, 0xC2,  // ...j..!.
                /* 0450 */  0x04, 0x7A, 0x16, 0x62, 0x71, 0x9F, 0x2B, 0x3A,  // .z.bq.+:
                /* 0458 */  0x4F, 0xF8, 0x2C, 0x04, 0x38, 0xB9, 0x1A, 0x3C,  // O.,.8..<
                /* 0460 */  0x0B, 0x01, 0x26, 0x0E, 0x1B, 0x3E, 0x6B, 0x80,  // ..&..>k.
                /* 0468 */  0x67, 0xF8, 0x1E, 0xD5, 0x39, 0x3C, 0x1E, 0x03,  // g...9<..
                /* 0470 */  0xAF, 0xFF, 0xFF, 0x41, 0x03, 0x3C, 0x59, 0x75,  // ...A.<Yu
                /* 0478 */  0x9C, 0x13, 0x58, 0xEE, 0x45, 0xCB, 0xC6, 0x81,  // ..X.E...
                /* 0480 */  0x86, 0x8E, 0xC8, 0xEA, 0x80, 0x34, 0x36, 0xCC,  // .....46.
                /* 0488 */  0xA5, 0x24, 0xF2, 0xC9, 0xB1, 0x51, 0x5B, 0x11,  // .$...Q[.
                /* 0490 */  0x9C, 0xCE, 0x4C, 0x3E, 0x01, 0x58, 0x0B, 0x85,  // ..L>.X..
                /* 0498 */  0x14, 0xD0, 0x68, 0x2C, 0x86, 0x77, 0xE6, 0xA3,  // ..h,.w..
                /* 04A0 */  0x13, 0x05, 0x31, 0xA0, 0x8F, 0x43, 0xB6, 0x71,  // ..1..C.q
                /* 04A8 */  0x28, 0x40, 0xED, 0x45, 0x53, 0x20, 0xE7, 0x1C,  // (@.ES ..
                /* 04B0 */  0x8C, 0xFE, 0xD9, 0xD1, 0xD9, 0xF8, 0x4E, 0xC0,  // ......N.
                /* 04B8 */  0x35, 0x40, 0xE8, 0x94, 0x60, 0x68, 0xAB, 0x99,  // 5@..`h..
                /* 04C0 */  0x25, 0x0A, 0xCC, 0xF8, 0x4F, 0x31, 0x26, 0xF0,  // %...O1&.
                /* 04C8 */  0x39, 0x06, 0x7F, 0x30, 0xC0, 0x0F, 0xFC, 0xC5,  // 9..0....
                /* 04D0 */  0xA0, 0xEA, 0x7B, 0x81, 0xEE, 0x0B, 0x56, 0x77,  // ..{...Vw
                /* 04D8 */  0x93, 0x81, 0x30, 0x23, 0x13, 0xD4, 0x77, 0x3A,  // ..0#..w:
                /* 04E0 */  0x00, 0x05, 0x90, 0x2F, 0x04, 0x3E, 0x47, 0x3D,  // .../.>G=
                /* 04E8 */  0x14, 0xB0, 0x89, 0x84, 0x08, 0x13, 0xCD, 0xE8,  // ........
                /* 04F0 */  0x88, 0x09, 0xA3, 0xA2, 0x4F, 0x98, 0x82, 0x78,  // ....O..x
                /* 04F8 */  0xC2, 0x8E, 0x35, 0x61, 0xF4, 0x4C, 0x7C, 0xD1,  // ..5a.L|.
                /* 0500 */  0x61, 0x23, 0xC6, 0x84, 0xB8, 0x7A, 0x40, 0x9B,  // a#...z@.
                /* 0508 */  0x60, 0x50, 0x5F, 0x8A, 0x60, 0x0D, 0x99, 0x8F,  // `P_.`...
                /* 0510 */  0xC5, 0x17, 0x08, 0xDC, 0x94, 0xD9, 0xFF, 0x7F,  // ........
                /* 0518 */  0xCA, 0xE0, 0x9A, 0x13, 0xBB, 0x26, 0xF8, 0xB2,  // .....&..
                /* 0520 */  0x83, 0x9B, 0x33, 0x18, 0xE1, 0x31, 0x77, 0x31,  // ..3..1w1
                /* 0528 */  0x7E, 0x75, 0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37,  // ~u...A.7
                /* 0530 */  0x1C, 0x86, 0xFD, 0x64, 0xE6, 0x19, 0xBD, 0x97,  // ...d....
                /* 0538 */  0xF9, 0x1A, 0x87, 0x81, 0xF5, 0x78, 0x39, 0xAC,  // .....x9.
                /* 0540 */  0xD1, 0xC2, 0x1E, 0xDA, 0x7B, 0x88, 0x0F, 0x31,  // ....{..1
                /* 0548 */  0x3E, 0x4F, 0x18, 0x23, 0xAC, 0x6F, 0x2F, 0xE0,  // >O.#.o/.
                /* 0550 */  0xB8, 0x67, 0xC1, 0xBF, 0x6B, 0x80, 0xE7, 0x12,  // .g..k...
                /* 0558 */  0xE2, 0xBB, 0x06, 0x60, 0xED, 0xFF, 0x7F, 0xD7,  // ...`....
                /* 0560 */  0x00, 0xF8, 0x71, 0x4D, 0xF0, 0x5D, 0x03, 0x78,  // ..qM.].x
                /* 0568 */  0x0F, 0xDD, 0x77, 0x0D, 0xE0, 0xF7, 0xFF, 0xBF,  // ..w.....
                /* 0570 */  0x6B, 0xE0, 0xB2, 0xDF, 0x35, 0x50, 0xC7, 0x00,  // k...5P..
                /* 0578 */  0x2B, 0xBC, 0x6B, 0x40, 0xBB, 0xB2, 0xBD, 0xAF,  // +.k@....
                /* 0580 */  0x3D, 0x61, 0x59, 0xD3, 0x65, 0x03, 0xA5, 0xE6,  // =aY.e...
                /* 0588 */  0xB2, 0x01, 0x90, 0x40, 0xCA, 0x84, 0x51, 0xE1,  // ...@..Q.
                /* 0590 */  0x27, 0x4C, 0x41, 0x3C, 0x61, 0x07, 0xBB, 0x6C,  // 'LA<a..l
                /* 0598 */  0x80, 0x22, 0xC6, 0x65, 0x03, 0xF4, 0x63, 0x3B,  // .".e..c;
                /* 05A0 */  0x65, 0xF0, 0xFD, 0xFF, 0xCF, 0xF7, 0x70, 0xEE,  // e.....p.
                /* 05A8 */  0x09, 0xEC, 0xB6, 0x01, 0xBC, 0x21, 0x7D, 0xDB,  // .....!}.
                /* 05B0 */  0x00, 0xAE, 0xF9, 0x6F, 0x1B, 0x28, 0x0E, 0xAB,  // ...o.(..
                /* 05B8 */  0xBC, 0x6D, 0x40, 0x3C, 0xC9, 0x33, 0x02, 0xAB,  // .m@<.3..
                /* 05C0 */  0xBA, 0x6E, 0xA0, 0xF4, 0x5C, 0x37, 0x00, 0x79,  // .n..\7.y
                /* 05C8 */  0xFF, 0xFF, 0xEB, 0x06, 0xF0, 0x10, 0x33, 0x61,  // ......3a
                /* 05D0 */  0x54, 0xFC, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xD1,  // T..S.O..
                /* 05D8 */  0xAE, 0x1B, 0xA0, 0x08, 0x72, 0xDD, 0x00, 0xFD,  // ....r...
                /* 05E0 */  0xBC, 0x5E, 0x37, 0x80, 0xC3, 0x45, 0x01, 0x73,  // .^7..E.s
                /* 05E8 */  0xDF, 0x00, 0xDE, 0xB0, 0xFC, 0xBE, 0x01, 0x3C,  // .......<
                /* 05F0 */  0xFF, 0xFF, 0xF7, 0x0D, 0xF0, 0xDC, 0xC4, 0x31,  // .......1
                /* 05F8 */  0xF7, 0x0D, 0x80, 0xCD, 0xFF, 0xFF, 0xAB, 0x1E,  // ........
                /* 0600 */  0xEE, 0xA2, 0x80, 0xB9, 0x6F, 0x00, 0xEF, 0x8B,  // ....o...
                /* 0608 */  0xB4, 0xEF, 0x1B, 0xC0, 0x55, 0xDA, 0xFA, 0x3D,  // ....U..=
                /* 0610 */  0x38, 0x7A, 0x42, 0xF0, 0xF8, 0x70, 0xF7, 0x4B,  // 8zB..p.K
                /* 0618 */  0x8F, 0xCF, 0x77, 0x73, 0x70, 0x0C, 0xF2, 0x18,  // ..wsp...
                /* 0620 */  0x0F, 0xED, 0x80, 0x5F, 0xDF, 0x3D, 0x31, 0xDF,  // ..._.=1.
                /* 0628 */  0xCD, 0x81, 0xFF, 0x99, 0xE0, 0x78, 0x30, 0xD0,  // .....x0.
                /* 0630 */  0x38, 0xC4, 0x56, 0x2F, 0x0D, 0xE4, 0x68, 0x10,  // 8.V/..h.
                /* 0638 */  0x9F, 0xFF, 0xFF, 0xA1, 0x19, 0x9C, 0xB1, 0x8A,  // ........
                /* 0640 */  0x3F, 0xF9, 0x23, 0x9C, 0x63, 0xE8, 0xEC, 0x70,  // ?.#.c..p
                /* 0648 */  0x90, 0xD8, 0x41, 0x70, 0x49, 0x26, 0x86, 0x8E,  // ..ApI&..
                /* 0650 */  0x11, 0x01, 0x83, 0x22, 0x20, 0x40, 0x3A, 0x0C,  // ..." @:.
                /* 0658 */  0x38, 0x12, 0x14, 0x6A, 0x3C, 0x1E, 0x91, 0x0F,  // 8..j<...
                /* 0660 */  0x23, 0x1E, 0xC6, 0xC3, 0x84, 0x41, 0x8E, 0xE3,  // #....A..
                /* 0668 */  0x30, 0x0E, 0x39, 0xCA, 0x4B, 0x82, 0x09, 0x3C,  // 0.9.K..<
                /* 0670 */  0x11, 0x1F, 0x38, 0xE0, 0xB8, 0x06, 0x94, 0xF9,  // ..8.....
                /* 0678 */  0xB3, 0x02, 0x68, 0x8E, 0xD5, 0x3E, 0x71, 0xC0,  // ..h..>q.
                /* 0680 */  0x1D, 0x8F, 0xE7, 0xC9, 0x3C, 0x43, 0x12, 0xF9,  // ....<C..
                /* 0688 */  0x83, 0x40, 0x1D, 0x4B, 0xF8, 0xA4, 0x5F, 0x3C,  // .@.K.._<
                /* 0690 */  0x0C, 0x79, 0xB8, 0x26, 0xB0, 0xD8, 0x13, 0x0A,  // .y.&....
                /* 0698 */  0x1D, 0x0F, 0xF8, 0xCF, 0x22, 0x8F, 0x09, 0x3E,  // ...."..>
                /* 06A0 */  0x61, 0x78, 0xBE, 0x3E, 0x76, 0xB0, 0x81, 0xE3,  // ax.>v...
                /* 06A8 */  0x46, 0xE1, 0x41, 0xE3, 0x02, 0x0C, 0x9A, 0x8A,  // F.A.....
                /* 06B0 */  0x3A, 0x2F, 0xA0, 0xA4, 0x1C, 0x3F, 0x10, 0x17,  // :/...?..
                /* 06B8 */  0x1C, 0xCC, 0x85, 0xC5, 0xBF, 0x0B, 0x0F, 0x0C,  // ........
                /* 06C0 */  0xCC, 0xFF, 0xFF, 0x71, 0xC3, 0x5A, 0x85, 0x07,  // ...q.Z..
                /* 06C8 */  0x86, 0x3B, 0x60, 0x78, 0x2C, 0x47, 0x11, 0xF4,  // .;`x,G..
                /* 06D0 */  0xC0, 0x83, 0xFA, 0x50, 0x72, 0xE6, 0x9E, 0xE4,  // ...Pr...
                /* 06D8 */  0x31, 0x3A, 0xEA, 0x49, 0x85, 0x9E, 0x26, 0x70,  // 1:.I..&p
                /* 06E0 */  0x92, 0x20, 0x74, 0x8D, 0x38, 0x0A, 0x0C, 0x5C,  // . t.8..\
                /* 06E8 */  0xF8, 0x30, 0xC7, 0x67, 0x9C, 0xE3, 0x33, 0x3C,  // .0.g..3<
                /* 06F0 */  0x1F, 0xED, 0xEB, 0xCC, 0x59, 0x47, 0x08, 0x88,  // ....YG..
                /* 06F8 */  0xBF, 0xA8, 0xB0, 0x01, 0x83, 0xE5, 0x60, 0x00,  // ......`.
                /* 0700 */  0x1C, 0x06, 0x8C, 0x4F, 0x34, 0x60, 0x39, 0x19,  // ...O4`9.
                /* 0708 */  0x30, 0x6A, 0x3C, 0x86, 0x3E, 0x2D, 0x86, 0x78,  // 0j<.>-.x
                /* 0710 */  0x7C, 0x61, 0xDF, 0x2A, 0x4C, 0x50, 0x3D, 0xA8,  // |a.*LP=.
                /* 0718 */  0x4E, 0x37, 0x1E, 0x1A, 0x38, 0x00, 0x3D, 0x34,  // N7..8.=4
                /* 0720 */  0xF8, 0xA7, 0x17, 0x72, 0x27, 0xA3, 0x43, 0xB0,  // ...r'.C.
                /* 0728 */  0x56, 0x3C, 0xCD, 0xFB, 0xC8, 0x63, 0x9E, 0x5B,  // V<...c.[
                /* 0730 */  0x94, 0xB7, 0x81, 0xE7, 0x00, 0x7E, 0x5A, 0xF0,  // .....~Z.
                /* 0738 */  0x70, 0x7C, 0x2C, 0xF0, 0x38, 0x7D, 0xBD, 0x4B,  // p|,.8}.K
                /* 0740 */  0xF0, 0x7A, 0x97, 0xA0, 0xB3, 0xC3, 0x0B, 0x4D,  // .z.....M
                /* 0748 */  0x36, 0x04, 0xD4, 0x60, 0x3D, 0x04, 0xCC, 0x54,  // 6..`=..T
                /* 0750 */  0x13, 0x38, 0xC9, 0x08, 0x10, 0xFF, 0x7F, 0x82,  // .8......
                /* 0758 */  0x19, 0x20, 0x74, 0x6B, 0x39, 0xDD, 0x67, 0x91,  // . tk9.g.
                /* 0760 */  0x10, 0xA7, 0xF9, 0x38, 0xF3, 0x58, 0xE0, 0xB1,  // ...8.X..
                /* 0768 */  0x3E, 0x18, 0x58, 0xF3, 0x08, 0x35, 0xD7, 0xD8,  // >.X..5..
                /* 0770 */  0x67, 0xF6, 0x74, 0x80, 0x59, 0x45, 0xB8, 0x97,  // g.t.YE..
                /* 0778 */  0xA3, 0x37, 0x0C, 0xA3, 0x3D, 0x5B, 0xF8, 0x9A,  // .7..=[..
                /* 0780 */  0xF1, 0xFC, 0x64, 0x84, 0x70, 0xEC, 0x0E, 0x70,  // ..d.p..p
                /* 0788 */  0x92, 0x1E, 0x49, 0x84, 0x17, 0x04, 0x76, 0x62,  // ..I...vb
                /* 0790 */  0x78, 0x80, 0x31, 0xCE, 0xC9, 0x1B, 0xD6, 0x97,  // x.1.....
                /* 0798 */  0x38, 0x06, 0x1A, 0xCC, 0xD8, 0xBE, 0x0C, 0xB0,  // 8.......
                /* 07A0 */  0x51, 0xF9, 0x62, 0x00, 0x7F, 0x26, 0x61, 0x8D,  // Q.b..&a.
                /* 07A8 */  0x7C, 0xA2, 0x87, 0x6A, 0x82, 0xC9, 0x2F, 0x06,  // |..j../.
                /* 07B0 */  0x50, 0x66, 0xE1, 0xEB, 0x89, 0x4F, 0x4A, 0xEC,  // Pf...OJ.
                /* 07B8 */  0x62, 0xC0, 0x52, 0x5E, 0x0C, 0x40, 0x75, 0xC3,  // b.R^.@u.
                /* 07C0 */  0xF0, 0xC5, 0x00, 0xFE, 0xB5, 0xE8, 0xC5, 0x00,  // ........
                /* 07C8 */  0x0C, 0x97, 0x27, 0xDF, 0x03, 0xEC, 0xE1, 0x8E,  // ..'.....
                /* 07D0 */  0x45, 0xC7, 0x69, 0x6B, 0x37, 0x03, 0x72, 0x36,  // E.ik7.r6
                /* 07D8 */  0x60, 0x30, 0x9E, 0x61, 0x18, 0x63, 0x84, 0xF1,  // `0.a.c..
                /* 07E0 */  0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB, 0x01, 0xF4,  // (..`....
                /* 07E8 */  0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D, 0x40, 0x39,  // ..@%..@9
                /* 07F0 */  0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7, 0x80, 0xA7,  // .ty4....
                /* 07F8 */  0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE, 0xC6, 0x2A,  // .......*
                /* 0800 */  0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8, 0xD4, 0xA2,  // .@..4...
                /* 0808 */  0xF8, 0x54, 0xE0, 0xB5, 0xFC, 0xFF, 0x9F, 0x9F,  // .T......
                /* 0810 */  0xC2, 0xC5, 0x39, 0x13, 0x4F, 0xD5, 0x70, 0x06,  // ..9.O.p.
                /* 0818 */  0x7A, 0x75, 0x0B, 0x07, 0xEB, 0x54, 0xF0, 0x1A,  // zu...T..
                /* 0820 */  0xC0, 0xCE, 0x4D, 0x9E, 0x96, 0x11, 0x61, 0x1C,  // ..M...a.
                /* 0828 */  0x52, 0x1E, 0x19, 0x6C, 0x0B, 0x87, 0x40, 0x86,  // R..l..@.
                /* 0830 */  0x79, 0x27, 0x60, 0x90, 0xEF, 0x73, 0xCF, 0x3B,  // y'`..s.;
                /* 0838 */  0x06, 0x7E, 0x45, 0x88, 0xF3, 0xA4, 0xE5, 0x3B,  // .~E....;
                /* 0840 */  0x83, 0x2F, 0x0B, 0xE0, 0x8B, 0x74, 0x59, 0x40,  // ./...tY@
                /* 0848 */  0x43, 0xFB, 0x24, 0xE3, 0x0B, 0x82, 0x61, 0x4F,  // C.$...aO
                /* 0850 */  0x9C, 0x05, 0xB8, 0x2B, 0x80, 0x0A, 0xD4, 0x77,  // ...+...w
                /* 0858 */  0x05, 0xF8, 0x17, 0x82, 0x77, 0x05, 0x30, 0xCC,  // ....w.0.
                /* 0860 */  0xCB, 0xB7, 0x02, 0xAE, 0xE9, 0x50, 0x82, 0x3E,  // .....P.>
                /* 0868 */  0x93, 0xF8, 0xBA, 0x80, 0x9B, 0x22, 0x4B, 0x75,  // ....."Ku
                /* 0870 */  0x54, 0x80, 0x9E, 0x62, 0x12, 0xA8, 0x7B, 0xA7,  // T..b..{.
                /* 0878 */  0x8F, 0x0A, 0x30, 0x6E, 0x7F, 0xBE, 0x06, 0xF8,  // ..0n....
                /* 0880 */  0xB4, 0xC0, 0xCF, 0x42, 0xEC, 0x3A, 0x82, 0xBB,  // ...B.:..
                /* 0888 */  0x92, 0x30, 0x94, 0x67, 0x03, 0x5F, 0xB2, 0xF8,  // .0.g._..
                /* 0890 */  0xE1, 0x00, 0x06, 0xF8, 0xFF, 0xFF, 0xF5, 0xC4,  // ........
                /* 0898 */  0x43, 0x8C, 0x10, 0x9B, 0x1D, 0xB8, 0x5E, 0x0D,  // C.....^.
                /* 08A0 */  0xDE, 0x0B, 0x7C, 0x21, 0xE2, 0x27, 0x03, 0xF0,  // ..|!.'..
                /* 08A8 */  0x1D, 0x1F, 0xC1, 0x71, 0xD2, 0x09, 0x1F, 0xE9,  // ...q....
                /* 08B0 */  0x99, 0x85, 0x9F, 0xFE, 0x00, 0x13, 0x77, 0x58,  // ......wX
                /* 08B8 */  0xDC, 0xE9, 0x0F, 0x1C, 0xA7, 0x45, 0x38, 0x03,  // .....E8.
                /* 08C0 */  0xE0, 0xF2, 0x5E, 0x55, 0x06, 0xF2, 0x0F, 0x41,  // ..^U...A
                /* 08C8 */  0x82, 0x60, 0x50, 0x17, 0x19, 0x9F, 0xF4, 0xF0,  // .`P.....
                /* 08D0 */  0x43, 0x60, 0x87, 0x09, 0x76, 0x4E, 0x32, 0x1C,  // C`..vN2.
                /* 08D8 */  0x3F, 0x00, 0x78, 0x54, 0x6F, 0x38, 0x2F, 0x5D,  // ?.xTo8/]
                /* 08E0 */  0x1E, 0xA6, 0x8F, 0x08, 0x21, 0xD9, 0x51, 0x0C,  // ....!.Q.
                /* 08E8 */  0x77, 0xAA, 0xF0, 0x55, 0xC1, 0x57, 0x11, 0x23,  // w..U.W.#
                /* 08F0 */  0x3E, 0xAC, 0xF8, 0xD4, 0x60, 0x28, 0x18, 0x87,  // >...`(..
                /* 08F8 */  0x01, 0xCC, 0x1D, 0x99, 0x41, 0xF9, 0x9E, 0x74,  // ....A..t
                /* 0900 */  0x18, 0x47, 0xF1, 0xFF, 0x7F, 0x98, 0x63, 0x97,  // .G....c.
                /* 0908 */  0x86, 0xA3, 0xC0, 0x1C, 0x39, 0x7C, 0x5B, 0x32,  // ....9|[2
                /* 0910 */  0xBC, 0x09, 0xEC, 0xFE, 0xD6, 0xAA, 0x13, 0xC6,  // ........
                /* 0918 */  0xC1, 0xBF, 0x76, 0x1B, 0xA2, 0x37, 0x1C, 0x1D,  // ..v..7..
                /* 0920 */  0x54, 0xA2, 0x9C, 0x56, 0x94, 0xA3, 0x88, 0xE2,  // T..V....
                /* 0928 */  0xF3, 0x42, 0x84, 0x18, 0x51, 0x82, 0x05, 0x79,  // .B..Q..y
                /* 0930 */  0xDD, 0x89, 0x15, 0xE5, 0xC5, 0xC0, 0x08, 0x11,  // ........
                /* 0938 */  0x43, 0xBC, 0xC3, 0x06, 0x3A, 0xF1, 0xF0, 0x41,  // C...:..A
                /* 0940 */  0x9E, 0x37, 0xE2, 0xB4, 0x7F, 0xF6, 0x45, 0x0C,  // .7....E.
                /* 0948 */  0xD9, 0x67, 0x05, 0xDC, 0xD9, 0x01, 0xEE, 0xF4,  // .g......
                /* 0950 */  0xF8, 0xE9, 0x01, 0x70, 0x02, 0xF4, 0xF4, 0x00,  // ...p....
                /* 0958 */  0xB6, 0xF3, 0x06, 0xDC, 0x03, 0x01, 0xE2, 0x48,  // .......H
                /* 0960 */  0x8B, 0x0A, 0x7E, 0x65, 0xA1, 0x70, 0x3C, 0xF4,  // ..~e.p<.
                /* 0968 */  0xCD, 0x8A, 0x1E, 0x4B, 0x70, 0x87, 0x03, 0x1F,  // ...Kp...
                /* 0970 */  0x19, 0x7C, 0x80, 0xC4, 0x0D, 0xC5, 0x87, 0x0A,  // .|......
                /* 0978 */  0xE4, 0x59, 0x00, 0xE2, 0xFF, 0xFF, 0x90, 0x8C,  // .Y......
                /* 0980 */  0x1D, 0x01, 0xBF, 0xC1, 0xBC, 0xB4, 0xBC, 0x37,  // .......7
                /* 0988 */  0xF0, 0x53, 0x0A, 0xEE, 0x20, 0x00, 0xBE, 0x63,  // .S.. ..c
                /* 0990 */  0x00, 0x78, 0x07, 0xC3, 0x65, 0x8D, 0x19, 0x75,  // .x..e..u
                /* 0998 */  0x28, 0xF6, 0x98, 0x71, 0x87, 0x10, 0x7E, 0x22,  // (..q..~"
                /* 09A0 */  0xC0, 0x8D, 0xD9, 0xE3, 0xF6, 0x98, 0x71, 0xC7,  // ......q.
                /* 09A8 */  0x59, 0x3E, 0xAA, 0xA7, 0x8C, 0x17, 0x68, 0xDC,  // Y>....h.
                /* 09B0 */  0x8D, 0x80, 0x0F, 0x1D, 0x78, 0x1C, 0x60, 0x70,  // ....x.`p
                /* 09B8 */  0x47, 0x0A, 0x30, 0x5E, 0x0E, 0xD8, 0xD8, 0xC1,  // G.0^....
                /* 09C0 */  0x1D, 0x84, 0x9C, 0x02, 0x59, 0x3A, 0x8C, 0xC6,  // ....Y:..
                /* 09C8 */  0x8E, 0x93, 0x0D, 0xA4, 0x63, 0x8C, 0x0F, 0xB9,  // ....c...
                /* 09D0 */  0x1E, 0x3B, 0x6E, 0xB0, 0xFF, 0xFF, 0x63, 0xC7,  // .;n...c.
                /* 09D8 */  0x1E, 0x5F, 0xC0, 0x37, 0x06, 0x7E, 0x7D, 0x3E,  // ._.7.~}>
                /* 09E0 */  0x0C, 0xEC, 0xCD, 0xCF, 0xA3, 0x33, 0xB8, 0x87,  // .....3..
                /* 09E8 */  0xED, 0x13, 0x4C, 0x8C, 0xE7, 0x97, 0x10, 0x8F,  // ..L.....
                /* 09F0 */  0x30, 0x2F, 0x2E, 0x11, 0x8E, 0x22, 0xC8, 0x9B,  // 0/..."..
                /* 09F8 */  0x4B, 0x9C, 0x57, 0x83, 0x30, 0x8F, 0x2D, 0x51,  // K.W.0.-Q
                /* 0A00 */  0x42, 0x44, 0x38, 0x98, 0x38, 0x4F, 0x30, 0x46,  // BD8.8O0F
                /* 0A08 */  0x38, 0xF0, 0x28, 0x86, 0x88, 0x70, 0x02, 0x21,  // 8.(..p.!
                /* 0A10 */  0x4E, 0xFA, 0x64, 0x83, 0x84, 0x8F, 0x11, 0x36,  // N.d....6
                /* 0A18 */  0xDA, 0x13, 0x0C, 0x1F, 0x0B, 0x3F, 0xAF, 0x78,  // .....?.x
                /* 0A20 */  0xF0, 0xFC, 0xB4, 0xE6, 0xBB, 0xA0, 0x0F, 0xEF,  // ........
                /* 0A28 */  0x6C, 0x6A, 0x3E, 0x4E, 0xFA, 0x30, 0x8B, 0x1B,  // lj>N.0..
                /* 0A30 */  0xD4, 0x83, 0x23, 0xBB, 0xEB, 0xF8, 0x78, 0x8D,  // ..#...x.
                /* 0A38 */  0x3D, 0x05, 0x79, 0x08, 0xFC, 0x44, 0xE0, 0x0B,  // =.y..D..
                /* 0A40 */  0xA2, 0x27, 0xEB, 0xBB, 0x1E, 0xBB, 0x97, 0x19,  // .'......
                /* 0A48 */  0xA3, 0xFA, 0x29, 0xA0, 0x8E, 0x29, 0x67, 0xF0,  // ..)..)g.
                /* 0A50 */  0x0A, 0xC1, 0xEE, 0x79, 0x3E, 0x64, 0xFB, 0x2E,  // ...y>d..
                /* 0A58 */  0xC9, 0x46, 0x81, 0x3B, 0x24, 0xF8, 0x8C, 0xC4,  // .F.;$...
                /* 0A60 */  0x4F, 0x15, 0x1E, 0x86, 0x47, 0x01, 0x63, 0x06,  // O...G.c.
                /* 0A68 */  0xEF, 0x08, 0x87, 0x16, 0xE2, 0x80, 0xDF, 0x77,  // .......w
                /* 0A70 */  0xD9, 0x50, 0x63, 0x9C, 0x9E, 0xCF, 0x1F, 0x6C,  // .Pc....l
                /* 0A78 */  0x10, 0xF0, 0xA1, 0x0E, 0xD5, 0xC3, 0x3C, 0xAA,  // ......<.
                /* 0A80 */  0x97, 0x42, 0x86, 0x73, 0x76, 0x70, 0x07, 0x81,  // .B.svp..
                /* 0A88 */  0x3D, 0x7E, 0x78, 0x10, 0xFF, 0xFF, 0x47, 0x11,  // =~x...G.
                /* 0A90 */  0x3A, 0x0A, 0x3A, 0x08, 0x76, 0xBE, 0x79, 0x83,  // :.:.v.y.
                /* 0A98 */  0x33, 0xC8, 0x31, 0xC0, 0x3E, 0x53, 0xF9, 0x68,  // 3.1.>S.h
                /* 0AA0 */  0x82, 0x38, 0x02, 0xA2, 0xCF, 0x1F, 0x1E, 0xC3,  // .8......
                /* 0AA8 */  0x9B, 0x1C, 0x1F, 0x0E, 0xF6, 0xE8, 0x81, 0x3B,  // .......;
                /* 0AB0 */  0x89, 0xC0, 0x3D, 0x76, 0x1D, 0xB4, 0xAF, 0x71,  // ..=v...q
                /* 0AB8 */  0xBE, 0x68, 0xC1, 0xB8, 0xEF, 0x3D, 0x8B, 0x80,  // .h...=..
                /* 0AC0 */  0x1F, 0xE3, 0xB1, 0x05, 0x1C, 0x87, 0x12, 0x70,  // .......p
                /* 0AC8 */  0x07, 0x3B, 0xAE, 0x71, 0x08, 0x45, 0x81, 0xD1,  // .;.q.E..
                /* 0AD0 */  0xA1, 0x04, 0x17, 0x03, 0x48, 0x30, 0x8E, 0x71,  // ....H0.q
                /* 0AD8 */  0x46, 0x43, 0x5F, 0x22, 0x7D, 0x48, 0x83, 0x33,  // FC_"}H.3
                /* 0AE0 */  0x68, 0xD8, 0xF3, 0x7C, 0x42, 0xE1, 0xF6, 0x04,  // h..|B...
                /* 0AE8 */  0x28, 0x3A, 0xA1, 0x80, 0x0C, 0xF7, 0xFF, 0xFF,  // (:......
                /* 0AF0 */  0x0C, 0x82, 0x3D, 0x21, 0xF0, 0x33, 0x08, 0x87,  // ..=!.3..
                /* 0AF8 */  0x3E, 0xEE, 0xF7, 0x46, 0x9F, 0x1A, 0xD9, 0xDC,  // >..F....
                /* 0B00 */  0x1F, 0x02, 0x4E, 0xE0, 0xDC, 0xD9, 0xA9, 0x19,  // ..N.....
                /* 0B08 */  0x77, 0x66, 0xC0, 0x9E, 0x3F, 0x3C, 0x04, 0x7E,  // wf..?<.~
                /* 0B10 */  0x2E, 0xF0, 0xF0, 0x3D, 0x04, 0xFC, 0xE0, 0x1F,  // ...=....
                /* 0B18 */  0x98, 0x0D, 0x0E, 0xC6, 0x53, 0x84, 0xAF, 0x1D,  // ....S...
                /* 0B20 */  0x1C, 0x9C, 0x9F, 0x06, 0x0C, 0xCE, 0x5F, 0xA1,  // ......_.
                /* 0B28 */  0x3E, 0xCF, 0x33, 0x70, 0xEC, 0xA9, 0xD7, 0xF7,  // >.3p....
                /* 0B30 */  0x0E, 0xCF, 0xD7, 0x87, 0x0A, 0xFC, 0x4D, 0xCF,  // ......M.
                /* 0B38 */  0x87, 0x0A, 0x70, 0x1C, 0x1E, 0xF8, 0x61, 0x85,  // ..p...a.
                /* 0B40 */  0x0D, 0xE1, 0x51, 0x00, 0x7F, 0x6A, 0xF1, 0xF1,  // ..Q..j..
                /* 0B48 */  0x2F, 0xCE, 0x53, 0x04, 0xBB, 0x8D, 0x60, 0x0F,  // /.S...`.
                /* 0B50 */  0x17, 0x80, 0x99, 0xFF, 0xFF, 0xB0, 0x30, 0xD1,  // ......0.
                /* 0B58 */  0xCE, 0x62, 0xA8, 0x30, 0x67, 0x31, 0x74, 0x90,  // .b.0g1t.
                /* 0B60 */  0xB3, 0x18, 0x3D, 0x5C, 0x00, 0x2E, 0x04, 0x1F,  // ..=\....
                /* 0B68 */  0x0F, 0x40, 0x73, 0x10, 0x78, 0x5C, 0xF0, 0x85,  // .@s.x\..
                /* 0B70 */  0xE0, 0x48, 0x0E, 0xE4, 0xE9, 0x00, 0xF0, 0x29,  // .H.....)
                /* 0B78 */  0xF6, 0xE3, 0xEC, 0xF3, 0x11, 0x95, 0x07, 0x83,  // ........
                /* 0B80 */  0x3A, 0x1F, 0xF8, 0x84, 0xE2, 0x63, 0x07, 0x3F,  // :....c.?
                /* 0B88 */  0x1B, 0xF8, 0x46, 0xEE, 0xA1, 0xF2, 0x53, 0xB3,  // ..F...S.
                /* 0B90 */  0x4F, 0xDA, 0xEC, 0xFF, 0x7F, 0x38, 0x12, 0xB8,  // O....8..
                /* 0B98 */  0x4E, 0x47, 0x0E, 0x34, 0x0C, 0xD4, 0x88, 0x0C,  // NG.4....
                /* 0BA0 */  0xE5, 0x73, 0x1B, 0x2E, 0xC0, 0xD0, 0xE8, 0x39,  // .s.....9
                /* 0BA8 */  0x1C, 0xC6, 0x01, 0xD7, 0xE7, 0x70, 0xEC, 0x80,  // .....p..
                /* 0BB0 */  0x7C, 0x0E, 0x87, 0x7F, 0x8E, 0x86, 0x3F, 0x36,  // |.....?6
                /* 0BB8 */  0x76, 0xBA, 0xE7, 0x03, 0x83, 0x75, 0xFD, 0xC6,  // v....u..
                /* 0BC0 */  0x0C, 0x0C, 0x6C, 0xDF, 0x22, 0x0F, 0x0C, 0x38,  // ..l."..8
                /* 0BC8 */  0xA2, 0x9E, 0x8D, 0xAF, 0x10, 0x1E, 0x18, 0xD8,  // ........
                /* 0BD0 */  0x00, 0x3D, 0x30, 0xE0, 0x13, 0x0B, 0x42, 0x4E,  // .=0...BN
                /* 0BD8 */  0x06, 0x86, 0x3A, 0x65, 0x18, 0xF9, 0xFF, 0x1F,  // ..:e....
                /* 0BE0 */  0xF3, 0x89, 0xC3, 0xC3, 0xF0, 0xA1, 0x22, 0xEA,  // ......".
                /* 0BE8 */  0x33, 0xC0, 0x23, 0x1E, 0x1B, 0x1B, 0xB8, 0x8E,  // 3.#.....
                /* 0BF0 */  0x2D, 0x1E, 0x1B, 0xF8, 0x8F, 0xF0, 0xF8, 0xB1,  // -.......
                /* 0BF8 */  0xC1, 0x19, 0xCB, 0xA3, 0x89, 0x2F, 0x33, 0x47,  // ...../3G
                /* 0C00 */  0x76, 0x1A, 0x67, 0xF6, 0x1A, 0xE2, 0xA3, 0xDD,  // v.g.....
                /* 0C08 */  0xE3, 0xB7, 0xC7, 0x06, 0x2E, 0x0B, 0x63, 0x03,  // ......c.
                /* 0C10 */  0x4A, 0x21, 0xC7, 0x86, 0x3E, 0xA4, 0xF8, 0x14,  // J!..>...
                /* 0C18 */  0x60, 0xE3, 0xA8, 0x64, 0x1E, 0x3E, 0x5E, 0xF9,  // `..d.>^.
                /* 0C20 */  0xC4, 0x70, 0x74, 0x41, 0xDE, 0xD0, 0x7D, 0xB9,  // .ptA..}.
                /* 0C28 */  0xF0, 0x91, 0xC6, 0x60, 0xBE, 0xB4, 0xF8, 0x0C,  // ...`....
                /* 0C30 */  0xCA, 0x87, 0x08, 0x2E, 0x0D, 0x43, 0x04, 0x22,  // .....C."
                /* 0C38 */  0xFF, 0xFF, 0x21, 0x62, 0x42, 0x0D, 0x11, 0x3D,  // ..!bB..=
                /* 0C40 */  0x1E, 0x5F, 0x66, 0x0E, 0x91, 0x0D, 0x0D, 0xBC,  // ._f.....
                /* 0C48 */  0x9F, 0x1A, 0x0F, 0x0D, 0xF8, 0xC4, 0x04, 0xF6,  // ........
                /* 0C50 */  0x2A, 0x3C, 0x34, 0x7A, 0xFA, 0xF1, 0x21, 0x80,  // *<4z..!.
                /* 0C58 */  0x41, 0xF8, 0x36, 0xC0, 0xAE, 0x02, 0xBE, 0x0A,  // A.6.....
                /* 0C60 */  0x19, 0x24, 0xC1, 0x38, 0x27, 0x0B, 0x3A, 0x38,  // .$.8'.:8
                /* 0C68 */  0x70, 0x0C, 0xC9, 0x83, 0x83, 0x3F, 0x18, 0x0F,  // p....?..
                /* 0C70 */  0x81, 0x03, 0x7B, 0x06, 0xCF, 0x45, 0x8F, 0xC1,  // ..{..E..
                /* 0C78 */  0x3E, 0xED, 0xF8, 0x54, 0x02, 0xBE, 0x60, 0xA7,  // >..T..`.
                /* 0C80 */  0x01, 0xF4, 0x69, 0x8F, 0x0D, 0xE6, 0x59, 0xE0,  // ..i...Y.
                /* 0C88 */  0xF9, 0xD3, 0x23, 0xF4, 0xED, 0xE1, 0xED, 0x16,  // ..#.....
                /* 0C90 */  0x77, 0x1E, 0x00, 0x97, 0x89, 0xF3, 0x00, 0x48,  // w......H
                /* 0C98 */  0xFE, 0xFF, 0xE7, 0x01, 0xB0, 0x9D, 0x4F, 0xC1,  // ......O.
                /* 0CA0 */  0x71, 0xD2, 0xC7, 0xCE, 0xD1, 0x03, 0x78, 0x0C,  // q.....x.
                /* 0CA8 */  0xF3, 0x68, 0xF9, 0x31, 0x0C, 0x70, 0x14, 0xF4,  // .h.1.p..
                /* 0CB0 */  0x7C, 0x4A, 0x07, 0xEE, 0x68, 0x30, 0xA8, 0x63,  // |J..h0.c
                /* 0CB8 */  0x18, 0xB8, 0x22, 0x80, 0xEB, 0x68, 0xE2, 0x63,  // .."..h.c
                /* 0CC0 */  0x08, 0x9C, 0xA1, 0x1E, 0xB4, 0xAF, 0x09, 0x9E,  // ........
                /* 0CC8 */  0xB5, 0x2F, 0x4E, 0xEC, 0x9C, 0x00, 0x2E, 0x15,  // ./N.....
                /* 0CD0 */  0xE7, 0x04, 0x20, 0xF2, 0xFF, 0x3F, 0xB0, 0xC0,  // .. ..?..
                /* 0CD8 */  0x06, 0x3E, 0x89, 0xE7, 0xF4, 0x43, 0x03, 0xF3,  // .>...C..
                /* 0CE0 */  0xC0, 0x3C, 0x34, 0xE0, 0x73, 0x34, 0xC0, 0x9D,  // .<4.s4..
                /* 0CE8 */  0x28, 0xC0, 0x73, 0x1B, 0xC1, 0x1D, 0x28, 0x00,  // (.s...(.
                /* 0CF0 */  0x37, 0x27, 0x75, 0x8F, 0x8B, 0x43, 0xE3, 0x10,  // 7'u..C..
                /* 0CF8 */  0x9F, 0xB5, 0xCE, 0xD9, 0xC7, 0xA8, 0x33, 0xC5,  // ......3.
                /* 0D00 */  0x9D, 0x45, 0xC0, 0x70, 0x4E, 0x46, 0x3C, 0x78,  // .E.pNF<x
                /* 0D08 */  0x0C, 0xE4, 0x07, 0x86, 0x64, 0xC1, 0xA0, 0x58,  // ....d..X
                /* 0D10 */  0xFE, 0xFF, 0x87, 0xC2, 0x0E, 0x06, 0x1C, 0xD8,  // ........
                /* 0D18 */  0x47, 0x04, 0x76, 0x2E, 0x60, 0x67, 0x60, 0xC3,  // G.v.`g`.
                /* 0D20 */  0xF1, 0xB3, 0x80, 0x4F, 0x09, 0x0F, 0x35, 0xC7,  // ...O..5.
                /* 0D28 */  0xF1, 0xD4, 0xE8, 0x2B, 0x96, 0x21, 0xD9, 0xF9,  // ...+.!..
                /* 0D30 */  0xDF, 0xA7, 0x56, 0xDC, 0xA1, 0x15, 0xCE, 0x49,  // ..V....I
                /* 0D38 */  0x15, 0x5C, 0x04, 0x3E, 0xEB, 0x78, 0x14, 0xFC,  // .\.>.x..
                /* 0D40 */  0xF4, 0xE0, 0x39, 0xBE, 0x31, 0xF8, 0xF4, 0xC0,  // ..9.1...
                /* 0D48 */  0xDC, 0x5F, 0x9D, 0x75, 0x65, 0x78, 0x67, 0xF0,  // ._.uexg.
                /* 0D50 */  0x9C, 0x4E, 0x3A, 0xC8, 0x49, 0xB7, 0x25, 0x40,  // .N:.I.%@
                /* 0D58 */  0x1B, 0x82, 0x50, 0x02, 0x45, 0x79, 0x1B, 0x88,  // ..P.Ey..
                /* 0D60 */  0x66, 0x6F, 0x28, 0x9A, 0x79, 0xD0, 0x17, 0x81,  // fo(.y...
                /* 0D68 */  0x40, 0x51, 0x62, 0x46, 0x6A, 0x0E, 0x4C, 0x48,  // @QbFj.LH
                /* 0D70 */  0x11, 0x0F, 0x27, 0x4A, 0x88, 0x60, 0x6F, 0x13,  // ..'J.`o.
                /* 0D78 */  0xAD, 0x09, 0xB0, 0x3F, 0x08, 0x22, 0xE9, 0x65,  // ...?.".e
                /* 0D80 */  0xA0, 0xA3, 0x95, 0x23, 0x1D, 0x10, 0xD1, 0xC3,  // ...#....
                /* 0D88 */  0xF6, 0x69, 0x19, 0x7F, 0xE8, 0xC4, 0x5D, 0x55,  // .i....]U
                /* 0D90 */  0x7C, 0x50, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // |P.....P
                /* 0D98 */  0x37, 0x40, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // 7@....._
                /* 0DA0 */  0x2F, 0xB0, 0x04, 0xE5, 0x0F, 0x02, 0x35, 0x32,  // /.....52
                /* 0DA8 */  0x43, 0x7B, 0x96, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
                /* 0DB0 */  0xF2, 0xA9, 0x95, 0x1C, 0x34, 0x41, 0xF6, 0xFF,  // ....4A..
                /* 0DB8 */  0x1F, 0x0F, 0xCC, 0x99, 0x3F, 0x6D, 0xF8, 0xF6,  // ....?m..
                /* 0DC0 */  0xED, 0xF9, 0xFA, 0x38, 0x06, 0xD8, 0x3C, 0xEB,  // ...8..<.
                /* 0DC8 */  0xFB, 0x04, 0x03, 0x8E, 0x9B, 0x05, 0x3F, 0xC3,  // ......?.
                /* 0DD0 */  0x00, 0xCE, 0x80, 0x9E, 0x61, 0xC0, 0xF1, 0xFF,  // ....a...
                /* 0DD8 */  0x3F, 0xC3, 0xC0, 0x1C, 0x2A, 0x6E, 0x08, 0x5C,  // ?...*n.\
                /* 0DE0 */  0xEE, 0x8A, 0x28, 0x90, 0x05, 0xC2, 0xA0, 0x08,  // ..(.....
                /* 0DE8 */  0x2C, 0xEE, 0x08, 0x42, 0xCF, 0xA7, 0x70, 0x86,  // ,..B..p.
                /* 0DF0 */  0x72, 0xB2, 0xBD, 0x5F, 0x1D, 0xC8, 0x2D, 0xC2,  // r.._..-.
                /* 0DF8 */  0x43, 0x3D, 0x8B, 0xC7, 0x04, 0x76, 0xDA, 0x02,  // C=...v..
                /* 0E00 */  0xFE, 0x63, 0x83, 0x33, 0xEF, 0x27, 0xD9, 0x08,  // .c.3.'..
                /* 0E08 */  0xC7, 0x06, 0xF6, 0xE3, 0x16, 0x70, 0x3A, 0x98,  // .....p:.
                /* 0E10 */  0xC1, 0xB9, 0xFF, 0xB0, 0x1B, 0x37, 0x6E, 0x68,  // .....7nh
                /* 0E18 */  0x60, 0x1B, 0xD6, 0xFF, 0xFF, 0xC9, 0x11, 0x70,  // `......p
                /* 0E20 */  0x70, 0x62, 0xE2, 0x57, 0x89, 0x87, 0x27, 0x7E,  // pb.W..'~
                /* 0E28 */  0x32, 0x03, 0x9C, 0x0B, 0x3D, 0x96, 0xA1, 0xA4,  // 2...=...
                /* 0E30 */  0x9D, 0xCC, 0x80, 0xE8, 0xFF, 0xFF, 0x64, 0x06,  // ......d.
                /* 0E38 */  0x2C, 0xAF, 0x65, 0x3E, 0x99, 0x81, 0x5B, 0xD6,  // ,.e>..[.
                /* 0E40 */  0xC9, 0x0C, 0xE8, 0xB8, 0x3E, 0x99, 0x01, 0x95,  // ....>...
                /* 0E48 */  0x73, 0x14, 0xFE, 0x64, 0x06, 0xD8, 0xFA, 0xFF,  // s..d....
                /* 0E50 */  0x9F, 0xCC, 0x00, 0x33, 0x07, 0x2C, 0xDC, 0xC9,  // ...3.,..
                /* 0E58 */  0x0C, 0x6C, 0x87, 0x18, 0xC0, 0xF5, 0x58, 0x61,  // .l....Xa
                /* 0E60 */  0x8C, 0x81, 0x8B, 0x3E, 0xC1, 0xF0, 0x33, 0x80,  // ...>..3.
                /* 0E68 */  0x61, 0x50, 0x27, 0x23, 0x02, 0x24, 0x18, 0x1F,  // aP'#.$..
                /* 0E70 */  0xE8, 0xFF, 0xFF, 0x0F, 0x21, 0x30, 0xE6, 0xF2,  // ....!0..
                /* 0E78 */  0x3C, 0xEF, 0x6B, 0x82, 0xCF, 0x51, 0x60, 0x3F,  // <.k..Q`?
                /* 0E80 */  0x9C, 0x01, 0x87, 0x53, 0x03, 0x3E, 0xDA, 0x89,  // ...S.>..
                /* 0E88 */  0x0B, 0x3D, 0x10, 0x5F, 0x82, 0x7C, 0xE1, 0xF0,  // .=._.|..
                /* 0E90 */  0x45, 0x84, 0x5D, 0x0E, 0xC2, 0x1E, 0xB5, 0x4F,  // E.]....O
                /* 0E98 */  0x38, 0xBE, 0x5E, 0x3F, 0x9E, 0x01, 0x0E, 0x02,  // 8.^?....
                /* 0EA0 */  0x8D, 0x0E, 0x3D, 0x0A, 0x8F, 0x2E, 0x64, 0xF5,  // ..=...d.
                /* 0EA8 */  0x87, 0x33, 0x40, 0xC2, 0xFF, 0xFF, 0x5D, 0xC2,  // .3@...].
                /* 0EB0 */  0x4E, 0x2F, 0x38, 0x16, 0xA3, 0x3E, 0x02, 0x3C,  // N/8..>.<
                /* 0EB8 */  0x0F, 0xBC, 0xBA, 0xF8, 0x9C, 0xFF, 0x1C, 0xE0,  // ........
                /* 0EC0 */  0x1B, 0x03, 0xE6, 0xF6, 0xE2, 0xA3, 0x0C, 0xB3,  // ........
                /* 0EC8 */  0x30, 0x3A, 0xD0, 0xD8, 0x18, 0x1D, 0xE8, 0x86,  // 0:......
                /* 0ED0 */  0xC0, 0xEE, 0x57, 0x9E, 0x39, 0x1F, 0xC2, 0xD9,  // ..W.9...
                /* 0ED8 */  0x78, 0xF4, 0xB8, 0xA3, 0x0C, 0x3C, 0x78, 0x1F,  // x....<x.
                /* 0EE0 */  0x65, 0x80, 0xD7, 0x69, 0x04, 0x33, 0x83, 0xF0,  // e..i.3..
                /* 0EE8 */  0x4F, 0x2C, 0x6C, 0x08, 0xA7, 0xEA, 0xDB, 0x04,  // O,l.....
                /* 0EF0 */  0x3B, 0xCA, 0x00, 0xD6, 0xFE, 0xFF, 0xC7, 0x3B,  // ;......;
                /* 0EF8 */  0x60, 0x20, 0xF8, 0xC9, 0xE0, 0xB3, 0x1D, 0x95,  // ` ......
                /* 0F00 */  0x08, 0x83, 0x3A, 0xDE, 0x01, 0x0E, 0x21, 0x1E,  // ..:...!.
                /* 0F08 */  0xEF, 0xC0, 0x2E, 0xEF, 0x28, 0x44, 0x8F, 0x77,  // ....(D.w
                /* 0F10 */  0x80, 0x99, 0xFF, 0xFF, 0xF1, 0x0E, 0x60, 0xC7,  // ......`.
                /* 0F18 */  0x58, 0x7D, 0x04, 0x00, 0xDF, 0x21, 0x08, 0xB0,  // X}...!..
                /* 0F20 */  0xF5, 0xFF, 0x3F, 0x04, 0x01, 0xA3, 0xD3, 0x09,  // ..?.....
                /* 0F28 */  0xEE, 0x78, 0x08, 0xB6, 0x63, 0x10, 0x60, 0x6D,  // .x..c.`m
                /* 0F30 */  0xE8, 0x3E, 0x06, 0x81, 0x79, 0xB4, 0x30, 0x47,  // .>..y.0G
                /* 0F38 */  0xC1, 0x85, 0x2D, 0x8A, 0x02, 0x59, 0x0A, 0x0C,  // ..-..Y..
                /* 0F40 */  0xEA, 0xBC, 0x40, 0x80, 0xA4, 0xE1, 0x24, 0x07,  // ..@...$.
                /* 0F48 */  0xF2, 0xFF, 0xFF, 0xF1, 0x10, 0x58, 0x9D, 0xE4,  // .....X..
                /* 0F50 */  0xF0, 0xB2, 0x4E, 0x1D, 0xE8, 0xF1, 0x18, 0xF4,  // ..N.....
                /* 0F58 */  0x95, 0xC3, 0x57, 0x02, 0x7E, 0xE4, 0x60, 0x12,  // ..W.~.`.
                /* 0F60 */  0x40, 0x35, 0x48, 0x9F, 0x0D, 0x81, 0xD3, 0x91,  // @5H.....
                /* 0F68 */  0x03, 0x1C, 0xB7, 0xA4, 0xC0, 0xD8, 0xDB, 0xC1,  // ........
                /* 0F70 */  0x2B, 0xA7, 0x27, 0xF1, 0x34, 0x74, 0x9C, 0x21,  // +.'.4t.!
                /* 0F78 */  0x0A, 0xC7, 0x24, 0x07, 0x83, 0x48, 0xAF, 0x52,  // ..$..H.R
                /* 0F80 */  0x6C, 0x80, 0x6F, 0x35, 0x3E, 0x1B, 0xF9, 0x00,  // l.o5>...
                /* 0F88 */  0x02, 0x6F, 0xDC, 0x3E, 0xD4, 0x01, 0x43, 0x88,  // .o.>..C.
                /* 0F90 */  0x93, 0xE2, 0x87, 0x0C, 0x63, 0x9E, 0x15, 0x3F,  // ....c..?
                /* 0F98 */  0x7E, 0x80, 0xE3, 0xFF, 0x7F, 0xA8, 0x03, 0x8C,  // ~.......
                /* 0FA0 */  0xC6, 0x38, 0xD1, 0xA1, 0x84, 0x1F, 0xEA, 0x00,  // .8......
                /* 0FA8 */  0x9D, 0x37, 0x80, 0x87, 0x3A, 0xB0, 0x9F, 0x9A,  // .7..:...
                /* 0FB0 */  0x7D, 0xA8, 0xC3, 0xFE, 0xFF, 0x0F, 0x75, 0x00,  // }.....u.
                /* 0FB8 */  0x5B, 0x7F, 0x18, 0x3A, 0x02, 0x80, 0xF0, 0x3C,  // [..:...<
                /* 0FC0 */  0x04, 0xFB, 0xFF, 0x7F, 0x1E, 0x02, 0xD8, 0x70,  // .......p
                /* 0FC8 */  0xBE, 0x03, 0xF3, 0x89, 0x08, 0xB0, 0x36, 0xF4,  // ......6.
                /* 0FD0 */  0xFF, 0xFF, 0x13, 0x11, 0xB8, 0x47, 0x0B, 0x73,  // .....G.s
                /* 0FD8 */  0x14, 0x5C, 0xD0, 0xAB, 0xC3, 0x40, 0x54, 0x02,  // .\...@T.
                /* 0FE0 */  0x0C, 0x8A, 0xC0, 0xF1, 0xD7, 0x26, 0x18, 0x87,  // .....&..
                /* 0FE8 */  0x3A, 0xDF, 0xA1, 0xCF, 0x0B, 0x1E, 0xF6, 0x53,  // :......S
                /* 0FF0 */  0x81, 0x27, 0x71, 0xAA, 0xBE, 0x16, 0x1C, 0xC5,  // .'q.....
                /* 0FF8 */  0x13, 0x80, 0x4F, 0x78, 0xC0, 0x7F, 0x68, 0xB0,  // ..Ox..h.
                /* 1000 */  0x26, 0x51, 0xFC, 0xD0, 0x40, 0x7D, 0x04, 0x01,  // &Q..@}..
                /* 1008 */  0xDF, 0xD0, 0xC0, 0x11, 0xF5, 0x7C, 0x83, 0x3E,  // .....|.>
                /* 1010 */  0x66, 0xF9, 0x6C, 0x10, 0xF3, 0x05, 0x24, 0xC2,  // f.l...$.
                /* 1018 */  0x03, 0x88, 0xAF, 0x0F, 0xEC, 0x38, 0xE9, 0x33,  // .....8.3
                /* 1020 */  0x50, 0xA0, 0xFF, 0x7F, 0x94, 0xF7, 0x0D, 0x7E,  // P......~
                /* 1028 */  0xC2, 0x01, 0xD7, 0xD0, 0x7C, 0x0A, 0x06, 0xAE,  // ....|...
                /* 1030 */  0x07, 0x4D, 0x38, 0x17, 0x18, 0xDF, 0xD8, 0xD8,  // .M8.....
                /* 1038 */  0x69, 0x00, 0x6C, 0x07, 0x60, 0xF0, 0x9D, 0x06,  // i.l.`...
                /* 1040 */  0xC0, 0x71, 0x4C, 0xE2, 0xA7, 0x43, 0x30, 0xC1,  // .qL..C0.
                /* 1048 */  0x1C, 0xCC, 0x4B, 0xB3, 0xBD, 0x9F, 0x72, 0xE8,  // ..K...r.
                /* 1050 */  0xD1, 0x05, 0x78, 0xFF, 0xFF, 0xCF, 0x86, 0xC0,  // ..x.....
                /* 1058 */  0x5E, 0xD2, 0xC1, 0x10, 0x25, 0xE2, 0x6C, 0x08,  // ^...%.l.
                /* 1060 */  0x08, 0x3C, 0x16, 0x9E, 0xFE, 0x01, 0x3C, 0x14,  // .<....<.
                /* 1068 */  0xBE, 0x0C, 0xFA, 0xDA, 0xF0, 0x4E, 0xE8, 0x7B,  // .....N.{
                /* 1070 */  0xC3, 0x61, 0xBF, 0x1B, 0xFA, 0x6C, 0xE8, 0x13,  // .a...l..
                /* 1078 */  0xE1, 0x11, 0x3C, 0x14, 0x46, 0x89, 0x78, 0xF0,  // ..<.F.x.
                /* 1080 */  0x41, 0x1A, 0x43, 0xD1, 0x0D, 0xD1, 0x60, 0x11,  // A.C...`.
                /* 1088 */  0x9E, 0x0E, 0x0D, 0x1A, 0x3C, 0x76, 0x88, 0x30,  // ....<v.0
                /* 1090 */  0x81, 0x9E, 0x0D, 0xD9, 0x8A, 0x7D, 0x36, 0x04,  // .....}6.
                /* 1098 */  0x86, 0xFF, 0xFF, 0xB3, 0x21, 0xC0, 0xC6, 0xF3,  // ....!...
                /* 10A0 */  0x11, 0x30, 0xFE, 0xFF, 0x9F, 0x8F, 0x80, 0xE1,  // .0......
                /* 10A8 */  0x21, 0x1B, 0x3C, 0xA7, 0x40, 0x18, 0x27, 0x1F,  // !.<.@.'.
                /* 10B0 */  0xC0, 0xF5, 0x58, 0x61, 0x8C, 0x81, 0x2B, 0xD7,  // ..Xa..+.
                /* 10B8 */  0x01, 0xC2, 0x8E, 0x03, 0x16, 0xF5, 0x8A, 0x30,  // .......0
                /* 10C0 */  0x0C, 0x65, 0xF1, 0x61, 0xC1, 0x47, 0x04, 0x7E,  // .e.a.G.~
                /* 10C8 */  0x58, 0xF0, 0x08, 0x2A, 0x1E, 0x27, 0x3D, 0xDD,  // X..*.'=.
                /* 10D0 */  0xF8, 0x4C, 0xC8, 0x0E, 0x09, 0x0E, 0x3F, 0x48,  // .L....?H
                /* 10D8 */  0x7A, 0xD0, 0x84, 0xF1, 0xFF, 0x3F, 0x5A, 0xC1,  // z....?Z.
                /* 10E0 */  0x3F, 0x1F, 0x61, 0x6F, 0x3D, 0x70, 0x4E, 0x05,  // ?.ao=pN.
                /* 10E8 */  0x80, 0x1B, 0x6D, 0x6F, 0x35, 0x41, 0x3B, 0xC0,  // ..mo5A;.
                /* 10F0 */  0x39, 0x4A, 0x36, 0x8E, 0x21, 0x94, 0xC3, 0x31,  // 9J6.!..1
                /* 10F8 */  0xDF, 0x1E, 0x9A, 0x26, 0x3B, 0x59, 0xC1, 0x8C,  // ...&;Y..
                /* 1100 */  0x05, 0xA9, 0x93, 0x80, 0x4F, 0x1B, 0x0E, 0x04,  // ....O...
                /* 1108 */  0x23, 0xED, 0x24, 0x1A, 0x8D, 0xE1, 0xAC, 0x16,  // #.$.....
                /* 1110 */  0x46, 0x70, 0x06, 0xF1, 0x71, 0xC4, 0xB9, 0x4E,  // Fp..q..N
                /* 1118 */  0x46, 0xE8, 0x03, 0xA5, 0x4F, 0x45, 0x98, 0x20,  // F...OE. 
                /* 1120 */  0xF7, 0x12, 0x3A, 0x6F, 0xDF, 0x0D, 0xF8, 0x55,  // ..:o...U
                /* 1128 */  0xD8, 0x63, 0x31, 0xB0, 0x6F, 0x27, 0xE0, 0x98,  // .c1.o'..
                /* 1130 */  0x8B, 0xD5, 0x80, 0xA2, 0x06, 0x60, 0x34, 0xCC,  // .....`4.
                /* 1138 */  0x29, 0xE0, 0xA9, 0x04, 0x5C, 0xC1, 0x70, 0x51,  // )...\.pQ
                /* 1140 */  0xFF, 0xFF, 0x3B, 0x20, 0xD7, 0x3A, 0x15, 0x9D,  // ..; .:..
                /* 1148 */  0x82, 0xDE, 0x07, 0x0E, 0x0E, 0x78, 0xCC, 0xDE,  // .....x..
                /* 1150 */  0x83, 0x83, 0x85, 0xE6, 0xC1, 0x81, 0x2D, 0xDB,  // ......-.
                /* 1158 */  0xE0, 0xD0, 0x4A, 0xEE, 0x22, 0xE4, 0xF0, 0x81,  // ..J."...
                /* 1160 */  0x9F, 0x1D, 0x70, 0x00, 0xF4, 0xEC, 0x60, 0x21,  // ..p...`!
                /* 1168 */  0x79, 0x76, 0x60, 0xD3, 0x77, 0x16, 0x01, 0x05,  // yv`.w...
                /* 1170 */  0x90, 0xEF, 0x1D, 0x3E, 0xB7, 0x3C, 0x7B, 0xB0,  // ...>.<{.
                /* 1178 */  0x31, 0x3C, 0xBA, 0x18, 0xCD, 0xE8, 0x5C, 0xD3,  // 1<....\.
                /* 1180 */  0x6D, 0x02, 0xA5, 0xE2, 0x36, 0x41, 0x41, 0x7C,  // m...6AA|
                /* 1188 */  0x03, 0x70, 0x42, 0x1A, 0xDD, 0x3A, 0x71, 0x33,  // .pB..:q3
                /* 1190 */  0x31, 0xFE, 0x23, 0x86, 0x8F, 0x08, 0x87, 0x74,  // 1.#....t
                /* 1198 */  0xB6, 0x26, 0x98, 0x07, 0x52, 0xCF, 0x40, 0xDF,  // .&..R.@.
                /* 11A0 */  0xD9, 0xF0, 0xB3, 0x0F, 0xF9, 0xE0, 0xE2, 0xFF,  // ........
                /* 11A8 */  0xFF, 0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A,  // .4|.!..:
                /* 11B0 */  0x6D, 0x9F, 0x19, 0x30, 0x07, 0x5D, 0x5F, 0xA7,  // m..0.]_.
                /* 11B8 */  0xDE, 0xE0, 0xC9, 0x55, 0x82, 0x7A, 0xB8, 0x80,  // ...U.z..
                /* 11C0 */  0xD0, 0x0B, 0x8D, 0x4F, 0x78, 0x09, 0x1E, 0x38,  // ...Ox..8
                /* 11C8 */  0x7D, 0xC4, 0x7B, 0x2F, 0x61, 0x17, 0xBD, 0x97,  // }.{/a...
                /* 11D0 */  0x11, 0x41, 0x28, 0xEF, 0x20, 0x50, 0xA3, 0xF2,  // .A(. P..
                /* 11D8 */  0x20, 0x30, 0x57, 0x79, 0x96, 0x6F, 0x0C, 0xA8,  //  0Wy.o..
                /* 11E0 */  0x64, 0x17, 0x2D, 0x7A, 0x86, 0x79, 0x87, 0xF1,  // d.-z.y..
                /* 11E8 */  0x25, 0xC1, 0xD7, 0x0F, 0x9F, 0x5B, 0xBC, 0x80,  // %....[..
                /* 11F0 */  0xD7, 0x2D, 0x18, 0x04, 0xCF, 0x40, 0xAF, 0x2E,  // .-...@..
                /* 11F8 */  0xBE, 0xB3, 0x1B, 0xF8, 0x55, 0xE0, 0x8D, 0x26,  // ....U..&
                /* 1200 */  0x44, 0x30, 0xC3, 0x1E, 0xFE, 0xBB, 0xBB, 0x51,  // D0.....Q
                /* 1208 */  0x7D, 0xD3, 0x31, 0xD6, 0xEB, 0x88, 0x47, 0xCA,  // }.1...G.
                /* 1210 */  0x8F, 0x2D, 0x07, 0x14, 0xE9, 0xE5, 0xCD, 0x13,  // .-......
                /* 1218 */  0xF0, 0x59, 0xC6, 0xA7, 0xBA, 0x93, 0xF2, 0xF5,  // .Y......
                /* 1220 */  0xD0, 0xE8, 0xAF, 0x10, 0x3E, 0xFC, 0x18, 0xD9,  // ....>...
                /* 1228 */  0xE7, 0x1C, 0x76, 0xBE, 0x63, 0x83, 0xE2, 0x88,  // ..v.c...
                /* 1230 */  0x0F, 0x0C, 0x2F, 0x35, 0x9E, 0x0A, 0x3B, 0x77,  // ../5..;w
                /* 1238 */  0xC1, 0x38, 0x38, 0xB0, 0x63, 0x11, 0xE6, 0xF8,  // .88.c...
                /* 1240 */  0x0A, 0xAE, 0x93, 0x8D, 0x4F, 0x0E, 0x60, 0x86,  // ....O.`.
                /* 1248 */  0xC7, 0x1C, 0x7C, 0x7D, 0xDE, 0xF0, 0xCD, 0xC0,  // ..|}....
                /* 1250 */  0xE3, 0xE2, 0x47, 0x0E, 0x9F, 0x34, 0x5E, 0x3A,  // ..G..4^:
                /* 1258 */  0x8D, 0x7D, 0x9A, 0x3E, 0x1A, 0xBD, 0xBC, 0xF9,  // .}.>....
                /* 1260 */  0xF4, 0x82, 0x81, 0xF5, 0xA5, 0xE1, 0xFF, 0x1F,  // ........
                /* 1268 */  0x16, 0x83, 0x16, 0xF6, 0x31, 0xE0, 0xCC, 0x7D,  // ....1..}
                /* 1270 */  0x21, 0xC2, 0x1D, 0x1E, 0xC1, 0x02, 0x88, 0xBF,  // !.......
                /* 1278 */  0x95, 0x3C, 0x72, 0x78, 0x02, 0x06, 0x64, 0x9A,  // .<rx..d.
                /* 1280 */  0xD6, 0xA5, 0x03, 0x11, 0x3F, 0xE5, 0x59, 0xF9,  // ....?.Y.
                /* 1288 */  0xCA, 0x74, 0x19, 0x62, 0x18, 0x4F, 0x95, 0x8F,  // .t.b.O..
                /* 1290 */  0x1F, 0x9E, 0x8D, 0x8F, 0x02, 0x3E, 0x46, 0x79,  // .....>Fy
                /* 1298 */  0xE6, 0x67, 0x14, 0xE9, 0x95, 0x81, 0x80, 0xEA,  // .g......
                /* 12A0 */  0x44, 0xC4, 0x15, 0xC2, 0x48, 0x0C, 0x8D, 0xEE,  // D...H...
                /* 12A8 */  0x1C, 0x3C, 0xFE, 0x10, 0x29, 0x88, 0x01, 0x7D,  // .<..)..}
                /* 12B0 */  0x73, 0x01, 0xA6, 0x67, 0x22, 0xE0, 0x72, 0x73,  // s..g".rs
                /* 12B8 */  0x01, 0xFE, 0xFF, 0xFF, 0x9B, 0x0B, 0xC0, 0xFF,  // ........
                /* 12C0 */  0xFF, 0xFF, 0xCD, 0x05, 0xEE, 0xFD, 0xC1, 0x37,  // .......7
                /* 12C8 */  0x17, 0xE0, 0x1A, 0x62, 0x55, 0xBA, 0xB9, 0xF0,  // ...bU...
                /* 12D0 */  0x03, 0x80, 0xA3, 0x2E, 0x48, 0xB7, 0x82, 0x88,  // ....H...
                /* 12D8 */  0x87, 0xE0, 0x41, 0x3E, 0x0A, 0x18, 0xF6, 0x2C,  // ..A>...,
                /* 12E0 */  0x1F, 0xA2, 0x3D, 0x1C, 0x13, 0x0C, 0x77, 0xD5,  // ..=...w.
                /* 12E8 */  0xA0, 0x43, 0x73, 0x2C, 0x0A, 0x09, 0xB9, 0xB7,  // .Cs,....
                /* 12F0 */  0xA0, 0xA2, 0xDF, 0x1F, 0x28, 0x88, 0x01, 0x7D,  // ....(..}
                /* 12F8 */  0x31, 0x04, 0x6C, 0xDD, 0x5A, 0x80, 0x45, 0x98,  // 1.l.Z.E.
                /* 1300 */  0x41, 0xA3, 0xE4, 0xC3, 0x68, 0x48, 0x06, 0xF1,  // A...hH..
                /* 1308 */  0xA0, 0x2D, 0xED, 0xD6, 0x42, 0xFF, 0xFF, 0xB7,  // .-..B...
                /* 1310 */  0x16, 0xB8, 0x87, 0x00, 0xDF, 0x5A, 0xE0, 0xCB,  // .....Z..
                /* 1318 */  0xBB, 0xB5, 0x80, 0xE2, 0x16, 0xE0, 0xA3, 0x01,  // ........
                /* 1320 */  0x3F, 0x2E, 0xF8, 0xC0, 0xE1, 0x1B, 0x8B, 0x6F,  // ?......o
                /* 1328 */  0xBA, 0xE4, 0xC2, 0x02, 0x75, 0xFC, 0x1C, 0xDC,  // ....u...
                /* 1330 */  0xE2, 0x2E, 0x2C, 0x50, 0x4E, 0x26, 0xE0, 0x38,  // ..,PN&.8
                /* 1338 */  0x92, 0x00, 0x0E, 0x21, 0x7D, 0x24, 0x01, 0x5E,  // ...!}$.^
                /* 1340 */  0xFF, 0xFF, 0x23, 0x09, 0x9C, 0x48, 0xAB, 0xA2,  // ..#..H..
                /* 1348 */  0x22, 0xDE, 0x03, 0x3A, 0x95, 0x18, 0x86, 0x8F,  // "..:....
                /* 1350 */  0xCE, 0x67, 0x06, 0xFC, 0x95, 0x83, 0x81, 0xB3,  // .g......
                /* 1358 */  0x6B, 0x9A, 0xE1, 0xF8, 0xC0, 0x3D, 0xBE, 0xE7,  // k....=..
                /* 1360 */  0xB4, 0xD3, 0x7A, 0x28, 0xF0, 0x3C, 0xDE, 0x0E,  // ..z(.<..
                /* 1368 */  0x42, 0xB2, 0x0B, 0x35, 0xEE, 0xF0, 0xE0, 0xB1,  // B..5....
                /* 1370 */  0x3F, 0x14, 0xF9, 0x86, 0xF0, 0x82, 0xE0, 0xCB,  // ?.......
                /* 1378 */  0x01, 0x83, 0x82, 0x71, 0xA7, 0xC6, 0x1C, 0xA8,  // ...q....
                /* 1380 */  0xE1, 0x10, 0x9C, 0xF1, 0x51, 0x60, 0x06, 0xE9,  // ....Q`..
                /* 1388 */  0x0B, 0xC8, 0xEB, 0x81, 0x07, 0xCB, 0xDC, 0xDF,  // ........
                /* 1390 */  0x0B, 0x64, 0x6E, 0x00, 0x3A, 0x4C, 0xC4, 0x78,  // .dn.:L.x
                /* 1398 */  0x58, 0x38, 0xA9, 0x47, 0x88, 0xB6, 0x2E, 0x05,  // X8.G....
                /* 13A0 */  0xF2, 0x06, 0xA1, 0x33, 0x55, 0x94, 0x10, 0x31,  // ...3U..1
                /* 13A8 */  0xCF, 0x20, 0x5C, 0x94, 0x88, 0x11, 0x02, 0xBE,  // . \.....
                /* 13B0 */  0xCB, 0x44, 0x09, 0x1C, 0x25, 0xE6, 0xFB, 0xC1,  // .D..%...
                /* 13B8 */  0xDB, 0x42, 0xB0, 0xC7, 0x85, 0x08, 0xB1, 0x42,  // .B.....B
                /* 13C0 */  0x04, 0xB6, 0xFD, 0x41, 0x90, 0x00, 0x6F, 0x0A,  // ...A..o.
                /* 13C8 */  0x5D, 0x53, 0x1C, 0xE9, 0x10, 0x83, 0x1E, 0xB6,  // ]S......
                /* 13D0 */  0x6F, 0xD8, 0x7C, 0x5A, 0x41, 0x8E, 0xCB, 0x07,  // o.|ZA...
                /* 13D8 */  0x19, 0x0C, 0xC1, 0xC3, 0x87, 0xBF, 0x00, 0x3E,  // .......>
                /* 13E0 */  0x00, 0xE0, 0x5D, 0x03, 0x6A, 0xE6, 0x8F, 0x07,  // ..].j...
                /* 13E8 */  0x60, 0x39, 0x5C, 0xC0, 0x3F, 0xC1, 0x60, 0xCF,  // `9\.?.`.
                /* 13F0 */  0x2A, 0x1A, 0x04, 0xEA, 0xA4, 0xC2, 0x4F, 0x57,  // *.....OW
                /* 13F8 */  0xBE, 0x69, 0xFB, 0x06, 0x64, 0x02, 0xFF, 0xFF,  // .i..d...
                /* 1400 */  0xC5, 0x1E, 0x44, 0xE8, 0x78, 0xC0, 0x3F, 0xFA,  // ..D.x.?.
                /* 1408 */  0x97, 0x74, 0x1F, 0x2A, 0x3C, 0x5F, 0x5F, 0xD5,  // .t.*<__.
                /* 1410 */  0x7D, 0x95, 0x07, 0xCB, 0x35, 0x81, 0x5F, 0xE6,  // }...5._.
                /* 1418 */  0x01, 0x8F, 0x82, 0xC7, 0x85, 0x82, 0xC6, 0x21,  // .......!
                /* 1420 */  0x3E, 0xD5, 0x9D, 0xBA, 0xCF, 0x2C, 0x27, 0x8C,  // >....,'.
                /* 1428 */  0x1B, 0x31, 0x1B, 0x2F, 0xB8, 0xC6, 0xC1, 0x95,  // .1./....
                /* 1430 */  0x93, 0xD0, 0x63, 0x81, 0xB5, 0xC2, 0xA0, 0x0E,  // ..c.....
                /* 1438 */  0x3F, 0xBE, 0x5B, 0xF9, 0x8C, 0xC0, 0x4F, 0x22,  // ?.[...O"
                /* 1440 */  0x86, 0xAF, 0x78, 0xAC, 0x74, 0x06, 0xBE, 0x52,  // ..x.t..R
                /* 1448 */  0xF8, 0x56, 0x4A, 0xC1, 0xF5, 0xFF, 0x3F, 0x72,  // .VJ...?r
                /* 1450 */  0xF9, 0x50, 0xE3, 0x43, 0x3B, 0xFE, 0x7C, 0x81,  // .P.C;.|.
                /* 1458 */  0x0B, 0x30, 0x64, 0x7A, 0xE3, 0x82, 0x71, 0x4D,  // .0dz..qM
                /* 1460 */  0xF1, 0x8D, 0x0B, 0x73, 0x77, 0xF0, 0x80, 0x7C,  // ...sw..|
                /* 1468 */  0xC4, 0x00, 0x3E, 0xAB, 0xF0, 0xC0, 0x70, 0xA7,  // ..>...p.
                /* 1470 */  0x05, 0xDF, 0x05, 0x0D, 0x7A, 0x8E, 0x41, 0x7D,  // ....z.A}
                /* 1478 */  0xE4, 0x39, 0x79, 0xDF, 0x13, 0x1E, 0x27, 0x1C,  // .9y...'.
                /* 1480 */  0xF5, 0x1C, 0x44, 0xC7, 0x06, 0x8E, 0xE3, 0x06,  // ..D.....
                /* 1488 */  0x38, 0x0E, 0x37, 0xB8, 0x83, 0x8E, 0x2F, 0x06,  // 8.7.../.
                /* 1490 */  0xC7, 0x85, 0x39, 0xD5, 0x19, 0xE6, 0x30, 0x7C,  // ..9...0|
                /* 1498 */  0xD3, 0xF1, 0x88, 0x30, 0xE3, 0x7F, 0xC1, 0x35,  // ...0...5
                /* 14A0 */  0x42, 0x40, 0xFC, 0xC5, 0x88, 0x0D, 0x18, 0x8C,  // B@......
                /* 14A8 */  0xF7, 0x52, 0x9F, 0xCD, 0x70, 0x03, 0xF6, 0xD5,  // .R..p...
                /* 14B0 */  0xC1, 0x17, 0x0C, 0x9F, 0x31, 0x8D, 0xFE, 0x02,  // ....1...
                /* 14B8 */  0xF3, 0xAC, 0xE9, 0x63, 0x03, 0x39, 0x9D, 0xD1,  // ...c.9..
                /* 14C0 */  0x01, 0x83, 0x03, 0xD0, 0xFF, 0xFF, 0x01, 0xC3,  // ........
                /* 14C8 */  0x3F, 0x5C, 0x3C, 0xA8, 0x81, 0xE1, 0x9C, 0xE7,  // ?\<.....
                /* 14D0 */  0xE3, 0x82, 0x8F, 0x3D, 0x56, 0x74, 0x5B, 0x45,  // ...=Vt[E
                /* 14D8 */  0x1F, 0xD5, 0x0C, 0x13, 0xC7, 0x10, 0x6F, 0x60,  // ......o`
                /* 14E0 */  0xEC, 0x2E, 0x41, 0x6E, 0x6B, 0x50, 0xEF, 0x12,  // ..AnkP..
                /* 14E8 */  0x9E, 0x03, 0x3F, 0x5B, 0xF8, 0x8C, 0xEA, 0x9B,  // ..?[....
                /* 14F0 */  0x4F, 0x88, 0x53, 0x7D, 0xB4, 0x7A, 0x0F, 0xF0,  // O.S}.z..
                /* 14F8 */  0xD1, 0xE3, 0xBD, 0xCB, 0x67, 0x27, 0x76, 0x11,  // ....g'v.
                /* 1500 */  0xF0, 0x91, 0xCB, 0x38, 0x9E, 0xA6, 0xCF, 0x77,  // ...8...w
                /* 1508 */  0x1E, 0xB2, 0xC1, 0x5E, 0x35, 0x7C, 0x02, 0xF3,  // ...^5|..
                /* 1510 */  0x99, 0x0D, 0x77, 0x8C, 0xF2, 0x4C, 0x3C, 0x7D,  // ..w..L<}
                /* 1518 */  0xDF, 0x41, 0xD8, 0x91, 0xE4, 0x3D, 0xD2, 0x6B,  // .A...=.k
                /* 1520 */  0x7A, 0x44, 0x39, 0xA1, 0x03, 0xF1, 0xAD, 0x0D,  // zD9.....
                /* 1528 */  0x9C, 0xD1, 0xEE, 0x1F, 0xE8, 0x6D, 0x7A, 0x64,  // .....mzd
                /* 1530 */  0x98, 0xA3, 0x01, 0xAC, 0x4B, 0x08, 0xB8, 0xEE,  // ....K...
                /* 1538 */  0x18, 0xBE, 0x84, 0x00, 0x9F, 0xA0, 0x97, 0x08,  // ........
                /* 1540 */  0xC4, 0xFF, 0x7F, 0x74, 0xEC, 0x9A, 0xE1, 0xD1,  // ...t....
                /* 1548 */  0x3D, 0x02, 0x60, 0xAE, 0x18, 0xEC, 0x58, 0xE0,  // =.`...X.
                /* 1550 */  0xC3, 0x86, 0xAF, 0x01, 0xEC, 0x5E, 0xE0, 0x4B,  // .....^.K
                /* 1558 */  0xA4, 0xEF, 0x11, 0xE0, 0x01, 0xF5, 0xF0, 0xE0,  // ........
                /* 1560 */  0xAB, 0xBD, 0x47, 0x80, 0xE2, 0xEC, 0xEC, 0x43,  // ..G....C
                /* 1568 */  0x83, 0x07, 0x6A, 0x55, 0xA7, 0x68, 0x28, 0x87,  // ..jU.h(.
                /* 1570 */  0x68, 0x0E, 0x15, 0x8D, 0xDD, 0x0A, 0xD8, 0xFD,  // h.......
                /* 1578 */  0xD9, 0x37, 0x09, 0xB8, 0x79, 0x66, 0x81, 0x4A,  // .7..yf.J
                /* 1580 */  0x72, 0x93, 0x80, 0x0E, 0xD3, 0xE5, 0x65, 0x86,  // r.....e.
                /* 1588 */  0xCE, 0xFF, 0xC0, 0x7D, 0xAB, 0xF3, 0x08, 0x7D,  // ...}...}
                /* 1590 */  0x88, 0x60, 0x28, 0xEF, 0x79, 0x3E, 0x85, 0xF1,  // .`(.y>..
                /* 1598 */  0x33, 0x84, 0x8F, 0xD0, 0xEC, 0x4C, 0xC1, 0x4F,  // 3....L.O
                /* 15A0 */  0xD3, 0xB8, 0x3B, 0x80, 0x51, 0xDE, 0xAD, 0x3D,  // ..;.Q..=
                /* 15A8 */  0x01, 0x76, 0xC2, 0x36, 0xF2, 0xBB, 0xC1, 0xBB,  // .v.6....
                /* 15B0 */  0x80, 0xA7, 0xEF, 0x7B, 0x11, 0x3F, 0x51, 0x80,  // ...{.?Q.
                /* 15B8 */  0x2F, 0xD8, 0x9D, 0x0E, 0x0A, 0xF4, 0x09, 0x79,  // /......y
                /* 15C0 */  0x44, 0x46, 0xF5, 0x11, 0x81, 0x5F, 0x92, 0xF0,  // DF..._..
                /* 15C8 */  0xFF, 0xFF, 0x23, 0x02, 0x18, 0x8E, 0x24, 0x3E,  // ..#...$>
                /* 15D0 */  0x50, 0x00, 0xA1, 0x7B, 0x01, 0xEA, 0xF4, 0xC1,  // P..{....
                /* 15D8 */  0x51, 0xCF, 0xF8, 0x31, 0xD5, 0x98, 0xEF, 0x56,  // Q..1...V
                /* 15E0 */  0x8F, 0x70, 0x9E, 0x1C, 0xE6, 0x72, 0xC0, 0xE2,  // .p...r..
                /* 15E8 */  0x5C, 0x93, 0x40, 0x75, 0xA0, 0xE7, 0xA3, 0x83,  // \.@u....
                /* 15F0 */  0x7B, 0x6D, 0xC5, 0x0F, 0xEE, 0x9D, 0xE5, 0x9D,  // {m......
                /* 15F8 */  0xCF, 0x50, 0x1E, 0x24, 0xF8, 0xAE, 0xAD, 0xE0,  // .P.$....
                /* 1600 */  0xB8, 0xAA, 0xC1, 0x38, 0xB6, 0xF0, 0x4B, 0x1E,  // ...8..K.
                /* 1608 */  0x70, 0xFF, 0xFF, 0x5F, 0xF2, 0xC0, 0x30, 0x2C,  // p.._..0,
                /* 1610 */  0x2E, 0xF8, 0xEF, 0x61, 0x20, 0x2A, 0x11, 0x06,  // ...a *..
                /* 1618 */  0x45, 0x60, 0x79, 0xF7, 0x56, 0x0A, 0x7F, 0xC8,  // E`y.V...
                /* 1620 */  0x60, 0xBC, 0x29, 0xF0, 0x49, 0x63, 0x47, 0x0D,  // `.).IcG.
                /* 1628 */  0xD8, 0x19, 0x2A, 0xEE, 0xA6, 0x08, 0xD6, 0xA9,  // ..*.....
                /* 1630 */  0x62, 0x86, 0xC0, 0x83, 0x3D, 0x00, 0x7C, 0xBE,  // b...=.|.
                /* 1638 */  0xF2, 0x19, 0x40, 0x51, 0x60, 0x50, 0x17, 0x72,  // ..@Q`P.r
                /* 1640 */  0x38, 0xB7, 0x61, 0x60, 0xF2, 0xFF, 0xBF, 0x0D,  // 8.a`....
                /* 1648 */  0x83, 0x79, 0xC4, 0xB8, 0x4B, 0x21, 0xDC, 0x29,  // .y..K!.)
                /* 1650 */  0xBF, 0xA3, 0xC4, 0x7E, 0x4D, 0xF1, 0xA5, 0xE4,  // ...~M...
                /* 1658 */  0x74, 0x71, 0x38, 0x4F, 0x27, 0xFC, 0x82, 0x0C,  // tq8O'...
                /* 1660 */  0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x6A, 0xCE, 0x2F,  // .,...j./
                /* 1668 */  0xC8, 0xEF, 0xC4, 0x2F, 0x04, 0x8F, 0x49, 0x21,  // .../..I!
                /* 1670 */  0xDE, 0x94, 0x9E, 0x0D, 0x5E, 0x76, 0x62, 0x3C,  // ....^vb<
                /* 1678 */  0x19, 0x3F, 0x23, 0xC7, 0x09, 0xF3, 0xBC, 0xF3,  // .?#.....
                /* 1680 */  0x82, 0x6C, 0x8C, 0xA3, 0x79, 0x4B, 0xF6, 0xDC,  // .l..yK..
                /* 1688 */  0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94, 0xF7, 0x93,  // ..".K...
                /* 1690 */  0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11, 0xF4, 0x05,  // ........
                /* 1698 */  0xD9, 0x27, 0x66, 0xE3, 0xBD, 0x20, 0x33, 0x81,  // .'f.. 3.
                /* 16A0 */  0x6F, 0x05, 0x1D, 0x5C, 0x7C, 0x41, 0x06, 0x58,  // o..\|A.X
                /* 16A8 */  0xF0, 0xFF, 0xBF, 0x20, 0xC3, 0x3C, 0x19, 0x01,  // ... .<..
                /* 16B0 */  0x3E, 0x4F, 0x1C, 0xB8, 0x4B, 0x35, 0xF8, 0x4E,  // >O..K5.N
                /* 16B8 */  0x36, 0x80, 0xB3, 0xA1, 0xFB, 0x64, 0x03, 0x86,  // 6....d..
                /* 16C0 */  0xFF, 0xFF, 0xC9, 0x06, 0xE6, 0x68, 0xE1, 0x1D,  // .....h..
                /* 16C8 */  0x4D, 0x10, 0x27, 0x1B, 0x0A, 0xE4, 0xE0, 0xEB,  // M.'.....
                /* 16D0 */  0xA2, 0x70, 0x3C, 0xF4, 0x49, 0x84, 0x1E, 0x9D,  // .p<.I...
                /* 16D8 */  0x7C, 0x94, 0xC4, 0x9D, 0x19, 0x3C, 0x91, 0x77,  // |....<.w
                /* 16E0 */  0x16, 0x8F, 0xE2, 0x65, 0xD0, 0xF7, 0x82, 0x13,  // ...e....
                /* 16E8 */  0x79, 0x7D, 0xB0, 0x9C, 0x63, 0x24, 0xA8, 0x46,  // y}..c$.F
                /* 16F0 */  0xE2, 0xE3, 0x03, 0xFC, 0xEB, 0x8B, 0x8F, 0x91,  // ........
                /* 16F8 */  0xF0, 0xF9, 0xFC, 0xC3, 0xF2, 0x60, 0x0C, 0xE9,  // .....`..
                /* 1700 */  0x53, 0x24, 0x07, 0x79, 0x76, 0x79, 0x0C, 0xE1,  // S$.yvy..
                /* 1708 */  0x17, 0x48, 0xB8, 0xA7, 0x99, 0x03, 0xC0, 0xC8,  // .H......
                /* 1710 */  0xBA, 0x3C, 0xA2, 0xCF, 0x8E, 0x1C, 0x23, 0xAE,  // .<....#.
                /* 1718 */  0x2F, 0x8A, 0xBE, 0x02, 0xFB, 0x20, 0x70, 0x3E,  // /.... p>
                /* 1720 */  0xCF, 0x89, 0x60, 0x1D, 0x35, 0x3F, 0xDA, 0xF0,  // ..`.5?..
                /* 1728 */  0xF1, 0x73, 0xF0, 0xB7, 0x82, 0x07, 0x4A, 0x1F,  // .s....J.
                /* 1730 */  0x8B, 0x42, 0x3C, 0x22, 0xF1, 0x73, 0x22, 0xB8,  // .B<".s".
                /* 1738 */  0x4C, 0x08, 0xF8, 0xFF, 0x9F, 0x6E, 0x80, 0xC3,  // L....n..
                /* 1740 */  0xA1, 0x17, 0xC6, 0x69, 0x01, 0x37, 0x10, 0x9F,  // ...i.7..
                /* 1748 */  0x29, 0xB1, 0x53, 0x3E, 0x11, 0x76, 0x2E, 0xC1,  // ).S>.v..
                /* 1750 */  0x8C, 0x0E, 0x5C, 0x97, 0x7B, 0x8F, 0x0E, 0xFC,  // ..\.{...
                /* 1758 */  0x27, 0x01, 0x3C, 0xD6, 0xE3, 0x1D, 0xF8, 0x4E,  // '.<....N
                /* 1760 */  0xEA, 0xBE, 0x9B, 0xF8, 0x22, 0xE3, 0x43, 0xD1,  // ....".C.
                /* 1768 */  0xF3, 0x1D, 0x60, 0xEE, 0xFF, 0x7F, 0xBE, 0x03,  // ..`.....
                /* 1770 */  0x16, 0xE1, 0x0E, 0x77, 0xA8, 0x38, 0xE7, 0x3B,  // ...w.8.;
                /* 1778 */  0x80, 0x1A, 0x67, 0xEB, 0xE7, 0x3B, 0xB0, 0x8B,  // ..g..;..
                /* 1780 */  0x3C, 0xDF, 0x01, 0xA1, 0xFF, 0xFF, 0xF9, 0x0E,  // <.......
                /* 1788 */  0x60, 0xE9, 0x19, 0x0D, 0x77, 0xBE, 0x03, 0xDB,  // `...w...
                /* 1790 */  0xD1, 0x06, 0xFE, 0xFF, 0xFF, 0x68, 0x03, 0x98,  // .....h..
                /* 1798 */  0x99, 0xC6, 0xA3, 0x0D, 0xB8, 0x87, 0x0B, 0x7B,  // .......{
                /* 17A0 */  0x18, 0x3C, 0xF0, 0x03, 0x81, 0x1E, 0x0A, 0x1C,  // .<......
                /* 17A8 */  0x11, 0x06, 0x75, 0x4C, 0xF3, 0x91, 0xC1, 0x07,  // ..uL....
                /* 17B0 */  0x05, 0x7E, 0x64, 0xF0, 0x39, 0xE1, 0xF1, 0xE1,  // .~d.9...
                /* 17B8 */  0x50, 0xD9, 0x11, 0xC6, 0x97, 0x10, 0x1F, 0x15,  // P.......
                /* 17C0 */  0x58, 0x14, 0x4A, 0x81, 0xFA, 0x54, 0x02, 0x38,  // X.J..T.8
                /* 17C8 */  0x0A, 0x34, 0x32, 0xF4, 0x28, 0xFE, 0xFF, 0x09,  // .42.(...
                /* 17D0 */  0x8E, 0x0A, 0x77, 0x24, 0x03, 0xCF, 0x3D, 0xC7,  // ..w$..=.
                /* 17D8 */  0x23, 0xF7, 0xC0, 0x80, 0x4F, 0xAC, 0x81, 0xA1,  // #...O...
                /* 17E0 */  0xCF, 0x45, 0x70, 0xC7, 0x06, 0xAE, 0x93, 0x0C,  // .Ep.....
                /* 17E8 */  0x70, 0x18, 0x1B, 0xFE, 0xA8, 0xE7, 0xB1, 0xE1,  // p.......
                /* 17F0 */  0x06, 0xE2, 0xA3, 0xC4, 0x71, 0xBD, 0xEA, 0xF9,  // ....q...
                /* 17F8 */  0xAC, 0x80, 0x03, 0x3F, 0xBB, 0xD7, 0x29, 0x3E,  // ...?..)>
                /* 1800 */  0x3A, 0x70, 0x01, 0xFA, 0x20, 0x00, 0x0C, 0xFF,  // :p.. ...
                /* 1808 */  0xFF, 0xA3, 0xC3, 0x1E, 0xB6, 0x30, 0x63, 0x03,  // .....0c.
                /* 1810 */  0xDB, 0xF1, 0xC7, 0x63, 0x03, 0x3E, 0xF9, 0xCE,  // ...c.>..
                /* 1818 */  0xAF, 0x50, 0xA0, 0x5F, 0x8E, 0x18, 0xE2, 0x2B,  // .P._...+
                /* 1820 */  0x8A, 0x6F, 0x1E, 0x26, 0x98, 0xE5, 0xFC, 0x0A,  // .o.&....
                /* 1828 */  0x9A, 0xA1, 0x19, 0xD4, 0x43, 0x83, 0x7F, 0x66,  // ....C..f
                /* 1830 */  0x24, 0xE7, 0x57, 0xE8, 0x87, 0x55, 0x1F, 0x38,  // $.W..U.8
                /* 1838 */  0xAC, 0x61, 0x10, 0x74, 0x9C, 0x3E, 0xC0, 0xF2,  // .a.t.>..
                /* 1840 */  0x9B, 0xDA, 0xC3, 0x0E, 0x3B, 0xFB, 0x44, 0x48,  // ....;.DH
                /* 1848 */  0xE0, 0x8C, 0x47, 0x58, 0xE8, 0x99, 0xC6, 0x80,  // ..GX....
                /* 1850 */  0x4A, 0x73, 0x4E, 0xA5, 0x27, 0x96, 0x10, 0x27,  // JsN.'..'
                /* 1858 */  0xDA, 0xFB, 0x89, 0x8E, 0x1E, 0x36, 0x7C, 0x51,  // .....6|Q
                /* 1860 */  0xF5, 0x6C, 0x1F, 0x0D, 0x3C, 0x48, 0x9F, 0x38,  // .l..<H.8
                /* 1868 */  0xD8, 0x31, 0xD6, 0x17, 0xA4, 0xE7, 0x18, 0xA3,  // .1......
                /* 1870 */  0xBD, 0x47, 0xF8, 0xBC, 0x13, 0x30, 0x5C, 0x84,  // .G...0\.
                /* 1878 */  0x70, 0xEC, 0xD4, 0xE7, 0x91, 0xF8, 0x2C, 0xEC,  // p.....,.
                /* 1880 */  0x79, 0xFA, 0xC4, 0x83, 0x3D, 0xFA, 0xF0, 0xFF,  // y...=...
                /* 1888 */  0xFF, 0x31, 0x8F, 0x61, 0xFB, 0x3A, 0xC0, 0x46,  // .1.a.:.F
                /* 1890 */  0xE5, 0x83, 0xA9, 0xB1, 0x0D, 0xFA, 0x68, 0xE6,  // ......h.
                /* 1898 */  0x69, 0xB3, 0x4B, 0x28, 0xF8, 0x24, 0x7D, 0x46,  // i.K(.$}F
                /* 18A0 */  0x74, 0x3F, 0xC0, 0x5D, 0x15, 0x7D, 0x21, 0x83,  // t?.].}!.
                /* 18A8 */  0x01, 0x71, 0x22, 0xBE, 0x2D, 0x18, 0xFD, 0x1D,  // .q".-...
                /* 18B0 */  0x81, 0xC5, 0xBE, 0x23, 0x80, 0xEA, 0x3E, 0xC0,  // ...#..>.
                /* 18B8 */  0xEF, 0x08, 0x70, 0xA7, 0xF2, 0x8E, 0x00, 0x06,  // ..p.....
                /* 18C0 */  0x7D, 0x17, 0x02, 0x3A, 0x50, 0xCF, 0xCF, 0x63,  // }..:P..c
                /* 18C8 */  0xF5, 0xD5, 0xF0, 0x25, 0xC1, 0xC7, 0x04, 0x06,  // ...%....
                /* 18D0 */  0xE3, 0x2B, 0xA1, 0x31, 0x0C, 0xE3, 0x91, 0x86,  // .+.1....
                /* 18D8 */  0xF1, 0x41, 0x81, 0xAB, 0x60, 0xD7, 0x41, 0x01,  // .A..`.A.
                /* 18E0 */  0x6E, 0xEA, 0x79, 0xA0, 0xF2, 0x1E, 0x14, 0xA0,  // n.y.....
                /* 18E8 */  0xDC, 0x08, 0xBA, 0xBC, 0x3C, 0xA3, 0xC6, 0xE7,  // ....<...
                /* 18F0 */  0xD3, 0x80, 0x7D, 0x4D, 0x56, 0x30, 0x81, 0x1E,  // ..}MV0..
                /* 18F8 */  0x95, 0x7D, 0xE9, 0x60, 0x83, 0x8B, 0xE2, 0xFB,  // .}.`....
                /* 1900 */  0x24, 0xBB, 0x7B, 0x85, 0x8B, 0x73, 0x26, 0x1E,  // $.{..s&.
                /* 1908 */  0xAC, 0xE1, 0x0C, 0x54, 0x35, 0x1C, 0xB4, 0xAB,  // ...T5...
                /* 1910 */  0xC1, 0x83, 0x00, 0x3B, 0x72, 0x79, 0x5A, 0x46,  // ...;ryZF
                /* 1918 */  0xC4, 0xFE, 0xFF, 0x11, 0x7D, 0xB5, 0x79, 0x79,  // ....}.yy
                /* 1920 */  0xF0, 0x79, 0x32, 0x8E, 0x21, 0x1F, 0x41, 0x7D,  // .y2.!.A}
                /* 1928 */  0x2A, 0xF0, 0x61, 0xCB, 0x37, 0x03, 0x03, 0x3F,  // *.a.7..?
                /* 1930 */  0x28, 0x3C, 0x1F, 0xFB, 0xF8, 0xC0, 0x86, 0xF6,  // (<......
                /* 1938 */  0xB6, 0xE0, 0x09, 0xC4, 0x7A, 0x73, 0x80, 0x71,  // ....zs.q
                /* 1940 */  0x72, 0x00, 0x9F, 0xF6, 0x87, 0x82, 0xAE, 0xCE,  // r.......
                /* 1948 */  0xF8, 0x9B, 0x21, 0x3C, 0xF8, 0x77, 0x00, 0xA6,  // ..!<.w..
                /* 1950 */  0x10, 0x5A, 0x07, 0x07, 0xF0, 0xDC, 0x0C, 0xC1,  // .Z......
                /* 1958 */  0x71, 0xE9, 0x21, 0x07, 0x07, 0xE8, 0x21, 0x2E,  // q.!...!.
                /* 1960 */  0x08, 0xD4, 0xCA, 0x2D, 0x93, 0xDE, 0x55, 0xE0,  // ...-..U.
                /* 1968 */  0x1C, 0x1B, 0x7C, 0x52, 0x4D, 0xD0, 0xDB, 0xB5,  // ..|RM...
                /* 1970 */  0x9D, 0x9E, 0xE0, 0x7D, 0x80, 0xE0, 0xB0, 0x86,  // ...}....
                /* 1978 */  0x78, 0x8E, 0x67, 0xC0, 0xC6, 0x88, 0xEC, 0x63,  // x.g....c
                /* 1980 */  0x04, 0xC3, 0x88, 0x6D, 0x8C, 0xE0, 0xC6, 0x88,  // ...m....
                /* 1988 */  0xEE, 0x63, 0x04, 0x43, 0x2F, 0x1E, 0x47, 0x18,  // .c.C/.G.
                /* 1990 */  0x11, 0x7C, 0x95, 0xE0, 0x5A, 0x4E, 0x21, 0xBA,  // .|..ZN!.
                /* 1998 */  0x4A, 0xC0, 0xCD, 0xBE, 0x32, 0x0D, 0x8D, 0xA7,  // J...2...
                /* 19A0 */  0x26, 0xD1, 0x55, 0x02, 0xC6, 0xC5, 0x1E, 0x73,  // &.U....s
                /* 19A8 */  0x9B, 0xE0, 0xFF, 0xFF, 0xDB, 0x04, 0xF6, 0xE6,  // ........
                /* 19B0 */  0xE2, 0x1B, 0x91, 0x8F, 0x2F, 0xB8, 0x23, 0x0C,  // ..../.#.
                /* 19B8 */  0xBB, 0x9B, 0xFB, 0x7C, 0x8A, 0x39, 0x41, 0xC0,  // ...|.9A.
                /* 19C0 */  0x38, 0x39, 0xE0, 0x0E, 0x11, 0xE0, 0x3A, 0x28,  // 89....:(
                /* 19C8 */  0x30, 0x94, 0x07, 0x1A, 0x8E, 0xC4, 0xE0, 0x5E,  // 0......^
                /* 19D0 */  0x07, 0x22, 0x44, 0x82, 0x31, 0x29, 0x76, 0x0B,  // ."D.1)v.
                /* 19D8 */  0xF4, 0xF1, 0x86, 0x9D, 0x27, 0x3C, 0x2C, 0xDF,  // ....'<,.
                /* 19E0 */  0x30, 0xF8, 0xA5, 0xC7, 0xE3, 0xF1, 0x28, 0x7C,  // 0.....(|
                /* 19E8 */  0x32, 0x64, 0x17, 0xC7, 0x87, 0x08, 0xA3, 0x44,  // 2d.....D
                /* 19F0 */  0x63, 0x27, 0x87, 0x08, 0x27, 0xF7, 0x14, 0xE2,  // c'..'...
                /* 19F8 */  0x33, 0x87, 0xCF, 0x70, 0x98, 0x1B, 0xE4, 0x71,  // 3..p...q
                /* 1A00 */  0x1D, 0x94, 0xAF, 0x97, 0x6C, 0xD8, 0xC6, 0x31,  // ....l..1
                /* 1A08 */  0xEC, 0x73, 0x90, 0x67, 0xE0, 0xB1, 0xC4, 0x3E,  // .s.g...>
                /* 1A10 */  0x20, 0x43, 0xB2, 0x61, 0xB1, 0x21, 0x1A, 0xCF,  //  C.a.!..
                /* 1A18 */  0xE7, 0x1B, 0x86, 0x13, 0xCB, 0xE3, 0xC4, 0x4E,  // .......N
                /* 1A20 */  0x86, 0x61, 0x9F, 0xAD, 0xA7, 0xC1, 0x0F, 0x1A,  // .a......
                /* 1A28 */  0xBE, 0x13, 0x9C, 0x9E, 0x61, 0x5F, 0x24, 0xC2,  // ....a_$.
                /* 1A30 */  0x3C, 0x0E, 0xF8, 0x16, 0x02, 0xFB, 0xA6, 0xF0,  // <.......
                /* 1A38 */  0x78, 0x64, 0x94, 0xF7, 0x14, 0x76, 0x1B, 0x01,  // xd...v..
                /* 1A40 */  0x06, 0x47, 0xCF, 0xC0, 0xB8, 0xFF, 0xFF, 0x59,  // .G.....Y
                /* 1A48 */  0x1F, 0x2E, 0xC4, 0x3B, 0x9B, 0xD1, 0x9F, 0xA7,  // ...;....
                /* 1A50 */  0xCE, 0x99, 0xCD, 0xE1, 0x68, 0x3C, 0x06, 0x1F,  // ....h<..
                /* 1A58 */  0x26, 0x7C, 0x7E, 0x05, 0xDC, 0x0C, 0x8B, 0xCB,  // &|~.....
                /* 1A60 */  0x7E, 0x2E, 0x1A, 0xC8, 0x77, 0x0E, 0x09, 0x85,  // ~...w...
                /* 1A68 */  0x41, 0x1D, 0xEE, 0x7C, 0xAC, 0x07, 0x9C, 0x9C,  // A..|....
                /* 1A70 */  0xE1, 0x61, 0x4F, 0xF9, 0x0D, 0xC6, 0x08, 0xCF,  // .aO.....
                /* 1A78 */  0x2E, 0x81, 0x63, 0x9C, 0xC4, 0x8B, 0xC8, 0x8B,  // ..c.....
                /* 1A80 */  0x8B, 0xD1, 0x63, 0x3D, 0xC3, 0xB3, 0x8B, 0xC2,  // ..c=....
                /* 1A88 */  0x31, 0x84, 0xF2, 0x19, 0x23, 0x44, 0xAC, 0x28,  // 1...#D.(
                /* 1A90 */  0x46, 0x0D, 0xF2, 0xB8, 0x60, 0x90, 0x67, 0x99,  // F...`.g.
                /* 1A98 */  0x08, 0x87, 0x12, 0xD7, 0x78, 0xCF, 0xF0, 0x74,  // ....x..t
                /* 1AA0 */  0xC8, 0xE4, 0xFF, 0x7F, 0xD8, 0xA3, 0xE7, 0x68,  // .......h
                /* 1AA8 */  0x90, 0x1D, 0x1B, 0x00, 0x73, 0xA7, 0x03, 0xDC,  // ....s...
                /* 1AB0 */  0x29, 0x1A, 0x4C, 0x83, 0x85, 0x3D, 0x08, 0xAE,  // ).L..=..
                /* 1AB8 */  0xD0, 0xA6, 0x4F, 0x8D, 0x46, 0xAD, 0x1A, 0x94,  // ..O.F...
                /* 1AC0 */  0xA9, 0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A,  // .Q.A.>..
                /* 1AC8 */  0x33, 0x66, 0xE7, 0x20, 0xA0, 0x18, 0x10, 0x1A,  // 3f. ....
                /* 1AD0 */  0x99, 0x45, 0x9C, 0x27, 0x04, 0xE2, 0xC8, 0x20,  // .E.'... 
                /* 1AD8 */  0x34, 0x12, 0x85, 0x40, 0x2C, 0xFC, 0x41, 0xA0,  // 4..@,.A.
                /* 1AE0 */  0x43, 0x3B, 0xF9, 0x64, 0xE9, 0x2C, 0x4A, 0x3E,  // C;.d.,J>
                /* 1AE8 */  0x79, 0x02, 0x71, 0x8C, 0x55, 0x08, 0x9C, 0x98,  // y.q.U...
                /* 1AF0 */  0x00, 0xA7, 0x20, 0x34, 0x98, 0x8A, 0xD3, 0x33,  // .. 4...3
                /* 1AF8 */  0xB5, 0x01, 0xC2, 0xC2, 0x80, 0x50, 0xE9, 0x3A,  // .....P.:
                /* 1B00 */  0x40, 0x98, 0x40, 0x1F, 0x80, 0xF4, 0x89, 0x20,  // @.@.... 
                /* 1B08 */  0x10, 0x47, 0x50, 0x32, 0x72, 0xFA, 0x13, 0x13,  // .GP2r...
                /* 1B10 */  0x88, 0xE3, 0x82, 0xD0, 0x50, 0x8F, 0x0B, 0x01,  // ....P...
                /* 1B18 */  0x12, 0x2B, 0xFF, 0x7F, 0x10, 0x16, 0xDC, 0x0B,  // .+......
                /* 1B20 */  0x08, 0x93, 0xFD, 0x38, 0x10, 0x88, 0x45, 0x9A,  // ...8..E.
                /* 1B28 */  0x01, 0x61, 0x52, 0xD4, 0x00, 0x52, 0x10, 0x2A,  // .aR..R.*
                /* 1B30 */  0xD7, 0x0E, 0x08, 0x0B, 0x0B, 0x42, 0xA3, 0xE9,  // .....B..
                /* 1B38 */  0x01, 0x61, 0x01, 0xFC, 0x00, 0xD2, 0x7B, 0x95,  // .a....{.
                /* 1B40 */  0x40, 0x1C, 0x52, 0x11, 0x08, 0x93, 0xE8, 0x08,  // @.R.....
                /* 1B48 */  0x84, 0xA5, 0x7C, 0x84, 0xC8, 0xC8, 0x10, 0x0D,  // ..|.....
                /* 1B50 */  0x22, 0x20, 0x27, 0xB5, 0x04, 0xC4, 0x72, 0x83,  // " '...r.
                /* 1B58 */  0x08, 0xC8, 0xE1, 0x3C, 0x01, 0xB1, 0xA4, 0x20,  // ...<... 
                /* 1B60 */  0x02, 0x72, 0xC0, 0x7F, 0x9A, 0x80, 0x1C, 0x17,  // .r......
                /* 1B68 */  0x44, 0x40, 0x4E, 0xA5, 0x0A, 0x88, 0x45, 0x04,  // D@N...E.
                /* 1B70 */  0x11, 0x90, 0x93, 0xB9, 0x02, 0x62, 0x39, 0x41,  // .....b9A
                /* 1B78 */  0x74, 0x08, 0x20, 0x6F, 0x8D, 0x40, 0x24, 0x1F,  // t. o.@$.
                /* 1B80 */  0x88, 0x80, 0x1C, 0xEB, 0xF1, 0x25, 0x20, 0x87,  // .....% .
                /* 1B88 */  0x04, 0x11, 0x90, 0x13, 0xBD, 0x7C, 0x04, 0xE4,  // .....|..
                /* 1B90 */  0x78, 0x20, 0x1A, 0x04, 0xF9, 0x94, 0x09, 0xC8,  // x ......
                /* 1B98 */  0x19, 0x41, 0x04, 0xE4, 0x1C, 0x6F, 0x08, 0xFD,  // .A...o..
                /* 1BA0 */  0x5B, 0x9C, 0x0A, 0x84, 0xA6, 0x04, 0x11, 0x98,  // [.......
                /* 1BA8 */  0x35, 0x7D, 0xCC, 0x04, 0x64, 0x8D, 0x20, 0x02,  // 5}..d. .
                /* 1BB0 */  0x72, 0x1E, 0x20, 0x9A, 0x11, 0x84, 0x66, 0x06,  // r. ...f.
                /* 1BB8 */  0xA3, 0x2A, 0x5F, 0x68, 0x02, 0x72, 0x1E, 0x10,  // .*_h.r..
                /* 1BC0 */  0x9A, 0x11, 0x84, 0x66, 0x06, 0x11, 0xA0, 0x35,  // ...f...5
                /* 1BC8 */  0xFE, 0xD3, 0x04, 0x64, 0xDD, 0x20, 0x34, 0x07,  // ...d. 4.
                /* 1BD0 */  0x08, 0xCD, 0x0A, 0x42, 0x43, 0x3C, 0xD7, 0x04,  // ...BC<..
                /* 1BD8 */  0xEA, 0xD0, 0x20, 0x02, 0xB2, 0x90, 0xFF, 0x9B,  // .. .....
                /* 1BE0 */  0x40, 0x1C, 0x03, 0x84, 0xAA, 0x57, 0x07, 0xC8,  // @....W..
                /* 1BE8 */  0xB2, 0x82, 0x08, 0xC8, 0xF9, 0x41, 0xA8, 0x1E,  // .....A..
                /* 1BF0 */  0x77, 0x20, 0x4C, 0x3A, 0x08, 0xD5, 0x23, 0x0F,  // w L:..#.
                /* 1BF8 */  0x94, 0x29, 0x53, 0x09, 0xC4, 0xD4, 0x82, 0x50,  // .)S....P
                /* 1C00 */  0xF5, 0x20, 0x3A, 0x0E, 0x10, 0x20, 0x9A, 0x1E,  // . :.. ..
                /* 1C08 */  0x84, 0xAA, 0x71, 0xF9, 0xFF, 0x07, 0x63, 0xCA,  // ..q...c.
                /* 1C10 */  0x41, 0x04, 0xE4, 0x34, 0x20, 0x34, 0x1D, 0x18,  // A..4 4..
                /* 1C18 */  0xD5, 0xF3, 0xE6, 0x38, 0x60, 0x06, 0x42, 0x35,  // ...8`.B5
                /* 1C20 */  0x83, 0xE8, 0x90, 0x40, 0x80, 0x68, 0x72, 0x10,  // ...@.hr.
                /* 1C28 */  0xAA, 0xE4, 0x99, 0x12, 0x8C, 0x24, 0x01, 0xD1,  // .....$..
                /* 1C30 */  0x00, 0x08, 0x08, 0x4D, 0x0B, 0x46, 0xD5, 0xBD,  // ...M.F..
                /* 1C38 */  0x57, 0x02, 0x11, 0xC5, 0x20, 0x34, 0x01, 0x88,  // W... 4..
                /* 1C40 */  0xC0, 0x9C, 0x1A, 0x88, 0x2A, 0x79, 0xA5, 0x04,  // ....*y..
                /* 1C48 */  0x21, 0x3A, 0x41, 0x04, 0xE6, 0x6C, 0x40, 0x34,  // !:A..l@4
                /* 1C50 */  0x2F, 0x08, 0xCD, 0x0F, 0x46, 0x93, 0x18, 0x1D,  // /...F...
                /* 1C58 */  0x08, 0x05, 0xA1, 0x69, 0x41, 0x34, 0x10, 0xF2,  // ...iA4..
                /* 1C60 */  0x3C, 0x39, 0x10, 0x06, 0x42, 0x13, 0x80, 0x08,  // <9..B...
                /* 1C68 */  0xCC, 0xFA, 0x7F, 0x29, 0x41, 0x48, 0x7A, 0x10,  // ...)AHz.
                /* 1C70 */  0x9A, 0xF1, 0x0D, 0x16, 0x84, 0x64, 0x10, 0x0B,  // .....d..
                /* 1C78 */  0xCA, 0x72, 0x81, 0xD0, 0x9C, 0x20, 0x1A, 0x3E,  // .r... .>
                /* 1C80 */  0x79, 0x7D, 0x1D, 0x3E, 0x03, 0xA1, 0xEA, 0x41,  // y}.>...A
                /* 1C88 */  0x04, 0xE6, 0xB4, 0x40, 0x54, 0x81, 0x5A, 0x10,  // ...@T.Z.
                /* 1C90 */  0xA6, 0x08, 0x44, 0x60, 0x56, 0x64, 0xF7, 0xD8,  // ..D`Vd..
                /* 1C98 */  0x40, 0x41, 0xA8, 0x6A, 0xBD, 0x20, 0x4C, 0x9B,  // @A.j. L.
                /* 1CA0 */  0x60, 0x50, 0xA6, 0x17, 0x84, 0xEA, 0x07, 0xD1,  // `P......
                /* 1CA8 */  0x60, 0x09, 0x10, 0x55, 0xF2, 0x87, 0x09, 0x42,  // `..U...B
                /* 1CB0 */  0x94, 0x81, 0x08, 0xCC, 0x29, 0x80, 0x68, 0x32,  // ....).h2
                /* 1CB8 */  0x10, 0x9A, 0x14, 0x8C, 0x26, 0xFD, 0xDF, 0x6A,  // ....&..j
                /* 1CC0 */  0x40, 0xE4, 0xDF, 0x24, 0x10, 0x6B, 0xFD, 0xD0,  // @..$.k..
                /* 1CC8 */  0x1C, 0x0E, 0xFB, 0xF5, 0x09, 0x84, 0xBC, 0x85,  // ........
                /* 1CD0 */  0x04, 0xE2, 0xDC, 0x0F, 0xA9, 0xE0, 0x44, 0xCB,  // ......D.
                /* 1CD8 */  0x8B, 0x35, 0x08, 0xD1, 0x06, 0x22, 0x30, 0x67,  // .5..."0g
                /* 1CE0 */  0x01, 0xA2, 0xF9, 0x40, 0x68, 0x5E, 0x10, 0xAA,  // ...@h^..
                /* 1CE8 */  0xE3, 0xD7, 0x78, 0xF0, 0xCC, 0xF5, 0xFF, 0x7F,  // ..x.....
                /* 1CF0 */  0x78, 0xF4, 0xC5, 0x27, 0x10, 0x67, 0x06, 0xA1,  // x..'.g..
                /* 1CF8 */  0xC9, 0x9E, 0x3A, 0x41, 0x48, 0xDE, 0x07, 0xA7,  // ..:AH...
                /* 1D00 */  0x80, 0xC8, 0x1F, 0x4B, 0x87, 0x01, 0x02, 0x42,  // ...K...B
                /* 1D08 */  0xD3, 0x83, 0x08, 0xCC, 0x6A, 0x1F, 0x3C, 0x3A,  // ....j.<:
                /* 1D10 */  0x0C, 0x10, 0x10, 0x9A, 0x08, 0x44, 0x60, 0x56,  // .....D`V
                /* 1D18 */  0xF2, 0xFA, 0x13, 0x90, 0xD5, 0x81, 0x50, 0xED,  // ......P.
                /* 1D20 */  0x20, 0x02, 0x73, 0x4E, 0x20, 0x9A, 0x1D, 0x84,  //  .sN ...
                /* 1D28 */  0x6A, 0xF9, 0x27, 0x05, 0x23, 0x5A, 0xDE, 0x9A,  // j.'.#Z..
                /* 1D30 */  0x0F, 0x0A, 0x0C, 0x84, 0xEA, 0x7D, 0x33, 0xEB,  // .....}3.
                /* 1D38 */  0x50, 0x40, 0xD4, 0x1F, 0x6B, 0xE8, 0xE7, 0x4A,  // P@..k..J
                /* 1D40 */  0xC0, 0x8E, 0x00, 0x42, 0x63, 0x81, 0xE8, 0x80,  // ...Bc...
                /* 1D48 */  0x42, 0x40, 0x74, 0xD8, 0x21, 0xFA, 0xC1, 0x98,  // B@t.!...
                /* 1D50 */  0x34, 0x10, 0x2A, 0x17, 0x44, 0x80, 0xD6, 0x0E,  // 4.*.D...
                /* 1D58 */  0xA2, 0x23, 0x00, 0x01, 0xA3, 0xA9, 0x41, 0xA8,  // .#....A.
                /* 1D60 */  0x12, 0xFF, 0x80, 0x4C, 0x16, 0x88, 0x8E, 0x23,  // ...L...#
                /* 1D68 */  0x04, 0x44, 0x60, 0x96, 0xF0, 0xDA, 0x17, 0x88,  // .D`.....
                /* 1D70 */  0xA5, 0x82, 0x50, 0x65, 0x05, 0x40, 0x99, 0x4E,  // ..Pe.@.N
                /* 1D78 */  0x10, 0x0D, 0x90, 0x80, 0x68, 0xC0, 0x04, 0x84,  // ....h...
                /* 1D80 */  0x6A, 0x4A, 0x70, 0xF0, 0xA0, 0x20, 0x34, 0x3C,  // jJp.. 4<
                /* 1D88 */  0x08, 0x15, 0xD2, 0x00, 0x84, 0x89, 0x03, 0xD1,  // ........
                /* 1D90 */  0x00, 0xAC, 0x14, 0x44, 0x03, 0xB0, 0x8E, 0x08,  // ...D....
                /* 1D98 */  0x60, 0x4C, 0x15, 0x08, 0x55, 0x0F, 0x42, 0xC5,  // `L..U.B.
                /* 1DA0 */  0x56, 0x00, 0x65, 0xD2, 0x41, 0x04, 0xEA, 0xE8,  // V.e.A...
                /* 1DA8 */  0x20, 0x02, 0xB3, 0xA0, 0x0C, 0x20, 0x4C, 0x26,  //  .... L&
                /* 1DB0 */  0x08, 0x95, 0x0D, 0x42, 0x75, 0x74, 0x18, 0x10,  // ...But..
                /* 1DB8 */  0x05, 0xA1, 0x3A, 0x41, 0x34, 0x00, 0x8B, 0x06,  // ..:A4...
                /* 1DC0 */  0xD1, 0x00, 0x2C, 0xE9, 0x73, 0x2B, 0x30, 0x0B,  // ..,.s+0.
                /* 1DC8 */  0x04, 0xA1, 0xF2, 0x41, 0x68, 0x60, 0x10, 0x81,  // ...Ah`..
                /* 1DD0 */  0x3A, 0x3E, 0x88, 0x40, 0x2D, 0xBF, 0xC4, 0xFF,  // :>.@-...
                /* 1DD8 */  0x1F, 0x8C, 0x85, 0x02, 0xA1, 0x51, 0x41, 0x68,  // .....QAh
                /* 1DE0 */  0x74, 0x10, 0x1A, 0xAB, 0xC5, 0xB1, 0x8A, 0xC6,  // t.......
                /* 1DE8 */  0x00, 0x61, 0xB2, 0x72, 0x0C, 0x9C, 0x82, 0x50,  // .a.r...P
                /* 1DF0 */  0xE9, 0x20, 0x3A, 0x34, 0x11, 0x20, 0x2A, 0xA0,  // . :4. *.
                /* 1DF8 */  0xC7, 0xF0, 0x28, 0x08, 0x95, 0x0E, 0x22, 0x40,  // ..(..."@
                /* 1E00 */  0x02, 0x44, 0x05, 0x04, 0x01, 0xA4, 0x20, 0x54,  // .D.... T
                /* 1E08 */  0x39, 0x08, 0x55, 0x52, 0xE4, 0x70, 0x42, 0x41,  // 9.UR.pBA
                /* 1E10 */  0x04, 0xE4, 0x4C, 0x20, 0x34, 0x23, 0x18, 0xD5,  // ..L 4#..
                /* 1E18 */  0x96, 0xE4, 0x10, 0x42, 0x41, 0xA8, 0x7E, 0x10,  // ...BA.~.
                /* 1E20 */  0x1A, 0x16, 0x84, 0x66, 0x69, 0x02, 0xCA, 0xF2,  // ...fi...
                /* 1E28 */  0x83, 0x68, 0xD8, 0x24, 0xCA, 0xB1, 0x80, 0x82,  // .h.$....
                /* 1E30 */  0xE8, 0x80, 0x41, 0x80, 0x68, 0x5A, 0x10, 0xAA,  // ..A.hZ..
                /* 1E38 */  0xA5, 0x0A, 0x18, 0xD3, 0x5D, 0xE6, 0x58, 0x42,  // ....].XB
                /* 1E40 */  0x41, 0x68, 0xBA, 0x34, 0x87, 0x26, 0x1A, 0x07,  // Ah.4.&..
                /* 1E48 */  0x94, 0x65, 0x03, 0xA1, 0x59, 0x41, 0xA8, 0x9A,  // .e..YA..
                /* 1E50 */  0x3A, 0xC3, 0xA3, 0x20, 0x3A, 0x96, 0x10, 0x20,  // :.. :.. 
                /* 1E58 */  0xAA, 0x20, 0xCF, 0xB1, 0x85, 0x82, 0x68, 0x00,  // . ....h.
                /* 1E60 */  0x04, 0x88, 0x66, 0x03, 0xA1, 0x59, 0xC1, 0xA8,  // ..f..Y..
                /* 1E68 */  0xAA, 0x44, 0x20, 0x2C, 0x13, 0x08, 0xD5, 0xDE,  // .D ,....
                /* 1E70 */  0x08, 0x84, 0x25, 0xA8, 0x74, 0x80, 0xA2, 0x20,  // ..%.t.. 
                /* 1E78 */  0x34, 0x1F, 0x88, 0x8E, 0x1D, 0x24, 0x13, 0x10,  // 4....$..
                /* 1E80 */  0xD3, 0x07, 0x42, 0xF5, 0x82, 0x08, 0xCC, 0x09,  // ..B.....
                /* 1E88 */  0x81, 0x68, 0x6A, 0x10, 0xAA, 0xA2, 0xD3, 0x20,  // .hj.... 
                /* 1E90 */  0x28, 0x88, 0x86, 0x40, 0x40, 0x68, 0x3E, 0x30,  // (..@@h>0
                /* 1E98 */  0xAA, 0x28, 0x14, 0x10, 0x53, 0x09, 0x42, 0x55,  // .(..S.BU
                /* 1EA0 */  0x83, 0xE8, 0x88, 0x44, 0x42, 0xFD, 0xFF, 0x8F,  // ...DB...
                /* 1EA8 */  0x48, 0x14, 0x84, 0x8A, 0x4A, 0x75, 0x8C, 0xA3,  // H...Ju..
                /* 1EB0 */  0x20, 0x02, 0x72, 0x40, 0x10, 0x2A, 0xF3, 0xE7,  //  .r@.*..
                /* 1EB8 */  0xAD, 0xA3, 0x19, 0x01, 0xD1, 0x11, 0x82, 0x80,  // ........
                /* 1EC0 */  0xD0, 0x84, 0xBD, 0xC0, 0xD8, 0xFF, 0x1F         // .......
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMICPU", "PROC", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.OSC_, IntObj)
    External (_PR_.PDC_, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Scope (\_PR)
    {
        Processor (P000, 0x01, 0x00000410, 0x06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                \_PR.PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (\_PR.OSC) /* External reference */
                Arg0
                Arg1
                Arg2
                Arg3
            }
        }

        Processor (P001, 0x02, 0x00000410, 0x06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                \_PR.PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (\_PR.OSC) /* External reference */
                Arg0
                Arg1
                Arg2
                Arg3
            }
        }

        Processor (P002, 0x03, 0x00000410, 0x06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                \_PR.PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (\_PR.OSC) /* External reference */
                Arg0
                Arg1
                Arg2
                Arg3
            }
        }

        Processor (P003, 0x04, 0x00000410, 0x06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                \_PR.PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (\_PR.OSC) /* External reference */
                Arg0
                Arg1
                Arg2
                Arg3
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMI", "CST", 0x00000001)
{
    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (CST_, IntObj)

    Scope (\_PR.P000)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (CST) /* External reference */
        }
    }

    Scope (\_PR.P001)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (CST) /* External reference */
        }
    }

    Scope (\_PR.P002)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (CST) /* External reference */
        }
    }

    Scope (\_PR.P003)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (CST) /* External reference */
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMI", "IST", 0x00000001)
{
    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (APSS, IntObj)
    External (PDCV, UnknownObj)
    External (PSTE, IntObj)
    External (PTCI, IntObj)
    External (TSSI, IntObj)
    External (TSSM, IntObj)
    External (TSTE, IntObj)

    Scope (\_PR.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000199, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000198, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (APSS) /* External reference */
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\PSTE) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x04
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDCV & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (PTCI) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((PDCV & 0x04))
            {
                Return (TSSM) /* External reference */
            }

            Return (TSSI) /* External reference */
        }
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000199, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000198, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (APSS) /* External reference */
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\PSTE) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x04
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDCV & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (PTCI) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((PDCV & 0x04))
            {
                Return (TSSM) /* External reference */
            }

            Return (TSSI) /* External reference */
        }
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000199, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000198, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (APSS) /* External reference */
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\PSTE) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x04
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDCV & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (PTCI) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((PDCV & 0x04))
            {
                Return (TSSM) /* External reference */
            }

            Return (TSSI) /* External reference */
        }
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000199, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000198, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (APSS) /* External reference */
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\PSTE) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x04
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDCV & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (PTCI) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((PDCV & 0x04))
            {
                Return (TSSM) /* External reference */
            }

            Return (TSSI) /* External reference */
        }
    }
}



