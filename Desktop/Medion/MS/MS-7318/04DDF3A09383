
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20240322
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "MEDION"  "MEDIONAG"  0x42302E31  "AWRD"   0x00000000
 02)  APIC  0x00000090  0x01  "MEDION"  "MEDIONAG"  0x42302E31  "AWRD"   0x00000000
 03)  SLIC  0x00000176  0x01  "MEDION"  "MEDIONAG"  0x42302E31  "AWRD"   0x00000000
 04)  SSDT  0x000002F1  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20040311
 05)  BOOT  0x00000028  0x01  "MEDION"  "MEDIONAG"  0x42302E31  "AWRD"   0x00000000
 06)  DSDT  0x000060C9  0x01  "MEDION"  "AWRDACPI"  0x00001000  "MSFT"   0x0100000E
 07)  FACP  0x00000074  0x01  "MEDION"  "MEDIONAG"  0x42302E31  "AWRD"   0x00000000
 08)  SSDT  0x000001E0  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20041203
 09)  FACS  0x00000040  0x00
 10)  SSDT  0x00000087  0x01  "PmRef "  "Cpu1Ist "  0x00003000  "INTL"   0x20041203

Found 10 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000090
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 02
[00Ah 0010 006h]                      Oem ID : "MEDION"
[010h 0016 008h]                Oem Table ID : "MEDIONAG"
[018h 0024 004h]                Oem Revision : 42302E31
[01Ch 0028 004h]             Asl Compiler ID : "AWRD"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 01 [I/O APIC]
[04Dh 0077 001h]                      Length : 0C
[04Eh 0078 001h]                 I/O Apic ID : 04
[04Fh 0079 001h]                    Reserved : 00
[050h 0080 004h]                     Address : FEC00000
[054h 0084 004h]                   Interrupt : 00000000

[058h 0088 001h]               Subtable Type : 01 [I/O APIC]
[059h 0089 001h]                      Length : 0C
[05Ah 0090 001h]                 I/O Apic ID : 05
[05Bh 0091 001h]                    Reserved : 00
[05Ch 0092 004h]                     Address : FECC0000
[060h 0096 004h]                   Interrupt : 00000018

[064h 0100 001h]               Subtable Type : 02 [Interrupt Source Override]
[065h 0101 001h]                      Length : 0A
[066h 0102 001h]                         Bus : 00
[067h 0103 001h]                      Source : 00
[068h 0104 004h]                   Interrupt : 00000002
[06Ch 0108 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[06Eh 0110 001h]               Subtable Type : 02 [Interrupt Source Override]
[06Fh 0111 001h]                      Length : 0A
[070h 0112 001h]                         Bus : 00
[071h 0113 001h]                      Source : 09
[072h 0114 004h]                   Interrupt : 00000009
[076h 0118 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[078h 0120 001h]               Subtable Type : 04 [Local APIC NMI]
[079h 0121 001h]                      Length : 06
[07Ah 0122 001h]                Processor ID : 00
[07Bh 0123 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125 001h]        Interrupt Input LINT : 01

[07Eh 0126 001h]               Subtable Type : 04 [Local APIC NMI]
[07Fh 0127 001h]                      Length : 06
[080h 0128 001h]                Processor ID : 01
[081h 0129 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131 001h]        Interrupt Input LINT : 01

[084h 0132 001h]               Subtable Type : 04 [Local APIC NMI]
[085h 0133 001h]                      Length : 06
[086h 0134 001h]                Processor ID : 02
[087h 0135 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[089h 0137 001h]        Interrupt Input LINT : 01

[08Ah 0138 001h]               Subtable Type : 04 [Local APIC NMI]
[08Bh 0139 001h]                      Length : 06
[08Ch 0140 001h]                Processor ID : 03
[08Dh 0141 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Fh 0143 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 144 (0x90)

    0000: 41 50 49 43 90 00 00 00 01 02 4D 45 44 49 4F 4E  // APIC......MEDION
    0010: 4D 45 44 49 4F 4E 41 47 31 2E 30 42 41 57 52 44  // MEDIONAG1.0BAWRD
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 00 00 00 00 00 08 03 03 00 00 00 00 01 0C 04 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 01 0C 05 00 00 00 CC FE  // ................
    0060: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    0070: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    0080: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 70
[00Ah 0010 006h]                      Oem ID : "MEDION"
[010h 0016 008h]                Oem Table ID : "MEDIONAG"
[018h 0024 004h]                Oem Revision : 42302E31
[01Ch 0028 004h]             Asl Compiler ID : "AWRD"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 001h]         Boot Register Index : 34
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 70 4D 45 44 49 4F 4E  // BOOT(....pMEDION
    0010: 4D 45 44 49 4F 4E 41 47 31 2E 30 42 41 57 52 44  // MEDIONAG1.0BAWRD
    0020: 00 00 00 00 34 00 00 00                          // ....4...


DSDT
----
DefinitionBlock ("", "DSDT", 1, "MEDION", "AWRDACPI", 0x00001000)
{
    Scope (\_PR)
    {
        Processor (\_PR.CPU0, 0x00, 0x00000000, 0x00){}
        Processor (\_PR.CPU1, 0x01, 0x00000000, 0x00){}
        Processor (\_PR.CPU2, 0x02, 0x00000000, 0x00){}
        Processor (\_PR.CPU3, 0x03, 0x00000000, 0x00){}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\SS1, Package (0x04)
    {
        0x04, 
        0x04, 
        0x04, 
        0x04
    })
    Name (\_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x01, 
        0x01, 
        0x01, 
        0x01
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x02, 
        0x02, 
        0x02, 
        0x02
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x02, 
        0x02, 
        0x02, 
        0x02
    })
    OperationRegion (\DEBG, SystemIO, 0x80, 0x01)
    Field (\DEBG, ByteAcc, NoLock, Preserve)
    {
        DBG1,   8
    }

    OperationRegion (\DEB2, SystemIO, 0x84, 0x01)
    Field (\DEB2, ByteAcc, NoLock, Preserve)
    {
        DBG2,   8
    }

    OperationRegion (\DEB3, SystemIO, 0x88, 0x01)
    Field (\DEB3, ByteAcc, NoLock, Preserve)
    {
        DBG3,   8
    }

    OperationRegion (EXTM, SystemMemory, 0x000FF830, 0x10)
    Field (EXTM, WordAcc, NoLock, Preserve)
    {
        ROM1,   16, 
        RMS1,   16, 
        ROM2,   16, 
        RMS2,   16, 
        ROM3,   16, 
        RMS3,   16, 
        AMEM,   32
    }

    OperationRegion (\GPST, SystemIO, 0x0420, 0x02)
    Field (\GPST, ByteAcc, NoLock, Preserve)
    {
        GS00,   1, 
        GS01,   1, 
        GS02,   1, 
        GS03,   1, 
        GS04,   1, 
        GS05,   1, 
        GS06,   1, 
        GS07,   1, 
        GS08,   1, 
        GS09,   1, 
        GS10,   1, 
        GS11,   1, 
        GS12,   1, 
        GS13,   1, 
        GS14,   1, 
        GS15,   1
    }

    OperationRegion (ELCR, SystemIO, 0x04D0, 0x02)
    Field (ELCR, ByteAcc, NoLock, Preserve)
    {
        ELC1,   8, 
        ELC2,   8
    }

    OperationRegion (\PMS, SystemIO, 0x0400, 0x02)
    Field (\PMS, ByteAcc, NoLock, Preserve)
    {
        AITS,   1, 
        Offset (0x01), 
        PBTS,   1, 
            ,   6, 
        WAKE,   1
    }

    OperationRegion (\GPSE, SystemIO, 0x0424, 0x02)
    Field (\GPSE, ByteAcc, NoLock, Preserve)
    {
        GPS0,   1, 
        GPS1,   1, 
        KBCE,   1, 
        LANE,   1, 
        EXTE,   1, 
        PME,    1, 
        Offset (0x01), 
        RING,   1, 
            ,   5, 
        USBE,   1, 
        Offset (0x02)
    }

    OperationRegion (\GLOS, SystemIO, 0x0428, 0x02)
    Field (\GLOS, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        SSMI,   1, 
        PRII,   1, 
            ,   2, 
        SLPE,   1, 
        SIRS,   1, 
        Offset (0x02)
    }

    OperationRegion (\WIRQ, SystemIO, 0x042A, 0x01)
    Field (\WIRQ, ByteAcc, NoLock, Preserve)
    {
        IRQR,   8
    }

    OperationRegion (\GPNB, SystemIO, 0x042D, 0x01)
    Field (\GPNB, ByteAcc, NoLock, Preserve)
    {
            ,   5, 
        G89E,   1
    }

    OperationRegion (\SMIC, SystemIO, 0x042F, 0x01)
    Field (\SMIC, ByteAcc, NoLock, Preserve)
    {
        SCP,    8
    }

    OperationRegion (\STUS, SystemIO, 0x0430, 0x01)
    Field (\STUS, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        PADS,   7
    }

    OperationRegion (GPOB, SystemIO, 0x044C, 0x04)
    Field (GPOB, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
        GP01,   1, 
        GP02,   1, 
        GP03,   1, 
        GP04,   1, 
        GP05,   1, 
        GP06,   1, 
        GP07,   1, 
        GP08,   1, 
        GP09,   1, 
        GP10,   1, 
        GP11,   1, 
        GP12,   1, 
        GP13,   1, 
        GP14,   1, 
        GP15,   1, 
        GP16,   1, 
        GP17,   1, 
        GP18,   1, 
        GP19,   1, 
        GP20,   1, 
        GP21,   1, 
        GP22,   1, 
        GP23,   1, 
        GP24,   1, 
        GP25,   1, 
        GP26,   1, 
        GP27,   1, 
        GP28,   1, 
        GP29,   1, 
        GP30,   1, 
        GPXX,   1
    }

    Name (OSFX, 0x01)
    Name (OSFL, 0x01)
    Method (STRC, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    OperationRegion (RTCM, SystemIO, 0x70, 0x02)
    Field (RTCM, ByteAcc, NoLock, Preserve)
    {
        CMIN,   8, 
        CMDA,   8
    }

    IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x0F), 
        SHUT,   8
    }

    OperationRegion (INFO, SystemMemory, 0x000FF840, 0x01)
    Field (INFO, ByteAcc, NoLock, Preserve)
    {
        KBDI,   1, 
        RTCW,   1, 
        PS2F,   1, 
        IRFL,   2, 
        DISE,   1, 
        SSHU,   1, 
        AWMD,   1
    }

    OperationRegion (BEEP, SystemIO, 0x61, 0x01)
    Field (BEEP, ByteAcc, NoLock, Preserve)
    {
        S1B,    8
    }

    OperationRegion (CONT, SystemIO, 0x40, 0x04)
    Field (CONT, ByteAcc, NoLock, Preserve)
    {
        CNT0,   8, 
        CNT1,   8, 
        CNT2,   8, 
        CTRL,   8
    }

    Method (SPKR, 1, NotSerialized)
    {
        Local0 = S1B /* \S1B_ */
        CTRL = 0xB6
        CNT2 = 0x55
        CNT2 = 0x03
        Local2 = Arg0
        While ((Local2 > 0x00))
        {
            S1B |= 0x03
            Local3 = 0x5FFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            S1B &= 0xFC
            Local3 = 0x0EFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            Local2--
        }

        S1B = Local0
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Name (HPFL, 0x00)
    Name (PMFL, 0x00)
    Name (SBFL, 0x00)
    Name (ATFL, 0x00)
    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        MDCS (Arg0)
        OSTP ()
        If ((Arg0 == 0x01))
        {
            While (PRII)
            {
                PRII = One
            }

            While ((PADS != 0x00))
            {
                PADS = PADS /* \PADS */
            }

            IRQR |= 0x80
        }

        If ((Arg0 == 0x03))
        {
            SCP = 0x4D
        }

        If ((Arg0 == 0x04))
        {
            LANE = One
        }

        If ((Arg0 == 0x05))
        {
            GS04 = Zero
            LANE = One
        }

        Sleep (0x64)
        If ((Arg0 == 0x01)){}
        If ((Arg0 == 0x03)){}
        If ((Arg0 == 0x04)){}
        If ((Arg0 == 0x05)){}
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG1 = 0xFF
        If ((Arg0 == 0x03))
        {
            MDCS (0x00)
        }

        If ((Arg0 == 0x01)){}
        If ((Arg0 == 0x01))
        {
            IRQR &= 0x7F
            While (PRII)
            {
                PRII = One
            }

            While ((PADS != 0x00))
            {
                PADS = PADS /* \PADS */
            }
        }

        If (OSFL)
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }
        ElseIf ((RTCW == 0x00))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }
    }

    Scope (\_SI)
    {
        Method (_MSG, 1, NotSerialized)  // _MSG: Message
        {
            Local0 = Local0
        }

        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            Local0 = Local0
        }
    }

    Scope (\_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.LAN1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.SLPB, 0x80) // Status Change
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0, 0x02) // Device Wake
            Notify (\_SB.PCI0.P2PB, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UAR1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P2PE.AZAC, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHCI, 0x02) // Device Wake
        }

        Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((PMFL == 0x00))
            {
                Notify (\_SB.PCI0.PEXG, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
                Notify (\_SB.PCI0.P2PE.PE5C, 0x02) // Device Wake
                Notify (\_SB.PCI0.P2PE.PE6C, 0x02) // Device Wake
            }
        }

        Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((HPFL == 0x00))
            {
                Notify (\_SB.PCI0.PEXG.S0F0, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F1, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F2, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F3, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F4, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F5, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F6, 0x01) // Device Check
                Notify (\_SB.PCI0.PEXG.S0F7, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F0, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F1, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F2, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F3, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F4, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F5, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F6, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX0.S1F7, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F0, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F1, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F2, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F3, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F4, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F5, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F6, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX1.S2F7, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F0, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F1, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F2, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F3, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F4, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F5, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F6, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX2.S3F7, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F0, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F1, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F2, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F3, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F4, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F5, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F6, 0x01) // Device Check
                Notify (\_SB.PCI0.PEX3.S4F7, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F0, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F1, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F2, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F3, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F4, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F5, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F6, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE5C.S5F7, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F0, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F1, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F2, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F3, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F4, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F5, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F6, 0x01) // Device Check
                Notify (\_SB.PCI0.P2PE.PE6C.S6F7, 0x01) // Device Check
            }
        }
    }

    Scope (\_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x04, 
                0x05
            })
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If ((OSFL == 0x02))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            OperationRegion (GART, PCI_Config, 0x80, 0x01)
            Scope (\)
            {
                Field (\_SB.PCI0.GART, ByteAcc, NoLock, Preserve)
                {
                    GAR1,   8
                }
            }

            OperationRegion (GARA, PCI_Config, 0x88, 0x01)
            Scope (\)
            {
                Field (\_SB.PCI0.GARA, ByteAcc, NoLock, Preserve)
                {
                    GAR2,   8
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x05, 
                0x05
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0CF8,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0xFFFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0xF300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00100000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFFF00000,         // Length
                        ,, _Y00, AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._MIN, TCMM)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._LEN, TOMM)  // _LEN: Length
                TCMM = (AMEM + 0x00010000)
                TCMM += 0x00010000
                TOMM = (0xFEC00000 - TCMM) /* \_SB_.PCI0._CRS.TCMM */
                Return (BUF0) /* \_SB_.PCI0._CRS.BUF0 */
            }

            Name (PICM, Package (0x28)
            {
                Package (0x04)
                {
                    0x0008FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }
            })
            Name (APIC, Package (0x28)
            {
                Package (0x04)
                {
                    0x0008FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    0x00, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    0x00, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    0x00, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    0x00, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    0x00, 
                    0x1F
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    0x00, 
                    0x23
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    0x00, 
                    0x27
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    0x00, 
                    0x2B
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    0x00, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x01, 
                    0x00, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x02, 
                    0x00, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x03, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    0x00, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    0x00, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    0x00, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x00, 
                    0x00, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x01, 
                    0x00, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    0x00, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x00, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x01, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    0x00, 
                    0x17
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Device (PMIO)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                    })
                    Return (BUF0) /* \_SB_.PCI0.PMIO._CRS.BUF0 */
                }
            }

            Device (NBF4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                OperationRegion (IRID, PCI_Config, 0xF6, 0x01)
                Field (IRID, ByteAcc, NoLock, Preserve)
                {
                    REBD,   8
                }
            }

            Device (VT86)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                OperationRegion (USBC, PCI_Config, 0x50, 0x02)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.USBC, ByteAcc, NoLock, Preserve)
                    {
                        IDEB,   8
                    }
                }

                OperationRegion (LPIO, PCI_Config, 0x6E, 0x01)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.LPIO, ByteAcc, NoLock, Preserve)
                    {
                        LPE1,   8
                    }
                }

                OperationRegion (VTSB, PCI_Config, 0x00, 0x0100)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.VTSB, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        DEID,   16, 
                        Offset (0x2C), 
                        ID2C,   8, 
                        ID2D,   8, 
                        ID2E,   8, 
                        ID2F,   8, 
                        Offset (0x44), 
                        PIRE,   4, 
                        PIRF,   4, 
                        PIRG,   4, 
                        PIRH,   4, 
                        POLE,   1, 
                        POLF,   1, 
                        POLG,   1, 
                        POLH,   1, 
                        ENR8,   1, 
                        Offset (0x50), 
                        ESB4,   1, 
                        ESB3,   1, 
                        ESB2,   1, 
                        EIDE,   1, 
                        EUSB,   1, 
                        ESB1,   1, 
                        EAMC,   2, 
                        EKBC,   1, 
                        KBCC,   1, 
                        EPS2,   1, 
                        ERTC,   1, 
                        ELAN,   1, 
                            ,   2, 
                        USBD,   1, 
                        SIRQ,   8, 
                        Offset (0x55), 
                        PIRA,   8, 
                        PIBC,   8, 
                        PIRD,   8, 
                        Offset (0x68), 
                            ,   7, 
                        HPTF,   1, 
                        Offset (0x7B), 
                            ,   6, 
                        BSAT,   1, 
                        Offset (0x94), 
                        PWC1,   2, 
                        GPO1,   1, 
                        GPO2,   1, 
                        GPO3,   1, 
                        PLLD,   1, 
                        Offset (0xEC), 
                        ENWT,   3
                    }
                }

                OperationRegion (SBPR, PCI_Config, 0x00, 0xE8)
                Field (SBPR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE2), 
                        ,   1, 
                    SBPM,   1, 
                    SBHP,   1
                }

                Scope (\)
                {
                    Method (DISD, 1, NotSerialized)
                    {
                        Local0 = Local0
                    }

                    Method (CKIO, 2, NotSerialized)
                    {
                        Local0 = Local0
                    }

                    Method (SLDM, 2, NotSerialized)
                    {
                        Local0 = Local0
                    }
                }
            }

            Device (SATA)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((ATFL == 0x02))
                    {
                        Return (0x000F0001)
                    }
                    Else
                    {
                        Return (0x000F0000)
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.SATA.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.SATA.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                OperationRegion (SAPR, PCI_Config, 0x00, 0xC2)
                Field (SAPR, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    IDEI,   8, 
                    Offset (0x49), 
                        ,   6, 
                    EPHY,   1
                }

                Name (REGF, 0x01)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x04)
                {
                    Package (0x05)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x017F, 
                        0x0258
                    }, 

                    Package (0x05)
                    {
                        0x20, 
                        0x22, 
                        0x33, 
                        0x47, 
                        0x5D
                    }, 

                    Package (0x07)
                    {
                        0x78, 
                        0x50, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14, 
                        0x0F
                    }, 

                    Package (0x0F)
                    {
                        0x06, 
                        0x05, 
                        0x04, 
                        0x04, 
                        0x03, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x00
                    }
                })
                Name (TMD0, Buffer (0x14){})
                CreateDWordField (TMD0, 0x00, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                Name (PMPT, 0x20)
                Name (PMUE, 0x07)
                Name (PMUT, 0x00)
                Name (PSPT, 0x20)
                Name (PSUE, 0x07)
                Name (PSUT, 0x00)
                Name (SMPT, 0x20)
                Name (SMUE, 0x07)
                Name (SMUT, 0x00)
                Name (SSPT, 0x20)
                Name (SSUE, 0x07)
                Name (SSUT, 0x00)
                Device (CHN0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (PMPT, PMUE, PMUT, PSPT, PSUE, PSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Concatenate (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Local5)
                            Return (Local5)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Concatenate (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Local5)
                            Return (Local5)
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (SMPT, SMUE, SMUT, SSPT, SSUE, SSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Concatenate (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Local5)
                            Return (Local5)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Concatenate (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                                }, Local5)
                            Return (Local5)
                        }
                    }
                }

                Method (GTM, 6, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.SATA.TMD0 */
                    }

                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg0, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x03]) [Arg2])
                        DMA0 = DerefOf (DerefOf (TIM0 [0x02]) [Local5])
                        CHNF |= 0x01
                    }

                    If (Arg4)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x03]) [Arg5])
                        DMA1 = DerefOf (DerefOf (TIM0 [0x02]) [Local5])
                        CHNF |= 0x04
                    }

                    Return (TMD0) /* \_SB_.PCI0.SATA.TMD0 */
                }
            }

            Device (PATA)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((ATFL == 0x02))
                    {
                        Return (0x000F0000)
                    }
                    Else
                    {
                        Return (0x000F0001)
                    }
                }

                Name (REGF, 0x01)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PATA.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        PMEX ()
                        If ((\_SB.PCI0.PATA.CMDR == 0x00))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x07)
                {
                    Package (0x05)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x017F, 
                        0x0258
                    }, 

                    Package (0x05)
                    {
                        0x20, 
                        0x22, 
                        0x33, 
                        0x47, 
                        0x5D
                    }, 

                    Package (0x05)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x78, 
                        0x50, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14, 
                        0x0F
                    }, 

                    Package (0x0F)
                    {
                        0x06, 
                        0x05, 
                        0x04, 
                        0x04, 
                        0x03, 
                        0x03, 
                        0x02, 
                        0x02, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x00
                    }, 

                    Package (0x07)
                    {
                        0x0E, 
                        0x08, 
                        0x06, 
                        0x04, 
                        0x02, 
                        0x01, 
                        0x00
                    }
                })
                Name (TMD0, Buffer (0x14){})
                CreateDWordField (TMD0, 0x00, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (PAPR, PCI_Config, 0x00, 0xC2)
                Field (PAPR, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x09), 
                    ENAT,   4, 
                    Offset (0x3C), 
                    IDEI,   8, 
                    Offset (0x40), 
                    ESCH,   1, 
                    EPCH,   1, 
                    Offset (0x48), 
                    SSPT,   8, 
                    SMPT,   8, 
                    PSPT,   8, 
                    PMPT,   8, 
                    Offset (0x50), 
                    SSUT,   4, 
                    SSCT,   1, 
                    SSUE,   3, 
                    SMUT,   4, 
                    SMCT,   1, 
                    SMUE,   3, 
                    PSUT,   4, 
                    PSCT,   1, 
                    PSUE,   3, 
                    PMUT,   4, 
                    PMCT,   1, 
                    PMUE,   3
                }

                Name (GMPT, 0x00)
                Name (GMUE, 0x00)
                Name (GMUT, 0x00)
                Name (GSPT, 0x00)
                Name (GSUE, 0x00)
                Name (GSUT, 0x00)
                Device (CHN0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.PATA.EPCH != 0x01))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (PMPT, PMUE, PMUT, PSPT, PSUE, PSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = PMPT /* \_SB_.PCI0.PATA.PMPT */
                        GMUE = PMUE /* \_SB_.PCI0.PATA.PMUE */
                        GMUT = PMUT /* \_SB_.PCI0.PATA.PMUT */
                        GSPT = PSPT /* \_SB_.PCI0.PATA.PSPT */
                        GSUE = PSUE /* \_SB_.PCI0.PATA.PSUE */
                        GSUT = PSUT /* \_SB_.PCI0.PATA.PSUT */
                        STM ()
                        PMPT = GMPT /* \_SB_.PCI0.PATA.GMPT */
                        PMUE = GMUE /* \_SB_.PCI0.PATA.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.PATA.GMUT */
                        PSPT = GSPT /* \_SB_.PCI0.PATA.GSPT */
                        PSUE = GSUE /* \_SB_.PCI0.PATA.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.PATA.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x00, PMUE, PMUT, PMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x01, PSUE, PSUT, PSPT))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.PATA.ESCH != 0x01))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (SMPT, SMUE, SMUT, SSPT, SSUE, SSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        TMD0 = Arg0
                        GMPT = SMPT /* \_SB_.PCI0.PATA.SMPT */
                        GMUE = SMUE /* \_SB_.PCI0.PATA.SMUE */
                        GMUT = SMUT /* \_SB_.PCI0.PATA.SMUT */
                        GSPT = SSPT /* \_SB_.PCI0.PATA.SSPT */
                        GSUE = SSUE /* \_SB_.PCI0.PATA.SSUE */
                        GSUT = SSUT /* \_SB_.PCI0.PATA.SSUT */
                        STM ()
                        SMPT = GMPT /* \_SB_.PCI0.PATA.GMPT */
                        SMUE = GMUE /* \_SB_.PCI0.PATA.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.PATA.GMUT */
                        SSPT = GSPT /* \_SB_.PCI0.PATA.GSPT */
                        SSUE = GSUE /* \_SB_.PCI0.PATA.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.PATA.GSUT */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x02, SMUE, SMUT, SMPT))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF (0x03, SSUE, SSUT, SSPT))
                        }
                    }
                }

                Method (PMEX, 0, Serialized)
                {
                    If (REGF)
                    {
                        If ((PMPT == 0xA8))
                        {
                            PMPT = 0x5D
                        }

                        If ((PMPT == 0x65))
                        {
                            PMPT = 0x33
                        }

                        If ((PMPT == 0x31))
                        {
                            PMPT = 0x22
                        }

                        If ((PSPT == 0xA8))
                        {
                            PSPT = 0x5D
                        }

                        If ((PSPT == 0x65))
                        {
                            PSPT = 0x33
                        }

                        If ((PSPT == 0x31))
                        {
                            PSPT = 0x22
                        }

                        If ((SMPT == 0xA8))
                        {
                            SMPT = 0x5D
                        }

                        If ((SMPT == 0x65))
                        {
                            SMPT = 0x33
                        }

                        If ((SMPT == 0x31))
                        {
                            SMPT = 0x22
                        }

                        If ((SSPT == 0xA8))
                        {
                            SSPT = 0x5D
                        }

                        If ((SSPT == 0x65))
                        {
                            SSPT = 0x33
                        }

                        If ((SSPT == 0x31))
                        {
                            SSPT = 0x22
                        }
                    }
                }

                Method (GTF, 4, Serialized)
                {
                    Local1 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    Local2 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    CreateByteField (Local1, 0x01, MODE)
                    CreateByteField (Local2, 0x01, UMOD)
                    CreateByteField (Local1, 0x05, PCHA)
                    CreateByteField (Local2, 0x05, UCHA)
                    Local3 = (Arg0 & 0x03)
                    If (((Local3 & 0x01) == 0x01))
                    {
                        PCHA = 0xB0
                        UCHA = 0xB0
                    }

                    If (Arg1)
                    {
                        UMOD = DerefOf (DerefOf (TIM0 [0x05]) [Arg2])
                        UMOD |= 0x40
                    }
                    Else
                    {
                        Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                            0x00)
                        UMOD = (0x20 | DerefOf (DerefOf (TIM0 [0x03]) [Local0]))
                    }

                    Local0 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    MODE = (0x08 | DerefOf (DerefOf (TIM0 [0x02]) [Local0]))
                    Concatenate (Local1, Local2, Local6)
                    Return (Local6)
                }

                Method (GTM, 6, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                    }

                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg0, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    Local6 = Match (DerefOf (TIM0 [0x01]), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (DerefOf (TIM0 [0x00]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x05]) [Arg2])
                        DMA0 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        CHNF |= 0x01
                    }

                    If (Arg4)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x05]) [Arg5])
                        DMA1 = DerefOf (DerefOf (TIM0 [0x04]) [Local5])
                        CHNF |= 0x04
                    }

                    Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.PATA.TMD0 */
                    }

                    GMUE = 0x00
                    GSUE = 0x00
                    GMUT = 0x07
                    GSUT = 0x07
                    If ((CHNF & 0x01))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA0, MTR, 0x00, 
                            0x00)
                        GMUT = DerefOf (DerefOf (TIM0 [0x06]) [Local0])
                        GMUE |= 0x07
                    }
                    ElseIf (((PIO0 == Ones) | (PIO0 == 0x00)))
                    {
                        If (((DMA0 < Ones) & (DMA0 > 0x00)))
                        {
                            PIO0 = DMA0 /* \_SB_.PCI0.PATA.DMA0 */
                        }
                    }

                    If ((CHNF & 0x04))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x04]), MLE, DMA1, MTR, 0x00, 
                            0x00)
                        GSUT = DerefOf (DerefOf (TIM0 [0x06]) [Local0])
                        GSUE |= 0x07
                    }
                    ElseIf (((PIO1 == Ones) | (PIO1 == 0x00)))
                    {
                        If (((DMA1 < Ones) & (DMA1 > 0x00)))
                        {
                            PIO1 = DMA1 /* \_SB_.PCI0.PATA.DMA1 */
                        }
                    }

                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO0, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GMPT = Local1
                    Local0 = (Match (DerefOf (TIM0 [0x00]), MGE, PIO1, MTR, 0x00, 
                        0x00) & 0x03)
                    Local1 = DerefOf (DerefOf (TIM0 [0x01]) [Local0])
                    GSPT = Local1
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F0, PCI_Config, 0x00, 0xC2)
                Field (U2F0, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U3IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB1.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB1.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F1, PCI_Config, 0x00, 0xC2)
                Field (U2F1, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U4IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB2.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB2.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00100002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F2, PCI_Config, 0x00, 0xC2)
                Field (U2F2, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U5IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB3.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB3.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00100003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F3, PCI_Config, 0x00, 0xC2)
                Field (U2F3, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U6IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.USB4.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.USB4.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (EHCI)
            {
                Name (_ADR, 0x00100004)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                OperationRegion (U2F4, PCI_Config, 0x00, 0xC2)
                Field (U2F4, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x3C), 
                    U7IR,   4, 
                    Offset (0x84), 
                    ECDX,   2
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.EHCI.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.EHCI.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (LAN1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x05
                })
            }

            Device (APEX)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                OperationRegion (PESC, PCI_Config, 0x00, 0x0100)
                Field (PESC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   5, 
                    PEHP,   1, 
                    PEPM,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }
            }

            Device (BRCH)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x55)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xF0001000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Return (BUF0) /* \_SB_.PCI0.BRCH._CRS.BUF0 */
                }
            }

            Device (BRCV)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x66)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xF0002000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Return (BUF0) /* \_SB_.PCI0.BRCV._CRS.BUF0 */
                }
            }

            Device (PEXG)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (RPXG, PCI_Config, 0x00, 0x0100)
                Field (RPXG, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x19), 
                    BUS2,   8
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (BUS2) /* \_SB_.PCI0.PEXG.BUS2 */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PEXG.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.PEXG.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (UIDB, Buffer (0x10){})
                CreateDWordField (UIDB, 0x00, UID0)
                CreateDWordField (UIDB, 0x04, UID1)
                CreateDWordField (UIDB, 0x08, UID2)
                CreateDWordField (UIDB, 0x0C, UID3)
                Name (OSCB, Buffer (0x0C){})
                CreateDWordField (OSCB, 0x00, CAP0)
                CreateDWordField (OSCB, 0x04, CAP1)
                CreateDWordField (OSCB, 0x08, CAP2)
                Name (CHKU, 0x00)
                Name (PNHP, 0x00)
                Name (PNPM, 0x00)
                Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
                {
                    UIDB = Arg0
                    If ((UID0 != 0x33DB4D5B))
                    {
                        CHKU = One
                    }

                    If ((UID1 != 0x401C1FF7))
                    {
                        CHKU = One
                    }

                    If ((UID2 != 0x41745796))
                    {
                        CHKU = One
                    }

                    If ((UID3 != 0x66D73DC0))
                    {
                        CHKU = One
                    }

                    OSCB = Arg3
                    If ((CHKU == 0x00))
                    {
                        PNHP = (CAP2 & 0x01)
                        PNPM = (CAP2 & 0x04)
                        If ((PNHP != 0x00))
                        {
                            \_SB.PCI0.APEX.PEHP = 0x00
                            \_SB.PCI0.VT86.SBHP = 0x00
                            G89E = 0x00
                            HPFL = 0x01
                        }
                        Else
                        {
                            \_SB.PCI0.APEX.PEHP = 0x01
                            \_SB.PCI0.VT86.SBHP = 0x01
                            G89E = 0x01
                            HPFL = 0x00
                        }

                        If ((PNPM != 0x00))
                        {
                            \_SB.PCI0.APEX.PEPM = 0x00
                            \_SB.PCI0.VT86.SBPM = 0x00
                            G89E = 0x00
                            PMFL = 0x01
                        }
                        Else
                        {
                            \_SB.PCI0.APEX.PEPM = 0x01
                            \_SB.PCI0.VT86.SBPM = 0x01
                            G89E = 0x01
                            PMFL = 0x00
                        }

                        CAP1 &= 0xFFFFFFFD
                        CAP2 &= 0xFFFFFFFD
                        CAP0 &= 0x00
                        Return (OSCB) /* \_SB_.PCI0.PEXG.OSCB */
                    }
                    Else
                    {
                        CAP1 &= 0xFFFFFFFD
                        CAP0 |= 0x04
                        Return (OSCB) /* \_SB_.PCI0.PEXG.OSCB */
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x12, 
                        0x05
                    })
                }

                Name (PIC0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }
                })
                Name (API0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC0) /* \_SB_.PCI0.PEXG.PIC0 */
                    }
                    Else
                    {
                        Return (API0) /* \_SB_.PCI0.PEXG.API0 */
                    }
                }

                Device (S0F0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }

                Device (S0F7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_SUN, 0x00)  // _SUN: Slot User Number
                }
            }

            Device (PEX0)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (RPX0, PCI_Config, 0x00, 0x0100)
                Field (RPX0, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3, 
                    Offset (0x19), 
                    BUS3,   8
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (BUS3) /* \_SB_.PCI0.PEX0.BUS3 */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PEX0.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.PEX0.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x12, 
                        0x05
                    })
                }

                Name (PIC1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }
                })
                Name (API1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC1) /* \_SB_.PCI0.PEX0.PIC1 */
                    }
                    Else
                    {
                        Return (API1) /* \_SB_.PCI0.PEX0.API1 */
                    }
                }

                Device (S1F0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }

                Device (S1F7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_SUN, 0x01)  // _SUN: Slot User Number
                }
            }

            Device (PEX1)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (RPX1, PCI_Config, 0x00, 0x0100)
                Field (RPX1, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PEX1.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.PEX1.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x12, 
                        0x05
                    })
                }

                Name (PIC2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }
                })
                Name (API2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC2) /* \_SB_.PCI0.PEX1.PIC2 */
                    }
                    Else
                    {
                        Return (API2) /* \_SB_.PCI0.PEX1.API2 */
                    }
                }

                Device (S2F0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }

                Device (S2F7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (RPX2, PCI_Config, 0x00, 0x0100)
                Field (RPX2, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PEX2.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.PEX2.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x12, 
                        0x05
                    })
                }

                Name (PIC3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }
                })
                Name (API3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC3) /* \_SB_.PCI0.PEX2.PIC3 */
                    }
                    Else
                    {
                        Return (API3) /* \_SB_.PCI0.PEX2.API3 */
                    }
                }

                Device (S3F0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }

                Device (S3F7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (RPX3, PCI_Config, 0x00, 0x0100)
                Field (RPX3, ByteAcc, NoLock, Preserve)
                {
                    VID,    16, 
                    Offset (0x04), 
                    CMDR,   3
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.PEX3.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    ElseIf ((\_SB.PCI0.PEX3.CMDR == 0x00))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x12, 
                        0x05
                    })
                }

                Name (PIC4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }
                })
                Name (API4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x2B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC4) /* \_SB_.PCI0.PEX3.PIC4 */
                    }
                    Else
                    {
                        Return (API4) /* \_SB_.PCI0.PEX3.API4 */
                    }
                }

                Device (S4F0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }

                Device (S4F7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                }
            }

            Device (P2PE)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                OperationRegion (P2ER, PCI_Config, 0x00, 0x0100)
                Field (P2ER, ByteAcc, NoLock, Preserve)
                {
                    VID,    16
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.P2PE.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (PICE, Package (0x08)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }
                })
                Name (APIE, Package (0x08)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICE) /* \_SB_.PCI0.P2PE.PICE */
                    }
                    Else
                    {
                        Return (APIE) /* \_SB_.PCI0.P2PE.APIE */
                    }
                }

                Device (SBRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x77)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0xF0000000,         // Address Base
                                0x00001000,         // Address Length
                                )
                        })
                        Return (BUF0) /* \_SB_.PCI0.P2PE.SBRC._CRS.BUF0 */
                    }
                }

                Device (PE5C)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PE5R, PCI_Config, 0x00, 0x0100)
                    Field (PE5R, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0x04), 
                        CMDR,   3
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.P2PE.PE5C.VID != 0x1106))
                        {
                            Return (0x00)
                        }
                        ElseIf ((\_SB.PCI0.P2PE.PE5C.CMDR == 0x00))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x12, 
                            0x05
                        })
                    }

                    Name (PIC5, Package (0x04)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            \_SB.PCI0.LNKD, 
                            0x00
                        }
                    })
                    Name (API5, Package (0x04)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (!PICF)
                        {
                            Return (PIC5) /* \_SB_.PCI0.P2PE.PE5C.PIC5 */
                        }
                        Else
                        {
                            Return (API5) /* \_SB_.PCI0.P2PE.PE5C.API5 */
                        }
                    }

                    Device (S5F0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }

                    Device (S5F7)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Name (_SUN, 0x05)  // _SUN: Slot User Number
                    }
                }

                Device (PE6C)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    OperationRegion (PE6R, PCI_Config, 0x00, 0x0100)
                    Field (PE6R, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0x04), 
                        CMDR,   3
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.P2PE.PE6C.VID != 0x1106))
                        {
                            Return (0x00)
                        }
                        ElseIf ((\_SB.PCI0.P2PE.PE6C.CMDR == 0x00))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x12, 
                            0x05
                        })
                    }

                    Name (PIC6, Package (0x04)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            \_SB.PCI0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            \_SB.PCI0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            \_SB.PCI0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            \_SB.PCI0.LNKD, 
                            0x00
                        }
                    })
                    Name (API6, Package (0x04)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0xFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (!PICF)
                        {
                            Return (PIC6) /* \_SB_.PCI0.P2PE.PE6C.PIC6 */
                        }
                        Else
                        {
                            Return (API6) /* \_SB_.PCI0.P2PE.PE6C.API6 */
                        }
                    }

                    Device (S6F0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }

                    Device (S6F7)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Name (_SUN, 0x06)  // _SUN: Slot User Number
                    }
                }

                Device (AZAC)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    OperationRegion (AZAR, PCI_Config, 0x00, 0x0100)
                    Field (AZAR, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0x04), 
                        CMDR,   3
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((\_SB.PCI0.P2PE.AZAC.VID != 0x1106))
                        {
                            Return (0x00)
                        }
                        ElseIf ((\_SB.PCI0.P2PE.AZAC.CMDR == 0x00))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            0x05
                        })
                    }
                }
            }

            Device (P2PB)
            {
                Name (_ADR, 0x00130001)  // _ADR: Address
                OperationRegion (P2PR, PCI_Config, 0x00, 0x0100)
                Field (P2PR, ByteAcc, NoLock, Preserve)
                {
                    VID,    16
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((\_SB.PCI0.P2PB.VID != 0x1106))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x05
                })
                Name (PICM, Package (0x14)
                {
                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }
                })
                Name (APIC, Package (0x14)
                {
                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x000DFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x00, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x01, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x000CFFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.P2PB.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.P2PB.APIC */
                    }
                }
            }

            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRA & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFB, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFB) /* \_SB_.PCI0.LNKA._PRS.BUFB */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRA &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFB, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y01)
                            {}
                    })
                    CreateByteField (BUFB, \_SB.PCI0.LNKA._CRS._Y01._INT, IRB1)  // _INT: Interrupts
                    CreateByteField (BUFB, 0x02, IRB2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIRA & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRB1 = Local3
                        IRB2 = Local4
                    }

                    Return (BUFB) /* \_SB_.PCI0.LNKA._CRS.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRB1)
                    CreateByteField (Arg0, 0x02, IRB2)
                    Local0 = (IRB2 << 0x08)
                    Local0 |= IRB1 /* \_SB_.PCI0.LNKA._SRS.IRB1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    If ((OSFL == 0x02))
                    {
                        If (ENR8)
                        {
                            PIRE = Local1
                        }
                    }

                    PIRA &= 0x0F
                    Local1 <<= 0x04
                    PIRA |= Local1
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIBC & 0x0F)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFA) /* \_SB_.PCI0.LNKB._PRS.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIBC &= 0xF0
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y02)
                            {}
                    })
                    CreateByteField (BUFA, \_SB.PCI0.LNKB._CRS._Y02._INT, IRA1)  // _INT: Interrupts
                    CreateByteField (BUFA, 0x02, IRA2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIBC & 0x0F)
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRA1 = Local3
                        IRA2 = Local4
                    }

                    Return (BUFA) /* \_SB_.PCI0.LNKB._CRS.BUFA */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRA1)
                    CreateByteField (Arg0, 0x02, IRA2)
                    Local0 = (IRA2 << 0x08)
                    Local0 |= IRA1 /* \_SB_.PCI0.LNKB._SRS.IRA1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    If ((OSFL == 0x02))
                    {
                        If (ENR8)
                        {
                            PIRF = Local1
                        }
                    }

                    PIBC &= 0xF0
                    PIBC |= Local1
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIBC & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFC) /* \_SB_.PCI0.LNKC._PRS.BUFC */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIBC &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y03)
                            {}
                    })
                    CreateByteField (BUFC, \_SB.PCI0.LNKC._CRS._Y03._INT, IRC1)  // _INT: Interrupts
                    CreateByteField (BUFC, 0x02, IRC2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIBC & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRC1 = Local3
                        IRC2 = Local4
                    }

                    Return (BUFC) /* \_SB_.PCI0.LNKC._CRS.BUFC */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRC1)
                    CreateByteField (Arg0, 0x02, IRC2)
                    Local0 = (IRC2 << 0x08)
                    Local0 |= IRC1 /* \_SB_.PCI0.LNKC._SRS.IRC1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    If ((OSFL == 0x02))
                    {
                        If (ENR8)
                        {
                            PIRG = Local1
                        }
                    }

                    PIBC &= 0x0F
                    Local1 <<= 0x04
                    PIBC |= Local1
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRD & 0xF0)
                    If ((Local0 == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFD, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFD) /* \_SB_.PCI0.LNKD._PRS.BUFD */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRD &= 0x0F
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFD, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y04)
                            {}
                    })
                    CreateByteField (BUFD, \_SB.PCI0.LNKD._CRS._Y04._INT, IRD1)  // _INT: Interrupts
                    CreateByteField (BUFD, 0x02, IRD2)
                    Local3 = 0x00
                    Local4 = 0x00
                    Local1 = (PIRD & 0xF0)
                    Local1 >>= 0x04
                    If ((Local1 != 0x00))
                    {
                        If ((Local1 > 0x07))
                        {
                            Local2 = (Local1 - 0x08)
                            Local4 = (One << Local2)
                        }
                        ElseIf ((Local1 > 0x00))
                        {
                            Local3 = (One << Local1)
                        }

                        IRD1 = Local3
                        IRD2 = Local4
                    }

                    Return (BUFD) /* \_SB_.PCI0.LNKD._CRS.BUFD */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRD1)
                    CreateByteField (Arg0, 0x02, IRD2)
                    Local0 = (IRD2 << 0x08)
                    Local0 |= IRD1 /* \_SB_.PCI0.LNKD._SRS.IRD1 */
                    Local1 = 0x00
                    Local0 >>= 0x01
                    While ((Local0 > 0x00))
                    {
                        Local1++
                        Local0 >>= 0x01
                    }

                    If ((OSFL == 0x02))
                    {
                        If (ENR8)
                        {
                            PIRH = Local1
                        }
                    }

                    PIRD &= 0x0F
                    Local1 <<= 0x04
                    PIRD |= Local1
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRE == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFE, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFE) /* \_SB_.PCI0.LNKE._PRS.BUFE */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRE = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFE, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y05)
                            {}
                    })
                    CreateByteField (BUFE, \_SB.PCI0.LNKE._CRS._Y05._INT, IRE1)  // _INT: Interrupts
                    CreateByteField (BUFE, 0x02, IRE2)
                    IRE1 = Zero
                    IRE2 = Zero
                    Local0 = PIRE /* \PIRE */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local1 = (Local0 - 0x08)
                            IRE2 = (One << Local1)
                        }
                        Else
                        {
                            Local1 = Local0
                            IRE1 = (One << Local1)
                        }
                    }

                    Return (BUFE) /* \_SB_.PCI0.LNKE._CRS.BUFE */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRE1)
                    CreateByteField (Arg0, 0x02, IRE2)
                    If ((IRE2 > Zero))
                    {
                        FindSetLeftBit (IRE2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRE1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLE = Zero
                    PIRE = Local0
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRF == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFF, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFF) /* \_SB_.PCI0.LNKF._PRS.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRF = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFF, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y06)
                            {}
                    })
                    CreateByteField (BUFF, \_SB.PCI0.LNKF._CRS._Y06._INT, IRF1)  // _INT: Interrupts
                    CreateByteField (BUFF, 0x02, IRF2)
                    IRF1 = Zero
                    IRF2 = Zero
                    Local0 = PIRF /* \PIRF */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local1 = (Local0 - 0x08)
                            IRF2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = Local0
                            IRF1 = (One << Local1)
                        }
                    }

                    Return (BUFF) /* \_SB_.PCI0.LNKF._CRS.BUFF */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRF1)
                    CreateByteField (Arg0, 0x02, IRF2)
                    If ((IRF2 > Zero))
                    {
                        FindSetLeftBit (IRF2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRF1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLF = Zero
                    PIRF = Local0
                }
            }

            Device (LNK0)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRG == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFG, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFG) /* \_SB_.PCI0.LNK0._PRS.BUFG */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRG = Zero
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFG, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y07)
                            {}
                    })
                    CreateByteField (BUFG, \_SB.PCI0.LNK0._CRS._Y07._INT, IRG1)  // _INT: Interrupts
                    CreateByteField (BUFG, 0x02, IRG2)
                    IRG1 = Zero
                    IRG2 = Zero
                    Local0 = PIRG /* \PIRG */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local0 -= 0x08
                            IRG2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = 0x01
                            IRG1 = (Local1 << Local0)
                        }
                    }

                    Return (BUFG) /* \_SB_.PCI0.LNK0._CRS.BUFG */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRG1)
                    CreateByteField (Arg0, 0x02, IRG2)
                    If ((IRG2 > Zero))
                    {
                        FindSetLeftBit (IRG2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRG1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLG = Zero
                    PIRG = Local0
                }
            }

            Device (LNK1)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PIRH == 0x00))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Name (BUFH, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,6,7,10,11,12}
                    })
                    Return (BUFH) /* \_SB_.PCI0.LNK1._PRS.BUFH */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRH = Zero
                    If ((\_SB.PCI0.NBF4.REBD == 0x01))
                    {
                        POLH = Zero
                    }

                    If ((\_SB.PCI0.NBF4.REBD == 0x80))
                    {
                        POLH = Zero
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUFH, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y08)
                            {}
                    })
                    CreateByteField (BUFH, \_SB.PCI0.LNK1._CRS._Y08._INT, IRH1)  // _INT: Interrupts
                    CreateByteField (BUFH, 0x02, IRH2)
                    IRH1 = Zero
                    IRH2 = Zero
                    Local0 = PIRH /* \PIRH */
                    If ((Local0 > 0x00))
                    {
                        If ((Local0 > 0x07))
                        {
                            Local0 -= 0x08
                            IRH2 = (One << Local0)
                        }
                        Else
                        {
                            Local1 = 0x01
                            IRH1 = (Local1 << Local0)
                        }
                    }

                    Return (BUFH) /* \_SB_.PCI0.LNK1._CRS.BUFH */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x01, IRH1)
                    CreateByteField (Arg0, 0x02, IRH2)
                    If ((IRH2 > Zero))
                    {
                        FindSetLeftBit (IRH2, Local0)
                        Local0--
                        Local0 += 0x08
                    }
                    Else
                    {
                        FindSetLeftBit (IRH1, Local0)
                        Local0--
                    }

                    ENR8 = One
                    POLH = Zero
                    If ((\_SB.PCI0.NBF4.REBD == 0x01))
                    {
                        POLH = One
                    }

                    If ((\_SB.PCI0.NBF4.REBD == 0x80))
                    {
                        POLH = One
                    }

                    PIRH = Local0
                }
            }

            Scope (\)
            {
                OperationRegion (\SCPP, SystemIO, 0x042F, 0x01)
                Field (\SCPP, ByteAcc, NoLock, Preserve)
                {
                    SMIP,   8
                }
            }

            Method (\_SB.PCI0._INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (STRC (\_OS, "Microsoft Windows"))
                {
                    SMIP = 0x56
                }
                ElseIf (STRC (\_OS, "Microsoft Windows NT"))
                {
                    If (CondRefOf (\_OSI, Local0))
                    {
                        If (\_OSI ("Windows 2001"))
                        {
                            SMIP = 0x59
                            OSFL = 0x00
                            OSFX = 0x03
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            SMIP = 0x59
                            OSFL = 0x00
                            OSFX = 0x04
                        }
                    }
                    Else
                    {
                        SMIP = 0x58
                        OSFX = 0x00
                        OSFL = 0x00
                    }
                }
                Else
                {
                    SMIP = 0x57
                    OSFX = 0x02
                    OSFL = 0x02
                }

                SBFL = 0x00
                If ((DEID == 0x3147))
                {
                    SBFL = 0x01
                }

                If ((DEID == 0x3177))
                {
                    SBFL = 0x02
                }

                If ((DEID == 0x3227))
                {
                    SBFL = 0x03
                }

                If ((DEID == 0x3287))
                {
                    SBFL = 0x04
                }

                ATFL = 0x00
                If ((BSAT == 0x01))
                {
                    ATFL = 0x02
                }
                ElseIf ((EIDE == 0x01))
                {
                    ATFL = 0x02
                }
                ElseIf ((\_SB.PCI0.PATA.VID != 0x1106))
                {
                    ATFL = 0x01
                }
            }

            Scope (\)
            {
                Method (OSTP, 0, NotSerialized)
                {
                    If ((OSFX == 0x01))
                    {
                        SMIP = 0x56
                    }

                    If ((OSFX == 0x02))
                    {
                        SMIP = 0x57
                    }

                    If ((OSFX == 0x00))
                    {
                        SMIP = 0x58
                    }

                    If ((OSFX == 0x03))
                    {
                        SMIP = 0x59
                    }

                    If ((OSFX == 0x04))
                    {
                        SMIP = 0x59
                    }
                }
            }

            Device (SYSR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0010,             // Range Minimum
                        0x0010,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0022,             // Range Minimum
                        0x0022,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x0044,             // Range Minimum
                        0x0044,             // Range Maximum
                        0x01,               // Alignment
                        0x1C,               // Length
                        )
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0065,             // Range Minimum
                        0x0065,             // Range Maximum
                        0x01,               // Alignment
                        0x0B,               // Length
                        )
                    IO (Decode16,
                        0x0074,             // Range Minimum
                        0x0074,             // Range Maximum
                        0x01,               // Alignment
                        0x0C,               // Length
                        )
                    IO (Decode16,
                        0x0091,             // Range Minimum
                        0x0091,             // Range Maximum
                        0x01,               // Alignment
                        0x03,               // Length
                        )
                    IO (Decode16,
                        0x00A2,             // Range Minimum
                        0x00A2,             // Range Maximum
                        0x01,               // Alignment
                        0x1E,               // Length
                        )
                    IO (Decode16,
                        0x00E0,             // Range Minimum
                        0x00E0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x04D0,             // Range Minimum
                        0x04D0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0290,             // Range Minimum
                        0x0290,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IO (Decode16,
                        0x0880,             // Range Minimum
                        0x0880,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                })
            }

            Device (PIC)
            {
                Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0020,             // Range Minimum
                        0x0020,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00A0,             // Range Minimum
                        0x00A0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IRQNoFlags ()
                        {2}
                })
            }

            Device (DMA1)
            {
                Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    DMA (Compatibility, BusMaster, Transfer8, )
                        {4}
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0080,             // Range Minimum
                        0x0080,             // Range Maximum
                        0x01,               // Alignment
                        0x11,               // Length
                        )
                    IO (Decode16,
                        0x0094,             // Range Minimum
                        0x0094,             // Range Maximum
                        0x01,               // Alignment
                        0x0C,               // Length
                        )
                    IO (Decode16,
                        0x00C0,             // Range Minimum
                        0x00C0,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                })
            }

            Device (TMR)
            {
                Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0040,             // Range Minimum
                        0x0040,             // Range Maximum
                        0x01,               // Alignment
                        0x04,               // Length
                        )
                    IRQNoFlags ()
                        {0}
                })
            }

            Device (RTC)
            {
                Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0070,             // Range Minimum
                        0x0070,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        )
                    IRQNoFlags ()
                        {8}
                })
            }

            Device (SPKR)
            {
                Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0061,             // Range Minimum
                        0x0061,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
            }

            Device (COPR)
            {
                Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x00F0,             // Range Minimum
                        0x00F0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IRQNoFlags ()
                        {13}
                })
            }

            Scope (\)
            {
                OperationRegion (WIN1, SystemIO, 0x4E, 0x02)
                Field (WIN1, ByteAcc, NoLock, Preserve)
                {
                    INDP,   8, 
                    DATA,   8
                }

                IndexField (INDP, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    CFG,    8, 
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x20), 
                    IDHI,   8, 
                    IDLO,   8, 
                    POWC,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IO2H,   8, 
                    IO2L,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x72), 
                    INT1,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xE0), 
                    CRE0,   8, 
                    CRE1,   8, 
                    CRE2,   8, 
                    CRE3,   8, 
                    CRE4,   8, 
                    Offset (0xF0), 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    OPT5,   8, 
                    OPT6,   8, 
                    OPT7,   8, 
                    OPT8,   8, 
                    OPT9,   8, 
                    OPTA,   8
                }

                Method (ENFG, 0, NotSerialized)
                {
                    INDP = 0x87
                    INDP = 0x87
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDP = 0xAA
                }

                Method (EWBP, 0, NotSerialized)
                {
                    ENFG ()
                    LDN = 0x0A
                    OPTA = 0x00
                    OPT7 = 0x00
                    OPT4 = 0xFF
                    OPT5 = 0xFF
                    Local0 = CRE0 /* \CRE0 */
                    Local0 |= 0x63
                    CRE0 = Local0
                    Local0 = CRE4 /* \CRE4 */
                    Local0 |= 0x8C
                    CRE4 = Local0
                    Local0 = ACTR /* \ACTR */
                    Local0 |= 0x01
                    ACTR = Local0
                    EXFG ()
                }

                Method (DWBP, 0, NotSerialized)
                {
                    ENFG ()
                    LDN = 0x0A
                    OPTA = 0x00
                    OPT7 = 0x00
                    OPT8 = 0x00
                    OPT4 = 0xFF
                    OPT5 = 0xFF
                    Local0 = CRE0 /* \CRE0 */
                    Local0 &= 0x9C
                    CRE0 = Local0
                    Local0 = CRE4 /* \CRE4 */
                    Local0 &= 0x73
                    CRE4 = Local0
                    Local0 = ACTR /* \ACTR */
                    Local0 &= 0xFE
                    ACTR = Local0
                    EXFG ()
                }
            }

            OperationRegion (COM1, SystemIO, 0x03F8, 0x08)
            Field (COM1, ByteAcc, NoLock, Preserve)
            {
                P3F8,   8, 
                P3F9,   8, 
                P3FA,   8, 
                P3FB,   8, 
                P3FC,   8, 
                P3FD,   8, 
                P3FE,   8, 
                P3FF,   8
            }

            OperationRegion (COM2, SystemIO, 0x02F8, 0x08)
            Field (COM2, ByteAcc, NoLock, Preserve)
            {
                P2F8,   8, 
                P2F9,   8, 
                P2FA,   8, 
                P2FB,   8, 
                P2FC,   8, 
                P2FD,   8, 
                P2FE,   8, 
                P2FF,   8
            }

            OperationRegion (COM3, SystemIO, 0x03E8, 0x08)
            Field (COM3, ByteAcc, NoLock, Preserve)
            {
                P3E8,   8, 
                P3E9,   8, 
                P3EA,   8, 
                P3EB,   8, 
                P3EC,   8, 
                P3ED,   8, 
                P3EE,   8, 
                P3EF,   8
            }

            OperationRegion (COM4, SystemIO, 0x02E8, 0x08)
            Field (COM4, ByteAcc, NoLock, Preserve)
            {
                P2E8,   8, 
                P2E9,   8, 
                P2EA,   8, 
                P2EB,   8, 
                P2EC,   8, 
                P2ED,   8, 
                P2EE,   8, 
                P2EF,   8
            }

            Method (ICOM, 1, NotSerialized)
            {
                Local0 = Arg0
                If ((Local0 == 0x03F8))
                {
                    Local0 = P3FD /* \_SB_.PCI0.P3FD */
                    Local0 = P3FD /* \_SB_.PCI0.P3FD */
                    P3FA = 0xC3
                    While ((P3FA != 0xC1))
                    {
                        Local0 = P3FE /* \_SB_.PCI0.P3FE */
                    }
                }
                ElseIf ((Local0 == 0x02F8))
                {
                    Local0 = P2FD /* \_SB_.PCI0.P2FD */
                    Local0 = P2FD /* \_SB_.PCI0.P2FD */
                    P2FA = 0xC3
                    While ((P2FA != 0xC1))
                    {
                        Local0 = P2FE /* \_SB_.PCI0.P2FE */
                    }
                }
                ElseIf ((Local0 == 0x03E8))
                {
                    Local0 = P3ED /* \_SB_.PCI0.P3ED */
                    Local0 = P3ED /* \_SB_.PCI0.P3ED */
                    P3EA = 0xC3
                    While ((P3EA != 0xC1))
                    {
                        Local0 = P3EE /* \_SB_.PCI0.P3EE */
                    }
                }
                ElseIf ((Local0 == 0x02E8))
                {
                    Local0 = P2ED /* \_SB_.PCI0.P2ED */
                    Local0 = P2ED /* \_SB_.PCI0.P2ED */
                    P2EA = 0xC3
                    While ((P2EA != 0xC1))
                    {
                        Local0 = P2EE /* \_SB_.PCI0.P2EE */
                    }
                }
            }

            Device (FDC0)
            {
                Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = Zero
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x00
                    ACTR = Zero
                    SLDM (DMCH, 0x04)
                    EXFG ()
                    DISD (0x03)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            _Y09)
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    })
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y09._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF0, 0x03, IOHI)
                    CreateByteField (BUF0, \_SB.PCI0.FDC0._CRS._Y09._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF0, 0x05, IORH)
                    ENFG ()
                    EXFG ()
                    Return (BUF0) /* \_SB_.PCI0.FDC0._CRS.BUF0 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x19, IRQL)
                    CreateByteField (Arg0, 0x1C, DMAV)
                    ENFG ()
                    LDN = Zero
                    ACTR = One
                    SLDM (DMCH, DMCH)
                    EXFG ()
                    CKIO (IOAD, 0x03)
                }
            }

            Device (UAR1)
            {
                Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x02
                    If (ACTR)
                    {
                        EXFG ()
                        Return (0x0F)
                    }
                    ElseIf ((IOAH || IOAL))
                    {
                        EXFG ()
                        Return (0x0D)
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }

                    EXFG ()
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x02
                    ACTR = Zero
                    EXFG ()
                    DISD (0x00)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y0A)
                        IRQNoFlags (_Y0B)
                            {}
                    })
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y0A._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF1, 0x03, IOHI)
                    CreateByteField (BUF1, \_SB.PCI0.UAR1._CRS._Y0A._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF1, 0x05, IORH)
                    CreateWordField (BUF1, \_SB.PCI0.UAR1._CRS._Y0B._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x02
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF1) /* \_SB_.PCI0.UAR1._CRS.BUF1 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x02
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.UAR1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.UAR1._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x00)
                }
            }

            Device (UAR2)
            {
                Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x30)
                    If ((Local0 != 0x10))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x38)
                    If ((Local0 == 0x00))
                    {
                        ACTR = Zero
                    }

                    EXFG ()
                    DISD (0x01)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y0C)
                        IRQNoFlags (_Y0D)
                            {4}
                    })
                    CreateByteField (BUF2, \_SB.PCI0.UAR2._CRS._Y0C._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF2, 0x03, IOHI)
                    CreateByteField (BUF2, \_SB.PCI0.UAR2._CRS._Y0C._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF2, 0x05, IORH)
                    CreateWordField (BUF2, \_SB.PCI0.UAR2._CRS._Y0D._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x03
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF2) /* \_SB_.PCI0.UAR2._CRS.BUF2 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x03
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.UAR2._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.UAR2._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x01)
                }
            }

            Device (IRDA)
            {
                Name (_HID, EisaId ("PNP0510") /* Generic IRDA-compatible Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x03
                    Local0 = (OPT2 & 0x30)
                    If ((Local0 == 0x10))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    If ((DISE == 0x01))
                    {
                        ENFG ()
                        LDN = 0x03
                        Local0 = (OPT2 & 0x38)
                        If ((Local0 != 0x00))
                        {
                            ACTR = Zero
                        }

                        EXFG ()
                        DISD (0x01)
                    }

                    Local0 = Local0
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF4, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y0E)
                        IRQNoFlags (_Y0F)
                            {}
                    })
                    CreateByteField (BUF4, \_SB.PCI0.IRDA._CRS._Y0E._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF4, 0x03, IOHI)
                    CreateByteField (BUF4, \_SB.PCI0.IRDA._CRS._Y0E._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF4, 0x05, IORH)
                    CreateWordField (BUF4, \_SB.PCI0.IRDA._CRS._Y0F._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x03
                    IOLO = IOAL /* \IOAL */
                    IORL = IOAL /* \IOAL */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOAH /* \IOAH */
                    IRQW = (0x01 << INTR) /* \INTR */
                    EXFG ()
                    Return (BUF4) /* \_SB_.PCI0.IRDA._CRS.BUF4 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x09, IRQW)
                    ENFG ()
                    LDN = 0x03
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.IRDA._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.IRDA._SRS.IOHI */
                    FindSetRightBit (IRQW, Local0)
                    INTR = (Local0 - 0x01)
                    EXFG ()
                    CKIO (IOAD, 0x01)
                }
            }

            Device (LPT1)
            {
                Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x01
                    Local0 = (OPT1 & 0x02)
                    If ((Local0 != 0x02))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x01
                    ACTR = Zero
                    EXFG ()
                    DISD (0x02)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF5, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            _Y11)
                        IRQNoFlags (_Y12)
                            {}
                    })
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y10._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF5, 0x03, IOHI)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y10._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF5, 0x05, IORH)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y10._LEN, IOLE)  // _LEN: Length
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y11._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateByteField (BUF5, 0x0B, IO22)
                    CreateByteField (BUF5, \_SB.PCI0.LPT1._CRS._Y11._MAX, IO23)  // _MAX: Maximum Base Address
                    CreateByteField (BUF5, 0x0D, IO24)
                    CreateWordField (BUF5, \_SB.PCI0.LPT1._CRS._Y12._INT, IRQW)  // _INT: Interrupts
                    ENFG ()
                    LDN = 0x01
                    IOLO = IOAL /* \IOAL */
                    IORL = IOLO /* \_SB_.PCI0.LPT1._CRS.IOLO */
                    IOHI = IOAH /* \IOAH */
                    IORH = IOHI /* \_SB_.PCI0.LPT1._CRS.IOHI */
                    IO21 = IOAL /* \IOAL */
                    IO23 = IOAL /* \IOAL */
                    IO22 = (IOAH + 0x04)
                    IO24 = (IOAH + 0x04)
                    If ((IOLO == 0xBC))
                    {
                        IOLE = 0x04
                    }
                    Else
                    {
                        IOLE = 0x08
                    }

                    Local0 = One
                    Local5 = INTR /* \INTR */
                    IRQW = (Local0 << Local5)
                    ACTR = One
                    EXFG ()
                    Return (BUF5) /* \_SB_.PCI0.LPT1._CRS.BUF5 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateByteField (Arg0, 0x04, IORL)
                    CreateByteField (Arg0, 0x05, IORH)
                    CreateWordField (Arg0, 0x11, IRQW)
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.LPT1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.LPT1._SRS.IOHI */
                    FindSetLeftBit (IRQW, Local0)
                    Local0 -= 0x01
                    INTR = Local0
                    EXFG ()
                    CKIO (IOAD, 0x02)
                }
            }

            Device (ECP1)
            {
                Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ENFG ()
                    LDN = 0x01
                    Local0 = (OPT1 & 0x02)
                    If ((Local0 == 0x02))
                    {
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        EXFG ()
                        Return (0x00)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ENFG ()
                    LDN = 0x01
                    ACTR = Zero
                    SLDM (DMCH, 0x04)
                    EXFG ()
                    DISD (0x02)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF6, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y13)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            _Y14)
                        IRQNoFlags (_Y15)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y16)
                            {}
                    })
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y13._MIN, IOLO)  // _MIN: Minimum Base Address
                    CreateByteField (BUF6, 0x03, IOHI)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y13._MAX, IORL)  // _MAX: Maximum Base Address
                    CreateByteField (BUF6, 0x05, IORH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y14._MIN, IOEL)  // _MIN: Minimum Base Address
                    CreateByteField (BUF6, 0x0B, IOEH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y14._MAX, IOML)  // _MAX: Maximum Base Address
                    CreateByteField (BUF6, 0x0D, IOMH)
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y13._LEN, IOLE)  // _LEN: Length
                    CreateWordField (BUF6, \_SB.PCI0.ECP1._CRS._Y15._INT, IRQW)  // _INT: Interrupts
                    CreateByteField (BUF6, \_SB.PCI0.ECP1._CRS._Y16._DMA, DMAC)  // _DMA: Direct Memory Access
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    Local2 = IOAL /* \IOAL */
                    IOLO = Local2
                    Local3 = IOAH /* \IOAH */
                    IOHI = Local3
                    Local3 |= 0x04
                    IOEH = Local3
                    IOMH = Local3
                    IORL = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IOEL = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IOML = IOLO /* \_SB_.PCI0.ECP1._CRS.IOLO */
                    IORH = IOHI /* \_SB_.PCI0.ECP1._CRS.IOHI */
                    If ((IOLO == 0xBC))
                    {
                        IOLE = 0x04
                    }
                    Else
                    {
                        IOLE = 0x08
                    }

                    Local0 = One
                    Local5 = INTR /* \INTR */
                    IRQW = (Local0 << Local5)
                    Local0 = One
                    Local5 = DMCH /* \DMCH */
                    DMAC = (Local0 << Local5)
                    EXFG ()
                    Return (BUF6) /* \_SB_.PCI0.ECP1._CRS.BUF6 */
                }

                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,7,9,10,11,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {0,1,3}
                    }
                    EndDependentFn ()
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateByteField (Arg0, 0x02, IOLO)
                    CreateByteField (Arg0, 0x03, IOHI)
                    CreateWordField (Arg0, 0x02, IOAD)
                    CreateWordField (Arg0, 0x11, IRQW)
                    CreateByteField (Arg0, 0x14, DMAC)
                    ENFG ()
                    LDN = 0x01
                    ACTR = One
                    IOAL = IOLO /* \_SB_.PCI0.ECP1._SRS.IOLO */
                    IOAH = IOHI /* \_SB_.PCI0.ECP1._SRS.IOHI */
                    FindSetLeftBit (IRQW, Local0)
                    Local0 -= 0x01
                    INTR = Local0
                    FindSetLeftBit (DMAC, Local1)
                    Local0 = DMCH /* \DMCH */
                    DMCH = (Local1 - 0x01)
                    SLDM (Local0, DMCH)
                    EXFG ()
                    CKIO (IOAD, 0x02)
                }
            }

            OperationRegion (KBCT, SystemIO, 0x60, 0x05)
            Field (KBCT, ByteAcc, NoLock, Preserve)
            {
                P060,   8, 
                Offset (0x04), 
                P064,   8
            }

            Device (PS2M)
            {
                Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PS2F == 0x00))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    If ((KBDI == 0x01))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                        }
                        Else
                        {
                            Return (BUF2) /* \_SB_.PCI0.PS2M._CRS.BUF2 */
                        }
                    }
                    Else
                    {
                        Return (BUF1) /* \_SB_.PCI0.PS2M._CRS.BUF1 */
                    }
                }
            }

            Device (PS2K)
            {
                Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x01))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                })
            }

            Device (PSMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((KBDI == 0x00))
                    {
                        Return (0x00)
                    }

                    If ((PS2F == 0x00))
                    {
                        If ((OSFL == 0x02))
                        {
                            Return (0x0F)
                        }

                        If ((OSFL == 0x01))
                        {
                            Return (0x0F)
                        }

                        Return (0x00)
                    }

                    Return (0x00)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
            }

            Scope (\)
            {
                OperationRegion (COM2, SystemIO, 0x02F8, 0x08)
                Field (COM2, ByteAcc, NoLock, Preserve)
                {
                    P2F8,   8, 
                    P2F9,   8, 
                    P2FA,   8, 
                    P2FB,   8, 
                    P2FC,   8, 
                    P2FD,   8, 
                    P2FE,   8, 
                    P2FF,   8
                }

                Method (MDCS, 1, NotSerialized)
                {
                    MEC2 ()
                    Sleep (0x06)
                    If ((Arg0 == 0x00))
                    {
                        SCB0 ()
                    }

                    If ((Arg0 == 0x03))
                    {
                        SCB3 ()
                    }

                    If ((Arg0 == 0x04))
                    {
                        SCB4 ()
                    }

                    If ((Arg0 == 0x05))
                    {
                        SCB4 ()
                    }

                    MDC2 ()
                }

                Method (SCB3, 0, NotSerialized)
                {
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x50
                    Sleep (0x06)
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x22
                    Sleep (0x06)
                    P2F8 = 0x20
                    Sleep (0x06)
                    P2F8 = 0x20
                    Sleep (0x06)
                    P2F8 = 0x20
                    Sleep (0x06)
                    P2F8 = 0x20
                    Sleep (0x06)
                    P2F8 = 0x53
                    Sleep (0x06)
                    P2F8 = 0x54
                    Sleep (0x06)
                    P2F8 = 0x41
                    Sleep (0x06)
                    P2F8 = 0x4E
                    Sleep (0x06)
                    P2F8 = 0x44
                    Sleep (0x06)
                    P2F8 = 0x42
                    Sleep (0x06)
                    P2F8 = 0x59
                    Sleep (0x06)
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x21
                    Sleep (0x06)
                    P2F8 = 0x20
                    Sleep (0x06)
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x53
                    Sleep (0x64)
                }

                Method (SCB0, 0, NotSerialized)
                {
                    P2F8 = 0x1F
                    Sleep (0x64)
                }

                Method (SCB4, 0, NotSerialized)
                {
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x50
                    Sleep (0x06)
                    P2F8 = 0x1B
                    Sleep (0x06)
                    P2F8 = 0x05
                    Sleep (0x06)
                    Sleep (0x64)
                }

                Method (MEC2, 0, NotSerialized)
                {
                    LPE1 |= 0x80
                    ENFG ()
                    LDN = 0x03
                    ACTR = One
                    EXFG ()
                    P2FB = 0x80
                    Sleep (0x06)
                    P2F9 = 0x00
                    Sleep (0x06)
                    P2F8 = 0x0C
                    Sleep (0x06)
                    P2FB = 0x03
                }

                Method (MDC2, 0, NotSerialized)
                {
                    LPE1 &= 0x7F
                    ENFG ()
                    LDN = 0x03
                    ACTR = 0x00
                    EXFG ()
                }
            }

            Method (\_SB.PCI0.UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x05
                })
            }
        }

        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x000F0000,         // Address Base
                        0x00004000,         // Address Length
                        _Y18)
                    Memory32Fixed (ReadWrite,
                        0x000F4000,         // Address Base
                        0x00004000,         // Address Length
                        _Y19)
                    Memory32Fixed (ReadWrite,
                        0x000F8000,         // Address Base
                        0x00004000,         // Address Length
                        _Y1A)
                    Memory32Fixed (ReadWrite,
                        0x000FC000,         // Address Base
                        0x00004000,         // Address Length
                        _Y1B)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y17)
                    Memory32Fixed (ReadWrite,
                        0xFFFF0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1C)
                    Memory32Fixed (ReadWrite,
                        0xFEC00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF80000,         // Address Base
                        0x00070000,         // Address Length
                        )
                })
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y17._BAS, ACMM)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y17._LEN, ASSM)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y18._BAS, RMA1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y18._LEN, RSS1)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y19._BAS, RMA2)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y19._LEN, RSS2)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y1A._BAS, RMA3)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y1A._LEN, RSS3)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y1B._BAS, RMA4)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y1B._LEN, RSS4)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y1C._LEN, EXTM)  // _LEN: Length
                EXTM = (AMEM - 0x00100000)
                If ((ROM1 != Zero))
                {
                    RMA2 = RMA1 /* \_SB_.MEM_._CRS.RMA1 */
                    Local0 = (ROM1 << 0x08)
                    RMA1 = Local0
                    Local0 = (RMS1 << 0x08)
                    RSS1 = Local0
                    RSS2 = 0x8000
                }

                If ((ROM2 != Zero))
                {
                    RMA3 = RMA2 /* \_SB_.MEM_._CRS.RMA2 */
                    Local0 = (ROM2 << 0x08)
                    RMA2 = Local0
                    Local0 = (RMS2 << 0x08)
                    RSS2 = Local0
                    RSS3 = 0xC000
                }

                If ((ROM3 != Zero))
                {
                    RMA4 = RMA3 /* \_SB_.MEM_._CRS.RMA3 */
                    Local0 = (ROM3 << 0x08)
                    RMA3 = Local0
                    Local0 = (RMS3 << 0x08)
                    RSS3 = Local0
                    RSS4 = 0x00010000
                }

                ACMM = AMEM /* \AMEM */
                Local0 = (AMEM & 0x000FFFFF)
                ASSM = (0x00100000 - Local0)
                Return (BUF0) /* \_SB_.MEM_._CRS.BUF0 */
            }
        }

        Device (\_SB.PCI0.EXPL)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PCI0.EXPL._CRS.BUF0 */
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000074
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 79
[00Ah 0010 006h]                      Oem ID : "MEDION"
[010h 0016 008h]                Oem Table ID : "MEDIONAG"
[018h 0024 004h]                Oem Revision : 42302E31
[01Ch 0028 004h]             Asl Compiler ID : "AWRD"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]                FACS Address : BFEE0000
[028h 0040 004h]                DSDT Address : BFEE3180
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 00 [Unspecified]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 0000042F
[034h 0052 001h]           ACPI Enable Value : A1
[035h 0053 001h]          ACPI Disable Value : A0
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 34
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000000
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000450
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 00
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 04
[05Dh 0093 001h]           GPE1 Block Length : 04
[05Eh 0094 001h]            GPE1 Base Offset : 10
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0050
[062h 0098 002h]                  C3 Latency : 0320
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 00
[069h 0105 001h]            Duty Cycle Width : 01
[06Ah 0106 001h]         RTC Day Alarm Index : 7D
[06Bh 0107 001h]       RTC Month Alarm Index : 7E
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000044A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 79 4D 45 44 49 4F 4E  // FACPt....yMEDION
    0010: 4D 45 44 49 4F 4E 41 47 31 2E 30 42 41 57 52 44  // MEDIONAG1.0BAWRD
    0020: 00 00 00 00 00 00 EE BF 80 31 EE BF 01 00 09 00  // .........1......
    0030: 2F 04 00 00 A1 A0 00 34 00 04 00 00 00 00 00 00  // /......4........
    0040: 04 04 00 00 00 00 00 00 00 00 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 50 04 00 00 04 02 00 04 04 04 10 00  //  ...P...........
    0060: 50 00 20 03 00 00 00 00 00 01 7D 7E 32 00 00 00  // P. .......}~2...
    0070: A5 44 00 00                                      // .D..


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 00
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C8
[00Ah 0010 006h]                      Oem ID : "MEDION"
[010h 0016 008h]                Oem Table ID : "MEDIONAG"
[018h 0024 004h]                Oem Revision : 42302E31
[01Ch 0028 004h]             Asl Compiler ID : "AWRD"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 C8 4D 45 44 49 4F 4E  // MCFG<.....MEDION
    0010: 4D 45 44 49 4F 4E 41 47 31 2E 30 42 41 57 52 44  // MEDIONAG1.0BAWRD
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 03
[00Ah 0010 006h]                      Oem ID : "MEDION"
[010h 0016 008h]                Oem Table ID : "MEDIONAG"
[018h 0024 004h]                Oem Revision : 42302E31
[01Ch 0028 004h]             Asl Compiler ID : "AWRD"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 152h] Software Licensing Structure : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 034h 0052  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 044h 0068  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 054h 0084  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 064h 0100  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 074h 0116  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 084h 0132  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 094h 0148  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0A4h 0164  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0B4h 0180  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0C4h 0196  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0D4h 0212  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0E4h 0228  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0F4h 0244  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 104h 0260  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 114h 0276  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 124h 0292  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 134h 0308  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 144h 0324  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 154h 0340  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 164h 0356  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 174h 0372   2 */                            00 00                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 03 4D 45 44 49 4F 4E  // SLICv.....MEDION
    0010: 4D 45 44 49 4F 4E 41 47 31 2E 30 42 41 57 52 44  // MEDIONAG1.0BAWRD
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: FF 7C 8C 8E CC 30 29 D9 3F 01 08 33 1D 91 93 12  // .|...0).?..3....
    0050: F0 90 FF 29 92 38 9E EB 14 07 76 A2 39 36 D5 1D  // ...).8....v.96..
    0060: 94 7F DD 58 D2 F8 B9 76 F2 31 B6 5A 7F 0D 5E 67  // ...X...v.1.Z..^g
    0070: B4 F2 2F F8 31 67 3C 95 24 16 24 D2 71 63 A1 D0  // ../.1g<.$.$.qc..
    0080: AE 66 FA AD 9C 74 F5 0C D9 26 DB 3B 8D 49 4B 46  // .f...t...&.;.IKF
    0090: 36 CE A0 48 D5 E7 D4 7E 09 95 DF 59 30 06 1E 0E  // 6..H...~...Y0...
    00A0: 81 1B 74 6C D2 73 AE 23 49 E2 10 F0 9A E3 88 C3  // ..tl.s.#I.......
    00B0: 2E E3 0B 49 42 2C 54 AC 5E 01 27 59 B7 79 C9 8D  // ...IB,T.^.'Y.y..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 4D 45 44 49  // ............MEDI
    00D0: 4F 4E 4D 45 44 49 4F 4E 41 47 57 49 4E 44 4F 57  // ONMEDIONAGWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 30 E9 B3 BE 10 D3 52 F4 0A 28  // ......0.....R..(
    0100: CF 05 32 E3 CA B2 2B C4 30 F5 52 12 9A 31 33 C0  // ..2...+.0.R..13.
    0110: 73 CD BF 19 35 FF 8A 2D FF 80 12 56 43 52 A5 84  // s...5..-...VCR..
    0120: 0D 63 AF 88 8E DF 17 45 CF E4 A5 87 EF 5A E7 DF  // .c.....E.....Z..
    0130: 18 32 83 F1 F5 D3 D3 13 1D 05 1E E5 C7 BB 55 1E  // .2............U.
    0140: BE 44 22 6F 44 D8 FE 38 46 A9 6F FE 55 BA 9A 03  // .D"oD..8F.o.U...
    0150: 90 4B C9 F3 1F 17 81 55 D5 67 9D 6E 77 6C BB 4B  // .K.....U.g.nwl.K
    0160: 4C 34 5E DC 2C 3A 9D 44 C3 E2 24 2D B0 E7 D3 80  // L4^.,:.D..$-....
    0170: F5 74 8B 40 83 74                                // .t.@.t


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x1E)
        {
            "CPU0IST ", 
            0xBFEE9680, 
            0x000001E0, 
            "CPU1IST ", 
            0xBFEE9A80, 
            0x00000087, 
            "CPU0CST ", 
            0x00000000, 
            0xF000E819, 
            "CPU1CST ", 
            0x00000000, 
            0xF000E819, 
            "CPU2IST ", 
            0x00000000, 
            0xF000E819, 
            "CPU3IST ", 
            0x00000000, 
            0xF000E819, 
            "CPU4IST ", 
            0x00000000, 
            0xF000E819, 
            "CPU5IST ", 
            0x00000000, 
            0xF000E819, 
            "CPU6IST ", 
            0x00000000, 
            0xF000E819, 
            "CPU7IST ", 
            0x00000000, 
            0xF000E819
        })
        Name (CFGD, 0x0F0D83F2)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Name (TLD1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP1)
            PDC1 = CAP1 /* \_PR_.CPU1._PDC.CAP1 */
            If ((TLD1 == 0x00))
            {
                If (((PDC1 & 0x0A) == 0x0A))
                {
                    If ((CFGD & 0x02))
                    {
                        OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                        Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                    }

                    TLD1 = 0x01
                }
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (HI2, 0x00)
        Name (HC2, 0x00)
        Name (TLD2, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP2)
            PDC2 = CAP2 /* \_PR_.CPU2._PDC.CAP2 */
            If ((TLD2 == 0x00))
            {
                If (((PDC2 & 0x0A) == 0x0A))
                {
                    If ((CFGD & 0x02))
                    {
                        OperationRegion (IST2, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (IST2, HI2) /* \_PR_.CPU2.HI2_ */
                    }

                    TLD2 = 0x01
                }
            }
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (HI3, 0x00)
        Name (HC3, 0x00)
        Name (TLD3, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP3)
            PDC3 = CAP3 /* \_PR_.CPU3._PDC.CAP3 */
            If ((TLD3 == 0x00))
            {
                If (((PDC3 & 0x0A) == 0x0A))
                {
                    If ((CFGD & 0x02))
                    {
                        OperationRegion (IST3, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                        Load (IST3, HI3) /* \_PR_.CPU3.HI3_ */
                    }

                    TLD3 = 0x01
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If ((CFGD & 0x4000))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000880, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000882, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((CFGD & 0x4000))
            {
                Return (NPSS) /* \_PR_.CPU0.NPSS */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x04)
        {
            Package (0x06)
            {
                0x00000960, 
                0x000157C0, 
                0x000000A0, 
                0x0000000A, 
                0x00000036, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00012CC8, 
                0x000000A0, 
                0x0000000A, 
                0x00000136, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000101D0, 
                0x000000A0, 
                0x0000000A, 
                0x00000236, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000DAC0, 
                0x000000A0, 
                0x0000000A, 
                0x00000336, 
                0x00000003
            }
        })
        Name (NPSS, Package (0x04)
        {
            Package (0x06)
            {
                0x00000960, 
                0x000157C0, 
                0x0000000A, 
                0x0000000A, 
                0x00000C25, 
                0x00000C25
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00012CC8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A23, 
                0x00000A23
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000101D0, 
                0x0000000A, 
                0x0000000A, 
                0x00000820, 
                0x00000820
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000DAC0, 
                0x0000000A, 
                0x0000000A, 
                0x0000061D, 
                0x0000061D
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu1Ist", 0x00003000)
{
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (0x00)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000880, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000882, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }
    }
}



