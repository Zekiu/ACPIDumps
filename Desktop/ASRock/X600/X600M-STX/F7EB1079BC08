
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000CDE  0x02  "AMD   "  "OEMACP  "  0x00000001  "INTL"   0x20220331
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x06  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 04)  SSDT  0x00000221  0x02  "ALASKA"  "CPUSSDT "  0x00000001  "AMI "   0x00000001
 05)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 06)  VFCT  0x00004284  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x33504F47
 07)  SSDT  0x00002345  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20220331
 08)  IVRS  0x000000C8  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 09)  DSDT  0x0007B9FF  0x02  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20220331
 10)  SSDT  0x00002AA6  0x02  "AMD   "  "CDFAAIG2"  0x00000001  "INTL"   0x20220331
 11)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 12)  SSDT  0x000006D4  0x02  "AMD   "  "CPMWLRC "  0x00000001  "INTL"   0x20220331
 13)  SSDT  0x00000500  0x02  "AMD   "  "MEMTOOL0"  0x00000002  "INTL"   0x20220331
 14)  SSDT  0x0000547E  0x02  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 15)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 16)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 17)  WPBT  0x00000036  0x01  "ALASKA"  "A M I   "  0x00000001  "MSFT"   0x00010013
 18)  SSDT  0x0000837C  0x02  "AMD   "  "Splinter"  0x00000002  "MSFT"   0x04000000
 19)  SSDT  0x00009A6C  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20220331
 20)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000005
 21)  SSDT  0x0000169E  0x02  "AMD   "  "CPMDFIG2"  0x00000001  "INTL"   0x20220331
 22)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 23)  FACS  0x00000040  0x02
 24)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 25)  SSDT  0x0000047C  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20220331

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000015E
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : EE
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 04
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 06
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 08
[04Fh 0079 001h]               Local Apic ID : 08
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 0A
[057h 0087 001h]               Local Apic ID : 0A
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 0C
[05Fh 0095 001h]               Local Apic ID : 0C
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 0E
[067h 0103 001h]               Local Apic ID : 0E
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 01
[06Fh 0111 001h]               Local Apic ID : 01
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 03
[077h 0119 001h]               Local Apic ID : 03
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 05
[07Fh 0127 001h]               Local Apic ID : 05
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 07
[087h 0135 001h]               Local Apic ID : 07
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 09
[08Fh 0143 001h]               Local Apic ID : 09
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0B
[097h 0151 001h]               Local Apic ID : 0B
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0D
[09Fh 0159 001h]               Local Apic ID : 0D
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 10
[0AFh 0175 001h]               Local Apic ID : 00
[0B0h 0176 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 11
[0B7h 0183 001h]               Local Apic ID : 00
[0B8h 0184 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 12
[0BFh 0191 001h]               Local Apic ID : 00
[0C0h 0192 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 13
[0C7h 0199 001h]               Local Apic ID : 00
[0C8h 0200 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 14
[0CFh 0207 001h]               Local Apic ID : 00
[0D0h 0208 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 15
[0D7h 0215 001h]               Local Apic ID : 00
[0D8h 0216 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 16
[0DFh 0223 001h]               Local Apic ID : 00
[0E0h 0224 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 17
[0E7h 0231 001h]               Local Apic ID : 00
[0E8h 0232 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 18
[0EFh 0239 001h]               Local Apic ID : 00
[0F0h 0240 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 19
[0F7h 0247 001h]               Local Apic ID : 00
[0F8h 0248 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 1A
[0FFh 0255 001h]               Local Apic ID : 00
[100h 0256 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 1B
[107h 0263 001h]               Local Apic ID : 00
[108h 0264 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 1C
[10Fh 0271 001h]               Local Apic ID : 00
[110h 0272 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 1D
[117h 0279 001h]               Local Apic ID : 00
[118h 0280 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 1E
[11Fh 0287 001h]               Local Apic ID : 00
[120h 0288 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 1F
[127h 0295 001h]               Local Apic ID : 00
[128h 0296 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : FF
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 01 [I/O APIC]
[133h 0307 001h]                      Length : 0C
[134h 0308 001h]                 I/O Apic ID : 20
[135h 0309 001h]                    Reserved : 00
[136h 0310 004h]                     Address : FEC00000
[13Ah 0314 004h]                   Interrupt : 00000000

[13Eh 0318 001h]               Subtable Type : 01 [I/O APIC]
[13Fh 0319 001h]                      Length : 0C
[140h 0320 001h]                 I/O Apic ID : 21
[141h 0321 001h]                    Reserved : 00
[142h 0322 004h]                     Address : FEC01000
[146h 0326 004h]                   Interrupt : 00000018

[14Ah 0330 001h]               Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331 001h]                      Length : 0A
[14Ch 0332 001h]                         Bus : 00
[14Dh 0333 001h]                      Source : 00
[14Eh 0334 004h]                   Interrupt : 00000002
[152h 0338 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340 001h]               Subtable Type : 02 [Interrupt Source Override]
[155h 0341 001h]                      Length : 0A
[156h 0342 001h]                         Bus : 00
[157h 0343 001h]                      Source : 09
[158h 0344 004h]                   Interrupt : 00000009
[15Ch 0348 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 06 EE 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 01 01  // ................
    0070: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0080: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0090: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : ED
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000803FBC18
[030h 0048 004h]               Image OffsetX : 000001FF
[034h 0052 004h]               Image OffsetY : 00000125

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 ED 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 01 00 01 00 18 BC 3F 80 00 00 00 00  // ..........?.....
    0030: FF 01 00 00 25 01 00 00                          // ....%...


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.FLG0, IntObj)
    External (_SB_.PCI0.GP11, DeviceObj)
    External (_SB_.PCI0.GP11._ADR, IntObj)
    External (_SB_.PCI0.GP12, DeviceObj)
    External (_SB_.PCI0.GP12._ADR, IntObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.HDAU, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP18, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GP19._ADR, IntObj)
    External (_SB_.PCI0.GP19.NHI0, DeviceObj)
    External (_SB_.PCI0.GP19.NHI1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC3, DeviceObj)
    External (_SB_.PCI0.GP19.XHC4, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP1._ADR, IntObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP5._ADR, IntObj)
    External (_SB_.PCI0.GPP5.P_OF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.P_ON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.PSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.SDSW, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.GPP5.SINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.SREG, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP5.SSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP18.LN00.DISM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.P_OF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.P_ON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.PSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.SDSW, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.SINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.SREG, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.SSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.P_OF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.P_ON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.PSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.SDSW, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.SINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.SREG, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP5.UP00.DP40.UP00.SSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.P_OF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.P_ON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.PSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.SDSW, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.GPP5.UP00.SINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP5.UP00.SREG, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP5.UP00.SSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA, DeviceObj)
    External (_SB_.PCI0.M641, IntObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.U4PC, IntObj)
    External (_SB_.UBTC, DeviceObj)
    External (AFN7, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M014, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M045, MethodObj)    // 0 Arguments
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M04C, MethodObj)    // 3 Arguments
    External (M04D, MethodObj)    // 3 Arguments
    External (M04E, MethodObj)    // 3 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M31D, MethodObj)    // 0 Arguments
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M401, MethodObj)    // 3 Arguments
    External (M402, MethodObj)    // 3 Arguments
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M409, MethodObj)    // 3 Arguments
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M471, MethodObj)    // 3 Arguments
    External (M472, MethodObj)    // 4 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M4F1, MethodObj)    // 1 Arguments
    External (M600, MethodObj)    // 2 Arguments
    External (M601, MethodObj)    // 6 Arguments
    External (M602, MethodObj)    // 3 Arguments
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M644, MethodObj)    // 3 Arguments
    External (M646, MethodObj)    // 2 Arguments
    External (M648, MethodObj)    // 3 Arguments
    External (M652, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0A10)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A20)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (KBFG, Zero)
    Name (MSFG, Zero)
    Name (IOES, Zero)
    Name (PEBL, 0x10000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0x8B654000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0x8B658000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xF7210510)
    Name (FTPM, 0xF7210510)
    Name (PPIM, 0x8F667E98)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (HSPB, 0xFFFFFFFF)
    Name (HSPS, 0xFFFFFFFF)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x05)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKE, 
                Zero
            }
        })
        Name (AR00, Package (0x05)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1C
            }
        })
        Name (PG38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG3B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG3B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xA0000000)
            Name (MBL, 0x57000000)
            Name (MAB, 0x0000000C60000000)
            Name (MAL, 0x000000F0A0000000)
            Name (MAM, 0x000000FCFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000400000000)
                    Name (UMAB, 0x0000000860000000)
                    Name (UMAM, 0x0000000C5FFFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG06) /* \_SB_.AG06 */
                    }

                    Return (PG06) /* \_SB_.PG06 */
                }

                Device (D007)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG08) /* \_SB_.AG08 */
                    }

                    Return (PG08) /* \_SB_.PG08 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0A) /* \_SB_.AG0A */
                    }

                    Return (PG0A) /* \_SB_.PG0A */
                }

                Device (D00B)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00C)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0F) /* \_SB_.AG0F */
                    }

                    Return (PG0F) /* \_SB_.PG0F */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG11) /* \_SB_.AG11 */
                    }

                    Return (PG11) /* \_SB_.PG11 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00020006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D017)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GP11)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG18) /* \_SB_.AG18 */
                    }

                    Return (PG18) /* \_SB_.PG18 */
                }

                Device (D019)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D01A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GP12)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D01D)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1E) /* \_SB_.AG1E */
                    }

                    Return (PG1E) /* \_SB_.PG1E */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG25) /* \_SB_.AG25 */
                    }

                    Return (PG25) /* \_SB_.PG25 */
                }

                Device (D026)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D02B)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x1B), 
                        CR1B,   8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        Offset (0x22), 
                        SCF2,   8, 
                        Offset (0x23), 
                        SCF3,   8, 
                        Offset (0x24), 
                        SCF4,   8, 
                        Offset (0x25), 
                        SCF5,   8, 
                        Offset (0x26), 
                        SCF6,   8, 
                        Offset (0x27), 
                        SCF7,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8, 
                        OPTA,   8, 
                        OPTB,   8, 
                        OPTC,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQNoFlags (_Y1B)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1C)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y24)
                        IRQ (Level, ActiveLow, Shared, _Y22)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y23)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y22._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y22._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If (KBFG)
                            {
                                OPTB |= 0x02
                                RGE4 |= 0x40
                            }
                            Else
                            {
                                OPTB &= 0xFD
                                RGE4 &= 0xBF
                            }

                            If (MSFG)
                            {
                                OPTB |= One
                                RGE4 = (RGE8 | 0x80)
                            }
                            Else
                            {
                                OPTB &= 0xFE
                                RGE8 = (RGE4 & 0x7F)
                            }

                            OPT9 = 0xFF
                            OPTA = 0xFF
                            CR1B |= 0x04
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        PMFG = OPT9 /* \_SB_.PCI0.SBRG.SIO1.OPT9 */
                        OPT9 &= 0xFF
                        CR1B &= 0xFB
                        OPTB &= Zero
                        OPTC &= Zero
                        OPTC |= 0x04
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PMED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0A)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG38) /* \_SB_.AG38 */
                    }

                    Return (PG38) /* \_SB_.PG38 */
                }

                Device (D027)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }

                Device (XHC3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (XHC4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (NHI0)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (NHI1)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG39) /* \_SB_.AG39 */
                    }

                    Return (PG39) /* \_SB_.PG39 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3A) /* \_SB_.AG3A */
                    }

                    Return (PG3A) /* \_SB_.PG3A */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3B) /* \_SB_.AG3B */
                    }

                    Return (PG3B) /* \_SB_.PG3B */
                }

                Device (D00D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y25)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y26)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y27)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y28)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y29,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                _Y2A)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y25._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y25._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y26._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y26._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y27._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y27._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y28._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y28._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y29._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        CreateDWordField (CRSI, \_SB.TPM._Y2A._BAS, HSPF)  // _BAS: Base Address
                        CreateDWordField (CRSI, \_SB.TPM._Y2A._LEN, HSPL)  // _LEN: Length
                        HSPF = HSPB /* \HSPB */
                        HSPL = HSPS /* \HSPS */
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y26._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02)){}
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y29._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y29._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            Offset (0x44), 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    OperationRegion (CPVS, SystemMemory, 0x8F01C000, 0x0100)
    Field (CPVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        G000,   8, 
        Offset (0x01), 
        G001,   8, 
        Offset (0x02), 
        G002,   8, 
        Offset (0x03), 
        G003,   8, 
        Offset (0x04), 
        G004,   32, 
        Offset (0x08), 
        G005,   16, 
        Offset (0x0A), 
        G006,   16, 
        Offset (0x0C), 
        G007,   32, 
        Offset (0x10), 
        G008,   32, 
        Offset (0x14), 
        G009,   32, 
        Offset (0x18), 
        G00A,   32, 
        Offset (0x1C), 
        G00B,   64, 
        Offset (0x24), 
        G00C,   64, 
        Offset (0x2C), 
        G00D,   64, 
        Offset (0x34), 
        G00E,   64, 
        Offset (0x3C), 
        G00F,   16, 
        Offset (0x3E), 
        G010,   16, 
        Offset (0x40), 
        G011,   8, 
        Offset (0x41), 
        G012,   32, 
        Offset (0x45), 
        G013,   32, 
        Offset (0x49), 
        G014,   32, 
        Offset (0x4D), 
        G015,   32, 
        Offset (0x51), 
        G016,   32, 
        Offset (0x55), 
        G017,   8, 
        Offset (0x56), 
        G018,   32, 
        Offset (0x5A), 
        G019,   32, 
        Offset (0x5E), 
        G01A,   32, 
        Offset (0x62), 
        G01B,   32, 
        Offset (0x66), 
        G01C,   32, 
        Offset (0x6A), 
        G01D,   8, 
        Offset (0x6B), 
        G01E,   8, 
        Offset (0x6C), 
        G01F,   8, 
        Offset (0x6D), 
        G020,   8, 
        Offset (0x6E), 
        G021,   8, 
        Offset (0x6F), 
        G022,   8, 
        Offset (0x70), 
        G023,   8, 
        Offset (0x71), 
        G024,   8, 
        Offset (0x72), 
        G025,   8, 
        Offset (0x73), 
        G026,   8, 
        Offset (0x74), 
        G027,   8, 
        Offset (0x75), 
        G028,   32, 
        Offset (0x79), 
        G029,   32, 
        Offset (0x7D), 
        G02A,   32, 
        Offset (0x81), 
        G02B,   32, 
        Offset (0x85), 
        G02C,   8, 
        Offset (0x86), 
        G02D,   8
    }

    Name (PWVA, 0xFFFFFFFF)
    Method (PWGS, 1, NotSerialized)
    {
        Local0 = M013 (G015, Zero, G016, One)
        If ((Local0 == One))
        {
            PWVA = Zero
            M014 (G015, Zero, G016, One, Zero)
        }

        Local0 = Arg0
        Local1 = (One << Local0)
        Local2 = (Local1 & PWVA) /* \PWVA */
        If ((Local2 == Zero))
        {
            PWVA |= Local1 /* \PWVA */
            M460 ("  OEM-ASL PWGS 0x%X don\'t Unlock from S0I3, PWVA = 0x%X\n", Arg0, PWVA, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        Return (One)
    }

    Method (UPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-UPWD Unlock Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = 0xD1
        M232 (Local0, Zero, Zero)
        Local1 = 0xD8
        M232 (Local1, Zero, Zero)
    }

    Method (SPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-SPWD Save Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    If ((G002 != One))
    {
        Scope (\_SB.PCI0.GPP0)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }

        Scope (\_SB.PCI0.GPP2)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }
    }

    If (((G000 == One) && ((G002 >= 0x04) && (
        G002 <= 0x07)))){}
    If (((G000 == One) && (G002 == 0x07))){}
    If (((G002 != 0x03) && (G000 != Zero))){}
    If ((G002 != 0x03))
    {
        Scope (\_SB.PCI0.GPP5)
        {
            Name (XHGP, 0xFF)
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* External reference */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* External reference */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GPP5.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GPP5.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP5.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP5.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    If ((G002 < 0x03))
    {
        Scope (\_SB.PCI0.GPP5)
        {
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
            }

            Method (SREG, 2, Serialized)
            {
                If (CondRefOf (^OREG))
                {
                    ^OREG (Arg0, Arg1)
                }
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
                If (CondRefOf (^O_ON))
                {
                    ^O_ON ()
                }
            }

            Method (P_OF, 0, Serialized)
            {
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }

    If (((G002 != 0x03) && (G000 == One)))
    {
        Scope (\_SB.PCI0.GPP5)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (GPB1, 0x5A5A5A5A)
                Name (IOR0, 0x5A5A5A5A)
                Name (IOR1, 0x5A5A5A5A)
                Name (IOR2, 0x5A5A5A5A)
                Name (IOR3, 0x5A5A5A5A)
                Method (OINI, 0, Serialized)
                {
                    If (((GPB1 == 0x5A5A5A5A) && (DADR != 0xEEEEEEEE)))
                    {
                        GPB1 = M04B (DADR, 0x40)
                        IOR0 = M04B (GPB1, Zero)
                        IOR1 = M04B (GPB1, 0x04)
                        IOR2 = M04B (GPB1, 0x08)
                        IOR3 = M04B (GPB1, 0x0C)
                        M460 ("  OEM-ASL-First Prom21 USP _INI  Save GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }
                }

                Method (OREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        M04E (DADR, 0x40, GPB1)
                        M014 (DADR, 0x48, Zero, One, One)
                        M04E (GPB1, Zero, IOR0)
                        M04E (GPB1, 0x04, IOR1)
                        M04E (GPB1, 0x08, IOR2)
                        M04E (GPB1, 0x0C, IOR3)
                        M460 ("  OEM-ASL-First Prom21 USP _REG (2, 1)  Restore GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP08.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP08.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP08.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP08.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP08.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP08.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP08.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP08.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP08.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP08.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP08.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP08.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP10.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP10.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP10.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP10.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP10.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP10.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP10.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP10.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP10.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (AD3C, 0, Serialized)
                        {
                            M460 ("CPM-ASL-PT21-WLAN-AD3C", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (One)
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("f634f534-6147-11ec-90d6-0242ac120003") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0x05, 0x20                                       // . 
                                        })
                                    }
                                    Case (0x02)
                                    {
                                        M460 ("CPM-ASL-WLAN-D3COLD-BITFLAG", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Return (0x08)
                                    }
                                    Case (0x0D)
                                    {
                                        M460 ("CPM-ASL-WLAN-PCIWAR-BITFLAG", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Return (One)
                                    }

                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP10.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP10.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP10.WN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP18.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP18.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP18.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP18.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP18.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP18.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP18.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP18.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP18.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Method (DISM, 0, Serialized)
                        {
                            Local1 = One
                            If (CondRefOf (\PWGS))
                            {
                                Local1 = \PWGS (0x07)
                            }

                            If ((Local1 == Zero))
                            {
                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (One)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (One)
                                }

                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (One)
                                }

                                Local1 = Zero
                                Local2 = 0x2775
                                Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP18.M641 */
                                Local4 += 0x12
                                While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                                {
                                    Local1 = M04A (^^DADR, Local4)
                                    Local2 = (Local2 - One)
                                    Stall (0x63)
                                }

                                ^PAUF (One)
                                Local1 = M04A (^DADR, 0x10)
                                Local1 &= 0xFFF0
                                OperationRegion (VAIO, SystemIO, Local1, 0x0100)
                                Field (VAIO, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x64), 
                                    XX64,   32, 
                                    XX68,   32
                                }

                                M460 ("  OEM-ASL-First Prom21 LN00 (0x%X) DISM  BAR0 Address (0x%X)\n", ^DADR, Local1, Zero, Zero, Zero, Zero)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8001F000
                                Sleep (0x05)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8002F000
                                Sleep (0x05)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8003F000
                                Sleep (0x05)
                                ^PAUF (Zero)
                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (Zero)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (Zero)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (Zero)
                                }
                            }
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP18.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP18.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP18.LN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP28.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP28.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP28.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP28.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP28.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP28.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP28.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP28.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP28.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP28.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP28.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP28.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP30.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP30.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP30.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP30.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP30.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP30.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP30.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP30.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP30.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP30.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP30.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP30.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP38.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP38.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP38.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP38.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP38.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP38.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP38.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP38.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP38.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP38.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP38.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP38.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP48.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP48.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP48.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP48.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP48.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP48.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP48.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP48.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP48.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP48.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP48.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP48.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP50.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP50.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP50.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP50.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP50.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP50.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP50.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP50.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP50.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP50.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP50.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP50.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP58.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP58.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP58.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP58.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP58.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP58.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP58.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP58.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP58.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP58.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP58.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP58.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP60.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP60.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP60.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP60.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP60.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP60.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP60.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP60.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP60.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP60.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP60.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP60.XH00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP68.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP68.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP68.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP68.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP68.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP68.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP68.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP68.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP68.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0xFF)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP68.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP68.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP68.SA00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && (G000 != Zero)))
    {
        Scope (\_SB.PCI0.GPP5)
        {
            Method (OREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Name (DVRS, 0xEE)
            Name (SBUF, Buffer (0x0100){})
            Name (PBUF, Buffer (0x0100){})
            Method (SABU, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    EP10 = M04B (^DADR, 0x10)
                    EP14 = M04B (^DADR, 0x14)
                    EP18 = M04B (^DADR, 0x18)
                    EP1C = M04B (^DADR, 0x1C)
                    EP20 = M04B (^DADR, 0x20)
                    EP24 = M04B (^DADR, 0x24)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        EPPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        EPDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        EPLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        EPD2 = M04B (^DADR, Local0)
                    }

                    EPCD = M04B (^DADR, 0x04)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    BR10 = M04B (^DADR, 0x10)
                    BR14 = M04B (^DADR, 0x14)
                    BR18 = M049 (^DADR, 0x18)
                    BR19 = M049 (^DADR, 0x19)
                    BR1A = M049 (^DADR, 0x1A)
                    BR1C = M049 (^DADR, 0x1C)
                    BR1D = M049 (^DADR, 0x1D)
                    BR20 = M04A (^DADR, 0x20)
                    BR22 = M04A (^DADR, 0x22)
                    BR24 = M04A (^DADR, 0x24)
                    BR26 = M04A (^DADR, 0x26)
                    BR28 = M04B (^DADR, 0x28)
                    BR2C = M04B (^DADR, 0x2C)
                    BR30 = M04A (^DADR, 0x30)
                    BR32 = M04A (^DADR, 0x32)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        BRPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        BRDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        BRLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        BRD2 = M04B (^DADR, Local0)
                    }

                    BRCD = M04B (^DADR, 0x04)
                }

                If ((Arg0 == Zero))
                {
                    SBUF = TEMP /* \_SB_.PCI0.GPP5.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    PBUF = TEMP /* \_SB_.PCI0.GPP5.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PAUF, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    TEMP = SBUF /* \_SB_.PCI0.GPP5.SBUF */
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    ^SABU (Zero)
                    TEMP = PBUF /* \_SB_.PCI0.GPP5.PBUF */
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    Local0 = M04B (^DADR, 0x04)
                    Local0 &= 0xF8
                    M04C (^DADR, 0x04, Local0)
                    M04E (^DADR, 0x10, EP10)
                    M04E (^DADR, 0x14, EP14)
                    M04E (^DADR, 0x18, EP18)
                    M04E (^DADR, 0x1C, EP1C)
                    M04E (^DADR, 0x20, EP20)
                    M04E (^DADR, 0x24, EP24)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.PAUF.EPPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.PAUF.EPPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = EPDC /* \_SB_.PCI0.GPP5.PAUF.EPDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.PAUF.EPLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.PAUF.EPLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = EPD2 /* \_SB_.PCI0.GPP5.PAUF.EPD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.PAUF.EPCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.PAUF.EPCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    M04E (^DADR, 0x10, BR10)
                    M04E (^DADR, 0x14, BR14)
                    M04C (^DADR, 0x18, BR18)
                    M04C (^DADR, 0x19, BR19)
                    M04C (^DADR, 0x1A, BR1A)
                    M04C (^DADR, 0x1C, BR1C)
                    M04C (^DADR, 0x1D, BR1D)
                    M04D (^DADR, 0x20, BR20)
                    M04D (^DADR, 0x22, BR22)
                    M04D (^DADR, 0x24, BR24)
                    M04D (^DADR, 0x26, BR26)
                    M04E (^DADR, 0x28, BR28)
                    M04E (^DADR, 0x2C, BR2C)
                    M04D (^DADR, 0x30, BR30)
                    M04D (^DADR, 0x32, BR32)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.PAUF.BRPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.PAUF.BRPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = BRDC /* \_SB_.PCI0.GPP5.PAUF.BRDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.PAUF.BRLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.PAUF.BRLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = BRD2 /* \_SB_.PCI0.GPP5.PAUF.BRD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.PAUF.BRCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.PAUF.BRCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }

                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PREG, 2, Serialized)
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If ((DVRS == 0xEE))
                        {
                            ^SABU (One)
                            DVRS = One
                        }
                    }
                }
            }

            Method (O_ON, 0, Serialized)
            {
                If ((G02C == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP5.UP00.DP18.LN00.DISM))
                    {
                        \_SB.PCI0.GPP5.UP00.DP18.LN00.DISM ()
                    }

                    If (((G003 != Zero) && CondRefOf (\_SB.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.DISM)))
                    {
                        \_SB.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.DISM ()
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (G004 == 
        0x43FA1022))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP60.XH00)
        {
            Device (XHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, 0x0A))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0101, One, 0x25, Zero))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, 0x0A))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0101, One, 0x25, Zero))
                    }
                }

                Device (POT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, 0x0A))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0101, One, 0x25, Zero))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0107, One, 0x25, Zero))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0108, One, 0x25, Zero))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0102, One, 0x25, Zero))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0109, One, 0x25, Zero))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010A, One, 0x25, Zero))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010B, One, 0x25, Zero))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010C, One, 0x25, Zero))
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G004 != 0x43FA1022))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP60.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, 0x0A))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0101, One, 0x25, Zero))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, 0x0A))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0101, One, 0x25, Zero))
                    }
                }

                Device (POT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0105, One, 0x25, Zero))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0105, One, 0x25, Zero))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0106, One, 0x25, Zero))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0106, One, 0x25, Zero))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0107, One, 0x25, Zero))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, Zero, 0x0108, One, 0x25, Zero))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0102, One, 0x25, Zero))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0109, One, 0x25, Zero))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010A, One, 0x25, Zero))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010B, One, 0x25, Zero))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010C, One, 0x25, Zero))
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && (G000 == 0x02)))
    {
        Scope (\_SB.PCI0.GPP5)
        {
            Device (XH00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.XH00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.XH00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.XH00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.XH00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.XH00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.XH00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.XH00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.XH00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.XH00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.XH00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.XH00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.XH00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.XH00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.XH00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.XH00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.XH00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.XH00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.XH00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.XH00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.XH00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.XH00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.XH00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.XH00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.XH00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }

            Device (EP01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            One
                        }
                    }
                })
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.EP01.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.EP01.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.EP01.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.EP01.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.EP01.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.EP01.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.EP01.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.EP01.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.EP01.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.EP01.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.EP01.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.EP01.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.EP01.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.EP01.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.EP01.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.EP01.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.EP01.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.EP01.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.EP01.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.EP01.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.EP01.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.EP01.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.EP01.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.EP01.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }

            Device (UP02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (GPB1, 0x5A5A5A5A)
                Name (IOR0, 0x5A5A5A5A)
                Name (IOR1, 0x5A5A5A5A)
                Name (IOR2, 0x5A5A5A5A)
                Name (IOR3, 0x5A5A5A5A)
                Method (SINI, 0, Serialized)
                {
                    If (((GPB1 == 0x5A5A5A5A) && (DADR != 0xEEEEEEEE)))
                    {
                        GPB1 = M04B (DADR, 0x40)
                        IOR0 = M04B (GPB1, Zero)
                        IOR1 = M04B (GPB1, 0x04)
                        IOR2 = M04B (GPB1, 0x08)
                        IOR3 = M04B (GPB1, 0x0C)
                        M460 ("  OEM-ASL-Prom19 USP _INI  Save GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }
                }

                Method (SREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        M04E (DADR, 0x40, GPB1)
                        M014 (DADR, 0x48, Zero, One, One)
                        M04E (GPB1, Zero, IOR0)
                        M04E (GPB1, 0x04, IOR1)
                        M04E (GPB1, 0x08, IOR2)
                        M04E (GPB1, 0x0C, IOR3)
                        M460 ("  OEM-ASL-Prom19 USP _REG (2, 1)  Restore GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }

                    PREG (Arg0, Arg1)
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP00.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP00.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP00.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP00.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP00.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP00.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP00.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP40.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP40.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP40.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP40.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP40.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP40.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP40.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP40.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP40.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (P_ON, 0, Serialized)
                        {
                            Local1 = One
                            If (CondRefOf (\PWGS))
                            {
                                Local1 = \PWGS (0x05)
                            }

                            If ((Local1 == Zero))
                            {
                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (One)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (One)
                                }

                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (One)
                                }

                                Local1 = Zero
                                Local2 = 0x2775
                                Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.DP40.M641 */
                                Local4 += 0x12
                                While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                                {
                                    Local1 = M04A (^^DADR, Local4)
                                    Local2 = (Local2 - One)
                                    Stall (0x63)
                                }

                                ^PAUF (One)
                                If (CondRefOf (\UPWD))
                                {
                                    \UPWD ()
                                }

                                ^PAUF (Zero)
                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (Zero)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (Zero)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (Zero)
                                }
                            }
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.DP40.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.DP40.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP40.NV00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP80)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP80.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP80.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP80.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP80.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP80.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP80.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP80.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP80.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP80.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.DP80.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.DP80.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP80.WN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (AD3C, 0, Serialized)
                        {
                            M460 ("CPM-ASL-PT19-WLAN-AD3C", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (One)
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("f634f534-6147-11ec-90d6-0242ac120003") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0x05, 0x00                                       // ..
                                        })
                                    }
                                    Case (0x02)
                                    {
                                        Return (0x08)
                                    }

                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    }
                }

                Device (DP90)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP90.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP90.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP90.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP90.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP90.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP90.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP90.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP90.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP90.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x02)
                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP02.DP90.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP02.DP90.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP02.DP90.LN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GPP5.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x25, Zero))
                    }
                }

                Device (POT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0104, One, 0x25, Zero))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0105, One, 0x25, Zero))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0105, One, 0x25, Zero))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0106, One, 0x25, Zero))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0106, One, 0x25, Zero))
                    }
                }

                Device (PO9)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010A, One, 0x25, Zero))
                    }
                }

                Device (PO10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x010B, One, 0x25, Zero))
                    }
                }

                Device (PO11)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0108, One, 0x25, Zero))
                    }
                }

                Device (PO12)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0102, One, 0x25, Zero))
                    }
                }

                Device (PO13)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0107, One, 0x25, Zero))
                    }
                }

                Device (PO14)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M600 (One, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0109, One, 0x25, Zero))
                    }
                }
            }
        }
    }

    If (((G002 < 0x03) && (G000 == One)))
    {
        Scope (\_SB.PCI0.GPP5.UP00)
        {
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
                OINI ()
            }

            Method (SREG, 2, Serialized)
            {
                OREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G002 != 0x04))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Method (OREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Name (DVRS, 0xEE)
            Name (SBUF, Buffer (0x0100){})
            Name (PBUF, Buffer (0x0100){})
            Method (SABU, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    EP10 = M04B (^DADR, 0x10)
                    EP14 = M04B (^DADR, 0x14)
                    EP18 = M04B (^DADR, 0x18)
                    EP1C = M04B (^DADR, 0x1C)
                    EP20 = M04B (^DADR, 0x20)
                    EP24 = M04B (^DADR, 0x24)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        EPPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        EPDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        EPLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        EPD2 = M04B (^DADR, Local0)
                    }

                    EPCD = M04B (^DADR, 0x04)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    BR10 = M04B (^DADR, 0x10)
                    BR14 = M04B (^DADR, 0x14)
                    BR18 = M049 (^DADR, 0x18)
                    BR19 = M049 (^DADR, 0x19)
                    BR1A = M049 (^DADR, 0x1A)
                    BR1C = M049 (^DADR, 0x1C)
                    BR1D = M049 (^DADR, 0x1D)
                    BR20 = M04A (^DADR, 0x20)
                    BR22 = M04A (^DADR, 0x22)
                    BR24 = M04A (^DADR, 0x24)
                    BR26 = M04A (^DADR, 0x26)
                    BR28 = M04B (^DADR, 0x28)
                    BR2C = M04B (^DADR, 0x2C)
                    BR30 = M04A (^DADR, 0x30)
                    BR32 = M04A (^DADR, 0x32)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        BRPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        BRDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        BRLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        BRD2 = M04B (^DADR, Local0)
                    }

                    BRCD = M04B (^DADR, 0x04)
                }

                If ((Arg0 == Zero))
                {
                    SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PAUF, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.SBUF */
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    ^SABU (Zero)
                    TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.PBUF */
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    Local0 = M04B (^DADR, 0x04)
                    Local0 &= 0xF8
                    M04C (^DADR, 0x04, Local0)
                    M04E (^DADR, 0x10, EP10)
                    M04E (^DADR, 0x14, EP14)
                    M04E (^DADR, 0x18, EP18)
                    M04E (^DADR, 0x1C, EP1C)
                    M04E (^DADR, 0x20, EP20)
                    M04E (^DADR, 0x24, EP24)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.EPCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    M04E (^DADR, 0x10, BR10)
                    M04E (^DADR, 0x14, BR14)
                    M04C (^DADR, 0x18, BR18)
                    M04C (^DADR, 0x19, BR19)
                    M04C (^DADR, 0x1A, BR1A)
                    M04C (^DADR, 0x1C, BR1C)
                    M04C (^DADR, 0x1D, BR1D)
                    M04D (^DADR, 0x20, BR20)
                    M04D (^DADR, 0x22, BR22)
                    M04D (^DADR, 0x24, BR24)
                    M04D (^DADR, 0x26, BR26)
                    M04E (^DADR, 0x28, BR28)
                    M04E (^DADR, 0x2C, BR2C)
                    M04D (^DADR, 0x30, BR30)
                    M04D (^DADR, 0x32, BR32)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.PAUF.BRCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }

                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PREG, 2, Serialized)
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If ((DVRS == 0xEE))
                        {
                            ^SABU (One)
                            DVRS = One
                        }
                    }
                }
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        (G002 != 0x04) && (G002 != 0x07)))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40)
        {
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
            }

            Method (SREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G002 != 0x05))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP20)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
            }

            Method (SREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }

            Name (DVRS, 0xEE)
            Name (SBUF, Buffer (0x0100){})
            Name (PBUF, Buffer (0x0100){})
            Method (SABU, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    EP10 = M04B (^DADR, 0x10)
                    EP14 = M04B (^DADR, 0x14)
                    EP18 = M04B (^DADR, 0x18)
                    EP1C = M04B (^DADR, 0x1C)
                    EP20 = M04B (^DADR, 0x20)
                    EP24 = M04B (^DADR, 0x24)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        EPPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        EPDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        EPLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        EPD2 = M04B (^DADR, Local0)
                    }

                    EPCD = M04B (^DADR, 0x04)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    BR10 = M04B (^DADR, 0x10)
                    BR14 = M04B (^DADR, 0x14)
                    BR18 = M049 (^DADR, 0x18)
                    BR19 = M049 (^DADR, 0x19)
                    BR1A = M049 (^DADR, 0x1A)
                    BR1C = M049 (^DADR, 0x1C)
                    BR1D = M049 (^DADR, 0x1D)
                    BR20 = M04A (^DADR, 0x20)
                    BR22 = M04A (^DADR, 0x22)
                    BR24 = M04A (^DADR, 0x24)
                    BR26 = M04A (^DADR, 0x26)
                    BR28 = M04B (^DADR, 0x28)
                    BR2C = M04B (^DADR, 0x2C)
                    BR30 = M04A (^DADR, 0x30)
                    BR32 = M04A (^DADR, 0x32)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        BRPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        BRDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        BRLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        BRD2 = M04B (^DADR, Local0)
                    }

                    BRCD = M04B (^DADR, 0x04)
                }

                If ((Arg0 == Zero))
                {
                    SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP20.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP20.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PAUF, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP20.SBUF */
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    ^SABU (Zero)
                    TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP20.PBUF */
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    Local0 = M04B (^DADR, 0x04)
                    Local0 &= 0xF8
                    M04C (^DADR, 0x04, Local0)
                    M04E (^DADR, 0x10, EP10)
                    M04E (^DADR, 0x14, EP14)
                    M04E (^DADR, 0x18, EP18)
                    M04E (^DADR, 0x1C, EP1C)
                    M04E (^DADR, 0x20, EP20)
                    M04E (^DADR, 0x24, EP24)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.EPCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    M04E (^DADR, 0x10, BR10)
                    M04E (^DADR, 0x14, BR14)
                    M04C (^DADR, 0x18, BR18)
                    M04C (^DADR, 0x19, BR19)
                    M04C (^DADR, 0x1A, BR1A)
                    M04C (^DADR, 0x1C, BR1C)
                    M04C (^DADR, 0x1D, BR1D)
                    M04D (^DADR, 0x20, BR20)
                    M04D (^DADR, 0x22, BR22)
                    M04D (^DADR, 0x24, BR24)
                    M04D (^DADR, 0x26, BR26)
                    M04E (^DADR, 0x28, BR28)
                    M04E (^DADR, 0x2C, BR2C)
                    M04D (^DADR, 0x30, BR30)
                    M04D (^DADR, 0x32, BR32)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP20.PAUF.BRCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }

                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PREG, 2, Serialized)
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If ((DVRS == 0xEE))
                        {
                            ^SABU (One)
                            DVRS = One
                        }
                    }
                }
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP20.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP20.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP20.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP20.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (NV00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            One
                        }
                    }
                })
                Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (SSTA, 0, Serialized)
                {
                }

                Method (SINI, 0, Serialized)
                {
                }

                Method (SREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                }

                Method (SDSW, 3, Serialized)
                {
                }

                Method (PPS0, 0, Serialized)
                {
                }

                Method (PPS3, 0, Serialized)
                {
                }

                Method (PSTA, 0, Serialized)
                {
                }

                Method (P_ON, 0, Serialized)
                {
                    Local1 = One
                    If (CondRefOf (\PWGS))
                    {
                        Local1 = \PWGS (0x02)
                    }

                    If ((Local1 == Zero))
                    {
                        If ((^^^^PCSA == Zero))
                        {
                            ^^^^PAUF (One)
                        }

                        If ((^^^PCSA == Zero))
                        {
                            ^^^PAUF (One)
                        }

                        If ((^^PCSA == Zero))
                        {
                            ^^PAUF (One)
                        }

                        Local1 = Zero
                        Local2 = 0x2775
                        Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP20.M641 */
                        Local4 += 0x12
                        While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                        {
                            Local1 = M04A (^^DADR, Local4)
                            Local2 = (Local2 - One)
                            Stall (0x63)
                        }

                        ^PAUF (One)
                        If (CondRefOf (\UPWD))
                        {
                            \UPWD ()
                        }

                        ^PAUF (Zero)
                        If ((^^PCSA == Zero))
                        {
                            ^^PAUF (Zero)
                        }

                        If ((^^^PCSA == Zero))
                        {
                            ^^^PAUF (Zero)
                        }

                        If ((^^^^PCSA == Zero))
                        {
                            ^^^^PAUF (Zero)
                        }
                    }
                }

                Method (P_OF, 0, Serialized)
                {
                    If (CondRefOf (\SPWD))
                    {
                        \SPWD ()
                    }
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP20.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP20.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP20.NV00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G002 != 0x06))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP00)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
            }

            Method (SREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }

            Name (DVRS, 0xEE)
            Name (SBUF, Buffer (0x0100){})
            Name (PBUF, Buffer (0x0100){})
            Method (SABU, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    EP10 = M04B (^DADR, 0x10)
                    EP14 = M04B (^DADR, 0x14)
                    EP18 = M04B (^DADR, 0x18)
                    EP1C = M04B (^DADR, 0x1C)
                    EP20 = M04B (^DADR, 0x20)
                    EP24 = M04B (^DADR, 0x24)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        EPPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        EPDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        EPLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        EPD2 = M04B (^DADR, Local0)
                    }

                    EPCD = M04B (^DADR, 0x04)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    BR10 = M04B (^DADR, 0x10)
                    BR14 = M04B (^DADR, 0x14)
                    BR18 = M049 (^DADR, 0x18)
                    BR19 = M049 (^DADR, 0x19)
                    BR1A = M049 (^DADR, 0x1A)
                    BR1C = M049 (^DADR, 0x1C)
                    BR1D = M049 (^DADR, 0x1D)
                    BR20 = M04A (^DADR, 0x20)
                    BR22 = M04A (^DADR, 0x22)
                    BR24 = M04A (^DADR, 0x24)
                    BR26 = M04A (^DADR, 0x26)
                    BR28 = M04B (^DADR, 0x28)
                    BR2C = M04B (^DADR, 0x2C)
                    BR30 = M04A (^DADR, 0x30)
                    BR32 = M04A (^DADR, 0x32)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        BRPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        BRDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        BRLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        BRD2 = M04B (^DADR, Local0)
                    }

                    BRCD = M04B (^DADR, 0x04)
                }

                If ((Arg0 == Zero))
                {
                    SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP00.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP00.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PAUF, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP00.SBUF */
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    ^SABU (Zero)
                    TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP00.PBUF */
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    Local0 = M04B (^DADR, 0x04)
                    Local0 &= 0xF8
                    M04C (^DADR, 0x04, Local0)
                    M04E (^DADR, 0x10, EP10)
                    M04E (^DADR, 0x14, EP14)
                    M04E (^DADR, 0x18, EP18)
                    M04E (^DADR, 0x1C, EP1C)
                    M04E (^DADR, 0x20, EP20)
                    M04E (^DADR, 0x24, EP24)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.EPCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    M04E (^DADR, 0x10, BR10)
                    M04E (^DADR, 0x14, BR14)
                    M04C (^DADR, 0x18, BR18)
                    M04C (^DADR, 0x19, BR19)
                    M04C (^DADR, 0x1A, BR1A)
                    M04C (^DADR, 0x1C, BR1C)
                    M04C (^DADR, 0x1D, BR1D)
                    M04D (^DADR, 0x20, BR20)
                    M04D (^DADR, 0x22, BR22)
                    M04D (^DADR, 0x24, BR24)
                    M04D (^DADR, 0x26, BR26)
                    M04E (^DADR, 0x28, BR28)
                    M04E (^DADR, 0x2C, BR2C)
                    M04D (^DADR, 0x30, BR30)
                    M04D (^DADR, 0x32, BR32)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP00.PAUF.BRCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }

                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PREG, 2, Serialized)
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If ((DVRS == 0xEE))
                        {
                            ^SABU (One)
                            DVRS = One
                        }
                    }
                }
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP00.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP00.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP00.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP00.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (NV00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            One
                        }
                    }
                })
                Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (SSTA, 0, Serialized)
                {
                }

                Method (SINI, 0, Serialized)
                {
                }

                Method (SREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                }

                Method (SDSW, 3, Serialized)
                {
                }

                Method (PPS0, 0, Serialized)
                {
                }

                Method (PPS3, 0, Serialized)
                {
                }

                Method (PSTA, 0, Serialized)
                {
                }

                Method (P_ON, 0, Serialized)
                {
                    Local1 = One
                    If (CondRefOf (\PWGS))
                    {
                        Local1 = \PWGS (One)
                    }

                    If ((Local1 == Zero))
                    {
                        If ((^^^^PCSA == Zero))
                        {
                            ^^^^PAUF (One)
                        }

                        If ((^^^PCSA == Zero))
                        {
                            ^^^PAUF (One)
                        }

                        If ((^^PCSA == Zero))
                        {
                            ^^PAUF (One)
                        }

                        Local1 = Zero
                        Local2 = 0x2775
                        Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP00.M641 */
                        Local4 += 0x12
                        While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                        {
                            Local1 = M04A (^^DADR, Local4)
                            Local2 = (Local2 - One)
                            Stall (0x63)
                        }

                        ^PAUF (One)
                        If (CondRefOf (\UPWD))
                        {
                            \UPWD ()
                        }

                        ^PAUF (Zero)
                        If ((^^PCSA == Zero))
                        {
                            ^^PAUF (Zero)
                        }

                        If ((^^^PCSA == Zero))
                        {
                            ^^^PAUF (Zero)
                        }

                        If ((^^^^PCSA == Zero))
                        {
                            ^^^^PAUF (Zero)
                        }
                    }
                }

                Method (P_OF, 0, Serialized)
                {
                    If (CondRefOf (\SPWD))
                    {
                        \SPWD ()
                    }
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP00.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP00.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP00.NV00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }
        }
    }

    If (((G000 == One) && (G002 == 0x04)))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40)
        {
            Name (XHGP, 0x02)
        }
    }

    If (((G000 == One) && (G002 == 0x05)))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP20)
        {
            Name (XHGP, 0x02)
        }
    }

    If (((G000 == One) && (G002 == 0x06)))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP00)
        {
            Name (XHGP, 0x02)
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 != Zero))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (GPB1, 0x5A5A5A5A)
                Name (IOR0, 0x5A5A5A5A)
                Name (IOR1, 0x5A5A5A5A)
                Name (IOR2, 0x5A5A5A5A)
                Name (IOR3, 0x5A5A5A5A)
                Method (OINI, 0, Serialized)
                {
                    If (((GPB1 == 0x5A5A5A5A) && (DADR != 0xEEEEEEEE)))
                    {
                        GPB1 = M04B (DADR, 0x40)
                        IOR0 = M04B (GPB1, Zero)
                        IOR1 = M04B (GPB1, 0x04)
                        IOR2 = M04B (GPB1, 0x08)
                        IOR3 = M04B (GPB1, 0x0C)
                        M460 ("  OEM-ASL-Second Prom21 USP _INI  Save GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }
                }

                Method (OREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        M04E (DADR, 0x40, GPB1)
                        M014 (DADR, 0x48, Zero, One, One)
                        M04E (GPB1, Zero, IOR0)
                        M04E (GPB1, 0x04, IOR1)
                        M04E (GPB1, 0x08, IOR2)
                        M04E (GPB1, 0x0C, IOR3)
                        M460 ("  OEM-ASL-Second Prom21 USP _REG (2, 1)  Restore GPIO BAR Address (0x%X)  Data 0x%X 0x%X 0x%X 0x%X\n", GPB1, IOR0, IOR1, IOR2, IOR3, Zero)
                    }
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP00.NV00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP08.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (AD3C, 0, Serialized)
                        {
                            M460 ("CPM-ASL-PT21-WLAN-AD3C", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (One)
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("f634f534-6147-11ec-90d6-0242ac120003") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0x05, 0x20                                       // . 
                                        })
                                    }
                                    Case (0x02)
                                    {
                                        M460 ("CPM-ASL-WLAN-D3COLD-BITFLAG", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Return (0x08)
                                    }
                                    Case (0x0D)
                                    {
                                        M460 ("CPM-ASL-WLAN-PCIWAR-BITFLAG", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Return (One)
                                    }

                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP10.WN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Method (DISM, 0, Serialized)
                        {
                            Local1 = One
                            If (CondRefOf (\PWGS))
                            {
                                Local1 = \PWGS (0x08)
                            }

                            If ((Local1 == Zero))
                            {
                                If ((^^^^^^PCSA == Zero))
                                {
                                    ^^^^^^PAUF (One)
                                }

                                If ((^^^^^PCSA == Zero))
                                {
                                    ^^^^^PAUF (One)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (One)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (One)
                                }

                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (One)
                                }

                                Local1 = Zero
                                Local2 = 0x2775
                                Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.M641 */
                                Local4 += 0x12
                                While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                                {
                                    Local1 = M04A (^^DADR, Local4)
                                    Local2 = (Local2 - One)
                                    Stall (0x63)
                                }

                                ^PAUF (One)
                                Local1 = M04A (^DADR, 0x10)
                                Local1 &= 0xFFF0
                                OperationRegion (VAIO, SystemIO, Local1, 0x0100)
                                Field (VAIO, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x64), 
                                    XX64,   32, 
                                    XX68,   32
                                }

                                M460 ("  OEM-ASL-Second Prom21 LN00 (0x%X) DISM  BAR0 Address (0x%X)\n", ^DADR, Local1, Zero, Zero, Zero, Zero)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8001F000
                                Sleep (0x05)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8002F000
                                Sleep (0x05)
                                XX64 = 0xFFFFFFFF
                                XX68 = 0x8003F000
                                Sleep (0x05)
                                ^PAUF (Zero)
                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (Zero)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (Zero)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (Zero)
                                }

                                If ((^^^^^PCSA == Zero))
                                {
                                    ^^^^^PAUF (Zero)
                                }

                                If ((^^^^^^PCSA == Zero))
                                {
                                    ^^^^^^PAUF (Zero)
                                }
                            }
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP18.LN00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                            Local1 = One
                            If (CondRefOf (\PWGS))
                            {
                                Local1 = \PWGS (0x04)
                            }

                            If ((Local1 == Zero))
                            {
                                If ((^^^^^^PCSA == Zero))
                                {
                                    ^^^^^^PAUF (One)
                                }

                                If ((^^^^^PCSA == Zero))
                                {
                                    ^^^^^PAUF (One)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (One)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (One)
                                }

                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (One)
                                }

                                Local1 = Zero
                                Local2 = 0x2775
                                Local4 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.M641 */
                                Local4 += 0x12
                                While ((((Local1 & 0x2800) != 0x2000) && (Local2 > Zero)))
                                {
                                    Local1 = M04A (^^DADR, Local4)
                                    Local2 = (Local2 - One)
                                    Stall (0x63)
                                }

                                ^PAUF (One)
                                If (CondRefOf (\UPWD))
                                {
                                    \UPWD ()
                                }

                                ^PAUF (Zero)
                                If ((^^PCSA == Zero))
                                {
                                    ^^PAUF (Zero)
                                }

                                If ((^^^PCSA == Zero))
                                {
                                    ^^^PAUF (Zero)
                                }

                                If ((^^^^PCSA == Zero))
                                {
                                    ^^^^PAUF (Zero)
                                }

                                If ((^^^^^PCSA == Zero))
                                {
                                    ^^^^^PAUF (Zero)
                                }

                                If ((^^^^^^PCSA == Zero))
                                {
                                    ^^^^^^PAUF (Zero)
                                }
                            }
                        }

                        Method (P_OF, 0, Serialized)
                        {
                            If (CondRefOf (\SPWD))
                            {
                                \SPWD ()
                            }
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP20.NV00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP28.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP30.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP38.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP48.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP50.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP58.EP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP60.XH00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (SSTA, 0, Serialized)
                    {
                    }

                    Method (SINI, 0, Serialized)
                    {
                    }

                    Method (SREG, 2, Serialized)
                    {
                        PREG (Arg0, Arg1)
                    }

                    Method (SDSW, 3, Serialized)
                    {
                    }

                    Method (PPS0, 0, Serialized)
                    {
                    }

                    Method (PPS3, 0, Serialized)
                    {
                    }

                    Method (PSTA, 0, Serialized)
                    {
                    }

                    Method (P_ON, 0, Serialized)
                    {
                    }

                    Method (P_OF, 0, Serialized)
                    {
                    }

                    Name (DVRS, 0xEE)
                    Name (SBUF, Buffer (0x0100){})
                    Name (PBUF, Buffer (0x0100){})
                    Method (SABU, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            EP10 = M04B (^DADR, 0x10)
                            EP14 = M04B (^DADR, 0x14)
                            EP18 = M04B (^DADR, 0x18)
                            EP1C = M04B (^DADR, 0x1C)
                            EP20 = M04B (^DADR, 0x20)
                            EP24 = M04B (^DADR, 0x24)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                EPPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                EPDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                EPLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                EPD2 = M04B (^DADR, Local0)
                            }

                            EPCD = M04B (^DADR, 0x04)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            BR10 = M04B (^DADR, 0x10)
                            BR14 = M04B (^DADR, 0x14)
                            BR18 = M049 (^DADR, 0x18)
                            BR19 = M049 (^DADR, 0x19)
                            BR1A = M049 (^DADR, 0x1A)
                            BR1C = M049 (^DADR, 0x1C)
                            BR1D = M049 (^DADR, 0x1D)
                            BR20 = M04A (^DADR, 0x20)
                            BR22 = M04A (^DADR, 0x22)
                            BR24 = M04A (^DADR, 0x24)
                            BR26 = M04A (^DADR, 0x26)
                            BR28 = M04B (^DADR, 0x28)
                            BR2C = M04B (^DADR, 0x2C)
                            BR30 = M04A (^DADR, 0x30)
                            BR32 = M04A (^DADR, 0x32)
                            If ((^M640 != 0x33))
                            {
                                Local0 = (^M640 + 0x04)
                                BRPM = M04B (^DADR, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = (^M641 + 0x08)
                                BRDC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x10)
                                BRLC = M04B (^DADR, Local0)
                                Local0 = (^M641 + 0x28)
                                BRD2 = M04B (^DADR, Local0)
                            }

                            BRCD = M04B (^DADR, 0x04)
                        }

                        If ((Arg0 == Zero))
                        {
                            SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SABU.TEMP */
                            M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PAUF, 1, NotSerialized)
                    {
                        If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                        Name (TEMP, Buffer (0x0100){})
                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SBUF */
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            ^SABU (Zero)
                            TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PBUF */
                        }

                        If ((DVTP == Zero))
                        {
                            CreateDWordField (TEMP, Zero, EP10)
                            CreateDWordField (TEMP, 0x04, EP14)
                            CreateDWordField (TEMP, 0x08, EP18)
                            CreateDWordField (TEMP, 0x0C, EP1C)
                            CreateDWordField (TEMP, 0x10, EP20)
                            CreateDWordField (TEMP, 0x14, EP24)
                            CreateDWordField (TEMP, 0x21, EPDC)
                            CreateDWordField (TEMP, 0x25, EPLC)
                            CreateDWordField (TEMP, 0x29, EPD2)
                            CreateDWordField (TEMP, 0x2D, EPCD)
                            CreateDWordField (TEMP, 0x31, EPPM)
                            Local0 = M04B (^DADR, 0x04)
                            Local0 &= 0xF8
                            M04C (^DADR, 0x04, Local0)
                            M04E (^DADR, 0x10, EP10)
                            M04E (^DADR, 0x14, EP14)
                            M04E (^DADR, 0x18, EP18)
                            M04E (^DADR, 0x1C, EP1C)
                            M04E (^DADR, 0x20, EP20)
                            M04E (^DADR, 0x24, EP24)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.EPCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }
                        Else
                        {
                            CreateDWordField (TEMP, Zero, BR10)
                            CreateDWordField (TEMP, 0x04, BR14)
                            CreateByteField (TEMP, 0x08, BR18)
                            CreateByteField (TEMP, 0x09, BR19)
                            CreateByteField (TEMP, 0x0A, BR1A)
                            CreateByteField (TEMP, 0x0B, BR1C)
                            CreateByteField (TEMP, 0x0C, BR1D)
                            CreateWordField (TEMP, 0x0D, BR20)
                            CreateWordField (TEMP, 0x0F, BR22)
                            CreateWordField (TEMP, 0x11, BR24)
                            CreateWordField (TEMP, 0x13, BR26)
                            CreateDWordField (TEMP, 0x15, BR28)
                            CreateDWordField (TEMP, 0x19, BR2C)
                            CreateWordField (TEMP, 0x1D, BR30)
                            CreateWordField (TEMP, 0x1F, BR32)
                            CreateDWordField (TEMP, 0x21, BRDC)
                            CreateDWordField (TEMP, 0x25, BRLC)
                            CreateDWordField (TEMP, 0x29, BRD2)
                            CreateDWordField (TEMP, 0x2D, BRCD)
                            CreateDWordField (TEMP, 0x31, BRPM)
                            M04E (^DADR, 0x10, BR10)
                            M04E (^DADR, 0x14, BR14)
                            M04C (^DADR, 0x18, BR18)
                            M04C (^DADR, 0x19, BR19)
                            M04C (^DADR, 0x1A, BR1A)
                            M04C (^DADR, 0x1C, BR1C)
                            M04C (^DADR, 0x1D, BR1D)
                            M04D (^DADR, 0x20, BR20)
                            M04D (^DADR, 0x22, BR22)
                            M04D (^DADR, 0x24, BR24)
                            M04D (^DADR, 0x26, BR26)
                            M04E (^DADR, 0x28, BR28)
                            M04E (^DADR, 0x2C, BR2C)
                            M04D (^DADR, 0x30, BR30)
                            M04D (^DADR, 0x32, BR32)
                            If ((^M640 != 0x33))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRPM */
                                    Local0 &= 0xFC
                                }
                                Else
                                {
                                    Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRPM */
                                    Local0 &= 0xFF
                                }

                                Local1 = (^M640 + 0x04)
                                M04C (^DADR, Local1, Local0)
                            }

                            If ((^M641 != 0x33))
                            {
                                Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRDC */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x08)
                                M04D (^DADR, Local1, Local0)
                                If ((Arg0 == One))
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRLC */
                                    Local0 &= 0xFEFC
                                }
                                Else
                                {
                                    Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRLC */
                                    Local0 &= 0xFFFF
                                }

                                Local1 = (^M641 + 0x10)
                                M04D (^DADR, Local1, Local0)
                                Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRD2 */
                                Local0 &= 0xFFFF
                                Local1 = (^M641 + 0x28)
                                M04D (^DADR, Local1, Local0)
                            }

                            If ((Arg0 == One))
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRCD */
                                Local0 &= 0xFBFF
                            }
                            Else
                            {
                                Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PAUF.BRCD */
                                Local0 &= 0xFFFF
                            }

                            M04D (^DADR, 0x04, Local0)
                        }

                        If ((Arg0 == Zero))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }
                        Else
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Return (Zero)
                    }

                    Method (PREG, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If ((DVRS == 0xEE))
                                {
                                    ^SABU (One)
                                    DVRS = One
                                }
                            }
                        }
                    }

                    Name (DVTP, 0xEE)
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (FLG0, 0xEE)
                    Name (M640, 0x33)
                    Name (M641, 0x33)
                    Name (M642, 0x33)
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Local5 = Zero
                        If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                        {
                            Local5 |= One
                            If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                            {
                                Local5 |= 0x02
                                M640 = 0x33
                                M641 = 0x33
                                M642 = 0x33
                                FLG0 = 0xEE
                                ESTA = 0xEE
                                DBUS = 0xEEEE
                                DADR = 0xEEEEEEEE
                            }
                        }

                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            Local5 |= 0x04
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    Local5 |= 0x08
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                                }
                                Else
                                {
                                    Local5 |= 0x10
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                Local5 |= 0x20
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local5 |= 0x40
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = M04B (DADR, Zero)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    Local5 |= 0x80
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local5 |= 0x0100
                                        If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                        {
                                            If ((^^M641 == 0x33))
                                            {
                                                Local5 |= 0x0200
                                                Local2 = M646 (^^DADR, 0x10)
                                                ^^M641 = Local2
                                            }
                                            Else
                                            {
                                                Local5 |= 0x0400
                                                Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                            }

                                            If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                            {
                                                Local5 |= 0x0800
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                {
                                    EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                    If ((M641 == 0x33))
                                    {
                                        Local5 |= 0x1000
                                        Local2 = M646 (DADR, 0x10)
                                        M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x2000
                                        Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.M641 */
                                    }

                                    Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                    If ((Local3 == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            Local5 |= 0x4000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                        {
                                            Local5 |= 0x8000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00010000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                        Zero))
                                    {
                                        If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                        {
                                            Local5 |= 0x00020000
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00040000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        Local5 |= 0x00080000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00100000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }

                                    If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                    {
                                        If ((M642 == 0x33))
                                        {
                                            Local5 |= 0x00200000
                                            Local4 = M646 (DADR, 0x15)
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00400000
                                            Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.M642 */
                                        }

                                        If ((Local4 != Zero))
                                        {
                                            Local5 |= 0x00800000
                                            FLG0 = 0x16
                                        }
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x01000000
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                Local5 |= 0x02000000
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((FLG0 == 0x16))
                        {
                            Local5 |= 0x04000000
                            If ((M049 (DADR, 0x19) == Zero))
                            {
                                Local5 |= 0x08000000
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            Local5 |= 0x10000000
                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            Local5 |= 0x40000000
                            PWST = 0xD3
                        }

                        If (CondRefOf (SSTA))
                        {
                            SSTA ()
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        If ((PCSA == One))
                        {
                            If ((M641 == 0x33))
                            {
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }

                            If ((M640 == 0x33))
                            {
                                Local2 = M646 (DADR, One)
                                M640 = Local2
                            }

                            If ((DVTP == 0xEE))
                            {
                                Local1 = M049 (DADR, 0x0E)
                                Local1 &= 0x3F
                                If ((Local1 == Zero))
                                {
                                    DVTP = Zero
                                }

                                If ((Local1 == One))
                                {
                                    DVTP = One
                                }
                            }
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                        If (CondRefOf (SINI))
                        {
                            SINI ()
                        }
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        If (CondRefOf (SREG))
                        {
                            SREG (Arg0, Arg1)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If (CondRefOf (SDSW))
                        {
                            SDSW (Arg0, Arg1, Arg2)
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            If (CondRefOf (PSTA))
                            {
                                PSTA ()
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_ON))
                                {
                                    P_ON ()
                                }
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                If (CondRefOf (XHGP))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        Local0 = M4F1 (XHGP)
                                    }
                                }

                                If (CondRefOf (P_OF))
                                {
                                    P_OF ()
                                }
                            }
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0xFF)
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                        Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Method (SSTA, 0, Serialized)
                        {
                        }

                        Method (SINI, 0, Serialized)
                        {
                        }

                        Method (SREG, 2, Serialized)
                        {
                            PREG (Arg0, Arg1)
                        }

                        Method (SDSW, 3, Serialized)
                        {
                        }

                        Method (PPS0, 0, Serialized)
                        {
                        }

                        Method (PPS3, 0, Serialized)
                        {
                        }

                        Method (PSTA, 0, Serialized)
                        {
                        }

                        Method (P_ON, 0, Serialized)
                        {
                        }

                        Method (P_OF, 0, Serialized)
                        {
                        }

                        Name (DVRS, 0xEE)
                        Name (SBUF, Buffer (0x0100){})
                        Name (PBUF, Buffer (0x0100){})
                        Method (SABU, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                EP10 = M04B (^DADR, 0x10)
                                EP14 = M04B (^DADR, 0x14)
                                EP18 = M04B (^DADR, 0x18)
                                EP1C = M04B (^DADR, 0x1C)
                                EP20 = M04B (^DADR, 0x20)
                                EP24 = M04B (^DADR, 0x24)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    EPPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    EPDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    EPLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    EPD2 = M04B (^DADR, Local0)
                                }

                                EPCD = M04B (^DADR, 0x04)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                BR10 = M04B (^DADR, 0x10)
                                BR14 = M04B (^DADR, 0x14)
                                BR18 = M049 (^DADR, 0x18)
                                BR19 = M049 (^DADR, 0x19)
                                BR1A = M049 (^DADR, 0x1A)
                                BR1C = M049 (^DADR, 0x1C)
                                BR1D = M049 (^DADR, 0x1D)
                                BR20 = M04A (^DADR, 0x20)
                                BR22 = M04A (^DADR, 0x22)
                                BR24 = M04A (^DADR, 0x24)
                                BR26 = M04A (^DADR, 0x26)
                                BR28 = M04B (^DADR, 0x28)
                                BR2C = M04B (^DADR, 0x2C)
                                BR30 = M04A (^DADR, 0x30)
                                BR32 = M04A (^DADR, 0x32)
                                If ((^M640 != 0x33))
                                {
                                    Local0 = (^M640 + 0x04)
                                    BRPM = M04B (^DADR, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = (^M641 + 0x08)
                                    BRDC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x10)
                                    BRLC = M04B (^DADR, Local0)
                                    Local0 = (^M641 + 0x28)
                                    BRD2 = M04B (^DADR, Local0)
                                }

                                BRCD = M04B (^DADR, 0x04)
                            }

                            If ((Arg0 == Zero))
                            {
                                SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.SABU.TEMP */
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PAUF, 1, NotSerialized)
                        {
                            If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                Return (Zero)
                            }

                            Name (TEMP, Buffer (0x0100){})
                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.SBUF */
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                                ^SABU (Zero)
                                TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PBUF */
                            }

                            If ((DVTP == Zero))
                            {
                                CreateDWordField (TEMP, Zero, EP10)
                                CreateDWordField (TEMP, 0x04, EP14)
                                CreateDWordField (TEMP, 0x08, EP18)
                                CreateDWordField (TEMP, 0x0C, EP1C)
                                CreateDWordField (TEMP, 0x10, EP20)
                                CreateDWordField (TEMP, 0x14, EP24)
                                CreateDWordField (TEMP, 0x21, EPDC)
                                CreateDWordField (TEMP, 0x25, EPLC)
                                CreateDWordField (TEMP, 0x29, EPD2)
                                CreateDWordField (TEMP, 0x2D, EPCD)
                                CreateDWordField (TEMP, 0x31, EPPM)
                                Local0 = M04B (^DADR, 0x04)
                                Local0 &= 0xF8
                                M04C (^DADR, 0x04, Local0)
                                M04E (^DADR, 0x10, EP10)
                                M04E (^DADR, 0x14, EP14)
                                M04E (^DADR, 0x18, EP18)
                                M04E (^DADR, 0x1C, EP1C)
                                M04E (^DADR, 0x20, EP20)
                                M04E (^DADR, 0x24, EP24)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.EPCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }
                            Else
                            {
                                CreateDWordField (TEMP, Zero, BR10)
                                CreateDWordField (TEMP, 0x04, BR14)
                                CreateByteField (TEMP, 0x08, BR18)
                                CreateByteField (TEMP, 0x09, BR19)
                                CreateByteField (TEMP, 0x0A, BR1A)
                                CreateByteField (TEMP, 0x0B, BR1C)
                                CreateByteField (TEMP, 0x0C, BR1D)
                                CreateWordField (TEMP, 0x0D, BR20)
                                CreateWordField (TEMP, 0x0F, BR22)
                                CreateWordField (TEMP, 0x11, BR24)
                                CreateWordField (TEMP, 0x13, BR26)
                                CreateDWordField (TEMP, 0x15, BR28)
                                CreateDWordField (TEMP, 0x19, BR2C)
                                CreateWordField (TEMP, 0x1D, BR30)
                                CreateWordField (TEMP, 0x1F, BR32)
                                CreateDWordField (TEMP, 0x21, BRDC)
                                CreateDWordField (TEMP, 0x25, BRLC)
                                CreateDWordField (TEMP, 0x29, BRD2)
                                CreateDWordField (TEMP, 0x2D, BRCD)
                                CreateDWordField (TEMP, 0x31, BRPM)
                                M04E (^DADR, 0x10, BR10)
                                M04E (^DADR, 0x14, BR14)
                                M04C (^DADR, 0x18, BR18)
                                M04C (^DADR, 0x19, BR19)
                                M04C (^DADR, 0x1A, BR1A)
                                M04C (^DADR, 0x1C, BR1C)
                                M04C (^DADR, 0x1D, BR1D)
                                M04D (^DADR, 0x20, BR20)
                                M04D (^DADR, 0x22, BR22)
                                M04D (^DADR, 0x24, BR24)
                                M04D (^DADR, 0x26, BR26)
                                M04E (^DADR, 0x28, BR28)
                                M04E (^DADR, 0x2C, BR2C)
                                M04D (^DADR, 0x30, BR30)
                                M04D (^DADR, 0x32, BR32)
                                If ((^M640 != 0x33))
                                {
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRPM */
                                        Local0 &= 0xFC
                                    }
                                    Else
                                    {
                                        Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRPM */
                                        Local0 &= 0xFF
                                    }

                                    Local1 = (^M640 + 0x04)
                                    M04C (^DADR, Local1, Local0)
                                }

                                If ((^M641 != 0x33))
                                {
                                    Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRDC */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x08)
                                    M04D (^DADR, Local1, Local0)
                                    If ((Arg0 == One))
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRLC */
                                        Local0 &= 0xFEFC
                                    }
                                    Else
                                    {
                                        Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRLC */
                                        Local0 &= 0xFFFF
                                    }

                                    Local1 = (^M641 + 0x10)
                                    M04D (^DADR, Local1, Local0)
                                    Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRD2 */
                                    Local0 &= 0xFFFF
                                    Local1 = (^M641 + 0x28)
                                    M04D (^DADR, Local1, Local0)
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRCD */
                                    Local0 &= 0xFBFF
                                }
                                Else
                                {
                                    Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PAUF.BRCD */
                                    Local0 &= 0xFFFF
                                }

                                M04D (^DADR, 0x04, Local0)
                            }

                            If ((Arg0 == Zero))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }
                            Else
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Return (Zero)
                        }

                        Method (PREG, 2, Serialized)
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If ((DVRS == 0xEE))
                                    {
                                        ^SABU (One)
                                        DVRS = One
                                    }
                                }
                            }
                        }

                        Name (DVTP, 0xEE)
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (FLG0, 0xEE)
                        Name (M640, 0x33)
                        Name (M641, 0x33)
                        Name (M642, 0x33)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local5 = Zero
                            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                            {
                                Local5 |= One
                                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                                {
                                    Local5 |= 0x02
                                    M640 = 0x33
                                    M641 = 0x33
                                    M642 = 0x33
                                    FLG0 = 0xEE
                                    ESTA = 0xEE
                                    DBUS = 0xEEEE
                                    DADR = 0xEEEEEEEE
                                }
                            }

                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                Local5 |= 0x04
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        Local5 |= 0x08
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.EBUS */
                                    }
                                    Else
                                    {
                                        Local5 |= 0x10
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    Local5 |= 0x20
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local5 |= 0x40
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = M04B (DADR, Zero)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        Local5 |= 0x80
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local5 |= 0x0100
                                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                            {
                                                If ((^^M641 == 0x33))
                                                {
                                                    Local5 |= 0x0200
                                                    Local2 = M646 (^^DADR, 0x10)
                                                    ^^M641 = Local2
                                                }
                                                Else
                                                {
                                                    Local5 |= 0x0400
                                                    Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.M641 */
                                                }

                                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                                {
                                                    Local5 |= 0x0800
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                                    {
                                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                        If ((M641 == 0x33))
                                        {
                                            Local5 |= 0x1000
                                            Local2 = M646 (DADR, 0x10)
                                            M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x2000
                                            Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.M641 */
                                        }

                                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                        If ((Local3 == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                Local5 |= 0x4000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                            {
                                                Local5 |= 0x8000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00010000
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                            Zero))
                                        {
                                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                            {
                                                Local5 |= 0x00020000
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00040000
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            Local5 |= 0x00080000
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            Local5 |= 0x00100000
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }

                                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                        {
                                            If ((M642 == 0x33))
                                            {
                                                Local5 |= 0x00200000
                                                Local4 = M646 (DADR, 0x15)
                                            }
                                            Else
                                            {
                                                Local5 |= 0x00400000
                                                Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.M642 */
                                            }

                                            If ((Local4 != Zero))
                                            {
                                                Local5 |= 0x00800000
                                                FLG0 = 0x16
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local5 |= 0x01000000
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    Local5 |= 0x02000000
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((FLG0 == 0x16))
                            {
                                Local5 |= 0x04000000
                                If ((M049 (DADR, 0x19) == Zero))
                                {
                                    Local5 |= 0x08000000
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                Local5 |= 0x10000000
                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                Local5 |= 0x40000000
                                PWST = 0xD3
                            }

                            If (CondRefOf (SSTA))
                            {
                                SSTA ()
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            If ((PCSA == One))
                            {
                                If ((M641 == 0x33))
                                {
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }

                                If ((M640 == 0x33))
                                {
                                    Local2 = M646 (DADR, One)
                                    M640 = Local2
                                }

                                If ((DVTP == 0xEE))
                                {
                                    Local1 = M049 (DADR, 0x0E)
                                    Local1 &= 0x3F
                                    If ((Local1 == Zero))
                                    {
                                        DVTP = Zero
                                    }

                                    If ((Local1 == One))
                                    {
                                        DVTP = One
                                    }
                                }
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                            If (CondRefOf (SINI))
                            {
                                SINI ()
                            }
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            If (CondRefOf (SREG))
                            {
                                SREG (Arg0, Arg1)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If (CondRefOf (SDSW))
                            {
                                SDSW (Arg0, Arg1, Arg2)
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS0))
                            {
                                PPS0 ()
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (PPS3))
                            {
                                PPS3 ()
                            }
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                If (CondRefOf (PSTA))
                                {
                                    PSTA ()
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP68.SA00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_ON))
                                    {
                                        P_ON ()
                                    }
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    If (CondRefOf (XHGP))
                                    {
                                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                                        {
                                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                            Local0 = M4F1 (XHGP)
                                        }
                                    }

                                    If (CondRefOf (P_OF))
                                    {
                                        P_OF ()
                                    }
                                }
                            }
                        }

                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                    }
                }
            }
        }
    }

    If (((G000 == One) && ((G002 == 0x07) && (G003 != 
        Zero))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40.UP00.DP40)
        {
            Name (XHGP, 0x03)
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && ((G002 != 0x07) && (G003 != Zero)))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40.UP00)
        {
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
                OINI ()
            }

            Method (SREG, 2, Serialized)
            {
                OREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }
        }

        Scope (\_SB.PCI0.GPP5.UP00.DP40.UP00.DP40)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (SSTA, 0, Serialized)
            {
            }

            Method (SINI, 0, Serialized)
            {
            }

            Method (SREG, 2, Serialized)
            {
                PREG (Arg0, Arg1)
            }

            Method (SDSW, 3, Serialized)
            {
            }

            Method (PPS0, 0, Serialized)
            {
            }

            Method (PPS3, 0, Serialized)
            {
            }

            Method (PSTA, 0, Serialized)
            {
            }

            Method (P_ON, 0, Serialized)
            {
            }

            Method (P_OF, 0, Serialized)
            {
            }

            Name (DVRS, 0xEE)
            Name (SBUF, Buffer (0x0100){})
            Name (PBUF, Buffer (0x0100){})
            Method (SABU, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    EP10 = M04B (^DADR, 0x10)
                    EP14 = M04B (^DADR, 0x14)
                    EP18 = M04B (^DADR, 0x18)
                    EP1C = M04B (^DADR, 0x1C)
                    EP20 = M04B (^DADR, 0x20)
                    EP24 = M04B (^DADR, 0x24)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        EPPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        EPDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        EPLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        EPD2 = M04B (^DADR, Local0)
                    }

                    EPCD = M04B (^DADR, 0x04)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    BR10 = M04B (^DADR, 0x10)
                    BR14 = M04B (^DADR, 0x14)
                    BR18 = M049 (^DADR, 0x18)
                    BR19 = M049 (^DADR, 0x19)
                    BR1A = M049 (^DADR, 0x1A)
                    BR1C = M049 (^DADR, 0x1C)
                    BR1D = M049 (^DADR, 0x1D)
                    BR20 = M04A (^DADR, 0x20)
                    BR22 = M04A (^DADR, 0x22)
                    BR24 = M04A (^DADR, 0x24)
                    BR26 = M04A (^DADR, 0x26)
                    BR28 = M04B (^DADR, 0x28)
                    BR2C = M04B (^DADR, 0x2C)
                    BR30 = M04A (^DADR, 0x30)
                    BR32 = M04A (^DADR, 0x32)
                    If ((^M640 != 0x33))
                    {
                        Local0 = (^M640 + 0x04)
                        BRPM = M04B (^DADR, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = (^M641 + 0x08)
                        BRDC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x10)
                        BRLC = M04B (^DADR, Local0)
                        Local0 = (^M641 + 0x28)
                        BRD2 = M04B (^DADR, Local0)
                    }

                    BRCD = M04B (^DADR, 0x04)
                }

                If ((Arg0 == Zero))
                {
                    SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.SABU.TEMP */
                    M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PAUF, 1, NotSerialized)
            {
                If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }

                Name (TEMP, Buffer (0x0100){})
                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.SBUF */
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    ^SABU (Zero)
                    TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PBUF */
                }

                If ((DVTP == Zero))
                {
                    CreateDWordField (TEMP, Zero, EP10)
                    CreateDWordField (TEMP, 0x04, EP14)
                    CreateDWordField (TEMP, 0x08, EP18)
                    CreateDWordField (TEMP, 0x0C, EP1C)
                    CreateDWordField (TEMP, 0x10, EP20)
                    CreateDWordField (TEMP, 0x14, EP24)
                    CreateDWordField (TEMP, 0x21, EPDC)
                    CreateDWordField (TEMP, 0x25, EPLC)
                    CreateDWordField (TEMP, 0x29, EPD2)
                    CreateDWordField (TEMP, 0x2D, EPCD)
                    CreateDWordField (TEMP, 0x31, EPPM)
                    Local0 = M04B (^DADR, 0x04)
                    Local0 &= 0xF8
                    M04C (^DADR, 0x04, Local0)
                    M04E (^DADR, 0x10, EP10)
                    M04E (^DADR, 0x14, EP14)
                    M04E (^DADR, 0x18, EP18)
                    M04E (^DADR, 0x1C, EP1C)
                    M04E (^DADR, 0x20, EP20)
                    M04E (^DADR, 0x24, EP24)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.EPCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }
                Else
                {
                    CreateDWordField (TEMP, Zero, BR10)
                    CreateDWordField (TEMP, 0x04, BR14)
                    CreateByteField (TEMP, 0x08, BR18)
                    CreateByteField (TEMP, 0x09, BR19)
                    CreateByteField (TEMP, 0x0A, BR1A)
                    CreateByteField (TEMP, 0x0B, BR1C)
                    CreateByteField (TEMP, 0x0C, BR1D)
                    CreateWordField (TEMP, 0x0D, BR20)
                    CreateWordField (TEMP, 0x0F, BR22)
                    CreateWordField (TEMP, 0x11, BR24)
                    CreateWordField (TEMP, 0x13, BR26)
                    CreateDWordField (TEMP, 0x15, BR28)
                    CreateDWordField (TEMP, 0x19, BR2C)
                    CreateWordField (TEMP, 0x1D, BR30)
                    CreateWordField (TEMP, 0x1F, BR32)
                    CreateDWordField (TEMP, 0x21, BRDC)
                    CreateDWordField (TEMP, 0x25, BRLC)
                    CreateDWordField (TEMP, 0x29, BRD2)
                    CreateDWordField (TEMP, 0x2D, BRCD)
                    CreateDWordField (TEMP, 0x31, BRPM)
                    M04E (^DADR, 0x10, BR10)
                    M04E (^DADR, 0x14, BR14)
                    M04C (^DADR, 0x18, BR18)
                    M04C (^DADR, 0x19, BR19)
                    M04C (^DADR, 0x1A, BR1A)
                    M04C (^DADR, 0x1C, BR1C)
                    M04C (^DADR, 0x1D, BR1D)
                    M04D (^DADR, 0x20, BR20)
                    M04D (^DADR, 0x22, BR22)
                    M04D (^DADR, 0x24, BR24)
                    M04D (^DADR, 0x26, BR26)
                    M04E (^DADR, 0x28, BR28)
                    M04E (^DADR, 0x2C, BR2C)
                    M04D (^DADR, 0x30, BR30)
                    M04D (^DADR, 0x32, BR32)
                    If ((^M640 != 0x33))
                    {
                        If ((Arg0 == One))
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRPM */
                            Local0 &= 0xFC
                        }
                        Else
                        {
                            Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRPM */
                            Local0 &= 0xFF
                        }

                        Local1 = (^M640 + 0x04)
                        M04C (^DADR, Local1, Local0)
                    }

                    If ((^M641 != 0x33))
                    {
                        Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRDC */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x08)
                        M04D (^DADR, Local1, Local0)
                        If ((Arg0 == One))
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRLC */
                            Local0 &= 0xFEFC
                        }
                        Else
                        {
                            Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRLC */
                            Local0 &= 0xFFFF
                        }

                        Local1 = (^M641 + 0x10)
                        M04D (^DADR, Local1, Local0)
                        Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRD2 */
                        Local0 &= 0xFFFF
                        Local1 = (^M641 + 0x28)
                        M04D (^DADR, Local1, Local0)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRCD */
                        Local0 &= 0xFBFF
                    }
                    Else
                    {
                        Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PAUF.BRCD */
                        Local0 &= 0xFFFF
                    }

                    M04D (^DADR, 0x04, Local0)
                }

                If ((Arg0 == Zero))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Return (Zero)
            }

            Method (PREG, 2, Serialized)
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If ((DVRS == 0xEE))
                        {
                            ^SABU (One)
                            DVRS = One
                        }
                    }
                }
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (EP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x03)
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (SSTA, 0, Serialized)
                {
                }

                Method (SINI, 0, Serialized)
                {
                }

                Method (SREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                }

                Method (SDSW, 3, Serialized)
                {
                }

                Method (PPS0, 0, Serialized)
                {
                }

                Method (PPS3, 0, Serialized)
                {
                }

                Method (PSTA, 0, Serialized)
                {
                }

                Method (P_ON, 0, Serialized)
                {
                }

                Method (P_OF, 0, Serialized)
                {
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.UP00.DP40.EP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 == Zero))))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP40)
        {
            Device (EP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Method (_RMV, 0, Serialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (SSTA, 0, Serialized)
                {
                }

                Method (SINI, 0, Serialized)
                {
                }

                Method (SREG, 2, Serialized)
                {
                    PREG (Arg0, Arg1)
                }

                Method (SDSW, 3, Serialized)
                {
                }

                Method (PPS0, 0, Serialized)
                {
                }

                Method (PPS3, 0, Serialized)
                {
                }

                Method (PSTA, 0, Serialized)
                {
                }

                Method (P_ON, 0, Serialized)
                {
                }

                Method (P_OF, 0, Serialized)
                {
                }

                Name (DVRS, 0xEE)
                Name (SBUF, Buffer (0x0100){})
                Name (PBUF, Buffer (0x0100){})
                Method (SABU, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-Start  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        EP10 = M04B (^DADR, 0x10)
                        EP14 = M04B (^DADR, 0x14)
                        EP18 = M04B (^DADR, 0x18)
                        EP1C = M04B (^DADR, 0x1C)
                        EP20 = M04B (^DADR, 0x20)
                        EP24 = M04B (^DADR, 0x24)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            EPPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            EPDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            EPLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            EPD2 = M04B (^DADR, Local0)
                        }

                        EPCD = M04B (^DADR, 0x04)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        BR10 = M04B (^DADR, 0x10)
                        BR14 = M04B (^DADR, 0x14)
                        BR18 = M049 (^DADR, 0x18)
                        BR19 = M049 (^DADR, 0x19)
                        BR1A = M049 (^DADR, 0x1A)
                        BR1C = M049 (^DADR, 0x1C)
                        BR1D = M049 (^DADR, 0x1D)
                        BR20 = M04A (^DADR, 0x20)
                        BR22 = M04A (^DADR, 0x22)
                        BR24 = M04A (^DADR, 0x24)
                        BR26 = M04A (^DADR, 0x26)
                        BR28 = M04B (^DADR, 0x28)
                        BR2C = M04B (^DADR, 0x2C)
                        BR30 = M04A (^DADR, 0x30)
                        BR32 = M04A (^DADR, 0x32)
                        If ((^M640 != 0x33))
                        {
                            Local0 = (^M640 + 0x04)
                            BRPM = M04B (^DADR, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = (^M641 + 0x08)
                            BRDC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x10)
                            BRLC = M04B (^DADR, Local0)
                            Local0 = (^M641 + 0x28)
                            BRD2 = M04B (^DADR, Local0)
                        }

                        BRCD = M04B (^DADR, 0x04)
                    }

                    If ((Arg0 == Zero))
                    {
                        SBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        PBUF = TEMP /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.SABU.TEMP */
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SABU-End  Save to Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PAUF, 1, NotSerialized)
                {
                    If (((DVTP == 0xEE) || (^DADR == 0xEEEEEEEE)))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Device is not present\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }

                    Name (TEMP, Buffer (0x0100){})
                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        TEMP = SBUF /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.SBUF */
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-Start  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                        ^SABU (Zero)
                        TEMP = PBUF /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PBUF */
                    }

                    If ((DVTP == Zero))
                    {
                        CreateDWordField (TEMP, Zero, EP10)
                        CreateDWordField (TEMP, 0x04, EP14)
                        CreateDWordField (TEMP, 0x08, EP18)
                        CreateDWordField (TEMP, 0x0C, EP1C)
                        CreateDWordField (TEMP, 0x10, EP20)
                        CreateDWordField (TEMP, 0x14, EP24)
                        CreateDWordField (TEMP, 0x21, EPDC)
                        CreateDWordField (TEMP, 0x25, EPLC)
                        CreateDWordField (TEMP, 0x29, EPD2)
                        CreateDWordField (TEMP, 0x2D, EPCD)
                        CreateDWordField (TEMP, 0x31, EPPM)
                        Local0 = M04B (^DADR, 0x04)
                        Local0 &= 0xF8
                        M04C (^DADR, 0x04, Local0)
                        M04E (^DADR, 0x10, EP10)
                        M04E (^DADR, 0x14, EP14)
                        M04E (^DADR, 0x18, EP18)
                        M04E (^DADR, 0x1C, EP1C)
                        M04E (^DADR, 0x20, EP20)
                        M04E (^DADR, 0x24, EP24)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = EPPM /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = EPDC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = EPLC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = EPD2 /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = EPCD /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.EPCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }
                    Else
                    {
                        CreateDWordField (TEMP, Zero, BR10)
                        CreateDWordField (TEMP, 0x04, BR14)
                        CreateByteField (TEMP, 0x08, BR18)
                        CreateByteField (TEMP, 0x09, BR19)
                        CreateByteField (TEMP, 0x0A, BR1A)
                        CreateByteField (TEMP, 0x0B, BR1C)
                        CreateByteField (TEMP, 0x0C, BR1D)
                        CreateWordField (TEMP, 0x0D, BR20)
                        CreateWordField (TEMP, 0x0F, BR22)
                        CreateWordField (TEMP, 0x11, BR24)
                        CreateWordField (TEMP, 0x13, BR26)
                        CreateDWordField (TEMP, 0x15, BR28)
                        CreateDWordField (TEMP, 0x19, BR2C)
                        CreateWordField (TEMP, 0x1D, BR30)
                        CreateWordField (TEMP, 0x1F, BR32)
                        CreateDWordField (TEMP, 0x21, BRDC)
                        CreateDWordField (TEMP, 0x25, BRLC)
                        CreateDWordField (TEMP, 0x29, BRD2)
                        CreateDWordField (TEMP, 0x2D, BRCD)
                        CreateDWordField (TEMP, 0x31, BRPM)
                        M04E (^DADR, 0x10, BR10)
                        M04E (^DADR, 0x14, BR14)
                        M04C (^DADR, 0x18, BR18)
                        M04C (^DADR, 0x19, BR19)
                        M04C (^DADR, 0x1A, BR1A)
                        M04C (^DADR, 0x1C, BR1C)
                        M04C (^DADR, 0x1D, BR1D)
                        M04D (^DADR, 0x20, BR20)
                        M04D (^DADR, 0x22, BR22)
                        M04D (^DADR, 0x24, BR24)
                        M04D (^DADR, 0x26, BR26)
                        M04E (^DADR, 0x28, BR28)
                        M04E (^DADR, 0x2C, BR2C)
                        M04D (^DADR, 0x30, BR30)
                        M04D (^DADR, 0x32, BR32)
                        If ((^M640 != 0x33))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRPM */
                                Local0 &= 0xFC
                            }
                            Else
                            {
                                Local0 = BRPM /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRPM */
                                Local0 &= 0xFF
                            }

                            Local1 = (^M640 + 0x04)
                            M04C (^DADR, Local1, Local0)
                        }

                        If ((^M641 != 0x33))
                        {
                            Local0 = BRDC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRDC */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x08)
                            M04D (^DADR, Local1, Local0)
                            If ((Arg0 == One))
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRLC */
                                Local0 &= 0xFEFC
                            }
                            Else
                            {
                                Local0 = BRLC /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRLC */
                                Local0 &= 0xFFFF
                            }

                            Local1 = (^M641 + 0x10)
                            M04D (^DADR, Local1, Local0)
                            Local0 = BRD2 /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRD2 */
                            Local0 &= 0xFFFF
                            Local1 = (^M641 + 0x28)
                            M04D (^DADR, Local1, Local0)
                        }

                        If ((Arg0 == One))
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRCD */
                            Local0 &= 0xFBFF
                        }
                        Else
                        {
                            Local0 = BRCD /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PAUF.BRCD */
                            Local0 &= 0xFFFF
                        }

                        M04D (^DADR, 0x04, Local0)
                    }

                    If ((Arg0 == Zero))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Save Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }
                    Else
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PAUF-End  Program from Program Buffer\n", ^DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Return (Zero)
                }

                Method (PREG, 2, Serialized)
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If ((DVRS == 0xEE))
                            {
                                ^SABU (One)
                                DVRS = One
                            }
                        }
                    }
                }

                Name (DVTP, 0xEE)
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (FLG0, 0xEE)
                Name (M640, 0x33)
                Name (M641, 0x33)
                Name (M642, 0x33)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Local5 = Zero
                    If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                    {
                        Local5 |= One
                        If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                        {
                            Local5 |= 0x02
                            M640 = 0x33
                            M641 = 0x33
                            M642 = 0x33
                            FLG0 = 0xEE
                            ESTA = 0xEE
                            DBUS = 0xEEEE
                            DADR = 0xEEEEEEEE
                        }
                    }

                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        Local5 |= 0x04
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                Local5 |= 0x08
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP5.UP00.DP40.EBUS */
                            }
                            Else
                            {
                                Local5 |= 0x10
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            Local5 |= 0x20
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local5 |= 0x40
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = M04B (DADR, Zero)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                Local5 |= 0x80
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local5 |= 0x0100
                                    If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                    {
                                        If ((^^M641 == 0x33))
                                        {
                                            Local5 |= 0x0200
                                            Local2 = M646 (^^DADR, 0x10)
                                            ^^M641 = Local2
                                        }
                                        Else
                                        {
                                            Local5 |= 0x0400
                                            Local2 = ^^M641 /* \_SB_.PCI0.GPP5.UP00.DP40.M641 */
                                        }

                                        If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                        {
                                            Local5 |= 0x0800
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                            }
                            ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                            {
                                EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                                If ((M641 == 0x33))
                                {
                                    Local5 |= 0x1000
                                    Local2 = M646 (DADR, 0x10)
                                    M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x2000
                                    Local2 = M641 /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.M641 */
                                }

                                Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                                If ((Local3 == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        Local5 |= 0x4000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                    {
                                        Local5 |= 0x8000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00010000
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                    Zero))
                                {
                                    If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                    {
                                        Local5 |= 0x00020000
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00040000
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    Local5 |= 0x00080000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    Local5 |= 0x00100000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }

                                If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                                {
                                    If ((M642 == 0x33))
                                    {
                                        Local5 |= 0x00200000
                                        Local4 = M646 (DADR, 0x15)
                                    }
                                    Else
                                    {
                                        Local5 |= 0x00400000
                                        Local4 = M642 /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.M642 */
                                    }

                                    If ((Local4 != Zero))
                                    {
                                        Local5 |= 0x00800000
                                        FLG0 = 0x16
                                    }
                                }
                            }
                            Else
                            {
                                Local5 |= 0x01000000
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            Local5 |= 0x02000000
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((FLG0 == 0x16))
                    {
                        Local5 |= 0x04000000
                        If ((M049 (DADR, 0x19) == Zero))
                        {
                            Local5 |= 0x08000000
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        Local5 |= 0x10000000
                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        Local5 |= 0x40000000
                        PWST = 0xD3
                    }

                    If (CondRefOf (SSTA))
                    {
                        SSTA ()
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    If ((PCSA == One))
                    {
                        If ((M641 == 0x33))
                        {
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }

                        If ((M640 == 0x33))
                        {
                            Local2 = M646 (DADR, One)
                            M640 = Local2
                        }

                        If ((DVTP == 0xEE))
                        {
                            Local1 = M049 (DADR, 0x0E)
                            Local1 &= 0x3F
                            If ((Local1 == Zero))
                            {
                                DVTP = Zero
                            }

                            If ((Local1 == One))
                            {
                                DVTP = One
                            }
                        }
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                    If (CondRefOf (SINI))
                    {
                        SINI ()
                    }
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    If (CondRefOf (SREG))
                    {
                        SREG (Arg0, Arg1)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If (CondRefOf (SDSW))
                    {
                        SDSW (Arg0, Arg1, Arg2)
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        If (CondRefOf (PSTA))
                        {
                            PSTA ()
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP5.UP00.DP40.EP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_ON))
                            {
                                P_ON ()
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            If (CondRefOf (XHGP))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    Local0 = M4F1 (XHGP)
                                }
                            }

                            If (CondRefOf (P_OF))
                            {
                                P_OF ()
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
            }
        }
    }

    If ((G002 != 0x03))
    {
        Scope (\_GPE)
        {
            Method (_L02, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L02 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP5, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP5, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            }
        }
    }

    If ((G002 != 0x02))
    {
        Scope (\_SB.PCI0.GPP6)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x16, 
                0x04
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
            PowerResource (PWR1, 0x00, 0x0000)
            {
                Name (PWRS, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (PWRS) /* \_SB_.PCI0.GPP6.PWR1.PWRS */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PWRS = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    PWRS = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWR1
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWR1
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWR1
            })
        }

        Scope (\_GPE)
        {
            Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L16 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP6, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP6, Zero) // Bus Check
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP6, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            }
        }
    }

    Scope (\_SB.PCI0.GPP1)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x0B, 
            0x04
        })
        Name (WD3C, Zero)
        Name (NBRI, 0x5A)
        Name (NBAR, 0x5A)
        Name (NCMD, 0x5A)
        Name (PXDC, 0x5A)
        Name (PXLC, 0x5A)
        Name (PXD2, 0x5A)
        Name (ASMI, 0xB2)
        Name (LCR1, 0x5A5A5A5A)
        Name (LCR2, 0x5A5A5A5A)
        Method (PWEN, 0, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.PWEN\n", Zero, Zero, Zero, Zero, Zero, Zero)
            OperationRegion (VAMN, SystemMemory, 0xFED80E00, 0x04)
            Field (VAMN, ByteAcc, NoLock, Preserve)
            {
                CLKR,   32
            }

            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP1._ADR /* External reference */
            }

            Local0 = G018 /* \G018 */
            Local2 = M009 (Local0)
            Local1 = G019 /* \G019 */
            Local3 = M009 (Local1)
            If (((Local2 == Zero) && (Local3 == Zero)))
            {
                Local2 = CLKR /* \_SB_.PCI0.GPP1.PWEN.CLKR */
                WD3C = One
                M020 (Zero, PDEV, PFUN, 0x88, LCR2)
                M020 (Zero, PDEV, PFUN, 0x68, LCR1)
                Local4 = G01C /* \G01C */
                Local5 = (0x03 << (Local4 - One))
                Local4 = ~Local5
                CLKR &= Local4
                M010 (Local1, One)
                CLKR = Local2
                Local4 = G01A /* \G01A */
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }
                Else
                {
                    Sleep (0x64)
                }

                M472 (Zero, PDEV, PFUN, Zero)
                M010 (Local0, One)
                Local1 = Zero
                Local2 = 0x2775
                While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
                {
                    Local1 = M017 (Zero, PDEV, PFUN, 0x6B, Zero, 0x08)
                    Local2 = (Local2 - One)
                    Stall (0x63)
                }

                Local4 = G01B /* \G01B */
                If ((Local4 != Zero))
                {
                    Sleep (Local4)
                }

                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                Local1 = ((Local0 & 0xFF00) >> 0x08)
                Local1 = M019 (Local1, Zero, Zero, Zero)
            }
        }

        Method (GPCG, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Local0 = Zero
            Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
            While ((Local1 != Zero))
            {
                Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == 0x10))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.GPCG Bus = 0x%X Dev = 0x%X Fun = 0x%X PCIe Cap Offset = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (RPCF, 0, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.RPCF NBRI=0x%X\n", NBRI, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Local1 = GPCG (NBRI, Zero, Zero)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X NBAR = 0x%X NCMD = 0x%X\n", PXDC, PXLC, PXD2, NBAR, NCMD, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                Local2 = (NCMD & 0xFFFFFBFF)
                M020 (NBRI, Zero, Zero, 0x04, (Local2 | 0x06))
            }
        }

        Method (SPCF, 0, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GPP1._ADR))
            {
                Name (ADDR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateByteField (ADDR, Zero, PFUN)
                CreateByteField (ADDR, 0x02, PDEV)
                ADDR = \_SB.PCI0.GPP1._ADR /* External reference */
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.SPCF Dev = 0x%X Func = 0x%X\n", PDEV, PFUN, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, PDEV, PFUN, 0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = GPCG (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.RPCF NBRI = 0x%X NCMD = 0x%X NBAR = 0x%X \n", NBRI, NCMD, NBAR, Zero, Zero, Zero)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.RPCF PXDC = 0x%X PXLC = 0x%X PXD2 = 0x%X \n", PXDC, PXLC, PXD2, Zero, Zero, Zero)
                LCR1 = M019 (Zero, PDEV, PFUN, 0x68)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.PWDI.LCR1 : %x\n", LCR1, Zero, Zero, Zero, Zero, Zero)
                LCR2 = M019 (Zero, PDEV, PFUN, 0x88)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.PWDI.LCR2 : %x\n", LCR2, Zero, Zero, Zero, Zero, Zero)
            }
        }

        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x30AA)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.P0NV._STA\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (D0NV) /* \_SB_.PCI0.GPP1.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x30D0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.P0NV._ON\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = G017 /* \G017 */
                Local2 = 0x02
                Local5 = \PWGS (Zero)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.P0NV._ON D3Cold = 0x%X WD3C First = 0x%X SI3V = 0x%X\n", Local0, WD3C, Local5, Zero, Zero, Zero)
                If ((Local0 == One))
                {
                    PWEN ()
                }

                If (((WD3C == One) || (Local5 == Zero)))
                {
                    RPCF ()
                    Sleep (0x0A)
                    If (CondRefOf (\UPWD))
                    {
                        \UPWD ()
                    }

                    WD3C = Zero
                }

                D0NV = One
                M000 (0x30D1)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x30D3)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.P0NV._OFF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                SPCF ()
                If (CondRefOf (\SPWD))
                {
                    \SPWD ()
                }

                D0NV = Zero
                M000 (0x30D5)
            }
        }

        Device (NVME)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                P0NV
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                P0NV
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                P0NV
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M000 (0x3050)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.NVME._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0x3053)
                M460 ("  OEM-ASL-\\_SB.PCI0.GPP1.NVME._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        One
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.GP17)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x06, Zero)
            If (((Local1 != Zero) && (Local1 != 0xFFFFFFFF)))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
        Name (D0U0, One)
        PowerResource (P0U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x3C05)
                Return (D0U0) /* \_SB_.PCI0.GP17.XHC0.D0U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x3C06)
                D0U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x3C08)
                D0U0 = Zero
            }
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M602 (One, 0x03, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, One, 0x0101, One, 0x15, Zero))
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M602 (One, 0x03, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, One, 0x0101, One, 0x15, Zero))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M602 (Zero, 0xFF, Zero))
                }

                Device (EP01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x0A, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0101, One, 0x15, Zero))
                    }
                }

                Device (EP02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x03, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0102, One, 0x15, Zero))
                    }
                }

                Device (EP03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x03, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x15, Zero))
                    }
                }

                Device (EP04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (Zero, 0xFF, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0104, One, 0x15, Zero))
                    }
                }

                Device (EP05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (Zero, 0xFF, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, Zero, 0x0105, One, 0x15, Zero))
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M602 (Zero, 0xFF, Zero))
                }

                Device (EP01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x0A, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0101, One, 0x15, Zero))
                    }
                }

                Device (EP02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x03, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0102, One, 0x15, Zero))
                    }
                }

                Device (EP03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, 0x03, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x0103, One, 0x15, Zero))
                    }
                }

                Device (EP04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (Zero, 0xFF, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (One, One, 0x0104, One, 0x15, Zero))
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0U0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3C04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M000 (0x3C01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M000 (0x3C03)
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Name (D0U1, One)
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
        PowerResource (P0U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x3D05)
                Return (D0U1) /* \_SB_.PCI0.GP17.XHC1.D0U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x3D06)
                D0U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x3D08)
                D0U1 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0U1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3D04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M000 (0x3D01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M000 (0x3D03)
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M602 (Zero, 0xFF, Zero))
                }

                Device (FP01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (Zero, 0xFF, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x61, One, 0x15, Zero))
                    }
                }

                Device (FP02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (Zero, 0xFF, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x62, One, 0x15, Zero))
                    }
                }

                Device (FP03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, Zero, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x63, One, 0x15, Zero))
                    }
                }

                Device (FP04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (M602 (One, Zero, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (M601 (Zero, One, 0x64, One, 0x15, Zero))
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (DOSA, Zero)
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DOSA = Arg0
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x07)
            {
                0x00010110, 
                0x00010210, 
                0x00010220, 
                0x00010230, 
                0x00010240, 
                0x00031000, 
                0x00032000
            })
        }

        Device (LCD)
        {
            Name (_ADR, 0x0110)  // _ADR: Address
            Name (BCLB, Package (0x34)
            {
                0x5A, 
                0x3C, 
                0x02, 
                0x04, 
                0x06, 
                0x08, 
                0x0A, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x16, 
                0x18, 
                0x1A, 
                0x1C, 
                0x1E, 
                0x20, 
                0x22, 
                0x24, 
                0x26, 
                0x28, 
                0x2A, 
                0x2C, 
                0x2E, 
                0x30, 
                0x32, 
                0x34, 
                0x36, 
                0x38, 
                0x3A, 
                0x3C, 
                0x3E, 
                0x40, 
                0x42, 
                0x44, 
                0x46, 
                0x48, 
                0x4A, 
                0x4C, 
                0x4E, 
                0x50, 
                0x52, 
                0x54, 
                0x56, 
                0x58, 
                0x5A, 
                0x5C, 
                0x5E, 
                0x60, 
                0x62, 
                0x64
            })
            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                AFN7 (Local0)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (\_SB.PCI0.GP19.XHC3)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = 0x3D
                    If (CondRefOf (\_SB.U4PC))
                    {
                        If (((\_SB.U4PC & 0x04) == Zero))
                        {
                            Local0 &= 0xFB
                        }
                    }

                    Return (M602 (One, 0xFF, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, Zero, 0x31, One, 0x17, Zero))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = 0x3D
                    If (CondRefOf (\_SB.U4PC))
                    {
                        If (((\_SB.U4PC & 0x04) == Zero))
                        {
                            Local0 &= 0xFB
                        }
                    }

                    Return (M602 (One, 0xFF, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, Zero, 0x32, One, 0x17, Zero))
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC4)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = 0x3D
                    If (CondRefOf (\_SB.U4PC))
                    {
                        If (((\_SB.U4PC & 0x04) == Zero))
                        {
                            Local0 &= 0xFB
                        }
                    }

                    Return (M602 (One, 0xFF, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, Zero, 0x41, One, 0x18, Zero))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Local0 = 0x3D
                    If (CondRefOf (\_SB.U4PC))
                    {
                        If (((\_SB.U4PC & 0x04) == Zero))
                        {
                            Local0 &= 0xFB
                        }
                    }

                    Return (M602 (One, 0xFF, Zero))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601 (Zero, Zero, 0x42, One, 0x18, Zero))
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP19)
    {
        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F30)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F31)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F33)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F35)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F36)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F38)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (XHGP, 0xFF)
        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* External reference */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP19.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP19.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                If (CondRefOf (XHGP))
                {
                    Local5 |= 0x20000000
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        Local0 = M4F1 (XHGP)
                    }
                }

                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                If (CondRefOf (XHGP))
                {
                    Local5 |= 0x80000000
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        Local0 = M4F1 (XHGP)
                    }
                }

                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP19.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }
    }

    If ((\G01D == 0x04))
    {
        Scope (\_SB.PCI0.GP19)
        {
            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                Local0 = \G01D
                M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x04
                })
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC3)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F34)
            Local0 = \G01E
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F30)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F31)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F33)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F35)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F36)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F38)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* \_SB_.PCI0.GP19.M641 */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP19.XHC3.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP19.XHC3.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP19.XHC3.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC3.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC3.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\G021 == One) && CondRefOf (\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI0
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }
    }

    If ((G01F == One))
    {
        Scope (\_SB.PCI0.GP19.XHC3.RHUB.PRT2)
        {
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "usb4-host-interface", 
                        \_SB.PCI0.GP19.NHI0
                    }, 

                    Package (0x02)
                    {
                        "usb4-port-number", 
                        One
                    }
                }
            })
        }

        Scope (\_SB.PCI0.GP11)
        {
            Name (_DSD, Package (0x06)  // _DSD: Device-Specific Data
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "ExternalFacingPort", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "UID", 
                        Zero
                    }
                }, 

                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "usb4-host-interface", 
                        \_SB.PCI0.GP19.NHI0
                    }, 

                    Package (0x02)
                    {
                        "usb4-port-number", 
                        One
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.GP19.XHC4)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F44)
            Local0 = \G01E
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F40)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F41)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F43)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F45)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F46)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F48)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* \_SB_.PCI0.GP19.M641 */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP19.XHC4.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP19.XHC4.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP19.XHC4.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC4.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC4.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\G021 == One) && CondRefOf (\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI1
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }
    }

    If ((G020 == One))
    {
        Scope (\_SB.PCI0.GP19.XHC4.RHUB.PRT2)
        {
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "usb4-host-interface", 
                        \_SB.PCI0.GP19.NHI1
                    }, 

                    Package (0x02)
                    {
                        "usb4-port-number", 
                        0x02
                    }
                }
            })
        }

        Scope (\_SB.PCI0.GP12)
        {
            Name (_DSD, Package (0x06)  // _DSD: Device-Specific Data
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "ExternalFacingPort", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "UID", 
                        One
                    }
                }, 

                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "usb4-host-interface", 
                        \_SB.PCI0.GP19.NHI1
                    }, 

                    Package (0x02)
                    {
                        "usb4-port-number", 
                        0x02
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.GP19.NHI0)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.SDEP (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((\G021 != One))
            {
                Local1 = \G022
                M232 (Local1, Arg0, Zero)
                \G021 = One
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._RST Call \\_SB.ALIB (0x15, 0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.ALIB (0x15, Zero)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F54)
            Local0 = \G023
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F50)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F51)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (RPNM, 0xEE)
        Name (LCRG, 0xEEEEEEEE)
        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F53)
            If ((\G023 == 0x04))
            {
                Local0 = M017 (Zero, 0x03, One, 0x72, Zero, 0x08)
                Local1 = 0xC0
                If (((Local0 & 0xC0) == 0x40))
                {
                    M460 ("  PCIe GPP [0:3:1] EP is connected\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Local2 = M013 (\_SB.PCI0.GP11.DADR, 0x54, Zero, 0x10)
                    If (((Local2 & 0x03) == Zero))
                    {
                        M014 (\_SB.PCI0.GP11.DADR, 0x54, Zero, 0x10, ((Local2 | 0x03) & 0x7FFF))
                    }

                    If ((RPNM == 0xEE))
                    {
                        RPNM = M401 (Zero, 0x03, One)
                    }

                    If (((RPNM != 0xFF) && (LCRG == 0xEEEEEEEE)))
                    {
                        LCRG = (M471 (Zero, RPNM, 0x04) + 0x0294)
                    }

                    If ((LCRG != 0xEEEEEEEE))
                    {
                        Local1 = M249 (Zero, Zero, Zero, LCRG)
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PCIE_LC_STATE0 = 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    }

                    If (((Local1 & 0x3F) != Zero))
                    {
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP11.CpmSendPmeTurnOff (0, 3, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        M402 (Zero, 0x03, One)
                    }
                }

                M460 ("    Call \\_SB.ALIB (0x14, 1) - Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.ALIB (0x14, One)
                M460 ("    Call \\_SB.ALIB (0x14, 1) - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS3 - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F55)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F56)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F58)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* \_SB_.PCI0.GP19.M641 */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP19.NHI0.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP19.NHI0.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP19.NHI0.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI0.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.NHI1)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.SDEP (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((\G021 != One))
            {
                Local1 = \G022
                M232 (Local1, Arg0, Zero)
                \G021 = One
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._RST Call \\_SB.ALIB (0x15, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.ALIB (0x15, One)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F64)
            Local0 = \G023
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F60)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F61)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (RPNM, 0xEE)
        Name (LCRG, 0xEEEEEEEE)
        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F63)
            If ((\G023 == 0x04))
            {
                Local0 = M017 (Zero, 0x04, One, 0x72, Zero, 0x08)
                Local1 = 0xC0
                If (((Local0 & 0xC0) == 0x40))
                {
                    M460 ("  PCIe GPP [0:4:1] EP is connected\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Local2 = M013 (\_SB.PCI0.GP12.DADR, 0x54, Zero, 0x10)
                    If (((Local2 & 0x03) == Zero))
                    {
                        M014 (\_SB.PCI0.GP12.DADR, 0x54, Zero, 0x10, ((Local2 | 0x03) & 0x7FFF))
                    }

                    If ((RPNM == 0xEE))
                    {
                        RPNM = M401 (Zero, 0x04, One)
                    }

                    If (((RPNM != 0xFF) && (LCRG == 0xEEEEEEEE)))
                    {
                        LCRG = (M471 (Zero, RPNM, 0x04) + 0x0294)
                    }

                    If ((LCRG != 0xEEEEEEEE))
                    {
                        Local1 = M249 (Zero, Zero, Zero, LCRG)
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PCIE_LC_STATE0 = 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    }

                    If (((Local1 & 0x3F) != Zero))
                    {
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP12.CpmSendPmeTurnOff (0, 4, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        M402 (Zero, 0x04, One)
                    }
                }

                M460 ("    Call \\_SB.ALIB (0x14, 2) - Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.ALIB (0x14, 0x02)
                M460 ("    Call \\_SB.ALIB (0x14, 2) - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS3 - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F65)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F66)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F68)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* \_SB_.PCI0.GP19.M641 */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP19.NHI1.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP19.NHI1.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP19.NHI1.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI1.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP11)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\G021 == One) && CondRefOf (\_SB.PCI0.GP11._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI0
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F74)
            Local0 = Zero
            Local0 = \G024
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F70)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F71)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F73)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F75)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F76)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F78)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (XHGP, 0xFF)
        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* External reference */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP11.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP11.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP11.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP11.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, Zero, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, Zero, Zero, Zero)
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (Arg1)
                        {
                            Case (Zero)
                            {
                                M460 ("    Return 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                M460 ("    Return 0x21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Buffer (One)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= One))
                        {
                            Local0 = \G026
                            M460 ("    Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._RMV ()  Return 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3F94)
                Local0 = \G025
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._S0W ()  Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x04
                })
            }

            Method (SSTA, 0, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (SINI, 0, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (SREG, 2, Serialized)
            {
                M000 (0x3F90)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
            }

            Method (SDSW, 3, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3F91)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3F93)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3F95)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3F96)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3F98)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP11.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GP11.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GP11.SWUS.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GP11.SWUS.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GP11.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP11.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_SB.PCI0.GP12)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\G021 == One) && CondRefOf (\_SB.PCI0.GP12._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI1
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F84)
            Local0 = \G024
            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x04
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SINI, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F80)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (SDSW, 3, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F81)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F83)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F85)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F86)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F88)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (XHGP, 0xFF)
        Name (DVTP, 0xEE)
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (FLG0, 0xEE)
        Name (M640, 0x33)
        Name (M641, 0x33)
        Name (M642, 0x33)
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Local5 = Zero
            If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
            {
                Local5 |= One
                If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                {
                    Local5 |= 0x02
                    M640 = 0x33
                    M641 = 0x33
                    M642 = 0x33
                    FLG0 = 0xEE
                    ESTA = 0xEE
                    DBUS = 0xEEEE
                    DADR = 0xEEEEEEEE
                }
            }

            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                Local5 |= 0x04
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        Local5 |= 0x08
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        Local5 |= 0x10
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    Local5 |= 0x20
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local5 |= 0x40
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = M04B (DADR, Zero)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        Local5 |= 0x80
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local5 |= 0x0100
                            If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                            {
                                If ((^^M641 == 0x33))
                                {
                                    Local5 |= 0x0200
                                    Local2 = M646 (^^DADR, 0x10)
                                    ^^M641 = Local2
                                }
                                Else
                                {
                                    Local5 |= 0x0400
                                    Local2 = ^^M641 /* External reference */
                                }

                                If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                {
                                    Local5 |= 0x0800
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                    }
                    ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                    {
                        EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                        If ((M641 == 0x33))
                        {
                            Local5 |= 0x1000
                            Local2 = M646 (DADR, 0x10)
                            M641 = Local2
                        }
                        Else
                        {
                            Local5 |= 0x2000
                            Local2 = M641 /* \_SB_.PCI0.GP12.M641 */
                        }

                        Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                        If ((Local3 == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                Local5 |= 0x4000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                            {
                                Local5 |= 0x8000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00010000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                            Zero))
                        {
                            If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                            {
                                Local5 |= 0x00020000
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                Local5 |= 0x00040000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            Local5 |= 0x00080000
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            Local5 |= 0x00100000
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }

                        If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                        {
                            If ((M642 == 0x33))
                            {
                                Local5 |= 0x00200000
                                Local4 = M646 (DADR, 0x15)
                            }
                            Else
                            {
                                Local5 |= 0x00400000
                                Local4 = M642 /* \_SB_.PCI0.GP12.M642 */
                            }

                            If ((Local4 != Zero))
                            {
                                Local5 |= 0x00800000
                                FLG0 = 0x16
                            }
                        }
                    }
                    Else
                    {
                        Local5 |= 0x01000000
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    Local5 |= 0x02000000
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((FLG0 == 0x16))
            {
                Local5 |= 0x04000000
                If ((M049 (DADR, 0x19) == Zero))
                {
                    Local5 |= 0x08000000
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                Local5 |= 0x10000000
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                Local5 |= 0x40000000
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
            }

            Return (DSTA) /* \_SB_.PCI0.GP12.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = M04B (DADR, Zero)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            If ((PCSA == One))
            {
                If ((M641 == 0x33))
                {
                    Local2 = M646 (DADR, 0x10)
                    M641 = Local2
                }

                If ((M640 == 0x33))
                {
                    Local2 = M646 (DADR, One)
                    M640 = Local2
                }

                If ((DVTP == 0xEE))
                {
                    Local1 = M049 (DADR, 0x0E)
                    Local1 &= 0x3F
                    If ((Local1 == Zero))
                    {
                        DVTP = Zero
                    }

                    If ((Local1 == One))
                    {
                        DVTP = One
                    }
                }
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP12.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (XHGP))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            Local0 = M4F1 (XHGP)
                        }
                    }

                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, Zero, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, Zero, Zero, Zero)
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (Arg1)
                        {
                            Case (Zero)
                            {
                                M460 ("    Return 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                M460 ("    Return 0x21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Buffer (One)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= One))
                        {
                            Local0 = \G026
                            M460 ("    Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._RMV ()  Return 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3FA4)
                Local0 = Zero
                Local0 = \G025
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._S0W ()  Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x04
                })
            }

            Method (SSTA, 0, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (SINI, 0, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._INI ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (SREG, 2, Serialized)
            {
                M000 (0x3FA0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
            }

            Method (SDSW, 3, Serialized)
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._DSW ()\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3FA1)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3FA3)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3FA5)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3FA6)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3FA8)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (DVTP, 0xEE)
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (FLG0, 0xEE)
            Name (M640, 0x33)
            Name (M641, 0x33)
            Name (M642, 0x33)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local5 = Zero
                If ((CondRefOf (^^FLG0) && CondRefOf (^^EBUS)))
                {
                    Local5 |= One
                    If (((^^FLG0 == 0x16) && (^^EBUS != DBUS)))
                    {
                        Local5 |= 0x02
                        M640 = 0x33
                        M641 = 0x33
                        M642 = 0x33
                        FLG0 = 0xEE
                        ESTA = 0xEE
                        DBUS = 0xEEEE
                        DADR = 0xEEEEEEEE
                    }
                }

                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    Local5 |= 0x04
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            Local5 |= 0x08
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP12.EBUS */
                        }
                        Else
                        {
                            Local5 |= 0x10
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        Local5 |= 0x20
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local5 |= 0x40
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = M04B (DADR, Zero)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            Local5 |= 0x80
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local5 |= 0x0100
                                If ((CondRefOf (^^M641) && CondRefOf (^^DADR)))
                                {
                                    If ((^^M641 == 0x33))
                                    {
                                        Local5 |= 0x0200
                                        Local2 = M646 (^^DADR, 0x10)
                                        ^^M641 = Local2
                                    }
                                    Else
                                    {
                                        Local5 |= 0x0400
                                        Local2 = ^^M641 /* \_SB_.PCI0.GP12.M641 */
                                    }

                                    If (((M049 (^^DADR, (Local2 + 0x14)) & 0x40) == 0x40))
                                    {
                                        Local5 |= 0x0800
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                        }
                        ElseIf ((M04A (DADR, 0x0A) == 0x0604))
                        {
                            EBUS = ((M04B (DADR, 0x18) >> 0x08) & 0xFF)
                            If ((M641 == 0x33))
                            {
                                Local5 |= 0x1000
                                Local2 = M646 (DADR, 0x10)
                                M641 = Local2
                            }
                            Else
                            {
                                Local5 |= 0x2000
                                Local2 = M641 /* \_SB_.PCI0.GP12.SWUS.M641 */
                            }

                            Local3 = ((M049 (DADR, (Local2 + 0x02)) >> 0x04) & 0x0F)
                            If ((Local3 == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    Local5 |= 0x4000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((M648 (EBUS, 0x0D, Zero) == Zero))
                                {
                                    Local5 |= 0x8000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00010000
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((M049 (DADR, (Local2 + 0x1A)) & 0x40) == 
                                Zero))
                            {
                                If (((M049 (DADR, (Local2 + 0x14)) & 0x40) == Zero))
                                {
                                    Local5 |= 0x00020000
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    Local5 |= 0x00040000
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                Local5 |= 0x00080000
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                Local5 |= 0x00100000
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }

                            If (((FLG0 == 0xEE) && (Local3 == 0x06)))
                            {
                                If ((M642 == 0x33))
                                {
                                    Local5 |= 0x00200000
                                    Local4 = M646 (DADR, 0x15)
                                }
                                Else
                                {
                                    Local5 |= 0x00400000
                                    Local4 = M642 /* \_SB_.PCI0.GP12.SWUS.M642 */
                                }

                                If ((Local4 != Zero))
                                {
                                    Local5 |= 0x00800000
                                    FLG0 = 0x16
                                }
                            }
                        }
                        Else
                        {
                            Local5 |= 0x01000000
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        Local5 |= 0x02000000
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((FLG0 == 0x16))
                {
                    Local5 |= 0x04000000
                    If ((M049 (DADR, 0x19) == Zero))
                    {
                        Local5 |= 0x08000000
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    Local5 |= 0x10000000
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    Local5 |= 0x40000000
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    M460 ("  PCSA = 0x%X  PW3S = 0x%X  FLG0 = 0x%X  XHGP = 0x%X  Local5 = 0x%X\n", PCSA, PW3S, FLG0, XHGP, Local5, Zero)
                }

                Return (DSTA) /* \_SB_.PCI0.GP12.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = M04B (DADR, Zero)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                If ((PCSA == One))
                {
                    If ((M641 == 0x33))
                    {
                        Local2 = M646 (DADR, 0x10)
                        M641 = Local2
                    }

                    If ((M640 == 0x33))
                    {
                        Local2 = M646 (DADR, One)
                        M640 = Local2
                    }

                    If ((DVTP == 0xEE))
                    {
                        Local1 = M049 (DADR, 0x0E)
                        Local1 &= 0x3F
                        If ((Local1 == Zero))
                        {
                            DVTP = Zero
                        }

                        If ((Local1 == One))
                        {
                            DVTP = One
                        }
                    }
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X  DVTP = 0x%X\n", DADR, PCSA, PWST, PW3S, DVTP, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((M049 (DADR, 0x04) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP12.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3->D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (XHGP))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0->D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                Local0 = M4F1 (XHGP)
                            }
                        }

                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_GPE)
    {
        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L1A\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GP19))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI0))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.NHI0, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI1))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.NHI1, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC3))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.XHC3, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC4))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.XHC4, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11.SWUS, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP11.SWUS, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12.SWUS, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP12.SWUS, 0x02) // Device Wake
            }
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x0E)
    Name (UR2I, 0x05)
    Name (UR3I, 0x0F)
    Name (UR4I, 0x0D)
    Name (UMTT, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (\_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (\_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            Offset (0x04), 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            HD2E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   1, 
            US4D,   1, 
            S03D,   1, 
            UT0O,   1, 
            UT1O,   1, 
            UT2O,   1, 
            UT3O,   1, 
            Offset (0x1A), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1, 
            Offset (0x2D), 
            UT0I,   1, 
            UT1I,   1, 
            UT2I,   1, 
            UT3I,   1, 
            UT4I,   1, 
            Offset (0x2E), 
            UL0I,   1, 
            UL1I,   1, 
            UL2I,   1, 
            UL3I,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            Offset (0x16), 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            Offset (0x20), 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            Offset (0x4B), 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            Offset (0x58), 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            Offset (0x69), 
            IM69,   8, 
            Offset (0x6A), 
            IM6A,   8, 
            Offset (0x6B), 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF0), 
            IC0I,   8, 
            Offset (0xF1), 
            IC1I,   8, 
            Offset (0xF2), 
            IC2I,   8, 
            Offset (0xF3), 
            IC3I,   8, 
            Offset (0xF4), 
            IUA0,   8, 
            Offset (0xF5), 
            IUA1,   8, 
            Offset (0xF6), 
            IIF6,   8, 
            Offset (0xF7), 
            IUA4,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            Offset (0xF9), 
            IUA3,   8
        }
    }

    Scope (\_SB)
    {
        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (HID2)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD2E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC12000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID2._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT0O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y2B)
                    {
                        0x00000003,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR0._CRS._Y2B._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA0 /* \_SB_.IUA0 */
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (Zero)
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT0I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT1O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y2C)
                    {
                        0x00000011,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR1._CRS._Y2C._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA1 /* \_SB_.IUA1 */
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (One)
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT1I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT2O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y2D)
                    {
                        0x00000005,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR2._CRS._Y2D._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA2 /* \_SB_.IUA2 */
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x02)
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT2I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT3O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y2E)
                    {
                        0x00000012,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR3._CRS._Y2E._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA3 /* \_SB_.IUA3 */
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x03)
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT3I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y2F)
                    {
                        0x00000010,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateByteField (BUF0, \_SB.FUR4._CRS._Y2F._INT, IRQB)  // _INT: Interrupts
                IRQB = IUA4 /* \_SB_.IUA4 */
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Local0 = 0x0F
                    }
                }

                If ((UT4I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y30)
                    {
                        0x0000000A,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CA._CRS._Y30._INT, IRQW)  // _INT: Interrupts
                IRQW = IC0I /* \_SB_.IC0I */
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y31)
                    {
                        0x0000000B,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CB._CRS._Y31._INT, IRQW)  // _INT: Interrupts
                IRQW = IC1I /* \_SB_.IC1I */
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y32)
                    {
                        0x00000004,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CC._CRS._Y32._INT, IRQW)  // _INT: Interrupts
                IRQW = IC2I /* \_SB_.IC2I */
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y33)
                    {
                        0x00000006,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CD._CRS._Y33._INT, IRQW)  // _INT: Interrupts
                IRQW = IC3I /* \_SB_.IC3I */
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y34)
                    {
                        0x0000000A,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I3CA._CRS._Y34._INT, IRQW)  // _INT: Interrupts
                IRQW = IC0I /* \_SB_.IC0I */
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y35)
                    {
                        0x0000000B,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I3CB._CRS._Y35._INT, IRQW)  // _INT: Interrupts
                IRQW = IC1I /* \_SB_.IC1I */
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y36)
                    {
                        0x00000004,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I3CC._CRS._Y36._INT, IRQW)  // _INT: Interrupts
                IRQW = IC2I /* \_SB_.IC2I */
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y37)
                    {
                        0x00000006,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I3CD._CRS._Y37._INT, IRQW)  // _INT: Interrupts
                IRQW = IC3I /* \_SB_.IC3I */
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }

        Method (SHAR, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.FUR1._STA ())
            }
            ElseIf ((Arg0 == One))
            {
                Return (\_SB.FUR0._STA ())
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (\_SB.FUR3._STA ())
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (\_SB.FUR2._STA ())
            }
            Else
            {
                Return (0x03)
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (Zero)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL0I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y38)
                    IRQNoFlags (_Y39)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y38._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y38._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y39._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (One)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL1I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3A)
                    IRQNoFlags (_Y3B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y3A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y3A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y3B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x02)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL2I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3C)
                    IRQNoFlags (_Y3D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y3C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y3C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y3D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x03)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL3I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3E)
                    IRQNoFlags (_Y3F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y3E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y3E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y3F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUFF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0003
                    }
            })
            Name (BUNP, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0002
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0003
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0009
                    }
                GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
            })
            If ((G001 == One))
            {
                M460 ("  OEM-ASL-\\_SB.GPIO._AEI return BUNP (MS)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (BUNP) /* \_SB_.GPIO._AEI.BUNP */
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.GPIO._AEI return BUFF (S3)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (BUFF) /* \_SB_.GPIO._AEI.BUFF */
            }
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Local0 = M04B ((M084 + 0x1500), (ToInteger (Arg0) * 0x04
                ))
            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-Start Case GPIO%d = 0x%X\n", ToInteger (Arg0), Local0, Zero, Zero, Zero, Zero)
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    M000 (0x3900)
                    M460 ("    Notify (\\_SB.PWRB, 0x80)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PWRB, 0x80) // Status Change
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC0,0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC1,0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.AZAL,0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.ACP,0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
                }
                Case (0x02)
                {
                    M000 (0x3902)
                    M460 ("    Clear SCI Status Bit08\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    M014 (0xFED80200, Zero, Zero, 0x20, 0x0100)
                    If (CondRefOf (\_GPE._L08))
                    {
                        M460 ("    Call \\_GPE._L08 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        \_GPE._L08 ()
                    }
                }
                Case (0x03)
                {
                    M000 (0x3903)
                    M460 ("    Clear SCI Status Bit02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    M014 (0xFED80200, Zero, Zero, 0x20, 0x04)
                    If (CondRefOf (\_GPE._L02))
                    {
                        M460 ("    Call \\_GPE._L02 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        \_GPE._L02 ()
                    }
                }
                Case (0x09)
                {
                    M000 (0x3909)
                    M460 ("    Clear SCI Status Bit22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    M014 (0xFED80200, Zero, Zero, 0x20, 0x00400000)
                    If (CondRefOf (\_GPE._L16))
                    {
                        M460 ("    Call \\_GPE._L16 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        \_GPE._L16 ()
                    }
                }
                Case (0x0A)
                {
                    If (CondRefOf (M31D))
                    {
                        M460 ("    Call CpmUcsiPpm2Opm ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        M31D ()
                        M460 ("    Notify (\\_SB.UBTC, 0x80)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.UBTC, 0x80) // Status Change
                    }
                }

            }

            Local0 = M04B ((M084 + 0x1500), (ToInteger (Arg0) * 0x04
                ))
            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-End Case GPIO%d = 0x%X\n", ToInteger (Arg0), Local0, Zero, Zero, Zero, Zero)
        }
    }

    If ((G027 == One))
    {
        Scope (\_GPE)
        {
            Name (ETP0, 0x55)
            Name (ETP1, 0x55)
            Name (ETP2, 0x55)
            Name (ETP3, 0x55)
            Name (ETP4, 0x55)
            Name (ETP5, 0x55)
            Name (ETP6, 0x55)
            Name (ETP7, 0x55)
            Name (ETP8, 0x55)
            Name (ETP9, 0x55)
            Name (ETPA, 0x55)
            Name (ET11, 0x55)
            Name (ET12, 0x55)
            Name (ET17, 0x55)
            Name (ET18, 0x55)
            Name (ET19, 0x55)
            Method (_E10, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._E10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M644 (0xFED80200, 0x04, 0x10)
                If ((\_GPE.ETP0 != 0xFF))
                {
                    \_GPE.ETP0 = (M017 (Zero, One, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP0 == One) || (\_GPE.ETP0 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP0))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == One))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP0, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP0, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP1 != 0xFF))
                {
                    \_GPE.ETP1 = (M017 (Zero, One, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP1 == One) || (\_GPE.ETP1 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP1))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP2 != 0xFF))
                {
                    \_GPE.ETP2 = (M017 (Zero, One, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP2 == One) || (\_GPE.ETP2 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP2))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP3 != 0xFF))
                {
                    \_GPE.ETP3 = (M017 (Zero, One, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP3 == One) || (\_GPE.ETP3 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP3))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP4 != 0xFF))
                {
                    \_GPE.ETP4 = (M017 (Zero, One, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP4 == One) || (\_GPE.ETP4 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP4))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP5 != 0xFF))
                {
                    \_GPE.ETP5 = (M017 (Zero, 0x02, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP5 == One) || (\_GPE.ETP5 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP5))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x03))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x04))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x05))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x06))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x07))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP5, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP5, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP6 != 0xFF))
                {
                    \_GPE.ETP6 = (M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP6 == One) || (\_GPE.ETP6 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP6))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x02))
                                {
                                    If (((M049 (M620, 0x5A) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP6, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP6, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP6, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP7 != 0xFF))
                {
                    \_GPE.ETP7 = (M017 (Zero, 0x02, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP7 == One) || (\_GPE.ETP7 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP7))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP7, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP8 != 0xFF))
                {
                    \_GPE.ETP8 = (M017 (Zero, 0x02, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP8 == One) || (\_GPE.ETP8 == 0x03)))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GPP8, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
                        Sleep (0x64)
                        Local0 = M017 (Zero, 0x02, 0x04, 0x78, Zero, 0x20)
                        If (((Local0 & 0x00030000) != Zero))
                        {
                            M018 (Zero, 0x02, 0x04, 0x78, Zero, 0x20, Local0)
                            Local0 = M017 (Zero, 0x02, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x04, 0x78, Zero, 0x20)
                            }
                        }
                    }
                }

                If ((\_GPE.ETP9 != 0xFF))
                {
                    \_GPE.ETP9 = (M017 (Zero, 0x02, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP9 == One) || (\_GPE.ETP9 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP9))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP9, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPA != 0xFF))
                {
                    \_GPE.ETPA = (M017 (Zero, 0x02, 0x06, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPA == One) || (\_GPE.ETPA == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPA))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPA, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x06, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x06, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x06, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET11 != 0xFF))
                {
                    \_GPE.ET11 = (M017 (Zero, 0x03, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET11 == One) || (\_GPE.ET11 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP11))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP11, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET12 != 0xFF))
                {
                    \_GPE.ET12 = (M017 (Zero, 0x04, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET12 == One) || (\_GPE.ET12 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP12))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP12, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET17 != 0xFF))
                {
                    \_GPE.ET17 = (M017 (Zero, 0x08, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET17 == One) || (\_GPE.ET17 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP17))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET18 != 0xFF))
                {
                    \_GPE.ET18 = (M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET18 == One) || (\_GPE.ET18 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP18))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP18, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET19 != 0xFF))
                {
                    \_GPE.ET19 = (M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET19 == One) || (\_GPE.ET19 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP19))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    If ((G001 == One))
    {
        Scope (\_SB.PCI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEP
            })
        }

        Scope (\_SB)
        {
            Device (PEP)
            {
                Name (_HID, "AMDI0008")  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (DEV0, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Package (0x32)
                    {
                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C000", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C001", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C002", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C003", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C004", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C005", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C006", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C007", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C008", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C009", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00A", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00B", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00C", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00D", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00E", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00F", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C010", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C011", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C012", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C013", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C014", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C015", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C016", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C017", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C018", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C019", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01A", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01B", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01C", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01D", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01E", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01F", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP0", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP5", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            Zero, 
                            "\\_SB.PCI0.GPP5.XH00", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            Zero, 
                            "\\_SB.PCI0.GPP5.EP01", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP6", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP11", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP12", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP1.NVME", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.VGA", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.AZAL", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.ACP", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.HDAU", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.XHC0", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.XHC1", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP19.XHC3", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP19.XHC4", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP19.NHI0", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP19.NHI1", 
                            Zero, 
                            0x03
                        }
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (MPEP, 4, NotSerialized)
                {
                    Local1 = DerefOf (DEV0 [One])
                    Local0 = Zero
                    While ((Local0 < Local1))
                    {
                        If ((DerefOf (DerefOf (DerefOf (DEV0 [0x02]) [Local0]
                            ) [One]) == Arg1))
                        {
                            DerefOf (DerefOf (DEV0 [0x02]) [Local0]) [Zero]
                                 = Arg0
                            DerefOf (DerefOf (DEV0 [0x02]) [Local0]) [0x02]
                                 = Arg2
                            DerefOf (DerefOf (DEV0 [0x02]) [Local0]) [0x03]
                                 = Arg3
                            Break
                        }

                        Local0++
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (0x02)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x3F                                             // ?
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                DEV0 [One] = SizeOf (DEV0 [0x02])
                                If (CondRefOf (\_SB.PCI0.GPP5.UP02.DSTA))
                                {
                                    If ((\_SB.PCI0.GPP5.UP02.DSTA != 0x0F))
                                    {
                                        MPEP (Zero, "\\_SB.PCI0.GPP5", Zero, 0x03)
                                        MPEP (One, "\\_SB.PCI0.GPP5.XH00", Zero, 0x03)
                                        MPEP (One, "\\_SB.PCI0.GPP5.EP01", Zero, 0x03)
                                    }
                                }

                                Return (DEV0) /* \_SB_.PEP_.DEV0 */
                            }
                            Case (0x02)
                            {
                                M000 (0x3E14)
                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                M000 (0x3E15)
                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                M000 (0x3E12)
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                M000 (0x3E13)
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xF9, 0x01                                       // ..
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (0x03)
                            {
                                M000 (0x3E03)
                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                M000 (0x3E04)
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                M000 (0x3E05)
                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                M000 (0x3E06)
                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                If (CondRefOf (\_SB.PCI0.GPP5.UP02.SINI))
                                {
                                    \_SB.PCI0.GPP5.UP02.SINI ()
                                }

                                M000 (0x3E07)
                                Return (Zero)
                            }
                            Case (0x08)
                            {
                                Local0 = One
                                If (CondRefOf (\PWGS))
                                {
                                    Local0 = \PWGS (0x03)
                                }

                                If ((Local0 == Zero))
                                {
                                    If (CondRefOf (\_SB.PCI0.GPP5.UP02.DSTA))
                                    {
                                        If ((\_SB.PCI0.GPP5.UP02.DSTA != 0x0F))
                                        {
                                            If (CondRefOf (\_SB.PCI0.GPP5.UP02.SREG))
                                            {
                                                \_SB.PCI0.GPP5.UP02.SREG (0x02, One)
                                            }
                                        }
                                    }

                                    If (CondRefOf (\_SB.PCI0.GPP5))
                                    {
                                        Notify (\_SB.PCI0.GPP5, Zero) // Bus Check
                                    }
                                }

                                Local1 = M409 (Zero, 0x19, Zero)
                                M000 (0x3E08)
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Scope (\_TZ)
        {
            ThermalZone (TZ01)
            {
                Name (TZV0, 0xFF)
                Name (TZV1, 0x012C)
                Name (TZV2, Zero)
                Name (TZV3, Zero)
                Name (TZV4, 0xFF)
                Name (TZV5, 0xFF)
                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    If ((TZV0 == 0xFF))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x000599D4)
                        TZV0 = ((Local0 >> 0x0B) & One)
                    }

                    Local0 = M249 (Zero, Zero, Zero, 0x00059800)
                    TZV1 = ((Local0 >> 0x15) & 0x7FFF)
                    TZV1 = (TZV1 * 0x0A)
                    If ((TZV0 == One))
                    {
                        TZV1 = (TZV1 / 0x04)
                    }
                    Else
                    {
                        TZV1 = (TZV1 / 0x08)
                        If ((TZV4 == 0xFF))
                        {
                            TZV2 = ((Local0 >> 0x10) & 0x03)
                            TZV3 = ((Local0 >> 0x13) & One)
                            TZV4 = ((TZV2 != 0x03) && (TZV3 == Zero))
                        }

                        If ((TZV4 == Zero))
                        {
                            TZV1 -= 0x01EA
                        }
                    }

                    Return ((0x0AAC + TZV1))
                }

                Method (_PSL, 0, Serialized)  // _PSL: Passive List
                {
                    Return (Package (0x10)
                    {
                        \_SB.PLTF.C000, 
                        \_SB.PLTF.C001, 
                        \_SB.PLTF.C002, 
                        \_SB.PLTF.C003, 
                        \_SB.PLTF.C004, 
                        \_SB.PLTF.C005, 
                        \_SB.PLTF.C006, 
                        \_SB.PLTF.C007, 
                        \_SB.PLTF.C008, 
                        \_SB.PLTF.C009, 
                        \_SB.PLTF.C00A, 
                        \_SB.PLTF.C00B, 
                        \_SB.PLTF.C00C, 
                        \_SB.PLTF.C00D, 
                        \_SB.PLTF.C00E, 
                        \_SB.PLTF.C00F
                    })
                }

                Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                {
                    If ((TZV5 == 0xFF))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x00059808)
                        Local1 = ((Local0 >> 0x06) & 0xFF)
                        TZV5 = (Local1 - 0x31)
                    }

                    Return ((0x0AAC + (TZV5 * 0x0A)))
                }

                Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                {
                    Return (One)
                }

                Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                {
                    Return (0x02)
                }

                Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                {
                    Return (0x14)
                }
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : AF
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : 8F663000
[028h 0040 004h]                DSDT Address : 8D5EF000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 01 [Desktop]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 000000B4
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : BE
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 05
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 000000008D5EF000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 00000000000000B4

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 AF 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 30 66 8F 00 F0 5E 8D 00 01 09 00  // .....0f...^.....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 05 00 00 00 00 00 00 00 00 00 F0 5E 8D  // ..............^.
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 19DCFC73
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 73 FC DC 19 00 00 00 00  // FACS@...s.......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : A9
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 A9 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 33 31 31 37  // ....$FID.x.A3117
    0030: 30 34 30 00 96 8E 9C 72 93 EF 7E F8 03 07 53 39  // 040....r..~...S9
    0040: AA 3A AA B7 30 35 00 33 35 00 30 30 00 34 30 00  // .:..05.35.00.40.
    0050: E8 07 07 0B 0F 0D 3A FF FF 41 4C 41 53 4B 41 41  // ......:..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 47
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 000000008B665000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 000000008B67D000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 47 41 4C 41 53 4B 41  // FPDTD....GALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 50 66 8B  // .............Pf.
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 D0 67 8B  // ..............g.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : ED
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 ED 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000000C8
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 6D
[00Ah 0010 006h]                      Oem ID : "AMD  "
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]         Virtualization Info : 00203041
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0044
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000F7500000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 48 [Device Entry: Special Device]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[060h 0096 001h]                      Handle : 00
[061h 0097 002h]       Source Used Device ID : 00A0
[063h 0099 001h]                     Variety : 02

[064h 0100 001h]               Subtable Type : 48 [Device Entry: Special Device]
[065h 0101 002h]                   Device ID : 0000
[067h 0103 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[068h 0104 001h]                      Handle : 20
[069h 0105 002h]       Source Used Device ID : 00A0
[06Bh 0107 001h]                     Variety : 01

[06Ch 0108 001h]               Subtable Type : 48 [Device Entry: Special Device]
[06Dh 0109 002h]                   Device ID : 0000
[06Fh 0111 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[070h 0112 001h]                      Handle : 21
[071h 0113 002h]       Source Used Device ID : 0001
[073h 0115 001h]                     Variety : 01

[074h 0116 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[075h 0117 001h]       Flags (decoded below) : 30
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 0
[076h 0118 002h]                      Length : 0054
[078h 0120 002h]                    DeviceId : 0002
[07Ah 0122 002h]           Capability Offset : 0040
[07Ch 0124 008h]                Base Address : 00000000F7500000
[084h 0132 002h]           PCI Segment Group : 0000
[086h 0134 002h]         Virtualization Info : 0000
[088h 0136 004h]                  Attributes : 00048000
[08Ch 0140 008h]                   EFR Image : 246577EFA2254AFA
[094h 0148 008h]                    Reserved : 0000000000000000

[09Ch 0156 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[09Dh 0157 002h]                   Device ID : 0003
[09Fh 0159 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A0h 0160 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A1h 0161 002h]                   Device ID : FFFE
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A5h 0165 002h]                   Device ID : FF00
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0A8h 0168 001h]                    Reserved : 00
[0A9h 0169 002h]       Source Used Device ID : 00A5
[0ABh 0171 001h]                    Reserved : 00

[0ACh 0172 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0ADh 0173 002h]                   Device ID : FFFF
[0AFh 0175 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B0h 0176 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B1h 0177 002h]                   Device ID : 0000
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0B4h 0180 001h]                      Handle : 00
[0B5h 0181 002h]       Source Used Device ID : 00A0
[0B7h 0183 001h]                     Variety : 02

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0BCh 0188 001h]                      Handle : 20
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 01

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0C4h 0196 001h]                      Handle : 21
[0C5h 0197 002h]       Source Used Device ID : 0001
[0C7h 0199 001h]                     Variety : 01

Raw Table Data: Length 200 (0xC8)

    0000: 49 56 52 53 C8 00 00 00 02 6D 41 4D 44 20 20 00  // IVRS.....mAMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 44 00 02 00 40 00 00 00 50 F7 00 00 00 00  // ..D...@...P.....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 48 00 00 00  // C...........H...
    0060: 00 A0 00 02 48 00 00 D7 20 A0 00 01 48 00 00 00  // ....H... ...H...
    0070: 21 01 00 01 11 30 54 00 02 00 40 00 00 00 50 F7  // !....0T...@...P.
    0080: 00 00 00 00 00 00 00 00 00 80 04 00 FA 4A 25 A2  // .............J%.
    0090: EF 77 65 24 00 00 00 00 00 00 00 00 03 03 00 00  // .we$............
    00A0: 04 FE FF 00 43 00 FF 00 00 A5 00 00 04 FF FF 00  // ....C...........
    00B0: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    00C0: 48 00 00 00 21 01 00 01                          // H...!...


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : B4
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 B4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 4D 53 46 54  // A M I.......MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "OEMACP", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Device (HDA0)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-interface-version", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-device-type", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-eps", 
                        Package (0x02)
                        {
                            "PE00", 
                            "PE01"
                        }
                    }
                }
            })
            Name (PE00, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-dsp-offload-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-category", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format", 
                        "EFMT"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-fx-type", 
                        "EAFX"
                    }
                }
            })
            Name (PE01, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-dsp-offload-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-category", 
                        0x02
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format", 
                        "EFMT"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-fx-type", 
                        "EAFX"
                    }
                }
            })
            Name (EFMT, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format-max-channels", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-sampling-frequency", 
                        Package (0x02)
                        {
                            0xBB80, 
                            0x00017700
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-bits-per-sample", 
                        Package (0x02)
                        {
                            0x10, 
                            0x18
                        }
                    }
                }
            })
            Name (EAFX, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-mfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-sfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-encoder-type", 
                        Zero
                    }
                }
            })
        }

        Device (PDMC)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-interface-version", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-device-type", 
                        0x02
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-eps", 
                        Package (0x01)
                        {
                            "CE00"
                        }
                    }
                }
            })
            Name (CE00, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0C)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-voice-activation-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-voice-activation-ddi-version", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-voice-activation-agents", 
                        Package (0x02)
                        {
                            0x04, 
                            0x40
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-startup-silence-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-dsp-offload-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-ultrasound-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-software-loopback-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-ai-noise-reduction-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-default-gain", 
                        Package (0x02)
                        {
                            0x19, 
                            0x08
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-channel-order", 
                        Package (0x08)
                        {
                            One, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-kws-presets", 
                        Package (0x09)
                        {
                            0x02, 
                            0x50, 
                            Zero, 
                            One, 
                            0x02, 
                            0x0B01, 
                            One, 
                            Zero, 
                            One
                        }
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format", 
                        "EFMT"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-fx-type", 
                        "EAFX"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-geometry", 
                        "EMAG"
                    }
                }
            })
            Name (EFMT, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format-max-channels", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-sampling-frequency", 
                        Package (0x01)
                        {
                            0xBB80
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-bits-per-sample", 
                        Package (0x01)
                        {
                            0x10
                        }
                    }
                }
            })
            Name (EAFX, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-mfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-sfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-encoder-type", 
                        Zero
                    }
                }
            })
            Name (EMAG, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x09)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-version", 
                        0x0100
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-vertical-angle-begin", 
                        0xFFFFD718
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-vertical-angle-end", 
                        0x28E8
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-horizontal-angle-begin", 
                        0xFFFFDDE9
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-horizontal-angle-end", 
                        0x2217
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-frequency-band-lo", 
                        0x32
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-frequency-band-hi", 
                        0x4E20
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-number-of-microphones", 
                        0x02
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-mic-array-mic-coord", 
                        Package (0x02)
                        {
                            "MIC0", 
                            "MIC1"
                        }
                    }
                }
            })
            Name (MIC0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-x", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-y", 
                        0xFFD8
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-z", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-vertical-angle", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-horizontal-angle", 
                        Zero
                    }
                }
            })
            Name (MIC1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-x", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-y", 
                        0x28
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-z", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-vertical-angle", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-mic-coord-horizontal-angle", 
                        Zero
                    }
                }
            })
        }

        Device (I2SC)
        {
            Name (_ADR, 0x03)  // _ADR: Address
        }

        Device (BTSC)
        {
            Name (_ADR, 0x04)  // _ADR: Address
        }

        Device (SDWC)
        {
            Name (_ADR, 0x05)  // _ADR: Address
        }

        Device (SDWS)
        {
            Name (_ADR, 0x06)  // _ADR: Address
        }

        Device (USBS)
        {
            Name (_ADR, 0x07)  // _ADR: Address
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG2", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATCS Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateByteField (Arg0, 0x02, M23F)
            CreateByteField (Arg0, 0x03, M240)
            Local0 = ((M240 & 0x0F) << 0x04)
            Local0 |= (M23F & 0x0F)
            M232 (M23A, Local0, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x00000001)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020037, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set GFXCCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020049, 
        0x0002004A, 
        0x0002004B, 
        0x0002004C, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x0005000C, 
        0x0005000D, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set ProcODTCA", 
        "Set ProcODTCK", 
        "Set ProcODTDQ", 
        "Set ProcODTDQS", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Soc TDC Limit", 
        "Set Soc EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x46)
    {
        0x45, 
        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x46, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x45, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x44, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x96, 0x00, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x43, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x42, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            Zero, 
            0x41, 
            Buffer (0x019C)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x40, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  //  ...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  //  ...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x90, 0x06, 0x00, 0x00,  // 6.......
                /* 0010 */  0xA0, 0x05, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,  // ....`...
                /* 0018 */  0x22, 0x0B, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // "...r...
                /* 0020 */  0xE2, 0x04, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x28, 0x05, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // (.......
                /* 0030 */  0x5B, 0x05, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // [...(...
                /* 0038 */  0xCD, 0x05, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // ........
                /* 0040 */  0xF0, 0x0A, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0050 */  0xBB, 0x05, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // ........
                /* 0058 */  0x81, 0x09, 0x00, 0x00, 0x77, 0x08, 0x00, 0x00,  // ....w...
                /* 0060 */  0xA5, 0x03, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // ....w...
                /* 0068 */  0xD0, 0x07, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00,  // ........
                /* 0070 */  0xBE, 0x0A, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0x90, 0x01, 0x00, 0x00, 0xE9, 0x04, 0x00, 0x00,  // ........
                /* 0080 */  0x54, 0x0B, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // T... ...
                /* 0088 */  0xDC, 0x05, 0x00, 0x00, 0xA3, 0x09, 0x00, 0x00,  // ........
                /* 0090 */  0x14, 0x05, 0x00, 0x00, 0x35, 0x05, 0x00, 0x00,  // ....5...
                /* 0098 */  0x34, 0x08, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // 4.......
                /* 00A0 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 00A8 */  0x78, 0x05, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // x...@...
                /* 00B0 */  0x08, 0x07, 0x00, 0x00, 0x8C, 0x0A, 0x00, 0x00,  // ........
                /* 00B8 */  0xF1, 0x07, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00,  // ........
                /* 00C0 */  0x60, 0x09, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // `...U...
                /* 00C8 */  0xB9, 0x08, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // ........
                /* 00D0 */  0xF4, 0x01, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00,  // ........
                /* 00D8 */  0x80, 0x07, 0x00, 0x00, 0x9E, 0x07, 0x00, 0x00,  // ........
                /* 00E0 */  0xA8, 0x07, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x3A, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020037, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x37, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                /* 0008 */  0x54, 0x0B, 0x00, 0x00, 0x1C, 0x0C, 0x00, 0x00,  // T.......
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x36, 0x10, 0x00, 0x00, 0xE6, 0x14, 0x00, 0x00,  // 6.......
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            Zero, 
            0x37, 
            Buffer (0x019C)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0xBC, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00,  // ....X...
                /* 0018 */  0x84, 0x03, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0020 */  0x64, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00,  // d...,...
                /* 0028 */  0xC8, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0030 */  0xE8, 0x03, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000D, 
            One, 
            0x36, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000C, 
            One, 
            0x35, 
            Buffer (0x14)
            {
                /* 0000 */  0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB8, 0x88, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x90, 0xD0, 0x03, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x20, 0xBF, 0x02, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x31, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2F, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x2B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x0002004C, 
            Zero, 
            0x2A, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4C, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x00, 0x00,  // L...<...
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0018 */  0x3C, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // <...x...
            }
        }, 

        Package (0x04)
        {
            0x0002004B, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4B, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x00, 0x00,  // K...<...
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0018 */  0x3C, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // <...x...
            }
        }, 

        Package (0x04)
        {
            0x0002004A, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x4A, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x00, 0x00,  // J...<...
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0018 */  0x3C, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // <...x...
            }
        }, 

        Package (0x04)
        {
            0x00020049, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x49, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x00, 0x00,  // I...<...
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0018 */  0x3C, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // <...x...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x78, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // x...<...
                /* 0018 */  0x28, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00   // (.......
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x25, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,  // ....x...
                /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // <...(...
                /* 0018 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x1A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00,  // ...."...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0xEE, 0x01, 0x00, 0x00,  // =.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0x3C, 0x02, 0x00, 0x00,  // ....<...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0x3C, 0x02, 0x00, 0x00,  // <...<...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x4E, 0x00, 0x00, 0x00,  // ....N...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00,  // ....T...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ;...*...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0C, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (ISMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x8F01D018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1568, 
            AQVS,   32, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                AODV = AQVS /* \AQVS */
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = ISMI /* \ISMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CDFAAIG2", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.MACO, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATPX Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0C))
            {
                PX12 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (((M098 & 0x02) == 0x02))
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x000C4800
            M162 = M099 /* External reference */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            If (CondRefOf (\_SB.MACO))
            {
                \_SB.MACO = (Arg0 & One)
                M460 ("    Set _SB.MACO to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            }
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Method (PX12, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            Local0 = M049 (M133, 0x17)
            If ((Local0 != Zero))
            {
                M111 (Local0, (Arg0 & One))
            }

            M460 ("    Set Display Panel Reset to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Name (ATIB, Buffer (0x0100){})
        Name (M291, 0x81)
        Method (ATIF, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x15))
            {
                Return (AF21 ())
            }

            If ((Arg0 == 0x16))
            {
                Return (AF22 ())
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }

            If ((Arg0 == 0x18))
            {
                Return (AF24 ())
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = Zero
            M158 = Zero
            M159 = Zero
            M160 = Zero
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            M460 ("    Return Supported Notifications Mask = 0x%X  Supported Functions Bit Vector = 0x%X\n", M159, M160, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            M161 = 0x03
            Local0 = ((M103 >> 0x18) & 0xFF)
            Local1 = (M103 & 0x03)
            M162 = Local1
            If (((Local0 >= 0xD0) && (Local0 <= 0xD9)))
            {
                M157 = 0x0B
                M163 = Local0
                M291 = Local0
            }
            Else
            {
                M157 = 0x0A
                If ((M291 != 0x81))
                {
                    M291 = 0x81
                }
            }

            M460 ("    Return Flags = 0x%X  Notify Command Code = 0x%X\n", M162, M291, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            ATIB = Zero
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            M460 ("    Return Pending System BIOS Requests                        = 0x%X\n", M174, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Expansion Mode                                      = 0x%X\n", M175, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: Target Graphics Controller           = 0x%X\n", M176, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: State Id                             = 0x%X\n", M177, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: Target Graphics Controller      = 0x%X\n", M178, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: State Id                        = 0x%X\n", M179, Zero, Zero, Zero, Zero, Zero)
            M460 ("           System Power Source                                 = 0x%X\n", M180, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Panel Brightness Backlight Level                    = 0x%X\n", M181, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = 0x%X\n", M301, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M302, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M04A (M133, 0xD4)
            If ((Local0 != Zero))
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M162)
            CreateByteField (ATIB, 0x04, M292)
            CreateByteField (ATIB, 0x05, M293)
            CreateByteField (ATIB, 0x06, M294)
            CreateByteField (ATIB, 0x07, M295)
            CreateByteField (ATIB, 0x08, M296)
            CreateByteField (ATIB, 0x09, M297)
            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Flags                  = 0x%X\n", M162, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Error Code             = 0x%X\n", M292, Zero, Zero, Zero, Zero, Zero)
            If ((M157 > 0x05))
            {
                M460 ("           AC Level               = 0x%X\n", M293, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Level               = 0x%X\n", M294, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Min Input Signal Level = 0x%X\n", M295, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Max Input Signal Level = 0x%X\n", M296, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Count                  = %d\n", M297, Zero, Zero, Zero, Zero, Zero)
                If ((M157 > 0x0A))
                {
                    Local1 = 0x0A
                    While ((Local1 < M157))
                    {
                        Local2 = DerefOf (ATIB [Local1])
                        Local1++
                        Local3 = DerefOf (ATIB [Local1])
                        Local1++
                        Local4 = ((Local1 - 0x0A) >> One)
                        M460 ("           Count[%d]  Luminance Level = 0x%X  Signal Level = %d\n", Local4, Local2, Local3, Zero, Zero, Zero)
                    }
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF21, 0, NotSerialized)
        {
            ATIB = M29A /* External reference */
            CreateWordField (ATIB, Zero, M297)
            CreateWordField (ATIB, 0x02, M157)
            M460 ("    Return Num Devices            = 0x%X\n", M297, Zero, Zero, Zero, Zero, Zero)
            M460 ("    Return Device Structure size  = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            Local0 = Zero
            If (((M297 > Zero) && (M297 < 0x04)))
            {
                While ((Local0 < M297))
                {
                    Local1 = ((Local0 << 0x02) + 0x04)
                    Local2 = (Local1 + 0x02)
                    Local3 = DerefOf (ATIB [Local1])
                    Local4 = DerefOf (ATIB [Local2])
                    M460 ("    Return Device Structure [%d] Flags              = 0x%X\n", Local0, Local3, Zero, Zero, Zero, Zero)
                    M460 ("    Return Device Structure [%d] Bus                = 0x%X\n", Local0, Local4, Zero, Zero, Zero, Zero)
                    Local0++
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF22, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M298)
            CreateDWordField (ATIB, 0x03, M299)
            Local0 = M049 (M133, 0x01F9)
            If ((Local0 >= One))
            {
                M157 = 0x07
                Local0--
                M298 = Local0
                M299 = M04B (M133, 0x01FA)
            }
            Else
            {
                M157 = Zero
                M298 = Zero
                M299 = Zero
            }

            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = %d\n", M298, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M299, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M305)
            CreateByteField (ATIB, 0x03, M306)
            CreateByteField (ATIB, 0x04, M307)
            CreateByteField (ATIB, 0x05, M308)
            CreateByteField (ATIB, 0x06, M309)
            CreateByteField (ATIB, 0x07, M30A)
            CreateByteField (ATIB, 0x08, M30B)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            If ((M157 >= 0x02))
            {
                M460 ("           AC Maximum Performance Limit = %d\n", M305, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Performance Limit  = %d\n", M306, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Battery Limit      = %d\n", M307, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Maximum Performance Limit = %d\n", M308, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Performance Limit  = %d\n", M309, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Battery Limit      = %d\n", M30A, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Battery Saver Limit       = %d\n", M30B, Zero, Zero, Zero, Zero, Zero)
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF24, 0, NotSerialized)
        {
            ATIB = M652 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M653)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           ISP Device Number = %d\n", M653, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN0  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                M460 ("    Notify (VGA, 0x%X)\n", M291, Zero, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN1  Supported Notification Mask = 0x%X  Save Expansion Mode = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN2  Supported Notification Mask = 0x%X  Thermal State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN3  Supported Notification Mask = 0x%X  Forced Power State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN4  Supported Notification Mask = 0x%X  System Power Source = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 != Local1))
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                    Notify (VGA, M291)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN5  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN6  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN7  Supported Notification Mask = 0x%X  Panel Brightness: Backlight Level = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN8  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFNC  Supported Notification Mask = 0x%X  Power Limit: Target Graphics Controller = 0x%X  Value = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMWLRC", 0x00000001)
{
    External (_SB_.PCI0.GPP5.UP00.DP10.WN00, DeviceObj)
    External (_SB_.PCI0.GPP5.UP00.DP60.XH00.RHUB.POTC, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M112, MethodObj)    // 2 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Name (DSPB, 0x00)
    Name (DDPD, 0x00)
    Name (WLRM, 0x00)
    If (CondRefOf (\_SB.PCI0.GPP5.UP00.DP10.WN00))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP10.WN00)
        {
            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                \_SB.PRWL
            })
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.GPP5.UP00.DP60.XH00.RHUB.POTC))
    {
        Scope (\_SB.PCI0.GPP5.UP00.DP60.XH00.RHUB.POTC)
        {
            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                \_SB.PRWB
            })
        }
    }

    Scope (\_SB)
    {
        Name (WLPS, One)
        PowerResource (PRWL, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0x0DC2)
                Local2 = M04B (M290, 0x28)
                If ((Local2 != 0x02))
                {
                    Local0 = M049 (M290, 0x16)
                    Local1 = M04B (M290, 0x12)
                    If ((WLRM == One))
                    {
                        M018 (DSPB, DDPD, Zero, 0x3E, 0x06, One, One)
                        Sleep (Local1)
                        M018 (DSPB, DDPD, Zero, 0x3E, 0x06, One, Zero)
                        Sleep (0x64)
                    }
                    Else
                    {
                        M112 (Local0, Zero)
                        Sleep (Local1)
                        M112 (Local0, One)
                        Sleep (0x64)
                    }
                }

                M000 (0x0DC3)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (WLPS) /* \_SB_.WLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                WLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                WLPS = Zero
            }
        }

        Name (BLPS, One)
        PowerResource (PRWB, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0x0DDE)
                Local2 = M04B (M290, 0x45)
                If ((Local2 != 0x02))
                {
                    Local0 = M049 (M290, 0x40)
                    Local1 = M04B (M290, 0x41)
                    M112 (Local0, Zero)
                    Sleep (Local1)
                    M112 (Local0, One)
                }

                M000 (0x0DDF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (BLPS) /* \_SB_.BLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                BLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                BLPS = Zero
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "MEMTOOL0", 0x00000002)
{
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04E, MethodObj)    // 3 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 != Zero))
        {
            Local2 = M049 (M610, 0x10)
            Local3 = MEMI /* \MGRT.MEMI */
            Local4 = MEMD /* \MGRT.MEMD */
            M04E (M610, 0x11, Local3)
            M04E (M610, 0x15, Local4)
            M232 (Local2, Zero, Zero)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD CPU", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00001068, 
                0x000013B0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001068
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "Splinter", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xE0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
            /* 0028 */  0x0B, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x03, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 0050 */  0x13, 0xFF, 0xFF, 0x02, 0x00, 0x02, 0x01, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14,  // ........
            /* 00A0 */  0x14, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x15, 0x15, 0xFF, 0xFF, 0x02,  // ........
            /* 00B8 */  0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x16,  // ........
            /* 00C8 */  0x16, 0xFF, 0xFF, 0x03, 0x00, 0x02, 0x04, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, 0x01)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, 0x00, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 = 0x00
                A018 (0x28, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                A018 (0x27, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = 0x00
                A040 = 0x00
                A041 = 0x00
                A042 = 0x00
                A043 = 0x00
                A044 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = 0x00
                A048 = 0x00
                A049 = 0x00
                A050 = 0x00
                A051 = 0x00
                A052 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = 0x01
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0x14))
            {
                A007 (0xAA9C)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Arg1
                A054 = 0x00
                A055 = 0x00
                A056 = 0x00
                A057 = 0x00
                A058 = 0x00
                A018 (0x61, Local6)
                A007 (0xAA9D)
            }

            If ((Arg0 == 0x15))
            {
                A007 (0xAA9E)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A059)
                CreateDWordField (Local6, 0x04, A060)
                CreateDWordField (Local6, 0x08, A061)
                CreateDWordField (Local6, 0x0C, A062)
                CreateDWordField (Local6, 0x10, A063)
                CreateDWordField (Local6, 0x14, A064)
                A059 = Arg1
                A060 = 0x00
                A061 = 0x00
                A062 = 0x00
                A063 = 0x00
                A064 = 0x00
                A018 (0x65, Local6)
                A007 (0xAA9F)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A065)
                CreateDWordField (Local6, 0x04, A066)
                CreateDWordField (Local6, 0x08, A067)
                CreateDWordField (Local6, 0x0C, A068)
                CreateDWordField (Local6, 0x10, A069)
                CreateDWordField (Local6, 0x14, A070)
                A065 = 0x00
                A066 = 0x00
                A067 = 0x00
                A068 = 0x00
                A069 = 0x00
                A070 = 0x00
                A071 (Arg1)
                A007 (0xAA99)
            }

            Return (0x00)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A123 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A124 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A023)
            CreateByteField (Local7, 0x02, A073)
            CreateByteField (Local7, 0x03, A125)
            A023 = 0x04
            A073 = 0x00
            If ((Local2 == 0x00))
            {
                A125 = 0x00
            }
            Else
            {
                A125 = 0x01
            }

            Return (Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A118 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A118 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A118 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A118 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A118 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A118 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A118 (Arg1))
            }
        }

        Method (A124, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A119 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A119 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A119 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A119 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A119 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A119 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A119 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A072, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A073)
            A073 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A073 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A073 = 0x01
                Return (Local7)
            }

            A074 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A075 ()
            A073 = 0x02
            Return (Local7)
        }

        Method (A076, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A075 ()
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A078, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A079, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A080 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A075 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A081, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A074, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                If ((A082 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A083 (Local0)
                        A084 (Local0, Local1)
                    }
                    Else
                    {
                        A084 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A085, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A086 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A087, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A088 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A075, 0, NotSerialized)
        {
            A087 ()
            A085 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A086 (Local0)
                Local2 = A089 (Local0)
                If ((Local1 != Local2))
                {
                    A090 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A090 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A091 (Arg1))
            }
        }

        Method (A089, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A092 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A092 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A092 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A092 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A092 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A092 ())
            }
        }

        Method (A086, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A093 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A093 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A093 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A093 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A093 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A093 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A093 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A093 ())
            }
        }

        Method (A088, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A094 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A094 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A094 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A094 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A094 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A094 ())
            }
        }

        Method (A083, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A095 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A095 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A095 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A095 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A095 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A095 ())
            }
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A096 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A096 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A096 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A096 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A096 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A096 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A096 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A096 (Arg1))
            }
        }

        Method (A082, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A097 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A097 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A097 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A097 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A097 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A097 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A097 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A097 (Arg1))
            }
        }

        Method (A080, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A098 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A098 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A098 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A098 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A098 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A098 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A098 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A098 ())
            }
        }

        OperationRegion (A168, SystemMemory, AGRB, 0x1000)
        Field (A168, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A169,   32
        }

        BankField (A168, A169, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A168, A169, 0x03B10578, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A168, A169, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A147,   32
        }

        BankField (A168, A169, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A148,   32
        }

        BankField (A168, A169, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A149,   32
        }

        BankField (A168, A169, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A150,   32
        }

        BankField (A168, A169, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A151,   32
        }

        BankField (A168, A169, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A152,   32
        }

        BankField (A168, A169, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A128,   32
        }

        BankField (A168, A169, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A129,   32
        }

        BankField (A168, A169, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A130,   32
        }

        BankField (A168, A169, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A131,   32
        }

        BankField (A168, A169, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A168, A169, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A133,   32
        }

        BankField (A168, A169, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A134,   32
        }

        BankField (A168, A169, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A135,   32
        }

        BankField (A168, A169, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A136,   32
        }

        BankField (A168, A169, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A137,   32
        }

        BankField (A168, A169, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A138,   32
        }

        BankField (A168, A169, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A168, A169, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A175,   32
        }

        BankField (A168, A169, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A176,   32
        }

        BankField (A168, A169, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A177,   32
        }

        BankField (A168, A169, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A178,   32
        }

        BankField (A168, A169, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A160,   32
        }

        BankField (A168, A169, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A161,   32
        }

        BankField (A168, A169, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A162,   32
        }

        BankField (A168, A169, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A163,   32
        }

        BankField (A168, A169, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A164,   32
        }

        BankField (A168, A169, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A165,   32
        }

        BankField (A168, A169, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A166,   32
        }

        BankField (A168, A169, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A167,   32
        }

        Method (A126, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A106 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A106 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A106 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A106 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A106 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A106 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A106 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A106 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A106 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A106 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A106 (Arg1))
            }
        }

        Method (A127, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A128 /* \_SB_.A128 */
                Local1 &= 0xFF00FCFF
                A128 = (Local0 | Local1)
                Local1 = A128 /* \_SB_.A128 */
                A128 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0x00400000 | Local1)
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0x00400000 | Local1)
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0x00400000 | Local1)
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0x00400000 | Local1)
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0x00400000 | Local1)
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0x00400000 | Local1)
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0x00400000 | Local1)
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A126 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A127 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR4.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR5.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR6.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR7.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR8.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR9.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABRA.A110 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A140)
            CreateDWordField (Arg1, 0x04, A141)
            CreateDWordField (Arg1, 0x08, A142)
            CreateDWordField (Arg1, 0x0C, A143)
            CreateDWordField (Arg1, 0x10, A144)
            CreateDWordField (Arg1, 0x14, A145)
            While ((A146 == 0x00)){}
            A146 = 0x00
            While ((A146 != 0x00))
            {
                A146 = 0x00
            }

            A147 = A140 /* \_SB_.A018.A140 */
            A148 = A141 /* \_SB_.A018.A141 */
            A149 = A142 /* \_SB_.A018.A142 */
            A150 = A143 /* \_SB_.A018.A143 */
            A151 = A144 /* \_SB_.A018.A144 */
            A152 = A145 /* \_SB_.A018.A145 */
            A153 = Arg0
            While ((A146 == 0x00)){}
            Release (\_SB.AM00)
        }

        Method (A121, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg0
            A013 = Arg1
            A014 = Arg2
            A015 = Arg3
            A018 (0x09, Local7)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A154)
            CreateDWordField (Arg1, 0x04, A155)
            CreateDWordField (Arg1, 0x08, A156)
            CreateDWordField (Arg1, 0x0C, A157)
            CreateDWordField (Arg1, 0x10, A158)
            CreateDWordField (Arg1, 0x14, A159)
            Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            }

            A161 = A154 /* \_SB_.A046.A154 */
            A162 = A155 /* \_SB_.A046.A155 */
            A163 = A156 /* \_SB_.A046.A156 */
            A164 = A157 /* \_SB_.A046.A157 */
            A165 = A158 /* \_SB_.A046.A158 */
            A166 = A159 /* \_SB_.A046.A159 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A160 = Local1
            A167 = 0xFFFFFFFF
            Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A168, A169, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A170,   32
            }

            Release (\_SB.AM00)
            Return (A170) /* \_SB_.AMNR.A170 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A168, A169, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A171,   32
            }

            A171 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A172)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A172))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                If ((Local1 == 0x01))
                {
                    A012 = Local2
                    A018 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A012 = Local2
                    A018 (0x1F, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A012 = Local2
                    A018 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A012 = Local2
                    A018 (0x1B, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A018 (0x28, Local7)
                        }
                        Else
                        {
                            A018 (0x27, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x23, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x31, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x32, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x33, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x34, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x35, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x36, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x37, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x38, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x39, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x3A, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x3B, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x4A, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                    Acquire (\_SB.AM00, 0xFFFF)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, 0x00, A173)
                    CreateDWordField (Local3, 0x04, A174)
                    A173 = A147 /* \_SB_.A147 */
                    A174 = A148 /* \_SB_.A148 */
                    Release (\_SB.AM00)
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x20, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR0.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR0.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR1.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR1.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR2.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR2.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR3.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR3.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR4.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR4.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR5.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR5.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR6.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR6.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR7.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR7.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR8.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR8.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR9.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR9.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABRA.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABRA.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABRA.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABRA.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A179, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A180 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A109, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A180, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A107 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A107 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A107 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A107 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A107 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A107 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A107 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A107 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A107 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A107 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A107 (Arg1))
            }
        }

        Method (A071, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((Local1 == 0x00))
            {
                A012 = Local2
                A179 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A012 = Local2
                A179 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x27, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x28, Local7)
            }
        }

        Name (A008, 0x01)
        Name (A009, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((AD00 == 0x00))
            {
                A018 (0x11, Local7)
            }
            Else
            {
                A018 (0x12, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0x8F668018, 0x00010117)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32, 
        M652,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
    Field (VARP, DWordAcc, NoLock, Preserve)
    {
        VAP1,   32
    }

    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        Local1 = VAP1 /* \VAP1 */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (VARQ, SystemIO, 0x0CD8, 0x08)
    Field (VARQ, DWordAcc, NoLock, Preserve)
    {
        VAQ1,   32
    }

    Method (M004, 1, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & One))))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    Local4 = One
                    While (((Local2 != 0xFF) && (Local4 != 0xFF)))
                    {
                        Local4 = M049 ((Local0 + Local1), 0x04)
                        If ((Local4 == Arg0))
                        {
                            Local2 = M049 ((Local0 + Local1), Zero)
                            If ((Local2 < 0x0A))
                            {
                                Local5 = M049 ((Local0 + Local1), 0x07)
                                If ((Arg1 >= 0x04))
                                {
                                    If ((Arg1 == 0x04))
                                    {
                                        Local3 = Zero
                                    }
                                    ElseIf ((Arg1 == 0x05))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        Local3 = One
                                    }
                                }
                                ElseIf (((Local5 & 0x80) == 0x80))
                                {
                                    Local3 = M049 ((Local0 + Local1), One)
                                    If ((Arg1 == Zero))
                                    {
                                        Local3 = Zero
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    ElseIf ((Local5 & 0x04))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                    ElseIf ((M085 >= 0x04))
                                    {
                                        Local3 = 0x03
                                    }
                                    Else
                                    {
                                        Local3 = 0x0F
                                    }
                                }
                                Else
                                {
                                    Local3 = 0xFF
                                }

                                If ((Local3 != 0xFF))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        Local7 = M04B ((Local0 + Local1), 0x08)
                                        If ((M085 == 0x08))
                                        {
                                            If (((Local7 & 0x0FF00000) > Zero))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                Local6 |= (Local3 << (Local2 << One))
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                    0x03) << One), 0x02, Local3)
                                            }
                                        }
                                        ElseIf (((Local7 >> 0x1C) == 0x02))
                                        {
                                            M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                            One) << 0x02), 0x04, Local3)
                                    }

                                    If ((Arg1 == Zero))
                                    {
                                        M000 (0x0DE0)
                                    }

                                    If ((Arg1 == One))
                                    {
                                        M000 (0x0DE1)
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        M000 (0x0DE2)
                                    }
                                }
                            }

                            Local2 = 0xFF
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M21A, 1, Serialized)
    {
        Local3 = One
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If ((Local0 != Zero))
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    Local4 = One
                    While (((Local2 != 0xFF) && (Local4 != 0xFF)))
                    {
                        Local4 = M049 ((Local0 + Local1), 0x04)
                        If ((Local4 == Arg0))
                        {
                            Local2 = M049 ((Local0 + Local1), Zero)
                            If ((Local2 < 0x0A))
                            {
                                If ((M085 >= 0x04))
                                {
                                    Local7 = M04B ((Local0 + Local1), 0x08)
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local3 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local3 = ((Local3 >> (Local2 << One)) & 0x03)
                                        }
                                        Else
                                        {
                                            Local3 = M011 ((M084 + 0x0E00), (Local2 >> 0x02), (
                                                (Local2 & 0x03) << One), 0x02)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        Local3 = M011 ((M084 + 0x1300), (Local2 >> 0x02), (
                                            (Local2 & 0x03) << One), 0x02)
                                    }
                                    Else
                                    {
                                        Local3 = M011 ((M084 + 0x0E00), (Local2 >> 0x02), (
                                            (Local2 & 0x03) << One), 0x02)
                                    }

                                    If ((Local3 == 0x03))
                                    {
                                        Local3 = One
                                    }
                                    ElseIf (((Local3 == Zero) || (Local3 == 0x02)))
                                    {
                                        Local3 = Zero
                                    }
                                    Else
                                    {
                                        Local3 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local3 = M011 ((M084 + 0x0E00), (Local2 >> One), (
                                        (Local2 & One) << 0x02), 0x04)
                                    If ((Local3 == 0x0F))
                                    {
                                        Local3 = One
                                    }
                                    ElseIf ((((Local3 == One) || (Local3 == 0x02)) || ((
                                        Local3 == 0x03) || (Local3 == 0x04))))
                                    {
                                        Local3 = 0x02
                                    }
                                    ElseIf ((Local3 == 0x0C))
                                    {
                                        Local3 = 0x02
                                    }
                                    Else
                                    {
                                        Local3 = Zero
                                    }
                                }
                            }

                            Local2 = 0xFF
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }

        M460 ("  KER-ASL-CpmGetDeviceClock (0x%X) = %d\n", Arg0, Local3, Zero, Zero, Zero, Zero)
        Return (Local3)
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & 0x03))))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Name (M047, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If (((M046 == 0xAA) || (M047 == 0xAA)))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("DisplayMux"))
                {
                    M047 = One
                    M460 ("  KER-ASL-_OSI = This OS can support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M047 = Zero
                    M460 ("  KER-ASL-_OSI = This OS cannot support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }

                If (\_OSI ("Windows 2022"))
                {
                    M046 = 0x0C
                    M460 ("  KER-ASL-_OSI = Windows 11, version 22H2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    OperationRegion (VARW, SystemMemory, 0xFED8020C, 0x14)
    Field (VARW, DWordAcc, NoLock, Preserve)
    {
        VA0C,   32, 
        Offset (0x0C), 
        VA18,   32, 
        VA1C,   32
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((M085 == 0x08))
            {
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x03), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x03), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x03), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((M085 == 0x08))
            {
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x03), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x03), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x03), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M602, 3, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x3D, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        If ((Arg2 != 0x3D))
        {
            TEMP [0x02] = Arg2
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateAcpi65UPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M602.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        ElseIf ((M085 == 0x15))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x15))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* \M453 */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* \M453 */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x15))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        Local1 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
                Local1 = (Local0 & 0x7FFC)
                Local1 |= (Arg1 & 0x7FFF)
                M04D (Arg0, (Local2 + 0x04), Local1)
                Local1 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X -> 0x%X\n", Arg0, Arg1, Local0, Local1, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    Local6 = (Local5 | (M011 ((Local0 + Local1), 0x04, Zero, 0x08) << 
                        0x08))
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local6)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local5 = Zero
        If ((M251 != Zero))
        {
            Local1 = (Zero + (0x10 + (Arg0 * 0x08)))
            Local2 = (0x03 + (0x10 + (Arg0 * 0x08)))
            Local3 = M049 (M251, Local1)
            Local4 = M049 (M251, Local2)
            Local5 = (Local4 | (M049 (M251, (Local2 + One)) << 0x08))
            If ((Local3 == 0xFF))
            {
                Local5 = Zero
            }
        }

        Return (Local5)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x73, 0x03, 0x16, 0x04, 0x15, 0x74, 0x05,  // Ys....t.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x18, 0x1A,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x1C, 0x01, 0x68, 0x00, 0x69, 0x6A   // ....h.ij
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x15))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x11) || (M085 == 0x16)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }

        Return (Zero)
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (M128, 0x94)
        If ((((Arg0 != Zero) && (Arg0 != One)) || (
            Local1 == One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x03)
    {
        0x02, 
        Package (0x05)
        {
            Package (0x07)
            {
                0x06, 
                0x0F, 
                0x13, 
                0x10, 
                0x12, 
                0x14, 
                0x15
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            Package (0x03)
            {
                0x02, 
                0x11, 
                0x16
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        Local7 = Zero
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            Local5 = DerefOf (Local4 [Zero])
            Local6 = One
            While ((Local6 <= Local5))
            {
                If ((DerefOf (Local4 [Local6]) == Local0))
                {
                    Local7 = One
                    Break
                }

                Local6++
            }

            If ((One == Local7))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                M4F1 (Zero)
                M4F1 (One)
                M4F1 (0x02)
                M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (XL0B, 0, Serialized)
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Name (MACO, Zero)
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 5D
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000F7210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 000000008F653000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 5D 41 4C 41 53 4B 41  // TPM2L....]ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 F7 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 30 65 8F 00 00 00 00              // .....0e.....


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 00004284
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 11
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 33504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 17028 (0x4284)

    0000: 56 46 43 54 84 42 00 00 01 11 41 4C 41 53 4B 41  // VFCT.B....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 20  // A M I ......AMD 
    0020: 47 4F 50 33 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP32..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 BF 15 00 00 00 00  // ................
    0060: 01 00 00 00 00 42 00 00 55 AA 21 00 00 00 00 00  // .....B..U.!.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: C0 01 00 00 00 00 49 42 4D 4F 00 00 00 00 00 00  // ......IBMO......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 94 01 00 00 00 00 00 00 30 39 2F 31 35 2F 32 33  // ........09/15/23
    00C0: 2C 31 32 3A 32 30 3A 33 39 00 00 00 00 00 00 00  // ,12:20:39.......
    00D0: 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 31 31 33 2D 50 48 58 47  // ........113-PHXG
    00F0: 45 4E 45 52 49 43 2D 30 30 31 00 50 48 4F 45 4E  // ENERIC-001.PHOEN
    0100: 49 58 00 50 43 49 5F 45 58 50 52 45 53 53 00 44  // IX.PCI_EXPRESS.D
    0110: 44 52 35 00 0D 0A 41 4D 44 20 41 4D 44 5F 50 48  // DR5...AMD AMD_PH
    0120: 4F 45 4E 49 58 5F 47 45 4E 45 52 49 43 20 20 20  // OENIX_GENERIC   
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0150: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0160: 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31  //   ..... ...(C) 1
    0170: 39 38 38 2D 32 30 32 32 2C 20 41 64 76 61 6E 63  // 988-2022, Advanc
    0180: 65 64 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73  // ed Micro Devices
    0190: 2C 20 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42  // , Inc..ATOMBIOSB
    01A0: 4B 2D 41 4D 44 20 56 45 52 30 32 32 2E 30 31 32  // K-AMD VER022.012
    01B0: 2E 30 30 30 2E 30 32 37 2E 30 30 30 30 30 31 00  // .000.027.000001.
    01C0: 50 48 4F 45 4E 49 58 2E 62 69 6E 20 00 30 30 30  // PHOENIX.bin .000
    01D0: 30 30 30 30 30 00 30 30 30 37 37 34 36 34 00 20  // 00000.00077464. 
    01E0: 20 20 20 20 20 20 20 00 41 4D 44 5F 50 48 4F 45  //        .AMD_PHOE
    01F0: 4E 49 58 5F 47 45 4E 45 52 49 43 00 2C 00 02 03  // NIX_GENERIC.,...
    0200: 41 54 4F 4D 00 00 00 00 58 01 E5 01 AC 00 00 00  // ATOM....X.......
    0210: 00 00 00 00 02 10 02 10 C0 01 B0 39 00 03 00 00  // ...........9....
    0220: 00 00 00 00 00 02 03 00 50 43 49 52 02 10 BF 15  // ........PCIR....
    0230: 00 00 18 00 00 00 80 03 21 00 0C 16 00 80 00 00  // ........!.......
    0240: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 07 BD 17  // AMD ATOMBIOS....
    0250: 94 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0370: 00 00 20 36 94 38 90 37 D0 2F 4C 03 00 39 00 00  // .. 6.8.7./L..9..
    0380: 00 00 88 38 F4 30 C4 37 1C 39 00 00 00 00 68 38  // ...8.0.7.9....h8
    0390: 00 00 00 00 00 00 00 00 48 35 18 36 00 00 54 05  // ........H5.6..T.
    03A0: 00 00 20 30 00 00 00 00 48 31 00 00 00 00 00 00  // .. 0....H1......
    03B0: 00 00 00 00 08 02 05 04 10 00 38 00 4C 00 60 01  // ..........8.L.`.
    03C0: A8 01 00 00 30 75 00 00 0C 00 1F 05 39 50 00 00  // ....0u......9P..
    03D0: 40 9C 00 00 0C 00 1F 05 3E 00 00 00 FF FF FF 00  // @.......>.......
    03E0: 0C 00 1F 05 6F A1 00 00 00 00 00 00 FF FF FF 00  // ....o...........
    03F0: 0C 00 1F 02 3E 00 00 00 00 00 00 00 00 00 00 00  // ....>...........
    0400: 48 3F 00 00 1F 00 44 00 00 16 00 00 00 05 01 1F  // H?....D.........
    0410: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    0420: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    0430: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    0440: 40 01 00 05 78 69 00 00 1F 00 44 00 00 16 00 00  // @...xi....D.....
    0450: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    0460: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    0470: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    0480: 00 05 18 2A 40 01 00 05 F0 D2 00 00 1F 00 44 00  // ...*@.........D.
    0490: 00 1E 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    04A0: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    04B0: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    04C0: 11 32 C0 00 00 05 18 2E 00 01 00 05 68 3C 01 00  // .2..........h<..
    04D0: 1F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ..D........&....
    04E0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    04F0: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    0500: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    0510: 00 00 00 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0520: 00 01 02 03 00 01 02 03 00 07 05 00 00 01 02 03  // ................
    0530: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    0540: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0550: 00 01 02 03 00 01 02 03 00 07 05 00 08 30 00 00  // .............0..
    0560: 87 00 00 00 07 30 00 00 B2 25 00 00 08 31 00 00  // .....0...%...1..
    0570: 87 00 00 00 07 31 00 00 B2 25 00 00 08 32 00 00  // .....1...%...2..
    0580: 87 00 00 00 07 32 00 00 B2 25 00 00 08 33 00 00  // .....2...%...3..
    0590: 87 00 00 00 07 33 00 00 B2 25 00 00 5A 00 00 00  // .....3...%..Z...
    05A0: 05 00 00 00 47 00 00 00 30 00 00 00 54 00 00 00  // ....G...0...T...
    05B0: 30 00 00 00 FF FF FF FF 00 00 00 00 FC 13 01 03  // 0...............
    05C0: 00 1F 18 01 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    05D0: 03 00 00 2A 14 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    05E0: 00 00 00 00 00 1F 01 01 00 00 00 00 48 3F 00 00  // ............H?..
    05F0: 05 02 00 07 03 00 00 1F 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 00 00 00 00 1F 09 01 00 00 00 00  // ................
    0610: 48 3F 00 00 05 02 00 07 03 00 00 25 06 00 00 00  // H?.........%....
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 01  // ................
    0630: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 1B  // ....H?..........
    0640: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 1F 00 01 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0660: 03 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 1F 10 01 00 00 00 00 48 3F 00 00  // ............H?..
    0680: 05 02 00 07 03 00 00 21 0B 00 00 00 00 00 00 00  // .......!........
    0690: 00 00 00 00 00 00 00 00 00 1F 02 01 00 00 00 00  // ................
    06A0: 48 3F 00 00 05 02 00 07 03 00 00 2A 00 00 00 00  // H?.........*....
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 01  // ................
    06C0: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2F  // ....H?........./
    06D0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 1F 03 01 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    06F0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0700: 00 00 00 00 00 1F 0A 01 00 00 00 00 48 3F 00 00  // ............H?..
    0710: 05 02 00 07 03 00 00 34 0A 00 00 00 00 00 00 00  // .......4........
    0720: 00 00 00 00 00 00 00 00 00 1F 01 01 00 00 00 00  // ................
    0730: 60 54 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // `T.........&....
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 01  // ................
    0750: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 2C  // ....`T.........,
    0760: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 1F 00 01 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    0780: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 1F 18 01 00 00 00 00 60 54 00 00  // ............`T..
    07A0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 1F 08 01 00 00 00 00  // ................
    07C0: 60 54 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // `T........."....
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 01  // ................
    07E0: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 32  // ....`T.........2
    07F0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 1F 10 01 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    0810: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    0820: 00 00 00 00 00 1F 03 01 00 00 00 00 60 54 00 00  // ............`T..
    0830: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0840: 00 00 00 00 00 00 00 00 00 1F 02 01 00 00 00 00  // ................
    0850: 60 54 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // `T.........0....
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 01  // ................
    0870: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 37  // ....`T.........7
    0880: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 1F 01 01 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    08A0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    08B0: 00 00 00 00 00 1F 18 01 00 00 00 00 EC 5E 00 00  // .............^..
    08C0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 1F 09 01 00 00 00 00  // ................
    08E0: EC 5E 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // .^.........,....
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 01  // ................
    0900: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 22  // .....^........."
    0910: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 1F 00 01 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    0930: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 1F 10 01 00 00 00 00 EC 5E 00 00  // .............^..
    0950: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    0960: 00 00 00 00 00 00 00 00 00 1F 11 01 00 00 00 00  // ................
    0970: EC 5E 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // .^.........2....
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 01  // ................
    0990: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 30  // .....^.........0
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 1F 03 01 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    09C0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    09D0: 00 00 00 00 00 1F 0A 01 00 00 00 00 EC 5E 00 00  // .............^..
    09E0: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    09F0: 00 00 00 00 00 00 00 00 00 1F 18 01 00 00 00 00  // ................
    0A00: 78 69 00 00 05 02 00 07 03 00 00 2A 14 00 00 00  // xi.........*....
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 01  // ................
    0A20: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 1F  // ....xi..........
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 1F 09 01 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0A50: 03 00 00 25 06 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0A60: 00 00 00 00 00 1F 00 01 00 00 00 00 78 69 00 00  // ............xi..
    0A70: 05 02 00 07 03 00 00 16 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 1F 08 01 00 00 00 00  // ................
    0A90: 78 69 00 00 05 02 00 07 03 00 00 1B 05 00 00 00  // xi..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 01  // ................
    0AB0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 21  // ....xi.........!
    0AC0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 1F 11 01 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0AE0: 03 00 00 2F 0F 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0AF0: 00 00 00 00 00 1F 03 01 00 00 00 00 78 69 00 00  // ............xi..
    0B00: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0B10: 00 00 00 00 00 00 00 00 00 1F 02 01 00 00 00 00  // ................
    0B20: 78 69 00 00 05 02 00 07 03 00 00 2A 00 00 00 00  // xi.........*....
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 01  // ................
    0B40: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 34  // ....xi.........4
    0B50: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 04 1F 01 01 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    0B70: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0B80: 00 00 00 00 04 1F 02 01 00 00 00 00 30 75 00 00  // ............0u..
    0B90: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    0BA0: 00 00 00 00 00 00 00 00 04 1F 00 01 00 00 00 00  // ................
    0BB0: 30 75 00 00 05 02 00 07 03 00 05 31 08 00 00 00  // 0u.........1....
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
    0BD0: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 00 3E  // ....0u.........>
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 03 1F 00 01 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    0C00: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0C10: 00 00 00 00 04 1F 03 01 00 00 00 00 30 75 00 00  // ............0u..
    0C20: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    0C30: 00 00 00 00 00 00 00 00 00 1F 18 01 00 00 00 00  // ................
    0C40: 90 7E 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // .~..............
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 01  // ................
    0C60: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 2C  // .....~.........,
    0C70: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 1F 01 01 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    0C90: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    0CA0: 00 00 00 00 00 1F 00 01 00 00 00 00 90 7E 00 00  // .............~..
    0CB0: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 1F 08 01 00 00 00 00  // ................
    0CD0: 90 7E 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // .~........."....
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 01  // ................
    0CF0: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 27  // .....~.........'
    0D00: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 1F 03 01 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    0D20: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0D30: 00 00 00 00 00 1F 02 01 00 00 00 00 90 7E 00 00  // .............~..
    0D40: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0D50: 00 00 00 00 00 00 00 00 00 1F 11 01 00 00 00 00  // ................
    0D60: 90 7E 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // .~.........2....
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 01  // ................
    0D80: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 37  // .....~.........7
    0D90: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 02 1F 00 00 00 00 00 00 40 9C 00 00 05 02 00 07  // ........@.......
    0DB0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0DC0: 00 00 00 00 03 1F 00 01 00 00 00 00 40 9C 00 00  // ............@...
    0DD0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0DE0: 00 00 00 00 00 00 00 00 00 1F 18 01 00 00 00 00  // ................
    0DF0: C0 A8 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 01  // ................
    0E10: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 26  // ...............&
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 1F 09 01 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    0E40: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    0E50: 00 00 00 00 00 1F 00 01 00 00 00 00 C0 A8 00 00  // ................
    0E60: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 1F 10 01 00 00 00 00  // ................
    0E80: C0 A8 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 01  // ................
    0EA0: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 22  // ..............."
    0EB0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 1F 11 01 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    0ED0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    0EE0: 00 00 00 00 00 1F 02 01 00 00 00 00 C0 A8 00 00  // ................
    0EF0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0F00: 00 00 00 00 00 00 00 00 00 1F 03 01 00 00 00 00  // ................
    0F10: C0 A8 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 01  // ................
    0F30: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 37  // ...............7
    0F40: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 1F 11 01 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0F60: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    0F70: 00 00 00 00 00 1F 01 01 00 00 00 00 F0 D2 00 00  // ................
    0F80: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    0F90: 00 00 00 00 00 00 00 00 00 1F 09 01 00 00 00 00  // ................
    0FA0: F0 D2 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // ...........,....
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 01  // ................
    0FC0: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 2E  // ................
    0FD0: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FE0: 00 1F 08 01 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0FF0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1000: 00 00 00 00 00 1F 00 01 00 00 00 00 F0 D2 00 00  // ................
    1010: 05 02 00 07 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    1020: 00 00 00 00 00 00 00 00 00 1F 10 01 00 00 00 00  // ................
    1030: F0 D2 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
    1040: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 01  // ................
    1050: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 3E  // ...............>
    1060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1070: 00 1F 02 01 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    1080: 03 00 00 2E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 00 00 00 00 00 1F 0A 01 00 00 00 00 F0 D2 00 00  // ................
    10A0: 05 02 00 07 03 00 00 36 08 00 00 00 00 00 00 00  // .......6........
    10B0: 00 00 00 00 00 00 00 00 04 1F 03 01 00 00 00 00  // ................
    10C0: 60 EA 00 00 05 02 00 07 03 00 05 29 10 00 00 00  // `..........)....
    10D0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 01  // ................
    10E0: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 2F  // ....`........../
    10F0: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 04 1F 00 01 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1110: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1120: 00 00 00 00 04 1F 02 01 00 00 00 00 60 EA 00 00  // ............`...
    1130: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    1140: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
    1150: 60 EA 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // `..........>....
    1160: 00 00 00 00 00 00 00 00 00 00 00 00 03 1F 00 00  // ................
    1170: 00 00 00 00 60 EA 00 00 05 02 00 05 03 00 00 3E  // ....`..........>
    1180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 1F 11 01 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    11A0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    11B0: 00 00 00 00 00 1F 01 01 00 00 00 00 20 FD 00 00  // ............ ...
    11C0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    11D0: 00 00 00 00 00 00 00 00 00 1F 09 01 00 00 00 00  // ................
    11E0: 20 FD 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  //  ..........,....
    11F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 01  // ................
    1200: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 22  // .... .........."
    1210: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1220: 00 1F 00 01 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1230: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 1F 18 01 00 00 00 00 20 FD 00 00  // ............ ...
    1250: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    1260: 00 00 00 00 00 00 00 00 00 1F 10 01 00 00 00 00  // ................
    1270: 20 FD 00 00 05 02 00 07 03 00 00 27 09 00 00 00  //  ..........'....
    1280: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 01  // ................
    1290: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 30  // .... ..........0
    12A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12B0: 00 1F 0A 01 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    12C0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    12D0: 00 00 00 00 00 1F 03 01 00 00 00 00 20 FD 00 00  // ............ ...
    12E0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    12F0: 00 00 00 00 00 00 00 00 00 1F 01 01 00 00 00 00  // ................
    1300: AC 07 01 00 05 02 00 07 03 00 00 26 00 00 00 00  // ...........&....
    1310: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 01  // ................
    1320: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 32  // ...............2
    1330: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1340: 00 1F 09 01 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1350: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1360: 00 00 00 00 00 1F 08 01 00 00 00 00 AC 07 01 00  // ................
    1370: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    1380: 00 00 00 00 00 00 00 00 00 1F 18 01 00 00 00 00  // ................
    1390: AC 07 01 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    13A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 01  // ................
    13B0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 27  // ...............'
    13C0: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 1F 02 01 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    13E0: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    13F0: 00 00 00 00 00 1F 0A 01 00 00 00 00 AC 07 01 00  // ................
    1400: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    1410: 00 00 00 00 00 00 00 00 00 1F 03 01 00 00 00 00  // ................
    1420: AC 07 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    1430: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 01  // ................
    1440: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 1E  // ................
    1450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1460: 04 1F 03 01 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    1470: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1480: 00 00 00 00 04 1F 01 01 00 00 00 00 80 38 01 00  // .............8..
    1490: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    14A0: 00 00 00 00 00 00 00 00 04 1F 02 01 00 00 00 00  // ................
    14B0: 80 38 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // .8.........,....
    14C0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 01  // ................
    14D0: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 31  // .....8.........1
    14E0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14F0: 00 1F 01 01 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1500: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    1510: 00 00 00 00 00 1F 09 01 00 00 00 00 68 3C 01 00  // ............h<..
    1520: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1530: 00 00 00 00 00 00 00 00 00 1F 18 01 00 00 00 00  // ................
    1540: 68 3C 01 00 05 02 00 07 03 00 00 2E 10 00 00 00  // h<..............
    1550: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 01  // ................
    1560: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 22  // ....h<........."
    1570: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 1F 00 01 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1590: 03 00 00 1D 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15A0: 00 00 00 00 00 1F 10 01 00 00 00 00 68 3C 01 00  // ............h<..
    15B0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    15C0: 00 00 00 00 00 00 00 00 00 1F 02 01 00 00 00 00  // ................
    15D0: 68 3C 01 00 05 02 00 07 03 00 00 2E 00 00 00 00  // h<..............
    15E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 01  // ................
    15F0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 32  // ....h<.........2
    1600: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 1F 03 01 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1620: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1630: 00 00 00 00 00 1F 0A 01 00 00 00 00 68 3C 01 00  // ............h<..
    1640: 05 02 00 07 03 00 00 36 08 00 00 00 00 00 00 00  // .......6........
    1650: 00 00 00 00 00 00 00 00 08 1F 04 01 00 00 00 00  // ................
    1660: A0 86 01 00 05 02 00 07 03 00 00 2B 13 00 00 00  // ...........+....
    1670: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 03 01  // ................
    1680: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 30  // ...............0
    1690: 0E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16A0: 04 1F 02 01 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    16B0: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    16C0: 00 00 00 00 08 1F 02 01 00 00 00 00 A0 86 01 00  // ................
    16D0: 05 02 00 07 03 00 00 33 0B 00 00 00 00 00 00 00  // .......3........
    16E0: 00 00 00 00 00 00 00 00 08 1F 0F 01 00 00 00 00  // ................
    16F0: A0 86 01 00 05 02 00 07 03 00 03 22 03 00 00 00  // ..........."....
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0E 01  // ................
    1710: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 0A 33  // ...............3
    1720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1730: 08 1F 0D 01 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1740: 03 00 06 2B 0D 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    1750: 00 00 00 00 08 1F 0C 01 00 00 00 00 A0 86 01 00  // ................
    1760: 05 02 00 07 03 00 06 2F 09 00 00 00 00 00 00 00  // ......./........
    1770: 00 00 00 00 00 00 00 00 08 1F 0B 01 00 00 00 00  // ................
    1780: A0 86 01 00 05 02 00 07 03 00 06 32 06 00 00 00  // ...........2....
    1790: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0A 01  // ................
    17A0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 38  // ...............8
    17B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17C0: 08 1F 01 01 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    17D0: 03 00 00 38 06 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    17E0: 00 00 00 00 08 1F 00 01 00 00 00 00 A0 86 01 00  // ................
    17F0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1800: 00 00 00 00 00 00 00 00 08 1F 05 01 00 00 00 00  // ................
    1810: A0 86 01 00 05 02 00 07 03 00 03 3B 00 00 00 00  // ...........;....
    1820: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 06 01  // ................
    1830: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 35  // ...............5
    1840: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 08 1F 07 01 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1860: 03 00 03 31 0A 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1870: 00 00 00 00 04 1F 01 01 00 00 00 00 A0 86 01 00  // ................
    1880: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1890: 00 00 00 00 00 00 00 00 08 1F 09 01 00 00 00 00  // ................
    18A0: A0 86 01 00 05 02 00 07 03 00 03 2A 11 00 00 00  // ...........*....
    18B0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 08 01  // ................
    18C0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 2D  // ...............-
    18D0: 0E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 04 1F 00 01 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    18F0: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1900: 00 00 00 00 04 1F 03 01 00 00 00 00 A0 86 01 00  // ................
    1910: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    1920: 00 00 00 00 00 00 00 00 04 1F 02 01 00 00 00 00  // ................
    1930: C0 D4 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // ...........,....
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 01  // ................
    1950: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 2F  // .............../
    1960: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1970: 04 1F 00 01 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    1980: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1990: 00 00 00 00 04 1F 03 01 00 00 00 00 C0 D4 01 00  // ................
    19A0: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    19B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3030: 00 00 00 00 00 00 00 00 50 00 03 01 C8 00 00 00  // ........P.......
    3040: B8 0B 00 00 00 00 00 00 7D 00 00 01 FF 00 00 00  // ........}.......
    3050: 00 00 00 00 00 00 00 00 00 00 00 00 C8 00 00 00  // ................
    3060: B8 0B 00 00 00 00 00 00 7D 00 00 01 FF 00 00 00  // ........}.......
    3070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3080: 00 00 00 00 00 00 00 00 D4 00 04 04 40 06 00 00  // ............@...
    3090: 24 F4 00 00 60 09 60 09 00 00 00 00 00 00 00 00  // $...`.`.........
    30A0: 5E 01 4E 0C 01 01 00 00 55 00 00 00 60 09 BF 15  // ^.N.....U...`...
    30B0: 01 03 04 01 00 05 05 00 00 00 00 00 00 46 C3 23  // .............F.#
    30C0: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 01 00  // ............T...
    30D0: 00 00 03 0C 00 00 00 00 A0 00 00 00 10 11 3D 10  // ..............=.
    30E0: 4D 1C 02 00 00 45 00 00 00 00 00 00 00 00 00 00  // M....E..........
    30F0: 00 00 00 00 00 00 AA 0A 22 22 02 00 00 F0 01 00  // ........""......
    3100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3150: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 02 01  // ............T...
    3160: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    3170: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    3180: B5 5D 00 00 1A 18 05 00 91 5D 00 00 08 08 90 00  // .].......]......
    3190: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    31A0: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    31B0: 00 04 02 02 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    31C0: 00 00 00 00 77 01 00 00 00 00 22 02 00 00 00 00  // ....w.....".....
    31D0: C8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    31E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    31F0: C8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3230: 8C 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3240: 00 00 00 00 00 02 30 02 0C 33 00 00 00 00 E4 00  // ......0..3......
    3250: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3260: 00 00 00 00 08 00 10 02 13 31 02 02 00 00 E4 00  // .........1......
    3270: 02 00 00 00 80 00 20 02 13 32 03 03 00 00 E4 00  // ...... ..2......
    3280: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    32A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    32B0: 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  // ................
    32C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    32D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    32E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    32F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3320: 00 00 00 00 01 00 00 00 01 00 00 00 01 02 00 00  // ................
    3330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    33F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    34F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    35A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    35B0: CD 00 01 04 88 02 06 00 0C 33 68 00 1E 21 00 00  // .........3h..!..
    35C0: 95 00 00 00 00 02 00 00 00 00 71 00 1E 22 00 00  // ..........q.."..
    35D0: 9C 00 00 00 00 00 00 00 13 31 7A 00 20 21 00 00  // .........1z. !..
    35E0: A3 00 00 00 08 00 00 00 13 32 83 00 20 22 00 00  // .........2.. "..
    35F0: AA 00 00 00 80 00 00 00 00 00 8C 00 21 21 00 00  // ............!!..
    3600: B1 00 00 00 00 00 00 00 03 71 B8 00 00 00 00 00  // .........q......
    3610: 00 00 00 00 00 00 00 00 01 04 90 00 02 04 01 00  // ................
    3620: FF 01 04 90 00 02 04 00 00 FF 01 04 92 00 02 04  // ................
    3630: 03 00 FF 01 04 93 00 02 04 04 00 FF 01 04 90 00  // ................
    3640: 02 04 00 00 FF 14 06 0F 00 00 00 FF 14 06 3F 1E  // ..............?.
    3650: 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 00 00 00  // ................
    3660: FF 14 06 3F 1F 00 00 FF 10 0A 01 02 03 04 05 06  // ...?............
    3670: 07 08 11 0A 90 91 92 93 94 95 96 97 FF 00 00 00  // ................
    3680: 08 00 01 01 00 00 00 00 70 01 02 01 D6 09 80 02  // ........p.......
    3690: A0 00 E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00  // ....-...`.......
    36A0: 00 00 08 08 06 00 12 3C A0 0F 20 03 00 01 58 02  // .......<.. ...X.
    36B0: 1C 00 28 00 80 00 01 00 04 00 00 00 00 00 00 00  // ..(.............
    36C0: 00 00 6A 3C 64 19 00 04 40 01 00 03 26 00 18 00  // ..j<d...@...&...
    36D0: 88 00 03 00 06 00 00 00 00 00 00 00 06 00 55 3C  // ..............U<
    36E0: 01 1D 00 05 72 01 D0 02 1E 00 6E 00 28 00 05 00  // ....r.....n.(...
    36F0: 05 00 00 00 00 00 00 00 00 00 E8 3C 30 2A 00 05  // ...........<0*..
    3700: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    3710: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    3720: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    3730: 00 00 EA 3C 66 21 56 05 AA 01 00 03 1E 00 46 00  // ...<f!V.......F.
    3740: 8F 00 03 00 03 00 00 00 00 00 00 00 02 00 ED 3C  // ...............<
    3750: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    3760: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    3770: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    3780: 00 00 00 00 00 00 EC 3C 02 3A 80 07 18 01 38 04  // .......<.:....8.
    3790: 2D 00 58 00 2C 00 04 00 05 00 00 00 00 00 00 00  // -.X.,...........
    37A0: 02 00 F3 3C 7D 4B 80 07 A0 02 B0 04 2D 00 88 00  // ...<}K......-...
    37B0: C8 00 03 00 06 00 00 00 00 00 00 00 02 00 F0 3C  // ...............<
    37C0: 68 5B 80 07 A8 02 A0 05 3C 00 80 00 D0 00 01 00  // h[......<.......
    37D0: 03 00 00 00 00 00 00 00 02 00 F1 3C 32 96 00 0A  // ...........<2...
    37E0: B0 03 40 06 3A 00 C0 00 18 01 03 00 06 00 00 00  // ..@.:...........
    37F0: 00 00 00 00 02 00 F2 3C 34 00 02 01 00 00 00 00  // .......<4.......
    3800: 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15  // .*.*..***..*.**.
    3810: 00 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F  // .***.....?.?..??
    3820: 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F A4 00 01 01  // ?..?.???.???....
    3830: 10 01 06 12 11 01 16 12 21 01 0A 12 13 01 06 6A  // ........!......j
    3840: 14 01 16 6A 22 01 0A 6A 16 01 06 55 17 01 16 55  // ...j"..j...U...U
    3850: 23 01 0A 55 63 01 16 E8 64 01 0A E8 65 01 16 E9  // #..Uc...d...e...
    3860: 66 01 0A E9 19 01 06 EA 1A 01 16 EA 24 01 0A EA  // f...........$...
    3870: 47 01 16 ED 48 01 0A ED 45 01 16 EB 46 01 0A EB  // G...H...E...F...
    3880: 75 01 16 EC 76 01 0A EC A5 01 16 F3 A6 01 0A F3  // u...v...........
    3890: A0 01 16 F0 A1 01 0A F0 A2 01 16 F1 A3 01 0A F1  // ................
    38A0: A4 01 16 F2 A5 01 0A F2 D2 01 16 70 D4 01 0A 70  // ...........p...p
    38B0: D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72  // ...q...q...r...r
    38C0: E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74  // ...s...s...t...t
    38D0: 20 00 02 02 02 00 20 00 08 00 80 00 00 02 00 04  //  ..... .........
    38E0: 00 08 40 00 01 00 04 00 10 00 00 01 FF FF FF FF  // ..@.............
    38F0: 0C 00 02 01 00 00 00 00 00 00 00 00 6C 00 03 04  // ............l...
    3900: 1B 00 0C 16 20 4E 00 00 20 4E 00 00 01 00 00 00  // .... N.. N......
    3910: 40 04 00 00 4C 00 00 00 00 00 00 00 00 00 00 00  // @...L...........
    3920: 00 00 01 00 80 00 00 00 00 00 00 00 00 00 00 00  // ................
    3930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3950: 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3960: 00 00 00 00 88 02 FC 13 1C 00 03 01 00 0D 00 00  // ................
    3970: 00 00 00 00 77 01 35 0C C0 12 00 00 FF 00 FF 00  // ....w.5.........
    3980: FF 00 00 00 88 00 03 00 00 0B 01 00 04 02 02 02  // ................
    3990: 83 14 01 00 84 14 01 00 85 14 01 00 86 14 01 00  // ................
    39A0: 6F 14 01 00 32 14 01 00 2E 6A 01 00 10 27 00 00  // o...2....j...'..
    39B0: 04 02 01 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    39C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    39D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    39E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    39F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A10: 00 00 00 00 00 00 00 00 A2 00 02 01 54 3A 00 00  // ............T:..
    3A20: 00 00 00 00 00 00 00 00 08 41 00 00 00 00 00 00  // .........A......
    3A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A40: 00 00 00 00 00 00 00 00 4C 3C 00 00 00 00 00 00  // ........L<......
    3A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A80: 00 00 00 00 00 00 F4 3A 00 00 00 00 00 00 00 00  // .......:........
    3A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3AA0: 74 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // t<..............
    3AB0: 00 00 00 00 00 00 00 00 00 00 00 00 9E 00 02 01  // ................
    3AC0: 00 00 37 00 00 66 16 3E 0D 42 00 00 44 25 00 03  // ..7..f.>.B..D%..
    3AD0: 0C 41 04 00 4C 0D 41 02 00 44 25 00 0D 25 4C 00  // .A..L.A..D%..%L.
    3AE0: 02 52 16 01 01 35 39 01 01 01 36 39 02 01 05 0C  // .R...59...69....
    3AF0: 00 5C A3 06 00 01 00 37 39 0D 00 03 01 41 01 15  // .\.....79....A..
    3B00: 05 41 18 01 02 C4 00 41 03 01 41 01 1B 05 41 08  // .A.....A..A...A.
    3B10: 01 02 C9 00 41 03 00 41 37 39 01 02 3B 39 41 03  // ....A..A79..;9A.
    3B20: 01 40 02 33 01 40 01 2D 02 40 41 01 02 3C 39 40  // .@.3.@.-.@A..<9@
    3B30: 03 00 41 E3 0D 3E 05 41 00 00 00 00 44 93 00 33  // ..A..>.A....D..3
    3B40: 05 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D  // .A......A.....A.
    3B50: 25 20 0E 03 0D 65 53 00 02 5B 00 00 58 01 04 00  // % ...eS..[..X...
    3B60: 0C 00 37 00 00 3D A5 04 01 44 E5 00 66 04 03 04  // ..7..=...D..f...
    3B70: 46 28 00 3E 05 46 00 00 00 00 49 43 00 03 01 00  // F(.>.F....IC....
    3B80: 00 03 01 01 01 03 01 02 02 52 16 03 01 46 00 1B  // .........R...F..
    3B90: 05 46 08 02 02 00 00 02 02 01 01 02 02 02 02 3D  // .F.............=
    3BA0: 25 04 00 49 4E 00 2C 02 01 46 3D 65 04 00 49 59  // %..IN.,..F=e..IY
    3BB0: 00 2C 02 03 46 03 01 40 05 09 05 40 00 00 00 FC  // .,..F..@...@....
    3BC0: 3E 05 40 00 00 00 80 49 81 00 55 00 00 55 00 01  // >.@....I..U..U..
    3BD0: 01 05 0C 00 B8 51 04 00 01 01 0D 00 06 01 05 0C  // .....Q..........
    3BE0: 00 BC 51 04 00 01 05 0D 00 00 00 00 00 01 05 0C  // ..Q.............
    3BF0: 00 A4 51 04 00 01 01 0D 00 00 01 05 0C 00 A8 51  // ..Q............Q
    3C00: 04 00 01 01 0D 00 01 01 05 0C 00 AC 51 04 00 01  // ............Q...
    3C10: 01 0D 00 02 01 05 0C 00 B0 51 04 00 01 01 0D 00  // .........Q......
    3C20: 03 01 05 0C 00 B4 51 04 00 01 01 0D 00 05 01 05  // ......Q.........
    3C30: 0C 00 C8 50 04 00 4A E5 0D 00 80 44 D2 00 43 57  // ...P..J....D..CW
    3C40: 01 01 05 0C 00 84 09 81 03 01 05 0D 00 00 00 07  // ................
    3C50: 00 01 05 0C 00 84 09 81 03 3C 05 0D 00 00 00 00  // .........<......
    3C60: 80 49 FD 00 01 05 0C 00 04 52 04 00 01 01 0D 00  // .I.......R......
    3C70: 00 01 05 0C 00 08 52 04 00 01 01 0D 00 01 01 05  // ......R.........
    3C80: 0C 00 00 52 04 00 03 00 41 0D 00 09 05 41 C1 FF  // ...R....A....A..
    3C90: FF FF 0F 05 41 15 00 00 00 01 05 0C 00 00 52 04  // ....A.........R.
    3CA0: 00 01 02 0D 00 41 01 05 0C 00 A4 50 04 00 02 00  // .....A.....P....
    3CB0: 06 0D 00 5B 28 00 02 01 00 00 37 00 00 01 05 0C  // ...[(.....7.....
    3CC0: 00 B0 A3 06 00 02 00 00 0D 00 02 01 01 00 01 05  // ................
    3CD0: 0C 00 B4 A3 06 00 02 00 02 0D 00 5B 94 04 01 02  // ...........[....
    3CE0: 08 00 37 00 00 3D 25 00 00 44 05 01 4A 05 A3 36  // ..7..=%..D..J..6
    3CF0: 02 00 00 00 44 93 04 03 05 00 32 00 00 00 03 00  // ....D.....2.....
    3D00: 40 97 36 03 00 41 96 36 03 05 46 00 31 00 00 04  // @.6..A.6..F.1...
    3D10: 02 04 40 3E 02 41 40 49 42 00 04 02 05 40 03 03  // ..@>.A@IB....@..
    3D20: 41 05 3E 02 41 40 48 5C 00 33 02 40 41 03 03 41  // A.>.A@H\.3.@A..A
    3D30: 06 33 02 41 40 43 60 00 33 02 41 40 3E 05 41 00  // .3.A@C`.3.A@>.A.
    3D40: 00 00 00 44 80 00 33 05 00 01 00 00 00 3E 05 00  // ...D..3......>..
    3D50: 00 00 00 00 44 93 04 51 14 43 22 00 03 03 40 05  // ....D..Q.C"...@.
    3D60: 03 02 41 40 2D 05 40 00 00 00 00 03 02 46 40 04  // ..A@-.@......F@.
    3D70: 01 00 00 04 01 01 01 04 01 02 02 04 01 03 03 04  // ................
    3D80: 01 04 04 04 01 05 05 04 01 06 06 2D 05 41 40 00  // ...........-.A@.
    3D90: 00 00 3E 05 41 00 20 00 00 45 C7 00 27 05 41 00  // ..>.A. ..E..'.A.
    3DA0: 20 00 00 03 05 46 00 31 00 00 04 02 05 41 01 02  //  ....F.1.....A..
    3DB0: 96 36 41 03 05 00 80 1A 06 00 03 00 41 97 36 03  // .6A.........A.6.
    3DC0: 00 40 96 36 3E 02 41 40 44 93 04 33 05 00 01 00  // .@.6>.A@D..3....
    3DD0: 00 00 3E 05 00 00 00 00 00 44 93 04 51 14 43 DE  // ..>......D..Q.C.
    3DE0: 00 43 E7 01 3D 65 00 01 44 48 01 4A 05 B6 36 00  // .C..=e..DH.J..6.
    3DF0: 00 01 00 49 48 01 4A 05 C0 36 01 00 00 00 44 48  // ...IH.J..6....DH
    3E00: 01 01 05 0C 00 84 09 81 03 01 05 0D 00 00 00 06  // ................
    3E10: 00 01 05 0C 00 84 09 81 03 3C 05 0D 00 00 00 00  // .........<......
    3E20: 80 49 3D 01 4A 05 C0 36 01 00 00 00 49 E7 01 01  // .I=.J..6....I...
    3E30: 05 B8 36 00 00 02 10 03 05 41 0A 00 00 00 33 05  // ..6......A....3.
    3E40: 41 01 00 00 00 3E 05 41 00 00 00 00 44 A5 01 51  // A....>.A....D..Q
    3E50: 0A 3C 05 B8 36 00 00 02 00 49 62 01 03 05 41 04  // .<..6....Ib...A.
    3E60: 00 00 00 51 0A 33 05 41 01 00 00 00 3E 05 41 00  // ...Q.3.A....>.A.
    3E70: 00 00 00 44 A5 01 3C 05 AA 36 AD DE AD DE 49 87  // ...D..<..6....I.
    3E80: 01 01 05 B8 36 00 00 00 00 0D 05 C0 36 01 00 00  // ....6.......6...
    3E90: 00 07 05 B6 36 FF FF FE FF 0D 05 02 38 00 01 00  // ....6.......8...
    3EA0: 00 51 0A 01 05 97 36 00 00 00 00 01 05 96 36 00  // .Q....6.......6.
    3EB0: 00 00 00 01 05 A3 36 00 00 00 00 07 05 02 38 FF  // ......6.......8.
    3EC0: FE FF FF 66 0B 03 04 00 04 00 03 02 01 00 15 05  // ...f............
    3ED0: 00 0A 1B 05 01 16 43 49 02 02 05 00 00 00 00 00  // ......CI........
    3EE0: 02 02 02 00 2C 05 02 00 00 02 00 02 02 03 01 02  // ....,...........
    3EF0: 05 04 01 00 00 00 02 05 05 00 00 05 80 52 35 02  // .............R5.
    3F00: 05 00 00 00 00 00 02 02 02 00 2C 05 02 00 00 00  // ..........,.....
    3F10: 00 02 02 03 01 02 05 04 01 00 00 00 02 05 05 00  // ................
    3F20: 20 00 80 52 35 66 16 3E 0D 42 00 00 44 C3 02 56  //  ..R5f.>.B..D..V
    3F30: 00 41 03 0C 41 00 00 2D 05 41 0F 00 00 00 09 05  // .A..A..-.A......
    3F40: 41 F0 FF 00 00 2D 0A 41 42 03 05 46 00 84 00 00  // A....-.AB..F....
    3F50: 56 08 42 04 04 00 00 00 2D 05 46 04 00 00 00 2D  // V.B.....-.F....-
    3F60: 05 42 04 00 00 00 3E 02 42 41 45 77 02 02 05 00  // .B....>.BAEw....
    3F70: 00 84 00 00 2C 02 00 00 02 02 02 00 2C 05 02 00  // ....,.......,...
    3F80: 00 02 00 02 02 03 01 02 02 01 01 02 05 04 00 00  // ................
    3F90: 00 00 02 05 05 00 00 00 40 02 0A 05 41 52 35 52  // ........@...AR5R
    3FA0: 16 02 01 02 00 14 05 00 18 1A 05 02 08 43 98 03  // .............C..
    3FB0: 03 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01  // ..A.-.A....-.A..
    3FC0: 02 7B 36 41 03 02 40 01 2D 01 40 02 01 02 7C 36  // .{6A..@.-.@...|6
    3FD0: 40 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01  // @..h6......p6...
    3FE0: 83 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00  // ...A.-.A....-.A.
    3FF0: 01 02 7D 36 41 03 02 40 01 2D 01 40 02 01 02 7E  // ..}6A..@.-.@...~
    4000: 36 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF  // 6@..i6......q6..
    4010: 00 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41  // ....A.-.A....-.A
    4020: 00 01 02 7F 36 41 03 02 40 01 2D 01 40 02 01 02  // ....6A..@.-.@...
    4030: 80 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF  // .6@..j6......r6.
    4040: FF 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01  // .....A.-.A....-.
    4050: 41 00 01 02 81 36 41 03 02 40 01 2D 01 40 02 01  // A....6A..@.-.@..
    4060: 02 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36  // ..6@..k6......s6
    4070: FF FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D  // ......F.1....A.-
    4080: 05 41 00 00 00 00 2D 01 41 00 03 02 40 01 2D 01  // .A....-.A...@.-.
    4090: 40 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00  // @....A...@......
    40A0: 00 04 05 05 00 00 00 00 04 05 06 00 20 00 00 43  // ............ ..C
    40B0: 08 04 01 05 94 36 00 00 00 80 01 05 95 36 00 20  // .....6.......6. 
    40C0: 00 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36  // ....V6A..W6@..a6
    40D0: FF FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36  // .......6.......6
    40E0: 00 00 00 00 4A 25 48 00 01 44 18 04 0D 05 B1 36  // ....J%H..D.....6
    40F0: 08 00 00 00 43 57 04 5C 05 B6 36 00 FF FF FF C6  // ....CW.\..6.....
    4100: 00 09 00 07 05 C0 36 FE FF FF FF 03 05 41 50 C3  // ......6......AP.
    4110: 00 00 4A 05 A3 36 02 00 00 00 49 54 04 51 14 33  // ..J..6....IT.Q.3
    4120: 05 41 01 00 00 00 3E 05 41 00 00 00 00 49 36 04  // .A....>.A....I6.
    4130: 43 93 04 07 05 B1 36 FF FE FF FF 02 05 00 80 19  // C.....6.........
    4140: 00 00 02 05 01 00 00 00 00 02 05 02 00 00 00 00  // ................
    4150: 02 05 03 00 00 00 00 02 05 04 00 00 00 00 02 05  // ................
    4160: 05 00 00 00 00 02 05 06 00 00 00 00 43 10 00 5B  // ............C..[
    4170: 4B 00 01 01 00 00 37 00 00 42 21 00 63 00 1F 00  // K.....7..B!.c...
    4180: 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03  // c.9.c.?.c.E.ZZ[.
    4190: 05 40 00 00 05 04 2D 19 40 00 15 05 40 02 01 02  // .@....-.@...@...
    41A0: 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02  // ..@.....[.....[.
    41B0: 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 41 54 4F 4D  // ....[.....[.ATOM
    41C0: 5F 44 41 54 41 5F 54 41 42 4C 45 5F 45 4E 44 00  // _DATA_TABLE_END.
    41D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    41E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    41F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4280: 00 00 00 00                                      // ....


WPBT
----
[000h 0000 004h]                   Signature : "WPBT"    [Windows Platform Binary Table]
[004h 0004 004h]                Table Length : 00000036
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C8
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                Handoff Size : 00822D20
[028h 0040 008h]             Handoff Address : 000000008CDC4036
[030h 0048 001h]                      Layout : 01
[031h 0049 001h]                        Type : 01
[032h 0050 002h]            Arguments Length : 0002
[034h 0052 002h]      Command-line Arguments : ""

Raw Table Data: Length 54 (0x36)

    0000: 57 50 42 54 36 00 00 00 01 C8 41 4C 41 53 4B 41  // WPBT6.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 4D 53 46 54  // A M I.......MSFT
    0020: 13 00 01 00 20 2D 82 00 36 40 DC 8C 00 00 00 00  // .... -..6@......
    0030: 01 01 02 00 00 00                                // ......


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 95
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 95 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


